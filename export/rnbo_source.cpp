/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_116 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_116()
    {
    }
    
    ~RNBOSubpatcher_116()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, 29237386, false);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->limi_01_perform(in1, in2, out1, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->limi_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 892732297:
            {
            this->loadmess_01_startupbang_bang();
            break;
            }
        case 29237386:
            {
            this->loadmess_02_startupbang_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("limiter/number_obj-23") == objectId)
                this->numberobj_01_valin_set(payload);
    
            if (TAG("limiter/number_obj-25") == objectId)
                this->numberobj_02_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("limiter/number_obj-23") == objectId)
                this->numberobj_01_format_set(payload);
    
            if (TAG("limiter/number_obj-25") == objectId)
                this->numberobj_02_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("limiter/loadmess_obj-8") == objectId)
                this->loadmess_01_startupbang_bang();
    
            if (TAG("limiter/loadmess_obj-7") == objectId)
                this->loadmess_02_startupbang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("limiter/number_obj-23"):
            {
            return "limiter/number_obj-23";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("limiter/number_obj-25"):
            {
            return "limiter/number_obj-25";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("limiter/loadmess_obj-8"):
            {
            return "limiter/loadmess_obj-8";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("limiter/loadmess_obj-7"):
            {
            return "limiter/loadmess_obj-7";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void loadmess_01_startupbang_bang() {
        this->loadmess_01_message_bang();
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadmess_02_startupbang_bang() {
        this->loadmess_02_message_bang();
    }
    
    void numberobj_02_valin_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void numberobj_02_format_set(number v) {
        this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_01_init();
        this->numberobj_02_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void limi_01_lookahead_set(number v) {
        this->limi_01_lookahead_setter(v);
        v = this->limi_01_lookahead;
    }
    
    void numberobj_01_output_set(number v) {
        this->limi_01_lookahead_set(v);
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("limiter/number_obj-23"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void loadmess_01_message_bang() {
        list v = this->loadmess_01_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_01_value_set(converted);
        }
    }
    
    void limi_01_threshold_set(number v) {
        this->limi_01_threshold_setter(v);
        v = this->limi_01_threshold;
    }
    
    void limi_01_postamp_set(number v) {
        this->limi_01_postamp_setter(v);
        v = this->limi_01_postamp;
    }
    
    void limi_01_preamp_set(number v) {
        this->limi_01_preamp_setter(v);
        v = this->limi_01_preamp;
    }
    
    void numberobj_02_output_set(number v) {
        this->limi_01_threshold_set(v);
        this->limi_01_postamp_set(v);
        this->limi_01_preamp_set(v);
    }
    
    void numberobj_02_value_set(number v) {
        this->numberobj_02_value_setter(v);
        v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("limiter/number_obj-25"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_02_output_set(localvalue);
    }
    
    void loadmess_02_message_bang() {
        list v = this->loadmess_02_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_02_value_set(converted);
        }
    }
    
    void limi_01_perform(
        const SampleValue * input1,
        const SampleValue * input2,
        SampleValue * output1,
        SampleValue * output2,
        Index n
    ) {
        RNBO_UNUSED(output2);
        RNBO_UNUSED(output1);
        RNBO_UNUSED(input2);
        RNBO_UNUSED(input1);
        auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
        auto __limi_01_threshold = this->limi_01_threshold;
        auto __limi_01_lookahead = this->limi_01_lookahead;
        auto __limi_01_recover = this->limi_01_recover;
        auto __limi_01_last = this->limi_01_last;
        auto __limi_01_postamp = this->limi_01_postamp;
        auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
        auto __limi_01_preamp = this->limi_01_preamp;
        auto __limi_01_dcblock = this->limi_01_dcblock;
        auto __limi_01_bypass = this->limi_01_bypass;
        ConstSampleArray<2> input = {input1, input2};
        SampleArray<2> output = {output1, output2};
    
        if ((bool)(__limi_01_bypass)) {
            for (Index i = 0; i < n; i++) {
                for (Index j = 0; j < 2; j++) {
                    output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
                }
            }
        } else {
            number v;
    
            for (Index i = 0; i < n; i++) {
                number hotSample = 0;
    
                for (Index j = 0; j < 2; j++) {
                    auto smps = input[(Index)j];
                    v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                    v *= __limi_01_preamp;
                    this->limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                    v = rnbo_fabs(v);
    
                    if (v > hotSample)
                        hotSample = v;
                }
    
                {
                    if (__limi_01_last > 0.01)
                        v = __limi_01_last + __limi_01_recover * __limi_01_last;
                    else
                        v = __limi_01_last + __limi_01_recover;
                }
    
                if (v > 1)
                    v = 1;
    
                this->limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
                int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));
    
                if (lookaheadPlayback < 0)
                    lookaheadPlayback += (int)(__limi_01_lookahead);
    
                if (hotSample * v > __limi_01_threshold) {
                    number newgain;
                    number curgain = __limi_01_threshold / hotSample;
                    number inc = __limi_01_threshold - curgain;
                    number acc = 0.0;
                    number flag = 0;
    
                    for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                        int k = (int)(__limi_01_lookaheadIndex - (int)(j));
    
                        if (k < 0)
                            k += (int)(__limi_01_lookahead);
    
                        {
                            newgain = curgain + inc * (acc * acc);
                        }
    
                        if (newgain < this->limi_01_gainBuffer[(Index)k])
                            this->limi_01_gainBuffer[(Index)k] = newgain;
                        else
                            flag = 1;
    
                        acc = acc + __limi_01_lookaheadInv;
                    }
                }
    
                for (Index j = 0; j < 2; j++) {
                    output[(Index)j][(Index)i] = this->limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_01_gainBuffer[(Index)lookaheadPlayback];
                }
    
                __limi_01_last = this->limi_01_gainBuffer[__limi_01_lookaheadIndex];
                __limi_01_lookaheadIndex++;
    
                if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                    __limi_01_lookaheadIndex = 0;
            }
        }
    
        this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
        this->limi_01_last = __limi_01_last;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void limi_01_lookahead_setter(number v) {
        this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
        this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
    }
    
    void limi_01_preamp_setter(number v) {
        this->limi_01_preamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_postamp_setter(number v) {
        this->limi_01_postamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_threshold_setter(number v) {
        this->limi_01_threshold = rnbo_pow(10., v * 0.05);
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    void numberobj_02_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_02_value = localvalue;
    }
    
    number limi_01_dc1_next(number x, number gain) {
        number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
        this->limi_01_dc1_xm1 = x;
        this->limi_01_dc1_ym1 = y;
        return y;
    }
    
    void limi_01_dc1_reset() {
        this->limi_01_dc1_xm1 = 0;
        this->limi_01_dc1_ym1 = 0;
    }
    
    void limi_01_dc1_dspsetup() {
        this->limi_01_dc1_reset();
    }
    
    number limi_01_dc2_next(number x, number gain) {
        number y = x - this->limi_01_dc2_xm1 + this->limi_01_dc2_ym1 * gain;
        this->limi_01_dc2_xm1 = x;
        this->limi_01_dc2_ym1 = y;
        return y;
    }
    
    void limi_01_dc2_reset() {
        this->limi_01_dc2_xm1 = 0;
        this->limi_01_dc2_ym1 = 0;
    }
    
    void limi_01_dc2_dspsetup() {
        this->limi_01_dc2_reset();
    }
    
    number limi_01_dc_next(Index i, number x, number gain) {
        switch ((int)i) {
        case 0:
            {
            return this->limi_01_dc1_next(x, gain);
            }
        default:
            {
            return this->limi_01_dc2_next(x, gain);
            }
        }
    
        return 0;
    }
    
    void limi_01_dc_reset(Index i) {
        switch ((int)i) {
        case 0:
            {
            return this->limi_01_dc1_reset();
            }
        default:
            {
            return this->limi_01_dc2_reset();
            }
        }
    }
    
    void limi_01_dc_dspsetup(Index i) {
        switch ((int)i) {
        case 0:
            {
            return this->limi_01_dc1_dspsetup();
            }
        default:
            {
            return this->limi_01_dc2_dspsetup();
            }
        }
    }
    
    void limi_01_reset() {
        this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());
    
        {
            this->limi_01_recover *= 0.707;
        }
    }
    
    void limi_01_dspsetup(bool force) {
        if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->limi_01_reset();
        this->limi_01_setupDone = true;
        this->limi_01_dc1_dspsetup();
        this->limi_01_dc2_dspsetup();
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("limiter/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void numberobj_02_init() {
        this->numberobj_02_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("limiter/number_obj-25"), 1, this->_currentTime);
    }
    
    void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_02_value;
    }
    
    void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_02_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        limi_01_bypass = 0;
        limi_01_dcblock = 0;
        limi_01_lookahead = 100;
        limi_01_lookahead_setter(limi_01_lookahead);
        limi_01_preamp = 0;
        limi_01_preamp_setter(limi_01_preamp);
        limi_01_postamp = 0;
        limi_01_postamp_setter(limi_01_postamp);
        limi_01_threshold = 0;
        limi_01_threshold_setter(limi_01_threshold);
        limi_01_release = 1000;
        loadmess_01_message = { 1 };
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        loadmess_02_message = { 0 };
        numberobj_02_value = 0;
        numberobj_02_value_setter(numberobj_02_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        limi_01_last = 0;
        limi_01_lookaheadIndex = 0;
        limi_01_recover = 0;
        limi_01_lookaheadInv = 0;
        limi_01_dc1_xm1 = 0;
        limi_01_dc1_ym1 = 0;
        limi_01_dc2_xm1 = 0;
        limi_01_dc2_ym1 = 0;
        limi_01_setupDone = false;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        numberobj_02_currentFormat = 6;
        numberobj_02_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number limi_01_bypass;
        number limi_01_dcblock;
        number limi_01_lookahead;
        number limi_01_preamp;
        number limi_01_postamp;
        number limi_01_threshold;
        number limi_01_release;
        list loadmess_01_message;
        number numberobj_01_value;
        list loadmess_02_message;
        number numberobj_02_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleValue limi_01_lookaheadBuffers[2][512] = { };
        SampleValue limi_01_gainBuffer[512] = { };
        number limi_01_last;
        int limi_01_lookaheadIndex;
        number limi_01_recover;
        number limi_01_lookaheadInv;
        number limi_01_dc1_xm1;
        number limi_01_dc1_ym1;
        number limi_01_dc2_xm1;
        number limi_01_dc2_ym1;
        bool limi_01_setupDone;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        Int numberobj_02_currentFormat;
        number numberobj_02_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_117 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_98 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_94 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_98;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_94()
                        {
                        }
                        
                        ~RNBOSubpatcher_94()
                        {
                        }
                        
                        virtual RNBOSubpatcher_98* getPatcher() const {
                            return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_02_out1_bang_bang() {
                            this->scale_03_input_bang();
                            this->scale_01_input_bang();
                        }
                        
                        void eventinlet_02_out1_list_set(const list& v) {
                            this->scale_03_input_set(v);
                            this->scale_01_input_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_01_nz_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_02_outhigh_set(number v) {
                            this->scale_02_outhigh = v;
                        }
                        
                        void scale_03_out_set(const list& v) {
                            this->scale_03_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_02_outhigh_set(converted);
                            }
                        }
                        
                        void scale_03_input_set(const list& v) {
                            this->scale_03_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_03_inlow,
                                    this->scale_03_inhigh,
                                    this->scale_03_outlow,
                                    this->scale_03_outhigh,
                                    this->scale_03_power
                                ));
                            }
                        
                            this->scale_03_out_set(tmp);
                        }
                        
                        void scale_02_outlow_set(number v) {
                            this->scale_02_outlow = v;
                        }
                        
                        void scale_01_out_set(const list& v) {
                            this->scale_01_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_02_outlow_set(converted);
                            }
                        }
                        
                        void scale_01_input_set(const list& v) {
                            this->scale_01_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_01_inlow,
                                    this->scale_01_inhigh,
                                    this->scale_01_outlow,
                                    this->scale_01_outhigh,
                                    this->scale_01_power
                                ));
                            }
                        
                            this->scale_01_out_set(tmp);
                        }
                        
                        void eventinlet_02_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->scale_03_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_01_input_set(converted);
                            }
                        }
                        
                        void eventoutlet_01_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_01_out1_list_set((list)v);
                        }
                        
                        void scale_02_out_set(const list& v) {
                            this->scale_02_out = jsCreateListCopy(v);
                            this->eventoutlet_01_in1_list_set(v);
                        }
                        
                        void scale_02_input_set(const list& v) {
                            this->scale_02_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_02_inlow,
                                    this->scale_02_inhigh,
                                    this->scale_02_outlow,
                                    this->scale_02_outhigh,
                                    this->scale_02_power
                                ));
                            }
                        
                            this->scale_02_out_set(tmp);
                        }
                        
                        void random_01_result_set(number v) {
                            {
                                list converted = {v};
                                this->scale_02_input_set(converted);
                            }
                        }
                        
                        void random_01_trigger_bang() {
                            {
                                this->random_01_result_set(this->random(0, this->random_01_limit));
                            }
                        }
                        
                        void eventinlet_01_out1_bang_bang() {
                            this->random_01_trigger_bang();
                        }
                        
                        void eventinlet_01_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_01_trigger_bang();
                        }
                        
                        void eventinlet_01_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_01_trigger_bang();
                        }
                        
                        void scale_03_input_bang() {
                            list v = this->scale_03_input;
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_03_inlow,
                                    this->scale_03_inhigh,
                                    this->scale_03_outlow,
                                    this->scale_03_outhigh,
                                    this->scale_03_power
                                ));
                            }
                        
                            this->scale_03_out_set(tmp);
                        }
                        
                        void scale_01_input_bang() {
                            list v = this->scale_01_input;
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_01_inlow,
                                    this->scale_01_inhigh,
                                    this->scale_01_outlow,
                                    this->scale_01_outhigh,
                                    this->scale_01_power
                                ));
                            }
                        
                            this->scale_01_out_set(tmp);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_01_limit_setter(number v) {
                            if (v >= 0)
                                this->random_01_limit = v;
                        }
                        
                        void random_01_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_01_nz_state
                            );
                        }
                        
                        void random_01_nz_init() {
                            this->random_01_nz_reset();
                        }
                        
                        void random_01_nz_seed(number v) {
                            xoshiro_reset(v, this->random_01_nz_state);
                        }
                        
                        number random_01_nz_next() {
                            return xoshiro_next(this->random_01_nz_state);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_01_limit = 10000;
                            random_01_limit_setter(random_01_limit);
                            random_01_seed = 0;
                            scale_01_inlow = 0;
                            scale_01_inhigh = 100;
                            scale_01_outlow = 1000;
                            scale_01_outhigh = 200;
                            scale_01_power = 1;
                            scale_02_inlow = 0;
                            scale_02_inhigh = 9999;
                            scale_02_outlow = 200;
                            scale_02_outhigh = 14000;
                            scale_02_power = 1;
                            scale_03_inlow = 0;
                            scale_03_inhigh = 100;
                            scale_03_outlow = 1000;
                            scale_03_outhigh = 14000;
                            scale_03_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_01_limit;
                            number random_01_seed;
                            list scale_01_input;
                            number scale_01_inlow;
                            number scale_01_inhigh;
                            number scale_01_outlow;
                            number scale_01_outhigh;
                            number scale_01_power;
                            list scale_01_out;
                            list scale_02_input;
                            number scale_02_inlow;
                            number scale_02_inhigh;
                            number scale_02_outlow;
                            number scale_02_outhigh;
                            number scale_02_power;
                            list scale_02_out;
                            list scale_03_input;
                            number scale_03_inlow;
                            number scale_03_inhigh;
                            number scale_03_outlow;
                            number scale_03_outhigh;
                            number scale_03_power;
                            list scale_03_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_01_nz_state[4] = { };
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_95 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_98;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_95()
                        {
                        }
                        
                        ~RNBOSubpatcher_95()
                        {
                        }
                        
                        virtual RNBOSubpatcher_98* getPatcher() const {
                            return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-7") == objectId)
                                    this->numberobj_03_valin_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-2") == objectId)
                                    this->numberobj_04_valin_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-15") == objectId)
                                    this->numberobj_05_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-7") == objectId)
                                    this->numberobj_03_format_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-2") == objectId)
                                    this->numberobj_04_format_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/number_obj-15") == objectId)
                                    this->numberobj_05_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_01_listin_number_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_02_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_01_listin_list_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_02_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_01_listin_bang_bang();
                        
                                if (TAG("livegrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_02_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("livegrain/rand-filter/filtgain/number_obj-7"):
                                {
                                return "livegrain/rand-filter/filtgain/number_obj-7";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("livegrain/rand-filter/filtgain/number_obj-2"):
                                {
                                return "livegrain/rand-filter/filtgain/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("livegrain/rand-filter/filtgain/message_obj-30"):
                                {
                                return "livegrain/rand-filter/filtgain/message_obj-30";
                                }
                            case TAG("livegrain/rand-filter/filtgain/message_obj-34"):
                                {
                                return "livegrain/rand-filter/filtgain/message_obj-34";
                                }
                            case TAG("livegrain/rand-filter/filtgain/number_obj-15"):
                                {
                                return "livegrain/rand-filter/filtgain/number_obj-15";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void numberobj_03_valin_set(number v) {
                            this->numberobj_03_value_set(v);
                        }
                        
                        void numberobj_03_format_set(number v) {
                            this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_04_valin_set(number v) {
                            this->numberobj_04_value_set(v);
                        }
                        
                        void numberobj_04_format_set(number v) {
                            this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_01_listin_list_set(const list& v) {
                            this->message_01_set_set(v);
                        }
                        
                        void message_01_listin_number_set(number v) {
                            this->message_01_set_set(v);
                        }
                        
                        void message_01_listin_bang_bang() {
                            this->message_01_trigger_bang();
                        }
                        
                        void message_02_listin_list_set(const list& v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_number_set(number v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_bang_bang() {
                            this->message_02_trigger_bang();
                        }
                        
                        void numberobj_05_valin_set(number v) {
                            this->numberobj_05_value_set(v);
                        }
                        
                        void numberobj_05_format_set(number v) {
                            this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_04_out1_bang_bang() {
                            this->numberobj_05_value_bang();
                        }
                        
                        void eventinlet_04_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_05_value_set(converted);
                            }
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_02_nz_init();
                            this->numberobj_03_init();
                            this->numberobj_04_init();
                            this->message_01_init();
                            this->message_02_init();
                            this->numberobj_05_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_05_outhigh_set(number v) {
                            this->scale_05_outhigh = v;
                        }
                        
                        void scale_09_out_set(const list& v) {
                            this->scale_09_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_05_outhigh_set(converted);
                            }
                        }
                        
                        void scale_09_input_set(const list& v) {
                            this->scale_09_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_09_inlow,
                                    this->scale_09_inhigh,
                                    this->scale_09_outlow,
                                    this->scale_09_outhigh,
                                    this->scale_09_power
                                ));
                            }
                        
                            this->scale_09_out_set(tmp);
                        }
                        
                        void scale_05_outlow_set(number v) {
                            this->scale_05_outlow = v;
                        }
                        
                        void scale_08_out_set(const list& v) {
                            this->scale_08_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_05_outlow_set(converted);
                            }
                        }
                        
                        void scale_08_input_set(const list& v) {
                            this->scale_08_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_08_inlow,
                                    this->scale_08_inhigh,
                                    this->scale_08_outlow,
                                    this->scale_08_outhigh,
                                    this->scale_08_power
                                ));
                            }
                        
                            this->scale_08_out_set(tmp);
                        }
                        
                        void scale_04_outhigh_set(number v) {
                            this->scale_04_outhigh = v;
                        }
                        
                        void scale_07_out_set(const list& v) {
                            this->scale_07_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_04_outhigh_set(converted);
                            }
                        }
                        
                        void scale_07_input_set(const list& v) {
                            this->scale_07_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_07_inlow,
                                    this->scale_07_inhigh,
                                    this->scale_07_outlow,
                                    this->scale_07_outhigh,
                                    this->scale_07_power
                                ));
                            }
                        
                            this->scale_07_out_set(tmp);
                        }
                        
                        void scale_04_outlow_set(number v) {
                            this->scale_04_outlow = v;
                        }
                        
                        void scale_06_out_set(const list& v) {
                            this->scale_06_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_04_outlow_set(converted);
                            }
                        }
                        
                        void scale_06_input_set(const list& v) {
                            this->scale_06_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_06_inlow,
                                    this->scale_06_inhigh,
                                    this->scale_06_outlow,
                                    this->scale_06_outhigh,
                                    this->scale_06_power
                                ));
                            }
                        
                            this->scale_06_out_set(tmp);
                        }
                        
                        void numberobj_05_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_09_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_08_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_07_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_06_input_set(converted);
                            }
                        }
                        
                        void numberobj_05_value_set(number v) {
                            this->numberobj_05_value_setter(v);
                            v = this->numberobj_05_value;
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_05_output_set(localvalue);
                        }
                        
                        void eventinlet_04_out1_number_set(number v) {
                            this->numberobj_05_value_set(v);
                        }
                        
                        void gate_01_onoff_set(number v) {
                            this->gate_01_onoff = v;
                        }
                        
                        void eventoutlet_02_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_02_out1_number_set(v);
                        }
                        
                        void numberobj_03_output_set(number v) {
                            this->eventoutlet_02_in1_number_set(v);
                        }
                        
                        void numberobj_03_value_set(number v) {
                            this->numberobj_03_value_setter(v);
                            v = this->numberobj_03_value;
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-7"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_03_output_set(localvalue);
                        }
                        
                        void scale_04_out_set(const list& v) {
                            this->scale_04_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_03_value_set(converted);
                            }
                        }
                        
                        void scale_04_input_set(const list& v) {
                            this->scale_04_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_04_inlow,
                                    this->scale_04_inhigh,
                                    this->scale_04_outlow,
                                    this->scale_04_outhigh,
                                    this->scale_04_power
                                ));
                            }
                        
                            this->scale_04_out_set(tmp);
                        }
                        
                        void gate_01_out1_number_set(number v) {
                            this->gate_01_out1_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_04_input_set(converted);
                            }
                        }
                        
                        void scale_05_out_set(const list& v) {
                            this->scale_05_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_03_value_set(converted);
                            }
                        }
                        
                        void scale_05_input_set(const list& v) {
                            this->scale_05_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_05_inlow,
                                    this->scale_05_inhigh,
                                    this->scale_05_outlow,
                                    this->scale_05_outhigh,
                                    this->scale_05_power
                                ));
                            }
                        
                            this->scale_05_out_set(tmp);
                        }
                        
                        void gate_01_out2_number_set(number v) {
                            this->gate_01_out2_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_05_input_set(converted);
                            }
                        }
                        
                        void gate_01_input_number_set(number v) {
                            if (this->gate_01_onoff == 1)
                                this->gate_01_out1_number_set(v);
                            else if (this->gate_01_onoff == 2)
                                this->gate_01_out2_number_set(v);
                        }
                        
                        void message_02_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_01_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_01_onoff_set(converted);
                            }
                        }
                        
                        void message_02_trigger_bang() {
                            this->message_02_out_set(this->message_02_set);
                        }
                        
                        void select_02_match1_bang() {
                            this->message_02_trigger_bang();
                        }
                        
                        void select_02_nomatch_number_set(number ) {}
                        
                        void select_02_input_number_set(number v) {
                            if (v == this->select_02_test1)
                                this->select_02_match1_bang();
                            else
                                this->select_02_nomatch_number_set(v);
                        }
                        
                        void expr_02_out1_set(number v) {
                            this->expr_02_out1 = v;
                            this->select_02_input_number_set(this->expr_02_out1);
                        }
                        
                        void expr_02_in1_set(number in1) {
                            this->expr_02_in1 = in1;
                            this->expr_02_out1_set(this->expr_02_in1 >= this->expr_02_in2);//#map:livegrain/rand-filter/filtgain/>=_obj-4:1
                        }
                        
                        void message_01_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_01_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_01_onoff_set(converted);
                            }
                        }
                        
                        void message_01_trigger_bang() {
                            this->message_01_out_set(this->message_01_set);
                        }
                        
                        void select_01_match1_bang() {
                            this->message_01_trigger_bang();
                        }
                        
                        void select_01_nomatch_number_set(number ) {}
                        
                        void select_01_input_number_set(number v) {
                            if (v == this->select_01_test1)
                                this->select_01_match1_bang();
                            else
                                this->select_01_nomatch_number_set(v);
                        }
                        
                        void expr_01_out1_set(number v) {
                            this->expr_01_out1 = v;
                            this->select_01_input_number_set(this->expr_01_out1);
                        }
                        
                        void expr_01_in1_set(number in1) {
                            this->expr_01_in1 = in1;
                            this->expr_01_out1_set(this->expr_01_in1 < this->expr_01_in2);//#map:livegrain/rand-filter/filtgain/<_obj-13:1
                        }
                        
                        void numberobj_04_output_set(number v) {
                            this->expr_02_in1_set(v);
                            this->expr_01_in1_set(v);
                        }
                        
                        void numberobj_04_value_set(number v) {
                            this->numberobj_04_value_setter(v);
                            v = this->numberobj_04_value;
                            number localvalue = v;
                        
                            if (this->numberobj_04_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_04_output_set(localvalue);
                        }
                        
                        void trigger_01_out2_set(number v) {
                            this->numberobj_04_value_set(v);
                        }
                        
                        void trigger_01_out1_set(number v) {
                            this->gate_01_input_number_set(v);
                        }
                        
                        void trigger_01_input_number_set(number v) {
                            this->trigger_01_out2_set(v);
                            this->trigger_01_out1_set(v);
                        }
                        
                        void random_02_result_set(number v) {
                            this->trigger_01_input_number_set(v);
                        }
                        
                        void random_02_trigger_bang() {
                            {
                                this->random_02_result_set(this->random(0, this->random_02_limit));
                            }
                        }
                        
                        void eventinlet_03_out1_bang_bang() {
                            this->random_02_trigger_bang();
                        }
                        
                        void eventinlet_03_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_02_trigger_bang();
                        }
                        
                        void eventinlet_03_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_02_trigger_bang();
                        }
                        
                        void message_01_set_set(const list& v) {
                            this->message_01_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-filter/filtgain/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_02_set_set(const list& v) {
                            this->message_02_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-filter/filtgain/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_05_value_bang() {
                            number v = this->numberobj_05_value;
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_05_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_02_limit_setter(number v) {
                            if (v >= 0)
                                this->random_02_limit = v;
                        }
                        
                        void numberobj_03_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_03_value = localvalue;
                        }
                        
                        void numberobj_04_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_04_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_04_value = localvalue;
                        }
                        
                        void numberobj_05_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_05_value = localvalue;
                        }
                        
                        void random_02_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_02_nz_state
                            );
                        }
                        
                        void random_02_nz_init() {
                            this->random_02_nz_reset();
                        }
                        
                        void random_02_nz_seed(number v) {
                            xoshiro_reset(v, this->random_02_nz_state);
                        }
                        
                        number random_02_nz_next() {
                            return xoshiro_next(this->random_02_nz_state);
                        }
                        
                        void numberobj_03_init() {
                            this->numberobj_03_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-7"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_03_value;
                        }
                        
                        void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_03_value_set(preset["value"]);
                        }
                        
                        void numberobj_04_init() {
                            this->numberobj_04_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_04_value;
                        }
                        
                        void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_04_value_set(preset["value"]);
                        }
                        
                        void message_01_init() {
                            this->message_01_set_set({1});
                        }
                        
                        void message_02_init() {
                            this->message_02_set_set({2});
                        }
                        
                        void numberobj_05_init() {
                            this->numberobj_05_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filtgain/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_05_value;
                        }
                        
                        void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_05_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_02_limit = 1000;
                            random_02_limit_setter(random_02_limit);
                            random_02_seed = 0;
                            numberobj_03_value = 0;
                            numberobj_03_value_setter(numberobj_03_value);
                            scale_04_inlow = 0;
                            scale_04_inhigh = 499;
                            scale_04_outlow = 1;
                            scale_04_outhigh = 1;
                            scale_04_power = 1;
                            numberobj_04_value = 0;
                            numberobj_04_value_setter(numberobj_04_value);
                            gate_01_onoff = 0;
                            gate_01_out1_number = 0;
                            gate_01_out2_number = 0;
                            select_01_test1 = 1;
                            expr_01_in1 = 0;
                            expr_01_in2 = 500;
                            expr_01_out1 = 0;
                            select_02_test1 = 1;
                            expr_02_in1 = 0;
                            expr_02_in2 = 500;
                            expr_02_out1 = 0;
                            scale_05_inlow = 500;
                            scale_05_inhigh = 999;
                            scale_05_outlow = 1;
                            scale_05_outhigh = 1;
                            scale_05_power = 1;
                            scale_06_inlow = 0;
                            scale_06_inhigh = 100;
                            scale_06_outlow = 1;
                            scale_06_outhigh = 0.1;
                            scale_06_power = 1;
                            scale_07_inlow = 0;
                            scale_07_inhigh = 100;
                            scale_07_outlow = 1;
                            scale_07_outhigh = 0.4;
                            scale_07_power = 1;
                            numberobj_05_value = 0;
                            numberobj_05_value_setter(numberobj_05_value);
                            scale_08_inlow = 0;
                            scale_08_inhigh = 100;
                            scale_08_outlow = 1;
                            scale_08_outhigh = 2;
                            scale_08_power = 1;
                            scale_09_inlow = 0;
                            scale_09_inhigh = 100;
                            scale_09_outlow = 1;
                            scale_09_outhigh = 3;
                            scale_09_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_03_currentFormat = 6;
                            numberobj_03_lastValue = 0;
                            numberobj_04_currentFormat = 6;
                            numberobj_04_lastValue = 0;
                            numberobj_05_currentFormat = 6;
                            numberobj_05_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_02_limit;
                            number random_02_seed;
                            number numberobj_03_value;
                            list scale_04_input;
                            number scale_04_inlow;
                            number scale_04_inhigh;
                            number scale_04_outlow;
                            number scale_04_outhigh;
                            number scale_04_power;
                            list scale_04_out;
                            number numberobj_04_value;
                            list message_01_set;
                            number gate_01_onoff;
                            number gate_01_out1_number;
                            list gate_01_out1_list;
                            number gate_01_out2_number;
                            list gate_01_out2_list;
                            number select_01_test1;
                            number expr_01_in1;
                            number expr_01_in2;
                            number expr_01_out1;
                            list message_02_set;
                            number select_02_test1;
                            number expr_02_in1;
                            number expr_02_in2;
                            number expr_02_out1;
                            list scale_05_input;
                            number scale_05_inlow;
                            number scale_05_inhigh;
                            number scale_05_outlow;
                            number scale_05_outhigh;
                            number scale_05_power;
                            list scale_05_out;
                            list scale_06_input;
                            number scale_06_inlow;
                            number scale_06_inhigh;
                            number scale_06_outlow;
                            number scale_06_outhigh;
                            number scale_06_power;
                            list scale_06_out;
                            list scale_07_input;
                            number scale_07_inlow;
                            number scale_07_inhigh;
                            number scale_07_outlow;
                            number scale_07_outhigh;
                            number scale_07_power;
                            list scale_07_out;
                            number numberobj_05_value;
                            list scale_08_input;
                            number scale_08_inlow;
                            number scale_08_inhigh;
                            number scale_08_outlow;
                            number scale_08_outhigh;
                            number scale_08_power;
                            list scale_08_out;
                            list scale_09_input;
                            number scale_09_inlow;
                            number scale_09_inhigh;
                            number scale_09_outlow;
                            number scale_09_outhigh;
                            number scale_09_power;
                            list scale_09_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_02_nz_state[4] = { };
                            Int numberobj_03_currentFormat;
                            number numberobj_03_lastValue;
                            Int numberobj_04_currentFormat;
                            number numberobj_04_lastValue;
                            Int numberobj_05_currentFormat;
                            number numberobj_05_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_96 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_98;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_96()
                        {
                        }
                        
                        ~RNBOSubpatcher_96()
                        {
                        }
                        
                        virtual RNBOSubpatcher_98* getPatcher() const {
                            return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-7") == objectId)
                                    this->numberobj_06_valin_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-2") == objectId)
                                    this->numberobj_07_valin_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-15") == objectId)
                                    this->numberobj_08_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-7") == objectId)
                                    this->numberobj_06_format_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-2") == objectId)
                                    this->numberobj_07_format_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/number_obj-15") == objectId)
                                    this->numberobj_08_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_03_listin_number_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_04_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_03_listin_list_set(payload);
                        
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_04_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_03_listin_bang_bang();
                        
                                if (TAG("livegrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_04_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("livegrain/rand-filter/filterslope/number_obj-7"):
                                {
                                return "livegrain/rand-filter/filterslope/number_obj-7";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("livegrain/rand-filter/filterslope/number_obj-2"):
                                {
                                return "livegrain/rand-filter/filterslope/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("livegrain/rand-filter/filterslope/message_obj-30"):
                                {
                                return "livegrain/rand-filter/filterslope/message_obj-30";
                                }
                            case TAG("livegrain/rand-filter/filterslope/message_obj-34"):
                                {
                                return "livegrain/rand-filter/filterslope/message_obj-34";
                                }
                            case TAG("livegrain/rand-filter/filterslope/number_obj-15"):
                                {
                                return "livegrain/rand-filter/filterslope/number_obj-15";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void numberobj_06_valin_set(number v) {
                            this->numberobj_06_value_set(v);
                        }
                        
                        void numberobj_06_format_set(number v) {
                            this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_07_valin_set(number v) {
                            this->numberobj_07_value_set(v);
                        }
                        
                        void numberobj_07_format_set(number v) {
                            this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_03_listin_list_set(const list& v) {
                            this->message_03_set_set(v);
                        }
                        
                        void message_03_listin_number_set(number v) {
                            this->message_03_set_set(v);
                        }
                        
                        void message_03_listin_bang_bang() {
                            this->message_03_trigger_bang();
                        }
                        
                        void message_04_listin_list_set(const list& v) {
                            this->message_04_set_set(v);
                        }
                        
                        void message_04_listin_number_set(number v) {
                            this->message_04_set_set(v);
                        }
                        
                        void message_04_listin_bang_bang() {
                            this->message_04_trigger_bang();
                        }
                        
                        void numberobj_08_valin_set(number v) {
                            this->numberobj_08_value_set(v);
                        }
                        
                        void numberobj_08_format_set(number v) {
                            this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_06_out1_bang_bang() {
                            this->numberobj_08_value_bang();
                        }
                        
                        void eventinlet_06_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_08_value_set(converted);
                            }
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_03_nz_init();
                            this->numberobj_06_init();
                            this->numberobj_07_init();
                            this->message_03_init();
                            this->message_04_init();
                            this->numberobj_08_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_11_outhigh_set(number v) {
                            this->scale_11_outhigh = v;
                        }
                        
                        void scale_15_out_set(const list& v) {
                            this->scale_15_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_11_outhigh_set(converted);
                            }
                        }
                        
                        void scale_15_input_set(const list& v) {
                            this->scale_15_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_15_inlow,
                                    this->scale_15_inhigh,
                                    this->scale_15_outlow,
                                    this->scale_15_outhigh,
                                    this->scale_15_power
                                ));
                            }
                        
                            this->scale_15_out_set(tmp);
                        }
                        
                        void scale_11_outlow_set(number v) {
                            this->scale_11_outlow = v;
                        }
                        
                        void scale_14_out_set(const list& v) {
                            this->scale_14_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_11_outlow_set(converted);
                            }
                        }
                        
                        void scale_14_input_set(const list& v) {
                            this->scale_14_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_14_inlow,
                                    this->scale_14_inhigh,
                                    this->scale_14_outlow,
                                    this->scale_14_outhigh,
                                    this->scale_14_power
                                ));
                            }
                        
                            this->scale_14_out_set(tmp);
                        }
                        
                        void scale_10_outhigh_set(number v) {
                            this->scale_10_outhigh = v;
                        }
                        
                        void scale_13_out_set(const list& v) {
                            this->scale_13_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_10_outhigh_set(converted);
                            }
                        }
                        
                        void scale_13_input_set(const list& v) {
                            this->scale_13_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_13_inlow,
                                    this->scale_13_inhigh,
                                    this->scale_13_outlow,
                                    this->scale_13_outhigh,
                                    this->scale_13_power
                                ));
                            }
                        
                            this->scale_13_out_set(tmp);
                        }
                        
                        void scale_10_outlow_set(number v) {
                            this->scale_10_outlow = v;
                        }
                        
                        void scale_12_out_set(const list& v) {
                            this->scale_12_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_10_outlow_set(converted);
                            }
                        }
                        
                        void scale_12_input_set(const list& v) {
                            this->scale_12_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_12_inlow,
                                    this->scale_12_inhigh,
                                    this->scale_12_outlow,
                                    this->scale_12_outhigh,
                                    this->scale_12_power
                                ));
                            }
                        
                            this->scale_12_out_set(tmp);
                        }
                        
                        void numberobj_08_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_15_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_14_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_13_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_12_input_set(converted);
                            }
                        }
                        
                        void numberobj_08_value_set(number v) {
                            this->numberobj_08_value_setter(v);
                            v = this->numberobj_08_value;
                            number localvalue = v;
                        
                            if (this->numberobj_08_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_08_output_set(localvalue);
                        }
                        
                        void eventinlet_06_out1_number_set(number v) {
                            this->numberobj_08_value_set(v);
                        }
                        
                        void gate_02_onoff_set(number v) {
                            this->gate_02_onoff = v;
                        }
                        
                        void eventoutlet_03_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_03_out1_number_set(v);
                        }
                        
                        void numberobj_06_output_set(number v) {
                            this->eventoutlet_03_in1_number_set(v);
                        }
                        
                        void numberobj_06_value_set(number v) {
                            this->numberobj_06_value_setter(v);
                            v = this->numberobj_06_value;
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-7"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_06_output_set(localvalue);
                        }
                        
                        void scale_10_out_set(const list& v) {
                            this->scale_10_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_06_value_set(converted);
                            }
                        }
                        
                        void scale_10_input_set(const list& v) {
                            this->scale_10_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_10_inlow,
                                    this->scale_10_inhigh,
                                    this->scale_10_outlow,
                                    this->scale_10_outhigh,
                                    this->scale_10_power
                                ));
                            }
                        
                            this->scale_10_out_set(tmp);
                        }
                        
                        void gate_02_out1_number_set(number v) {
                            this->gate_02_out1_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_10_input_set(converted);
                            }
                        }
                        
                        void scale_11_out_set(const list& v) {
                            this->scale_11_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_06_value_set(converted);
                            }
                        }
                        
                        void scale_11_input_set(const list& v) {
                            this->scale_11_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_11_inlow,
                                    this->scale_11_inhigh,
                                    this->scale_11_outlow,
                                    this->scale_11_outhigh,
                                    this->scale_11_power
                                ));
                            }
                        
                            this->scale_11_out_set(tmp);
                        }
                        
                        void gate_02_out2_number_set(number v) {
                            this->gate_02_out2_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_11_input_set(converted);
                            }
                        }
                        
                        void gate_02_input_number_set(number v) {
                            if (this->gate_02_onoff == 1)
                                this->gate_02_out1_number_set(v);
                            else if (this->gate_02_onoff == 2)
                                this->gate_02_out2_number_set(v);
                        }
                        
                        void message_04_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_02_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_02_onoff_set(converted);
                            }
                        }
                        
                        void message_04_trigger_bang() {
                            this->message_04_out_set(this->message_04_set);
                        }
                        
                        void select_04_match1_bang() {
                            this->message_04_trigger_bang();
                        }
                        
                        void select_04_nomatch_number_set(number ) {}
                        
                        void select_04_input_number_set(number v) {
                            if (v == this->select_04_test1)
                                this->select_04_match1_bang();
                            else
                                this->select_04_nomatch_number_set(v);
                        }
                        
                        void expr_04_out1_set(number v) {
                            this->expr_04_out1 = v;
                            this->select_04_input_number_set(this->expr_04_out1);
                        }
                        
                        void expr_04_in1_set(number in1) {
                            this->expr_04_in1 = in1;
                            this->expr_04_out1_set(this->expr_04_in1 >= this->expr_04_in2);//#map:livegrain/rand-filter/filterslope/>=_obj-4:1
                        }
                        
                        void message_03_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_02_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_02_onoff_set(converted);
                            }
                        }
                        
                        void message_03_trigger_bang() {
                            this->message_03_out_set(this->message_03_set);
                        }
                        
                        void select_03_match1_bang() {
                            this->message_03_trigger_bang();
                        }
                        
                        void select_03_nomatch_number_set(number ) {}
                        
                        void select_03_input_number_set(number v) {
                            if (v == this->select_03_test1)
                                this->select_03_match1_bang();
                            else
                                this->select_03_nomatch_number_set(v);
                        }
                        
                        void expr_03_out1_set(number v) {
                            this->expr_03_out1 = v;
                            this->select_03_input_number_set(this->expr_03_out1);
                        }
                        
                        void expr_03_in1_set(number in1) {
                            this->expr_03_in1 = in1;
                            this->expr_03_out1_set(this->expr_03_in1 < this->expr_03_in2);//#map:livegrain/rand-filter/filterslope/<_obj-13:1
                        }
                        
                        void numberobj_07_output_set(number v) {
                            this->expr_04_in1_set(v);
                            this->expr_03_in1_set(v);
                        }
                        
                        void numberobj_07_value_set(number v) {
                            this->numberobj_07_value_setter(v);
                            v = this->numberobj_07_value;
                            number localvalue = v;
                        
                            if (this->numberobj_07_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_07_output_set(localvalue);
                        }
                        
                        void trigger_02_out2_set(number v) {
                            this->numberobj_07_value_set(v);
                        }
                        
                        void trigger_02_out1_set(number v) {
                            this->gate_02_input_number_set(v);
                        }
                        
                        void trigger_02_input_number_set(number v) {
                            this->trigger_02_out2_set(v);
                            this->trigger_02_out1_set(v);
                        }
                        
                        void random_03_result_set(number v) {
                            this->trigger_02_input_number_set(v);
                        }
                        
                        void random_03_trigger_bang() {
                            {
                                this->random_03_result_set(this->random(0, this->random_03_limit));
                            }
                        }
                        
                        void eventinlet_05_out1_bang_bang() {
                            this->random_03_trigger_bang();
                        }
                        
                        void eventinlet_05_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_03_trigger_bang();
                        }
                        
                        void eventinlet_05_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_03_trigger_bang();
                        }
                        
                        void message_03_set_set(const list& v) {
                            this->message_03_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-filter/filterslope/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_04_set_set(const list& v) {
                            this->message_04_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-filter/filterslope/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_08_value_bang() {
                            number v = this->numberobj_08_value;
                            number localvalue = v;
                        
                            if (this->numberobj_08_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_08_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_03_limit_setter(number v) {
                            if (v >= 0)
                                this->random_03_limit = v;
                        }
                        
                        void numberobj_06_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_06_value = localvalue;
                        }
                        
                        void numberobj_07_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_07_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_07_value = localvalue;
                        }
                        
                        void numberobj_08_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_08_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_08_value = localvalue;
                        }
                        
                        void random_03_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_03_nz_state
                            );
                        }
                        
                        void random_03_nz_init() {
                            this->random_03_nz_reset();
                        }
                        
                        void random_03_nz_seed(number v) {
                            xoshiro_reset(v, this->random_03_nz_state);
                        }
                        
                        number random_03_nz_next() {
                            return xoshiro_next(this->random_03_nz_state);
                        }
                        
                        void numberobj_06_init() {
                            this->numberobj_06_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-7"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_06_value;
                        }
                        
                        void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_06_value_set(preset["value"]);
                        }
                        
                        void numberobj_07_init() {
                            this->numberobj_07_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_07_value;
                        }
                        
                        void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_07_value_set(preset["value"]);
                        }
                        
                        void message_03_init() {
                            this->message_03_set_set({1});
                        }
                        
                        void message_04_init() {
                            this->message_04_set_set({2});
                        }
                        
                        void numberobj_08_init() {
                            this->numberobj_08_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-filter/filterslope/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_08_value;
                        }
                        
                        void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_08_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_03_limit = 1000;
                            random_03_limit_setter(random_03_limit);
                            random_03_seed = 0;
                            numberobj_06_value = 0;
                            numberobj_06_value_setter(numberobj_06_value);
                            scale_10_inlow = 0;
                            scale_10_inhigh = 499;
                            scale_10_outlow = 1;
                            scale_10_outhigh = 1;
                            scale_10_power = 1;
                            numberobj_07_value = 0;
                            numberobj_07_value_setter(numberobj_07_value);
                            gate_02_onoff = 0;
                            gate_02_out1_number = 0;
                            gate_02_out2_number = 0;
                            select_03_test1 = 1;
                            expr_03_in1 = 0;
                            expr_03_in2 = 500;
                            expr_03_out1 = 0;
                            select_04_test1 = 1;
                            expr_04_in1 = 0;
                            expr_04_in2 = 500;
                            expr_04_out1 = 0;
                            scale_11_inlow = 500;
                            scale_11_inhigh = 999;
                            scale_11_outlow = 1;
                            scale_11_outhigh = 1;
                            scale_11_power = 1;
                            scale_12_inlow = 0;
                            scale_12_inhigh = 100;
                            scale_12_outlow = 1;
                            scale_12_outhigh = 0.1;
                            scale_12_power = 1;
                            scale_13_inlow = 0;
                            scale_13_inhigh = 100;
                            scale_13_outlow = 1;
                            scale_13_outhigh = 0.5;
                            scale_13_power = 1;
                            numberobj_08_value = 0;
                            numberobj_08_value_setter(numberobj_08_value);
                            scale_14_inlow = 0;
                            scale_14_inhigh = 100;
                            scale_14_outlow = 1;
                            scale_14_outhigh = 2;
                            scale_14_power = 1;
                            scale_15_inlow = 0;
                            scale_15_inhigh = 100;
                            scale_15_outlow = 1;
                            scale_15_outhigh = 3;
                            scale_15_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_06_currentFormat = 6;
                            numberobj_06_lastValue = 0;
                            numberobj_07_currentFormat = 6;
                            numberobj_07_lastValue = 0;
                            numberobj_08_currentFormat = 6;
                            numberobj_08_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_03_limit;
                            number random_03_seed;
                            number numberobj_06_value;
                            list scale_10_input;
                            number scale_10_inlow;
                            number scale_10_inhigh;
                            number scale_10_outlow;
                            number scale_10_outhigh;
                            number scale_10_power;
                            list scale_10_out;
                            number numberobj_07_value;
                            list message_03_set;
                            number gate_02_onoff;
                            number gate_02_out1_number;
                            list gate_02_out1_list;
                            number gate_02_out2_number;
                            list gate_02_out2_list;
                            number select_03_test1;
                            number expr_03_in1;
                            number expr_03_in2;
                            number expr_03_out1;
                            list message_04_set;
                            number select_04_test1;
                            number expr_04_in1;
                            number expr_04_in2;
                            number expr_04_out1;
                            list scale_11_input;
                            number scale_11_inlow;
                            number scale_11_inhigh;
                            number scale_11_outlow;
                            number scale_11_outhigh;
                            number scale_11_power;
                            list scale_11_out;
                            list scale_12_input;
                            number scale_12_inlow;
                            number scale_12_inhigh;
                            number scale_12_outlow;
                            number scale_12_outhigh;
                            number scale_12_power;
                            list scale_12_out;
                            list scale_13_input;
                            number scale_13_inlow;
                            number scale_13_inhigh;
                            number scale_13_outlow;
                            number scale_13_outhigh;
                            number scale_13_power;
                            list scale_13_out;
                            number numberobj_08_value;
                            list scale_14_input;
                            number scale_14_inlow;
                            number scale_14_inhigh;
                            number scale_14_outlow;
                            number scale_14_outhigh;
                            number scale_14_power;
                            list scale_14_out;
                            list scale_15_input;
                            number scale_15_inlow;
                            number scale_15_inhigh;
                            number scale_15_outlow;
                            number scale_15_outhigh;
                            number scale_15_power;
                            list scale_15_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_03_nz_state[4] = { };
                            Int numberobj_06_currentFormat;
                            number numberobj_06_lastValue;
                            Int numberobj_07_currentFormat;
                            number numberobj_07_lastValue;
                            Int numberobj_08_currentFormat;
                            number numberobj_08_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_98()
            {
            }
            
            ~RNBOSubpatcher_98()
            {
                delete this->p_01;
                delete this->p_02;
                delete this->p_03;
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1396722025, false);
                getEngine()->flushClockEvents(this, 2098551528, false);
                getEngine()->flushClockEvents(this, -1494586265, false);
                getEngine()->flushClockEvents(this, -708766484, false);
                getEngine()->flushClockEvents(this, -1410595987, false);
                getEngine()->flushClockEvents(this, -2112425490, false);
                getEngine()->flushClockEvents(this, -6936981, false);
                getEngine()->flushClockEvents(this, 694892522, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->p_01_perform(n);
                this->numbertilde_01_perform(this->zeroBuffer, this->signals[0], n);
                this->p_02_perform(n);
                this->numbertilde_04_perform(this->zeroBuffer, this->signals[1], n);
                this->p_03_perform(n);
                this->numbertilde_07_perform(this->zeroBuffer, this->signals[2], n);
            
                this->filtercoeff_01_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    n
                );
            
                this->biquad_tilde_01_perform(
                    in1,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out1,
                    n
                );
            
                this->numbertilde_02_perform(this->signals[3], this->dummyBuffer, n);
                this->numbertilde_03_perform(this->signals[4], this->dummyBuffer, n);
                this->numbertilde_05_perform(this->signals[5], this->dummyBuffer, n);
                this->numbertilde_06_perform(this->signals[6], this->dummyBuffer, n);
                this->numbertilde_08_perform(this->signals[7], this->dummyBuffer, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->numbertilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_04_dspsetup(forceDSPSetup);
                this->numbertilde_07_dspsetup(forceDSPSetup);
                this->filtercoeff_01_dspsetup(forceDSPSetup);
                this->biquad_tilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_02_dspsetup(forceDSPSetup);
                this->numbertilde_03_dspsetup(forceDSPSetup);
                this->numbertilde_05_dspsetup(forceDSPSetup);
                this->numbertilde_06_dspsetup(forceDSPSetup);
                this->numbertilde_08_dspsetup(forceDSPSetup);
                this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
                this->p_01->setVoiceIndex(index);
                this->p_02->setVoiceIndex(index);
                this->p_03->setVoiceIndex(index);
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
                this->p_01->setNoteNumber(noteNumber);
                this->p_02->setNoteNumber(noteNumber);
                this->p_03->setNoteNumber(noteNumber);
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_01 = new RNBOSubpatcher_94();
                this->p_01->setEngineAndPatcher(this->getEngine(), this);
                this->p_01->initialize();
                this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
                this->p_02 = new RNBOSubpatcher_95();
                this->p_02->setEngineAndPatcher(this->getEngine(), this);
                this->p_02->initialize();
                this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
                this->p_03 = new RNBOSubpatcher_96();
                this->p_03->setEngineAndPatcher(this->getEngine(), this);
                this->p_03->initialize();
                this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "filterfrequency"));
                this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "filtgain"));
                this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "filterslope"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        this->p_01->setParameterValue(index, v, time);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        this->p_02->setParameterValue(index, v, time);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        this->p_03->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterValue(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterValue(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterName(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterName(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterId(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterId(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_01->getNumParameters())
                            this->p_01->getParameterInfo(index, info);
            
                        index -= this->p_01->getNumParameters();
            
                        if (index < this->p_02->getNumParameters())
                            this->p_02->getParameterInfo(index, info);
            
                        index -= this->p_02->getNumParameters();
            
                        if (index < this->p_03->getNumParameters())
                            this->p_03->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_01)
                    return 0;
            
                if (subpatcher == this->p_02)
                    return 0 + this->p_01->getNumParameters();
            
                if (subpatcher == this->p_03)
                    return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->constrainParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->constrainParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1396722025:
                    {
                    this->numbertilde_01_value_set(value);
                    break;
                    }
                case 2098551528:
                    {
                    this->numbertilde_04_value_set(value);
                    break;
                    }
                case -1494586265:
                    {
                    this->numbertilde_07_value_set(value);
                    break;
                    }
                case -708766484:
                    {
                    this->numbertilde_02_value_set(value);
                    break;
                    }
                case -1410595987:
                    {
                    this->numbertilde_03_value_set(value);
                    break;
                    }
                case -2112425490:
                    {
                    this->numbertilde_05_value_set(value);
                    break;
                    }
                case -6936981:
                    {
                    this->numbertilde_06_value_set(value);
                    break;
                    }
                case 694892522:
                    {
                    this->numbertilde_08_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("livegrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_01_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_02_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_03_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_04_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_05_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_06_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_07_sig_number_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_08_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("livegrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_01_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_02_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_03_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_04_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_05_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_06_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_07_mode_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_08_mode_set(payload);
            
                    break;
                    }
                }
            
                this->p_01->processNumMessage(tag, objectId, time, payload);
                this->p_02->processNumMessage(tag, objectId, time, payload);
                this->p_03->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("livegrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_01_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_02_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_03_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_04_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_05_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_06_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_07_sig_list_set(payload);
            
                    if (TAG("livegrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_08_sig_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_01->processListMessage(tag, objectId, time, payload);
                this->p_02->processListMessage(tag, objectId, time, payload);
                this->p_03->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_01->processBangMessage(tag, objectId, time);
                this->p_02->processBangMessage(tag, objectId, time);
                this->p_03->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("livegrain/rand-filter/number~_obj-21"):
                    {
                    return "livegrain/rand-filter/number~_obj-21";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("livegrain/rand-filter/number~_obj-14"):
                    {
                    return "livegrain/rand-filter/number~_obj-14";
                    }
                case TAG("livegrain/rand-filter/number~_obj-7"):
                    {
                    return "livegrain/rand-filter/number~_obj-7";
                    }
                case TAG("livegrain/rand-filter/number~_obj-22"):
                    {
                    return "livegrain/rand-filter/number~_obj-22";
                    }
                case TAG("livegrain/rand-filter/number~_obj-59"):
                    {
                    return "livegrain/rand-filter/number~_obj-59";
                    }
                case TAG("livegrain/rand-filter/number~_obj-15"):
                    {
                    return "livegrain/rand-filter/number~_obj-15";
                    }
                case TAG("livegrain/rand-filter/number~_obj-23"):
                    {
                    return "livegrain/rand-filter/number~_obj-23";
                    }
                case TAG("livegrain/rand-filter/number~_obj-16"):
                    {
                    return "livegrain/rand-filter/number~_obj-16";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                }
            
                auto subpatchResult_0 = this->p_01->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_02->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_03->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_01->processDataViewUpdate(index, time);
                this->p_02->processDataViewUpdate(index, time);
                this->p_03->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_07_out1_number_set(number v) {
                this->p_03_in1_number_set(v);
                this->p_02_in1_number_set(v);
                this->p_01_in1_number_set(v);
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                this->p_03_in1_list_set(v);
                this->p_02_in1_list_set(v);
                this->p_01_in1_list_set(v);
            }
            
            void numbertilde_01_sig_number_set(number v) {
                this->numbertilde_01_outValue = v;
            }
            
            void numbertilde_01_sig_list_set(const list& v) {
                this->numbertilde_01_outValue = v[0];
            }
            
            void numbertilde_01_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_01_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_01_currentMode = 1;
                }
            }
            
            void numbertilde_02_sig_number_set(number v) {
                this->numbertilde_02_outValue = v;
            }
            
            void numbertilde_02_sig_list_set(const list& v) {
                this->numbertilde_02_outValue = v[0];
            }
            
            void numbertilde_02_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_02_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_02_currentMode = 1;
                }
            }
            
            void numbertilde_03_sig_number_set(number v) {
                this->numbertilde_03_outValue = v;
            }
            
            void numbertilde_03_sig_list_set(const list& v) {
                this->numbertilde_03_outValue = v[0];
            }
            
            void numbertilde_03_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_03_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_03_currentMode = 1;
                }
            }
            
            void numbertilde_04_sig_number_set(number v) {
                this->numbertilde_04_outValue = v;
            }
            
            void numbertilde_04_sig_list_set(const list& v) {
                this->numbertilde_04_outValue = v[0];
            }
            
            void numbertilde_04_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_04_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_04_currentMode = 1;
                }
            }
            
            void numbertilde_05_sig_number_set(number v) {
                this->numbertilde_05_outValue = v;
            }
            
            void numbertilde_05_sig_list_set(const list& v) {
                this->numbertilde_05_outValue = v[0];
            }
            
            void numbertilde_05_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_05_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_05_currentMode = 1;
                }
            }
            
            void numbertilde_06_sig_number_set(number v) {
                this->numbertilde_06_outValue = v;
            }
            
            void numbertilde_06_sig_list_set(const list& v) {
                this->numbertilde_06_outValue = v[0];
            }
            
            void numbertilde_06_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_06_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_06_currentMode = 1;
                }
            }
            
            void numbertilde_07_sig_number_set(number v) {
                this->numbertilde_07_outValue = v;
            }
            
            void numbertilde_07_sig_list_set(const list& v) {
                this->numbertilde_07_outValue = v[0];
            }
            
            void numbertilde_07_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_07_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_07_currentMode = 1;
                }
            }
            
            void numbertilde_08_sig_number_set(number v) {
                this->numbertilde_08_outValue = v;
            }
            
            void numbertilde_08_sig_list_set(const list& v) {
                this->numbertilde_08_outValue = v[0];
            }
            
            void numbertilde_08_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_08_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_08_currentMode = 1;
                }
            }
            
            void numbertilde_01_value_set(number ) {}
            
            void numbertilde_04_value_set(number ) {}
            
            void numbertilde_07_value_set(number ) {}
            
            void numbertilde_02_value_set(number ) {}
            
            void numbertilde_03_value_set(number ) {}
            
            void numbertilde_05_value_set(number ) {}
            
            void numbertilde_06_value_set(number ) {}
            
            void numbertilde_08_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->numbertilde_01_init();
                this->numbertilde_02_init();
                this->numbertilde_03_init();
                this->numbertilde_04_init();
                this->numbertilde_05_init();
                this->numbertilde_06_init();
                this->numbertilde_07_init();
                this->numbertilde_08_init();
                this->p_01->initializeObjects();
                this->p_02->initializeObjects();
                this->p_03->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_01->startup();
                this->p_02->startup();
                this->p_03->startup();
            }
            
            void allocateDataRefs() {
                this->p_01->allocateDataRefs();
                this->p_02->allocateDataRefs();
                this->p_03->allocateDataRefs();
            }
            
            void p_03_in2_number_set(number v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_06_out1_number_set(v);
            }
            
            void p_02_in2_number_set(number v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_04_out1_number_set(v);
            }
            
            void p_01_in2_number_set(number v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_02_out1_number_set(v);
            }
            
            void receive_01_output_number_set(number v) {
                this->receive_01_output_number = v;
                this->p_03_in2_number_set(v);
                this->p_02_in2_number_set(v);
                this->p_01_in2_number_set(v);
            }
            
            void numbertilde_07_input_number_set(number v) {
                this->numbertilde_07_input_number = v;
                this->numbertilde_07_outValue = v;
            
                if (this->numbertilde_07_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("livegrain/rand-filter/number~_obj-23"),
                        {this->numbertilde_07_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_03_out1_number_set(number v) {
                this->numbertilde_07_input_number_set(v);
            }
            
            void p_03_in1_bang_bang() {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_05_out1_bang_bang();
            }
            
            void numbertilde_04_input_number_set(number v) {
                this->numbertilde_04_input_number = v;
                this->numbertilde_04_outValue = v;
            
                if (this->numbertilde_04_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("livegrain/rand-filter/number~_obj-22"),
                        {this->numbertilde_04_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_02_out1_number_set(number v) {
                this->numbertilde_04_input_number_set(v);
            }
            
            void p_02_in1_bang_bang() {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_03_out1_bang_bang();
            }
            
            void numbertilde_01_input_number_set(number v) {
                this->numbertilde_01_input_number = v;
                this->numbertilde_01_outValue = v;
            
                if (this->numbertilde_01_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("livegrain/rand-filter/number~_obj-21"),
                        {this->numbertilde_01_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_01_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numbertilde_01_input_number_set(converted);
                }
            }
            
            void p_01_in1_bang_bang() {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_bang_bang();
            }
            
            void eventinlet_07_out1_bang_bang() {
                this->p_03_in1_bang_bang();
                this->p_02_in1_bang_bang();
                this->p_01_in1_bang_bang();
            }
            
            void p_03_in1_number_set(number v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_05_out1_number_set(v);
            }
            
            void p_02_in1_number_set(number v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_03_out1_number_set(v);
            }
            
            void p_01_in1_number_set(number v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_number_set(v);
            }
            
            void p_03_in1_list_set(const list& v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_05_out1_list_set(v);
            }
            
            void p_02_in1_list_set(const list& v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_03_out1_list_set(v);
            }
            
            void p_01_in1_list_set(const list& v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_list_set(v);
            }
            
            void p_01_perform(Index n) {
                // subpatcher: filterfrequency
                this->p_01->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
                auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
                auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
                auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
                auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
                auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_01_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_01_smooth_next(
                            __numbertilde_01_outValue,
                            __numbertilde_01_rampInSamples,
                            __numbertilde_01_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_01_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
                    __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1396722025,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_01_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-21"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
                this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
            }
            
            void p_02_perform(Index n) {
                // subpatcher: filtgain
                this->p_02->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
                auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
                auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
                auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
                auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
                auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_04_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_04_smooth_next(
                            __numbertilde_04_outValue,
                            __numbertilde_04_rampInSamples,
                            __numbertilde_04_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_04_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
                    __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        2098551528,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_04_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-22"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
                this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
            }
            
            void p_03_perform(Index n) {
                // subpatcher: filterslope
                this->p_03->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
                auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
                auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
                auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
                auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
                auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_07_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_07_smooth_next(
                            __numbertilde_07_outValue,
                            __numbertilde_07_rampInSamples,
                            __numbertilde_07_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_07_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
                    __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_07_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-23"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
                this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
            }
            
            void filtercoeff_01_perform(
                const Sample * frequency,
                const Sample * gain,
                const Sample * q,
                SampleValue * a0,
                SampleValue * a1,
                SampleValue * a2,
                SampleValue * b1,
                SampleValue * b2,
                Index n
            ) {
                auto __filtercoeff_01_activeResamp = this->filtercoeff_01_activeResamp;
                auto __filtercoeff_01_resamp_counter = this->filtercoeff_01_resamp_counter;
                auto __filtercoeff_01_K_EPSILON = this->filtercoeff_01_K_EPSILON;
            
                for (Index i = 0; i < n; i++) {
                    number local_q = q[(Index)i];
                    number local_gain = gain[(Index)i];
            
                    if (local_gain < 0)
                        local_gain = 0;
            
                    number local_frequency = frequency[(Index)i];
            
                    if (local_q < __filtercoeff_01_K_EPSILON)
                        local_q = __filtercoeff_01_K_EPSILON;
            
                    local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
                    __filtercoeff_01_resamp_counter--;
            
                    if (__filtercoeff_01_resamp_counter <= 0) {
                        __filtercoeff_01_resamp_counter = __filtercoeff_01_activeResamp;
                        this->filtercoeff_01_updateTerms(local_frequency, local_gain, local_q);
                    }
            
                    a0[(Index)i] = this->filtercoeff_01_la0;
                    a1[(Index)i] = this->filtercoeff_01_la1;
                    a2[(Index)i] = this->filtercoeff_01_la2;
                    b1[(Index)i] = this->filtercoeff_01_lb1;
                    b2[(Index)i] = this->filtercoeff_01_lb2;
                }
            
                this->filtercoeff_01_resamp_counter = __filtercoeff_01_resamp_counter;
            }
            
            void biquad_tilde_01_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_01_y2 = this->biquad_tilde_01_y2;
                auto __biquad_tilde_01_y1 = this->biquad_tilde_01_y1;
                auto __biquad_tilde_01_x2 = this->biquad_tilde_01_x2;
                auto __biquad_tilde_01_x1 = this->biquad_tilde_01_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_01_x1 * a1[(Index)i] + __biquad_tilde_01_x2 * a2[(Index)i] - (__biquad_tilde_01_y1 * b1[(Index)i] + __biquad_tilde_01_y2 * b2[(Index)i]);
                    __biquad_tilde_01_x2 = __biquad_tilde_01_x1;
                    __biquad_tilde_01_x1 = x[(Index)i];
                    __biquad_tilde_01_y2 = __biquad_tilde_01_y1;
                    __biquad_tilde_01_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_01_x1 = __biquad_tilde_01_x1;
                this->biquad_tilde_01_x2 = __biquad_tilde_01_x2;
                this->biquad_tilde_01_y1 = __biquad_tilde_01_y1;
                this->biquad_tilde_01_y2 = __biquad_tilde_01_y2;
            }
            
            void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
                auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
                auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
                auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
                auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
                auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_02_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_02_smooth_next(
                            __numbertilde_02_outValue,
                            __numbertilde_02_rampInSamples,
                            __numbertilde_02_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_02_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
                    __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -708766484,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_02_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-14"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
                this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
            }
            
            void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
                auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
                auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
                auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
                auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
                auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_03_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_03_smooth_next(
                            __numbertilde_03_outValue,
                            __numbertilde_03_rampInSamples,
                            __numbertilde_03_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_03_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
                    __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1410595987,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_03_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-7"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
                this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
            }
            
            void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
                auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
                auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
                auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
                auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
                auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_05_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_05_smooth_next(
                            __numbertilde_05_outValue,
                            __numbertilde_05_rampInSamples,
                            __numbertilde_05_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_05_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
                    __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -2112425490,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_05_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-59"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
                this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
            }
            
            void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
                auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
                auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
                auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
                auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
                auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_06_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_06_smooth_next(
                            __numbertilde_06_outValue,
                            __numbertilde_06_rampInSamples,
                            __numbertilde_06_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_06_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
                    __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -6936981,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_06_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-15"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
                this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
            }
            
            void numbertilde_08_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_08_currentIntervalInSamples = this->numbertilde_08_currentIntervalInSamples;
                auto __numbertilde_08_lastValue = this->numbertilde_08_lastValue;
                auto __numbertilde_08_currentInterval = this->numbertilde_08_currentInterval;
                auto __numbertilde_08_rampInSamples = this->numbertilde_08_rampInSamples;
                auto __numbertilde_08_outValue = this->numbertilde_08_outValue;
                auto __numbertilde_08_currentMode = this->numbertilde_08_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_08_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_08_smooth_next(
                            __numbertilde_08_outValue,
                            __numbertilde_08_rampInSamples,
                            __numbertilde_08_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_08_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_08_lastValue && __numbertilde_08_currentInterval <= 0) {
                    __numbertilde_08_currentInterval = __numbertilde_08_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        694892522,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_08_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("livegrain/rand-filter/number~_obj-16"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_08_currentInterval = __numbertilde_08_currentInterval;
                this->numbertilde_08_lastValue = __numbertilde_08_lastValue;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void biquad_tilde_01_reset() {
                this->biquad_tilde_01_x1 = 0;
                this->biquad_tilde_01_x2 = 0;
                this->biquad_tilde_01_y1 = 0;
                this->biquad_tilde_01_y2 = 0;
            }
            
            void biquad_tilde_01_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_01_reset();
                this->biquad_tilde_01_setupDone = true;
            }
            
            number numbertilde_01_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
                this->numbertilde_01_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_01_smooth_d_dspsetup() {
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_smooth_d_reset() {
                this->numbertilde_01_smooth_d_prev = 0;
            }
            
            number numbertilde_01_smooth_next(number x, number up, number down) {
                if (this->numbertilde_01_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_01_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_01_smooth_index = _up;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
                    } else if (x < this->numbertilde_01_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_01_smooth_index = _down;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_01_smooth_index > 0) {
                    this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
                    this->numbertilde_01_smooth_index -= 1;
                } else {
                    this->numbertilde_01_smooth_prev = x;
                }
            
                return this->numbertilde_01_smooth_prev;
            }
            
            void numbertilde_01_smooth_reset() {
                this->numbertilde_01_smooth_prev = 0;
                this->numbertilde_01_smooth_index = 0;
                this->numbertilde_01_smooth_increment = 0;
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_init() {
                this->numbertilde_01_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-21"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_01_dspsetup(bool force) {
                if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
                this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
                this->numbertilde_01_setupDone = true;
                this->numbertilde_01_smooth_d_dspsetup();
            }
            
            number numbertilde_02_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
                this->numbertilde_02_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_02_smooth_d_dspsetup() {
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_smooth_d_reset() {
                this->numbertilde_02_smooth_d_prev = 0;
            }
            
            number numbertilde_02_smooth_next(number x, number up, number down) {
                if (this->numbertilde_02_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_02_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_02_smooth_index = _up;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
                    } else if (x < this->numbertilde_02_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_02_smooth_index = _down;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_02_smooth_index > 0) {
                    this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
                    this->numbertilde_02_smooth_index -= 1;
                } else {
                    this->numbertilde_02_smooth_prev = x;
                }
            
                return this->numbertilde_02_smooth_prev;
            }
            
            void numbertilde_02_smooth_reset() {
                this->numbertilde_02_smooth_prev = 0;
                this->numbertilde_02_smooth_index = 0;
                this->numbertilde_02_smooth_increment = 0;
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_init() {
                this->numbertilde_02_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-14"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_02_dspsetup(bool force) {
                if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
                this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
                this->numbertilde_02_setupDone = true;
                this->numbertilde_02_smooth_d_dspsetup();
            }
            
            array<number, 5> filtercoeff_01_localop_next(number frequency, number q, number gain, number type) {
                number omega = frequency * this->filtercoeff_01_localop_twopi_over_sr;
                this->filtercoeff_01_localop_cs = rnbo_cos(omega);
                this->filtercoeff_01_localop_sn = rnbo_sin(omega);
                this->filtercoeff_01_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
                this->filtercoeff_01_localop_one_over_q = (number)1 / q;
                this->filtercoeff_01_localop_alpha = this->filtercoeff_01_localop_sn * 0.5 * this->filtercoeff_01_localop_one_over_q;
            
                switch ((int)type) {
                case 5:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_01_localop_beta = this->safesqrt(
                        (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
                    );
            
                    this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_01_localop_beta = this->safesqrt(
                        (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
                    );
            
                    this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
                    this->filtercoeff_01_localop_one_over_a = (this->filtercoeff_01_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_01_localop_A);
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a);
                    break;
                    }
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                    {
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    break;
                    }
                default:
                    {
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
                    break;
                    }
                }
            
                switch ((int)type) {
                case 0:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 1:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 2:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 7:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 3:
                    {
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 8:
                    {
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = 1.0;
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_01_localop_la0 = (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 5:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1 - (this->filtercoeff_01_localop_A + 1) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = 2. * (this->filtercoeff_01_localop_A - 1. - (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 9:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 10:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 11:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 13:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 12:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 *= this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 *= this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0g;
                    break;
                    }
                case 14:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la2 = gain;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 15:
                    {
                    this->filtercoeff_01_localop_la0 = 1;
                    this->filtercoeff_01_localop_la1 = 0;
                    this->filtercoeff_01_localop_la2 = 0;
                    this->filtercoeff_01_localop_lb1 = 0;
                    this->filtercoeff_01_localop_lb2 = 0;
                    }
                default:
                    {
                    break;
                    }
                }
            
                return {
                    this->filtercoeff_01_localop_la0,
                    this->filtercoeff_01_localop_la1,
                    this->filtercoeff_01_localop_la2,
                    this->filtercoeff_01_localop_lb1,
                    this->filtercoeff_01_localop_lb2
                };
            }
            
            void filtercoeff_01_localop_dspsetup() {
                this->filtercoeff_01_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
            }
            
            void filtercoeff_01_localop_reset() {
                this->filtercoeff_01_localop_internal = true;
                this->filtercoeff_01_localop_twopi_over_sr = 0;
                this->filtercoeff_01_localop_cs = 0;
                this->filtercoeff_01_localop_sn = 0;
                this->filtercoeff_01_localop_one_over_gain = 0;
                this->filtercoeff_01_localop_one_over_q = 0;
                this->filtercoeff_01_localop_alpha = 0;
                this->filtercoeff_01_localop_beta = 0;
                this->filtercoeff_01_localop_b0 = 0;
                this->filtercoeff_01_localop_b0g = 0;
                this->filtercoeff_01_localop_A = 0;
                this->filtercoeff_01_localop_one_over_a = 0;
                this->filtercoeff_01_localop_la0 = 0;
                this->filtercoeff_01_localop_la1 = 0;
                this->filtercoeff_01_localop_la2 = 0;
                this->filtercoeff_01_localop_lb1 = 0;
                this->filtercoeff_01_localop_lb2 = 0;
            }
            
            void filtercoeff_01_updateTerms(number local_frequency, number local_gain, number local_q) {
                if ((bool)(this->filtercoeff_01_force_update) || local_frequency != this->filtercoeff_01_last_frequency || local_q != this->filtercoeff_01_last_q || local_gain != this->filtercoeff_01_last_gain || this->filtercoeff_01_type != this->filtercoeff_01_last_type) {
                    array<number, 5> tmp = this->filtercoeff_01_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_01_type);
                    this->filtercoeff_01_la0 = tmp[0];
                    this->filtercoeff_01_la1 = tmp[1];
                    this->filtercoeff_01_la2 = tmp[2];
                    this->filtercoeff_01_lb1 = tmp[3];
                    this->filtercoeff_01_lb2 = tmp[4];
                    this->filtercoeff_01_last_frequency = local_frequency;
                    this->filtercoeff_01_last_q = local_q;
                    this->filtercoeff_01_last_gain = local_gain;
                    this->filtercoeff_01_last_type = this->filtercoeff_01_type;
                    this->filtercoeff_01_force_update = false;
                }
            }
            
            void filtercoeff_01_dspsetup(bool force) {
                if ((bool)(this->filtercoeff_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->filtercoeff_01_activeResamp = this->vectorsize();
                }
            
                this->filtercoeff_01_resamp_counter = 0;
                this->filtercoeff_01_la0 = 0.;
                this->filtercoeff_01_la1 = 0.;
                this->filtercoeff_01_la2 = 0.;
                this->filtercoeff_01_lb1 = 0.;
                this->filtercoeff_01_lb2 = 0.;
                this->filtercoeff_01_last_frequency = -1.;
                this->filtercoeff_01_last_q = -1.;
                this->filtercoeff_01_last_gain = -1.;
                this->filtercoeff_01_last_type = this->filtercoeff_01_type;
                this->filtercoeff_01_force_update = true;
                this->filtercoeff_01_setupDone = true;
                this->filtercoeff_01_localop_dspsetup();
            }
            
            number numbertilde_03_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
                this->numbertilde_03_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_03_smooth_d_dspsetup() {
                this->numbertilde_03_smooth_d_reset();
            }
            
            void numbertilde_03_smooth_d_reset() {
                this->numbertilde_03_smooth_d_prev = 0;
            }
            
            number numbertilde_03_smooth_next(number x, number up, number down) {
                if (this->numbertilde_03_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_03_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_03_smooth_index = _up;
                        this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
                    } else if (x < this->numbertilde_03_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_03_smooth_index = _down;
                        this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_03_smooth_index > 0) {
                    this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
                    this->numbertilde_03_smooth_index -= 1;
                } else {
                    this->numbertilde_03_smooth_prev = x;
                }
            
                return this->numbertilde_03_smooth_prev;
            }
            
            void numbertilde_03_smooth_reset() {
                this->numbertilde_03_smooth_prev = 0;
                this->numbertilde_03_smooth_index = 0;
                this->numbertilde_03_smooth_increment = 0;
                this->numbertilde_03_smooth_d_reset();
            }
            
            void numbertilde_03_init() {
                this->numbertilde_03_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-7"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_03_dspsetup(bool force) {
                if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
                this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
                this->numbertilde_03_setupDone = true;
                this->numbertilde_03_smooth_d_dspsetup();
            }
            
            number numbertilde_04_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
                this->numbertilde_04_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_04_smooth_d_dspsetup() {
                this->numbertilde_04_smooth_d_reset();
            }
            
            void numbertilde_04_smooth_d_reset() {
                this->numbertilde_04_smooth_d_prev = 0;
            }
            
            number numbertilde_04_smooth_next(number x, number up, number down) {
                if (this->numbertilde_04_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_04_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_04_smooth_index = _up;
                        this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
                    } else if (x < this->numbertilde_04_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_04_smooth_index = _down;
                        this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_04_smooth_index > 0) {
                    this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
                    this->numbertilde_04_smooth_index -= 1;
                } else {
                    this->numbertilde_04_smooth_prev = x;
                }
            
                return this->numbertilde_04_smooth_prev;
            }
            
            void numbertilde_04_smooth_reset() {
                this->numbertilde_04_smooth_prev = 0;
                this->numbertilde_04_smooth_index = 0;
                this->numbertilde_04_smooth_increment = 0;
                this->numbertilde_04_smooth_d_reset();
            }
            
            void numbertilde_04_init() {
                this->numbertilde_04_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-22"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_04_dspsetup(bool force) {
                if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
                this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
                this->numbertilde_04_setupDone = true;
                this->numbertilde_04_smooth_d_dspsetup();
            }
            
            number numbertilde_05_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
                this->numbertilde_05_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_05_smooth_d_dspsetup() {
                this->numbertilde_05_smooth_d_reset();
            }
            
            void numbertilde_05_smooth_d_reset() {
                this->numbertilde_05_smooth_d_prev = 0;
            }
            
            number numbertilde_05_smooth_next(number x, number up, number down) {
                if (this->numbertilde_05_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_05_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_05_smooth_index = _up;
                        this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
                    } else if (x < this->numbertilde_05_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_05_smooth_index = _down;
                        this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_05_smooth_index > 0) {
                    this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
                    this->numbertilde_05_smooth_index -= 1;
                } else {
                    this->numbertilde_05_smooth_prev = x;
                }
            
                return this->numbertilde_05_smooth_prev;
            }
            
            void numbertilde_05_smooth_reset() {
                this->numbertilde_05_smooth_prev = 0;
                this->numbertilde_05_smooth_index = 0;
                this->numbertilde_05_smooth_increment = 0;
                this->numbertilde_05_smooth_d_reset();
            }
            
            void numbertilde_05_init() {
                this->numbertilde_05_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-59"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_05_dspsetup(bool force) {
                if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
                this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
                this->numbertilde_05_setupDone = true;
                this->numbertilde_05_smooth_d_dspsetup();
            }
            
            number numbertilde_06_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
                this->numbertilde_06_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_06_smooth_d_dspsetup() {
                this->numbertilde_06_smooth_d_reset();
            }
            
            void numbertilde_06_smooth_d_reset() {
                this->numbertilde_06_smooth_d_prev = 0;
            }
            
            number numbertilde_06_smooth_next(number x, number up, number down) {
                if (this->numbertilde_06_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_06_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_06_smooth_index = _up;
                        this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
                    } else if (x < this->numbertilde_06_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_06_smooth_index = _down;
                        this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_06_smooth_index > 0) {
                    this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
                    this->numbertilde_06_smooth_index -= 1;
                } else {
                    this->numbertilde_06_smooth_prev = x;
                }
            
                return this->numbertilde_06_smooth_prev;
            }
            
            void numbertilde_06_smooth_reset() {
                this->numbertilde_06_smooth_prev = 0;
                this->numbertilde_06_smooth_index = 0;
                this->numbertilde_06_smooth_increment = 0;
                this->numbertilde_06_smooth_d_reset();
            }
            
            void numbertilde_06_init() {
                this->numbertilde_06_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_06_dspsetup(bool force) {
                if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
                this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
                this->numbertilde_06_setupDone = true;
                this->numbertilde_06_smooth_d_dspsetup();
            }
            
            number numbertilde_07_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
                this->numbertilde_07_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_07_smooth_d_dspsetup() {
                this->numbertilde_07_smooth_d_reset();
            }
            
            void numbertilde_07_smooth_d_reset() {
                this->numbertilde_07_smooth_d_prev = 0;
            }
            
            number numbertilde_07_smooth_next(number x, number up, number down) {
                if (this->numbertilde_07_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_07_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_07_smooth_index = _up;
                        this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
                    } else if (x < this->numbertilde_07_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_07_smooth_index = _down;
                        this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_07_smooth_index > 0) {
                    this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
                    this->numbertilde_07_smooth_index -= 1;
                } else {
                    this->numbertilde_07_smooth_prev = x;
                }
            
                return this->numbertilde_07_smooth_prev;
            }
            
            void numbertilde_07_smooth_reset() {
                this->numbertilde_07_smooth_prev = 0;
                this->numbertilde_07_smooth_index = 0;
                this->numbertilde_07_smooth_increment = 0;
                this->numbertilde_07_smooth_d_reset();
            }
            
            void numbertilde_07_init() {
                this->numbertilde_07_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-23"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_07_dspsetup(bool force) {
                if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
                this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
                this->numbertilde_07_setupDone = true;
                this->numbertilde_07_smooth_d_dspsetup();
            }
            
            number numbertilde_08_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_08_smooth_d_prev);
                this->numbertilde_08_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_08_smooth_d_dspsetup() {
                this->numbertilde_08_smooth_d_reset();
            }
            
            void numbertilde_08_smooth_d_reset() {
                this->numbertilde_08_smooth_d_prev = 0;
            }
            
            number numbertilde_08_smooth_next(number x, number up, number down) {
                if (this->numbertilde_08_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_08_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_08_smooth_index = _up;
                        this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _up;
                    } else if (x < this->numbertilde_08_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_08_smooth_index = _down;
                        this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_08_smooth_index > 0) {
                    this->numbertilde_08_smooth_prev += this->numbertilde_08_smooth_increment;
                    this->numbertilde_08_smooth_index -= 1;
                } else {
                    this->numbertilde_08_smooth_prev = x;
                }
            
                return this->numbertilde_08_smooth_prev;
            }
            
            void numbertilde_08_smooth_reset() {
                this->numbertilde_08_smooth_prev = 0;
                this->numbertilde_08_smooth_index = 0;
                this->numbertilde_08_smooth_increment = 0;
                this->numbertilde_08_smooth_d_reset();
            }
            
            void numbertilde_08_init() {
                this->numbertilde_08_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-filter/number~_obj-16"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_08_dspsetup(bool force) {
                if ((bool)(this->numbertilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_08_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_08_currentInterval = this->numbertilde_08_currentIntervalInSamples;
                this->numbertilde_08_rampInSamples = this->mstosamps(this->numbertilde_08_ramp);
                this->numbertilde_08_setupDone = true;
                this->numbertilde_08_smooth_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                biquad_tilde_01_x = 0;
                biquad_tilde_01_a0 = 0;
                biquad_tilde_01_a1 = 0;
                biquad_tilde_01_a2 = 0;
                biquad_tilde_01_b1 = 0;
                biquad_tilde_01_b2 = 0;
                p_01_target = 0;
                numbertilde_01_input_number = 0;
                numbertilde_01_ramp = 0;
                numbertilde_02_input_number = 0;
                numbertilde_02_ramp = 0;
                filtercoeff_01_frequency = 1000;
                filtercoeff_01_gain = 1;
                filtercoeff_01_q = 1;
                filtercoeff_01_type = 4;
                receive_01_output_number = 0;
                numbertilde_03_input_number = 0;
                numbertilde_03_ramp = 0;
                p_02_target = 0;
                numbertilde_04_input_number = 0;
                numbertilde_04_ramp = 0;
                numbertilde_05_input_number = 0;
                numbertilde_05_ramp = 0;
                numbertilde_06_input_number = 0;
                numbertilde_06_ramp = 0;
                p_03_target = 0;
                numbertilde_07_input_number = 0;
                numbertilde_07_ramp = 0;
                numbertilde_08_input_number = 0;
                numbertilde_08_ramp = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                biquad_tilde_01_x1 = 0;
                biquad_tilde_01_x2 = 0;
                biquad_tilde_01_y1 = 0;
                biquad_tilde_01_y2 = 0;
                biquad_tilde_01_setupDone = false;
                numbertilde_01_currentInterval = 0;
                numbertilde_01_currentIntervalInSamples = 0;
                numbertilde_01_lastValue = 0;
                numbertilde_01_outValue = 0;
                numbertilde_01_rampInSamples = 0;
                numbertilde_01_currentMode = 0;
                numbertilde_01_smooth_d_prev = 0;
                numbertilde_01_smooth_prev = 0;
                numbertilde_01_smooth_index = 0;
                numbertilde_01_smooth_increment = 0;
                numbertilde_01_setupDone = false;
                numbertilde_02_currentInterval = 0;
                numbertilde_02_currentIntervalInSamples = 0;
                numbertilde_02_lastValue = 0;
                numbertilde_02_outValue = 0;
                numbertilde_02_rampInSamples = 0;
                numbertilde_02_currentMode = 0;
                numbertilde_02_smooth_d_prev = 0;
                numbertilde_02_smooth_prev = 0;
                numbertilde_02_smooth_index = 0;
                numbertilde_02_smooth_increment = 0;
                numbertilde_02_setupDone = false;
                filtercoeff_01_K_EPSILON = 1e-9;
                filtercoeff_01_localop_internal = true;
                filtercoeff_01_setupDone = false;
                numbertilde_03_currentInterval = 0;
                numbertilde_03_currentIntervalInSamples = 0;
                numbertilde_03_lastValue = 0;
                numbertilde_03_outValue = 0;
                numbertilde_03_rampInSamples = 0;
                numbertilde_03_currentMode = 0;
                numbertilde_03_smooth_d_prev = 0;
                numbertilde_03_smooth_prev = 0;
                numbertilde_03_smooth_index = 0;
                numbertilde_03_smooth_increment = 0;
                numbertilde_03_setupDone = false;
                numbertilde_04_currentInterval = 0;
                numbertilde_04_currentIntervalInSamples = 0;
                numbertilde_04_lastValue = 0;
                numbertilde_04_outValue = 0;
                numbertilde_04_rampInSamples = 0;
                numbertilde_04_currentMode = 0;
                numbertilde_04_smooth_d_prev = 0;
                numbertilde_04_smooth_prev = 0;
                numbertilde_04_smooth_index = 0;
                numbertilde_04_smooth_increment = 0;
                numbertilde_04_setupDone = false;
                numbertilde_05_currentInterval = 0;
                numbertilde_05_currentIntervalInSamples = 0;
                numbertilde_05_lastValue = 0;
                numbertilde_05_outValue = 0;
                numbertilde_05_rampInSamples = 0;
                numbertilde_05_currentMode = 0;
                numbertilde_05_smooth_d_prev = 0;
                numbertilde_05_smooth_prev = 0;
                numbertilde_05_smooth_index = 0;
                numbertilde_05_smooth_increment = 0;
                numbertilde_05_setupDone = false;
                numbertilde_06_currentInterval = 0;
                numbertilde_06_currentIntervalInSamples = 0;
                numbertilde_06_lastValue = 0;
                numbertilde_06_outValue = 0;
                numbertilde_06_rampInSamples = 0;
                numbertilde_06_currentMode = 0;
                numbertilde_06_smooth_d_prev = 0;
                numbertilde_06_smooth_prev = 0;
                numbertilde_06_smooth_index = 0;
                numbertilde_06_smooth_increment = 0;
                numbertilde_06_setupDone = false;
                numbertilde_07_currentInterval = 0;
                numbertilde_07_currentIntervalInSamples = 0;
                numbertilde_07_lastValue = 0;
                numbertilde_07_outValue = 0;
                numbertilde_07_rampInSamples = 0;
                numbertilde_07_currentMode = 0;
                numbertilde_07_smooth_d_prev = 0;
                numbertilde_07_smooth_prev = 0;
                numbertilde_07_smooth_index = 0;
                numbertilde_07_smooth_increment = 0;
                numbertilde_07_setupDone = false;
                numbertilde_08_currentInterval = 0;
                numbertilde_08_currentIntervalInSamples = 0;
                numbertilde_08_lastValue = 0;
                numbertilde_08_outValue = 0;
                numbertilde_08_rampInSamples = 0;
                numbertilde_08_currentMode = 0;
                numbertilde_08_smooth_d_prev = 0;
                numbertilde_08_smooth_prev = 0;
                numbertilde_08_smooth_index = 0;
                numbertilde_08_smooth_increment = 0;
                numbertilde_08_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number biquad_tilde_01_x;
                number biquad_tilde_01_a0;
                number biquad_tilde_01_a1;
                number biquad_tilde_01_a2;
                number biquad_tilde_01_b1;
                number biquad_tilde_01_b2;
                number p_01_target;
                number numbertilde_01_input_number;
                number numbertilde_01_ramp;
                number numbertilde_02_input_number;
                number numbertilde_02_ramp;
                number filtercoeff_01_frequency;
                number filtercoeff_01_gain;
                number filtercoeff_01_q;
                Int filtercoeff_01_type;
                number receive_01_output_number;
                list receive_01_output_list;
                number numbertilde_03_input_number;
                number numbertilde_03_ramp;
                number p_02_target;
                number numbertilde_04_input_number;
                number numbertilde_04_ramp;
                number numbertilde_05_input_number;
                number numbertilde_05_ramp;
                number numbertilde_06_input_number;
                number numbertilde_06_ramp;
                number p_03_target;
                number numbertilde_07_input_number;
                number numbertilde_07_ramp;
                number numbertilde_08_input_number;
                number numbertilde_08_ramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number biquad_tilde_01_x1;
                number biquad_tilde_01_x2;
                number biquad_tilde_01_y1;
                number biquad_tilde_01_y2;
                bool biquad_tilde_01_setupDone;
                SampleIndex numbertilde_01_currentInterval;
                SampleIndex numbertilde_01_currentIntervalInSamples;
                number numbertilde_01_lastValue;
                number numbertilde_01_outValue;
                number numbertilde_01_rampInSamples;
                Int numbertilde_01_currentMode;
                number numbertilde_01_smooth_d_prev;
                number numbertilde_01_smooth_prev;
                number numbertilde_01_smooth_index;
                number numbertilde_01_smooth_increment;
                bool numbertilde_01_setupDone;
                SampleIndex numbertilde_02_currentInterval;
                SampleIndex numbertilde_02_currentIntervalInSamples;
                number numbertilde_02_lastValue;
                number numbertilde_02_outValue;
                number numbertilde_02_rampInSamples;
                Int numbertilde_02_currentMode;
                number numbertilde_02_smooth_d_prev;
                number numbertilde_02_smooth_prev;
                number numbertilde_02_smooth_index;
                number numbertilde_02_smooth_increment;
                bool numbertilde_02_setupDone;
                number filtercoeff_01_resamp_counter;
                number filtercoeff_01_activeResamp;
                number filtercoeff_01_K_EPSILON;
                number filtercoeff_01_la0;
                number filtercoeff_01_la1;
                number filtercoeff_01_la2;
                number filtercoeff_01_lb1;
                number filtercoeff_01_lb2;
                number filtercoeff_01_last_frequency;
                number filtercoeff_01_last_q;
                number filtercoeff_01_last_gain;
                Int filtercoeff_01_last_type;
                bool filtercoeff_01_force_update;
                bool filtercoeff_01_localop_internal;
                number filtercoeff_01_localop_twopi_over_sr;
                number filtercoeff_01_localop_cs;
                number filtercoeff_01_localop_sn;
                number filtercoeff_01_localop_one_over_gain;
                number filtercoeff_01_localop_one_over_q;
                number filtercoeff_01_localop_alpha;
                number filtercoeff_01_localop_beta;
                number filtercoeff_01_localop_b0;
                number filtercoeff_01_localop_b0g;
                number filtercoeff_01_localop_A;
                number filtercoeff_01_localop_one_over_a;
                number filtercoeff_01_localop_la0;
                number filtercoeff_01_localop_la1;
                number filtercoeff_01_localop_la2;
                number filtercoeff_01_localop_lb1;
                number filtercoeff_01_localop_lb2;
                bool filtercoeff_01_setupDone;
                SampleIndex numbertilde_03_currentInterval;
                SampleIndex numbertilde_03_currentIntervalInSamples;
                number numbertilde_03_lastValue;
                number numbertilde_03_outValue;
                number numbertilde_03_rampInSamples;
                Int numbertilde_03_currentMode;
                number numbertilde_03_smooth_d_prev;
                number numbertilde_03_smooth_prev;
                number numbertilde_03_smooth_index;
                number numbertilde_03_smooth_increment;
                bool numbertilde_03_setupDone;
                SampleIndex numbertilde_04_currentInterval;
                SampleIndex numbertilde_04_currentIntervalInSamples;
                number numbertilde_04_lastValue;
                number numbertilde_04_outValue;
                number numbertilde_04_rampInSamples;
                Int numbertilde_04_currentMode;
                number numbertilde_04_smooth_d_prev;
                number numbertilde_04_smooth_prev;
                number numbertilde_04_smooth_index;
                number numbertilde_04_smooth_increment;
                bool numbertilde_04_setupDone;
                SampleIndex numbertilde_05_currentInterval;
                SampleIndex numbertilde_05_currentIntervalInSamples;
                number numbertilde_05_lastValue;
                number numbertilde_05_outValue;
                number numbertilde_05_rampInSamples;
                Int numbertilde_05_currentMode;
                number numbertilde_05_smooth_d_prev;
                number numbertilde_05_smooth_prev;
                number numbertilde_05_smooth_index;
                number numbertilde_05_smooth_increment;
                bool numbertilde_05_setupDone;
                SampleIndex numbertilde_06_currentInterval;
                SampleIndex numbertilde_06_currentIntervalInSamples;
                number numbertilde_06_lastValue;
                number numbertilde_06_outValue;
                number numbertilde_06_rampInSamples;
                Int numbertilde_06_currentMode;
                number numbertilde_06_smooth_d_prev;
                number numbertilde_06_smooth_prev;
                number numbertilde_06_smooth_index;
                number numbertilde_06_smooth_increment;
                bool numbertilde_06_setupDone;
                SampleIndex numbertilde_07_currentInterval;
                SampleIndex numbertilde_07_currentIntervalInSamples;
                number numbertilde_07_lastValue;
                number numbertilde_07_outValue;
                number numbertilde_07_rampInSamples;
                Int numbertilde_07_currentMode;
                number numbertilde_07_smooth_d_prev;
                number numbertilde_07_smooth_prev;
                number numbertilde_07_smooth_index;
                number numbertilde_07_smooth_increment;
                bool numbertilde_07_setupDone;
                SampleIndex numbertilde_08_currentInterval;
                SampleIndex numbertilde_08_currentIntervalInSamples;
                number numbertilde_08_lastValue;
                number numbertilde_08_outValue;
                number numbertilde_08_rampInSamples;
                Int numbertilde_08_currentMode;
                number numbertilde_08_smooth_d_prev;
                number numbertilde_08_smooth_prev;
                number numbertilde_08_smooth_index;
                number numbertilde_08_smooth_increment;
                bool numbertilde_08_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_94* p_01;
                RNBOSubpatcher_95* p_02;
                RNBOSubpatcher_96* p_03;
            
    };
    
    class RNBOSubpatcher_99 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_97 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_99;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_97()
                        {
                        }
                        
                        ~RNBOSubpatcher_97()
                        {
                        }
                        
                        virtual RNBOSubpatcher_99* getPatcher() const {
                            return static_cast<RNBOSubpatcher_99 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("livegrain/rand-placement/width/number_obj-13") == objectId)
                                    this->numberobj_09_valin_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-2") == objectId)
                                    this->numberobj_10_valin_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-8") == objectId)
                                    this->numberobj_11_valin_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-9") == objectId)
                                    this->numberobj_12_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("livegrain/rand-placement/width/number_obj-13") == objectId)
                                    this->numberobj_09_format_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-2") == objectId)
                                    this->numberobj_10_format_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-8") == objectId)
                                    this->numberobj_11_format_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/number_obj-9") == objectId)
                                    this->numberobj_12_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_05_listin_number_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_06_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_05_listin_list_set(payload);
                        
                                if (TAG("livegrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_06_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("livegrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_05_listin_bang_bang();
                        
                                if (TAG("livegrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_06_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("livegrain/rand-placement/width/number_obj-13"):
                                {
                                return "livegrain/rand-placement/width/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("livegrain/rand-placement/width/number_obj-2"):
                                {
                                return "livegrain/rand-placement/width/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("livegrain/rand-placement/width/message_obj-78"):
                                {
                                return "livegrain/rand-placement/width/message_obj-78";
                                }
                            case TAG("livegrain/rand-placement/width/number_obj-8"):
                                {
                                return "livegrain/rand-placement/width/number_obj-8";
                                }
                            case TAG("livegrain/rand-placement/width/number_obj-9"):
                                {
                                return "livegrain/rand-placement/width/number_obj-9";
                                }
                            case TAG("livegrain/rand-placement/width/message_obj-80"):
                                {
                                return "livegrain/rand-placement/width/message_obj-80";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_08_out1_bang_bang() {
                            this->numberobj_11_value_bang();
                            this->trigger_03_input_bang_bang();
                        }
                        
                        void eventinlet_08_out1_number_set(number v) {
                            this->numberobj_11_value_set(v);
                            this->trigger_03_input_number_set(v);
                        }
                        
                        void numberobj_09_valin_set(number v) {
                            this->numberobj_09_value_set(v);
                        }
                        
                        void numberobj_09_format_set(number v) {
                            this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_10_valin_set(number v) {
                            this->numberobj_10_value_set(v);
                        }
                        
                        void numberobj_10_format_set(number v) {
                            this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_05_listin_list_set(const list& v) {
                            this->message_05_set_set(v);
                        }
                        
                        void message_05_listin_number_set(number v) {
                            this->message_05_set_set(v);
                        }
                        
                        void message_05_listin_bang_bang() {
                            this->message_05_trigger_bang();
                        }
                        
                        void numberobj_11_valin_set(number v) {
                            this->numberobj_11_value_set(v);
                        }
                        
                        void numberobj_11_format_set(number v) {
                            this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_12_valin_set(number v) {
                            this->numberobj_12_value_set(v);
                        }
                        
                        void numberobj_12_format_set(number v) {
                            this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_06_listin_list_set(const list& v) {
                            this->message_06_set_set(v);
                        }
                        
                        void message_06_listin_number_set(number v) {
                            this->message_06_set_set(v);
                        }
                        
                        void message_06_listin_bang_bang() {
                            this->message_06_trigger_bang();
                        }
                        
                        void eventinlet_09_out1_bang_bang() {
                            this->expr_06_in3_bang();
                        }
                        
                        void eventinlet_09_out1_number_set(number v) {
                            this->expr_06_in3_set(v);
                        }
                        
                        void eventinlet_10_out1_bang_bang() {
                            this->expr_09_in2_bang();
                        }
                        
                        void eventinlet_10_out1_number_set(number v) {
                            this->expr_09_in2_set(v);
                        }
                        
                        void eventinlet_11_out1_bang_bang() {
                            this->expr_05_in2_bang();
                        }
                        
                        void eventinlet_11_out1_number_set(number v) {
                            this->expr_05_in2_set(v);
                        }
                        
                        void eventinlet_12_out1_bang_bang() {
                            this->expr_08_in3_bang();
                        }
                        
                        void eventinlet_12_out1_number_set(number v) {
                            this->expr_08_in3_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_09_init();
                            this->numberobj_10_init();
                            this->message_05_init();
                            this->numberobj_11_init();
                            this->numberobj_12_init();
                            this->message_06_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void expr_05_in2_set(number v) {
                            this->expr_05_in2 = v;
                        }
                        
                        void eventinlet_11_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_05_in2_set(converted);
                            }
                        }
                        
                        void expr_08_in3_set(number v) {
                            this->expr_08_in3 = v;
                        }
                        
                        void eventinlet_12_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_08_in3_set(converted);
                            }
                        }
                        
                        void expr_09_in2_set(number v) {
                            this->expr_09_in2 = v;
                        }
                        
                        void eventinlet_10_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_09_in2_set(converted);
                            }
                        }
                        
                        void expr_06_in3_set(number v) {
                            this->expr_06_in3 = v;
                        }
                        
                        void eventinlet_09_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_06_in3_set(converted);
                            }
                        }
                        
                        void numberobj_11_output_set(number ) {}
                        
                        void numberobj_11_value_set(number v) {
                            this->numberobj_11_value_setter(v);
                            v = this->numberobj_11_value;
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-placement/width/number_obj-8"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_11_output_set(localvalue);
                        }
                        
                        void gate_03_onoff_set(number v) {
                            this->gate_03_onoff = v;
                        }
                        
                        void eventoutlet_04_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_04_out1_number_set(v);
                        }
                        
                        void numberobj_09_output_set(number v) {
                            this->eventoutlet_04_in1_number_set(v);
                        }
                        
                        void numberobj_09_value_set(number v) {
                            this->numberobj_09_value_setter(v);
                            v = this->numberobj_09_value;
                            number localvalue = v;
                        
                            if (this->numberobj_09_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-placement/width/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_09_output_set(localvalue);
                        }
                        
                        void expr_05_out1_set(number v) {
                            this->expr_05_out1 = v;
                            this->numberobj_09_value_set(this->expr_05_out1);
                        }
                        
                        void expr_05_in1_set(number in1) {
                            this->expr_05_in1 = in1;
                        
                            this->expr_05_out1_set(
                                (this->expr_05_in1 > this->expr_05_in3 ? this->expr_05_in3 : (this->expr_05_in1 < this->expr_05_in2 ? this->expr_05_in2 : this->expr_05_in1))
                            );//#map:livegrain/rand-placement/width/clip_obj-10:1
                        }
                        
                        void numberobj_10_output_set(number v) {
                            this->expr_05_in1_set(v);
                        }
                        
                        void numberobj_10_value_set(number v) {
                            this->numberobj_10_value_setter(v);
                            v = this->numberobj_10_value;
                            number localvalue = v;
                        
                            if (this->numberobj_10_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-placement/width/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_10_output_set(localvalue);
                        }
                        
                        void expr_06_out1_set(number v) {
                            this->expr_06_out1 = v;
                            this->numberobj_10_value_set(this->expr_06_out1);
                        }
                        
                        void expr_06_in1_set(number in1) {
                            this->expr_06_in1 = in1;
                        
                            this->expr_06_out1_set(
                                (this->expr_06_in1 > this->expr_06_in3 ? this->expr_06_in3 : (this->expr_06_in1 < this->expr_06_in2 ? this->expr_06_in2 : this->expr_06_in1))
                            );//#map:livegrain/rand-placement/width/clip_obj-74:1
                        }
                        
                        void gate_03_out1_number_set(number v) {
                            this->gate_03_out1_number = v;
                            this->expr_06_in1_set(v);
                        }
                        
                        void expr_08_out1_set(number v) {
                            this->expr_08_out1 = v;
                            this->numberobj_09_value_set(this->expr_08_out1);
                        }
                        
                        void expr_08_in1_set(number in1) {
                            this->expr_08_in1 = in1;
                        
                            this->expr_08_out1_set(
                                (this->expr_08_in1 > this->expr_08_in3 ? this->expr_08_in3 : (this->expr_08_in1 < this->expr_08_in2 ? this->expr_08_in2 : this->expr_08_in1))
                            );//#map:livegrain/rand-placement/width/clip_obj-11:1
                        }
                        
                        void numberobj_12_output_set(number v) {
                            this->expr_08_in1_set(v);
                        }
                        
                        void numberobj_12_value_set(number v) {
                            this->numberobj_12_value_setter(v);
                            v = this->numberobj_12_value;
                            number localvalue = v;
                        
                            if (this->numberobj_12_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-placement/width/number_obj-9"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_12_output_set(localvalue);
                        }
                        
                        void expr_09_out1_set(number v) {
                            this->expr_09_out1 = v;
                            this->numberobj_12_value_set(this->expr_09_out1);
                        }
                        
                        void expr_09_in1_set(number in1) {
                            this->expr_09_in1 = in1;
                        
                            this->expr_09_out1_set(
                                (this->expr_09_in1 > this->expr_09_in3 ? this->expr_09_in3 : (this->expr_09_in1 < this->expr_09_in2 ? this->expr_09_in2 : this->expr_09_in1))
                            );//#map:livegrain/rand-placement/width/clip_obj-75:1
                        }
                        
                        void gate_03_out2_number_set(number v) {
                            this->gate_03_out2_number = v;
                            this->expr_09_in1_set(v);
                        }
                        
                        void gate_03_input_number_set(number v) {
                            if (this->gate_03_onoff == 1)
                                this->gate_03_out1_number_set(v);
                            else if (this->gate_03_onoff == 2)
                                this->gate_03_out2_number_set(v);
                        }
                        
                        void message_06_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_03_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_03_onoff_set(converted);
                            }
                        }
                        
                        void message_06_trigger_bang() {
                            this->message_06_out_set(this->message_06_set);
                        }
                        
                        void select_06_match1_bang() {
                            this->message_06_trigger_bang();
                        }
                        
                        void select_06_nomatch_number_set(number ) {}
                        
                        void select_06_input_number_set(number v) {
                            if (v == this->select_06_test1)
                                this->select_06_match1_bang();
                            else
                                this->select_06_nomatch_number_set(v);
                        }
                        
                        void expr_10_out1_set(number v) {
                            this->expr_10_out1 = v;
                            this->select_06_input_number_set(this->expr_10_out1);
                        }
                        
                        void expr_10_in1_set(number in1) {
                            this->expr_10_in1 = in1;
                            this->expr_10_out1_set(this->expr_10_in1 >= this->expr_10_in2);//#map:livegrain/rand-placement/width/>=_obj-61:1
                        }
                        
                        void trigger_03_out3_set(number v) {
                            this->expr_10_in1_set(v);
                        }
                        
                        void message_05_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_03_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_03_onoff_set(converted);
                            }
                        }
                        
                        void message_05_trigger_bang() {
                            this->message_05_out_set(this->message_05_set);
                        }
                        
                        void select_05_match1_bang() {
                            this->message_05_trigger_bang();
                        }
                        
                        void select_05_nomatch_number_set(number ) {}
                        
                        void select_05_input_number_set(number v) {
                            if (v == this->select_05_test1)
                                this->select_05_match1_bang();
                            else
                                this->select_05_nomatch_number_set(v);
                        }
                        
                        void expr_07_out1_set(number v) {
                            this->expr_07_out1 = v;
                            this->select_05_input_number_set(this->expr_07_out1);
                        }
                        
                        void expr_07_in1_set(number in1) {
                            this->expr_07_in1 = in1;
                            this->expr_07_out1_set(this->expr_07_in1 <= this->expr_07_in2);//#map:livegrain/rand-placement/width/<=_obj-62:1
                        }
                        
                        void trigger_03_out2_set(number v) {
                            this->expr_07_in1_set(v);
                        }
                        
                        void trigger_03_out1_set(number v) {
                            this->gate_03_input_number_set(v);
                        }
                        
                        void trigger_03_input_list_set(const list& v) {
                            this->trigger_03_out3_set((v->length > 0 ? v[0] : 0));
                            this->trigger_03_out2_set((v->length > 0 ? v[0] : 0));
                            this->trigger_03_out1_set((v->length > 0 ? v[0] : 0));
                        }
                        
                        void eventinlet_08_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_11_value_set(converted);
                            }
                        
                            this->trigger_03_input_list_set(v);
                        }
                        
                        void numberobj_11_value_bang() {
                            number v = this->numberobj_11_value;
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("livegrain/rand-placement/width/number_obj-8"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_11_output_set(localvalue);
                        }
                        
                        void trigger_03_input_bang_bang() {
                            this->trigger_03_out3_set(0);
                            this->trigger_03_out2_set(0);
                            this->trigger_03_out1_set(0);
                        }
                        
                        void trigger_03_input_number_set(number v) {
                            this->trigger_03_out3_set(v);
                            this->trigger_03_out2_set(v);
                            this->trigger_03_out1_set(v);
                        }
                        
                        void message_05_set_set(const list& v) {
                            this->message_05_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-placement/width/message_obj-78"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_06_set_set(const list& v) {
                            this->message_06_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("livegrain/rand-placement/width/message_obj-80"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void expr_06_in3_bang() {}
                        
                        void expr_09_in2_bang() {}
                        
                        void expr_05_in2_bang() {}
                        
                        void expr_08_in3_bang() {}
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_09_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_09_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_09_value = localvalue;
                        }
                        
                        void numberobj_10_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_10_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_10_value = localvalue;
                        }
                        
                        void numberobj_11_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_11_value = localvalue;
                        }
                        
                        void numberobj_12_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_12_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_12_value = localvalue;
                        }
                        
                        void numberobj_09_init() {
                            this->numberobj_09_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-placement/width/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_09_value;
                        }
                        
                        void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_09_value_set(preset["value"]);
                        }
                        
                        void numberobj_10_init() {
                            this->numberobj_10_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-placement/width/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_10_value;
                        }
                        
                        void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_10_value_set(preset["value"]);
                        }
                        
                        void message_05_init() {
                            this->message_05_set_set({1});
                        }
                        
                        void numberobj_11_init() {
                            this->numberobj_11_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-placement/width/number_obj-8"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_11_value;
                        }
                        
                        void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_11_value_set(preset["value"]);
                        }
                        
                        void numberobj_12_init() {
                            this->numberobj_12_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("livegrain/rand-placement/width/number_obj-9"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_12_value;
                        }
                        
                        void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_12_value_set(preset["value"]);
                        }
                        
                        void message_06_init() {
                            this->message_06_set_set({2});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_09_value = 0;
                            numberobj_09_value_setter(numberobj_09_value);
                            expr_05_in1 = 0;
                            expr_05_in2 = 0;
                            expr_05_in3 = 1;
                            expr_05_out1 = 0;
                            numberobj_10_value = 0;
                            numberobj_10_value_setter(numberobj_10_value);
                            expr_06_in1 = 0;
                            expr_06_in2 = 0;
                            expr_06_in3 = 0.5;
                            expr_06_out1 = 0;
                            gate_03_onoff = 0;
                            gate_03_out1_number = 0;
                            gate_03_out2_number = 0;
                            select_05_test1 = 1;
                            expr_07_in1 = 0;
                            expr_07_in2 = 0.5;
                            expr_07_out1 = 0;
                            numberobj_11_value = 0;
                            numberobj_11_value_setter(numberobj_11_value);
                            expr_08_in1 = 0;
                            expr_08_in2 = 0;
                            expr_08_in3 = 1;
                            expr_08_out1 = 0;
                            numberobj_12_value = 0;
                            numberobj_12_value_setter(numberobj_12_value);
                            expr_09_in1 = 0;
                            expr_09_in2 = 0.5;
                            expr_09_in3 = 1;
                            expr_09_out1 = 0;
                            select_06_test1 = 1;
                            expr_10_in1 = 0;
                            expr_10_in2 = 0.51;
                            expr_10_out1 = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_09_currentFormat = 6;
                            numberobj_09_lastValue = 0;
                            numberobj_10_currentFormat = 6;
                            numberobj_10_lastValue = 0;
                            numberobj_11_currentFormat = 6;
                            numberobj_11_lastValue = 0;
                            numberobj_12_currentFormat = 6;
                            numberobj_12_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_09_value;
                            number expr_05_in1;
                            number expr_05_in2;
                            number expr_05_in3;
                            number expr_05_out1;
                            number numberobj_10_value;
                            number expr_06_in1;
                            number expr_06_in2;
                            number expr_06_in3;
                            number expr_06_out1;
                            number gate_03_onoff;
                            number gate_03_out1_number;
                            list gate_03_out1_list;
                            number gate_03_out2_number;
                            list gate_03_out2_list;
                            list message_05_set;
                            number select_05_test1;
                            number expr_07_in1;
                            number expr_07_in2;
                            number expr_07_out1;
                            number numberobj_11_value;
                            number expr_08_in1;
                            number expr_08_in2;
                            number expr_08_in3;
                            number expr_08_out1;
                            number numberobj_12_value;
                            number expr_09_in1;
                            number expr_09_in2;
                            number expr_09_in3;
                            number expr_09_out1;
                            list message_06_set;
                            number select_06_test1;
                            number expr_10_in1;
                            number expr_10_in2;
                            number expr_10_out1;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_09_currentFormat;
                            number numberobj_09_lastValue;
                            Int numberobj_10_currentFormat;
                            number numberobj_10_lastValue;
                            Int numberobj_11_currentFormat;
                            number numberobj_11_lastValue;
                            Int numberobj_12_currentFormat;
                            number numberobj_12_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_99()
            {
            }
            
            ~RNBOSubpatcher_99()
            {
                delete this->p_04;
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->linetilde_01_perform(this->signals[0], n);
                this->pan_tilde_01_perform(this->signals[0], in1, out1, out2, n);
                this->p_04_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
                this->p_04->setVoiceIndex(index);
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
                this->p_04->setNoteNumber(noteNumber);
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_04 = new RNBOSubpatcher_97();
                this->p_04->setEngineAndPatcher(this->getEngine(), this);
                this->p_04->initialize();
                this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "width"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        this->p_04->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_04->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_04->getNumParameters())
                            this->p_04->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_04)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_01_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-placement/message_obj-9") == objectId)
                        this->message_07_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-6") == objectId)
                        this->message_08_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-70") == objectId)
                        this->message_09_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-66") == objectId)
                        this->message_10_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("livegrain/rand-placement/number_obj-71") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("livegrain/rand-placement/number_obj-22") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("livegrain/rand-placement/number_obj-71") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("livegrain/rand-placement/number_obj-22") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_04->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-placement/message_obj-9") == objectId)
                        this->message_07_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-6") == objectId)
                        this->message_08_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-70") == objectId)
                        this->message_09_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-placement/message_obj-66") == objectId)
                        this->message_10_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_04->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-placement/message_obj-9") == objectId)
                        this->message_07_listin_bang_bang();
            
                    if (TAG("livegrain/rand-placement/message_obj-6") == objectId)
                        this->message_08_listin_bang_bang();
            
                    if (TAG("livegrain/rand-placement/message_obj-70") == objectId)
                        this->message_09_listin_bang_bang();
            
                    if (TAG("livegrain/rand-placement/message_obj-66") == objectId)
                        this->message_10_listin_bang_bang();
            
                    break;
                    }
                }
            
                this->p_04->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-placement/message_obj-9"):
                    {
                    return "livegrain/rand-placement/message_obj-9";
                    }
                case TAG("livegrain/rand-placement/message_obj-6"):
                    {
                    return "livegrain/rand-placement/message_obj-6";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("livegrain/rand-placement/number_obj-71"):
                    {
                    return "livegrain/rand-placement/number_obj-71";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("livegrain/rand-placement/message_obj-70"):
                    {
                    return "livegrain/rand-placement/message_obj-70";
                    }
                case TAG("livegrain/rand-placement/message_obj-66"):
                    {
                    return "livegrain/rand-placement/message_obj-66";
                    }
                case TAG("livegrain/rand-placement/number_obj-22"):
                    {
                    return "livegrain/rand-placement/number_obj-22";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_04->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_04->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_07_listin_list_set(const list& v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_number_set(number v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_bang_bang() {
                this->message_07_trigger_bang();
            }
            
            void message_08_listin_list_set(const list& v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_number_set(number v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_bang_bang() {
                this->message_08_trigger_bang();
            }
            
            void eventinlet_13_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_04_trigger_bang();
            }
            
            void eventinlet_13_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_04_trigger_bang();
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_09_listin_list_set(const list& v) {
                this->message_09_set_set(v);
            }
            
            void message_09_listin_number_set(number v) {
                this->message_09_set_set(v);
            }
            
            void message_09_listin_bang_bang() {
                this->message_09_trigger_bang();
            }
            
            void message_10_listin_list_set(const list& v) {
                this->message_10_set_set(v);
            }
            
            void message_10_listin_number_set(number v) {
                this->message_10_set_set(v);
            }
            
            void message_10_listin_bang_bang() {
                this->message_10_trigger_bang();
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_01_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->random_04_nz_init();
                this->message_07_init();
                this->message_08_init();
                this->numberobj_13_init();
                this->message_09_init();
                this->message_10_init();
                this->numberobj_14_init();
                this->p_04->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_04->startup();
            }
            
            void allocateDataRefs() {
                this->p_04->allocateDataRefs();
            }
            
            void scale_17_outhigh_set(number v) {
                this->scale_17_outhigh = v;
            }
            
            void scale_16_outlow_set(number v) {
                this->scale_16_outlow = v;
            }
            
            void p_04_in4_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_11_out1_list_set(v);
            }
            
            void scale_18_out_set(const list& v) {
                this->scale_18_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_17_outhigh_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_16_outlow_set(converted);
                }
            
                this->p_04_in4_list_set(v);
            }
            
            void scale_18_input_set(const list& v) {
                this->scale_18_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_18_inlow,
                        this->scale_18_inhigh,
                        this->scale_18_outlow,
                        this->scale_18_outhigh,
                        this->scale_18_power
                    ));
                }
            
                this->scale_18_out_set(tmp);
            }
            
            void receive_02_output_number_set(number v) {
                this->receive_02_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_18_input_set(converted);
                }
            }
            
            void scale_17_outlow_set(number v) {
                this->scale_17_outlow = v;
            }
            
            void scale_16_outhigh_set(number v) {
                this->scale_16_outhigh = v;
            }
            
            void p_04_in5_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_12_out1_list_set(v);
            }
            
            void scale_19_out_set(const list& v) {
                this->scale_19_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_17_outlow_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_16_outhigh_set(converted);
                }
            
                this->p_04_in5_list_set(v);
            }
            
            void scale_19_input_set(const list& v) {
                this->scale_19_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_19_inlow,
                        this->scale_19_inhigh,
                        this->scale_19_outlow,
                        this->scale_19_outhigh,
                        this->scale_19_power
                    ));
                }
            
                this->scale_19_out_set(tmp);
            }
            
            void receive_03_output_number_set(number v) {
                this->receive_03_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_19_input_set(converted);
                }
            }
            
            void p_04_in3_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_10_out1_list_set(v);
            }
            
            void scale_21_out_set(const list& v) {
                this->scale_21_out = jsCreateListCopy(v);
                this->p_04_in3_list_set(v);
            }
            
            void scale_21_input_set(const list& v) {
                this->scale_21_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_21_inlow,
                        this->scale_21_inhigh,
                        this->scale_21_outlow,
                        this->scale_21_outhigh,
                        this->scale_21_power
                    ));
                }
            
                this->scale_21_out_set(tmp);
            }
            
            void p_04_in2_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_09_out1_list_set(v);
            }
            
            void scale_20_out_set(const list& v) {
                this->scale_20_out = jsCreateListCopy(v);
                this->p_04_in2_list_set(v);
            }
            
            void scale_20_input_set(const list& v) {
                this->scale_20_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_20_inlow,
                        this->scale_20_inhigh,
                        this->scale_20_outlow,
                        this->scale_20_outhigh,
                        this->scale_20_power
                    ));
                }
            
                this->scale_20_out_set(tmp);
            }
            
            void receive_04_output_number_set(number v) {
                this->receive_04_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_21_input_set(converted);
                }
            
                {
                    list converted = {v};
                    this->scale_20_input_set(converted);
                }
            }
            
            void gate_05_onoff_set(number v) {
                this->gate_05_onoff = v;
            }
            
            void scale_17_power_set(number v) {
                this->scale_17_power = v;
            }
            
            void numberobj_13_output_set(number v) {
                this->scale_17_power_set(v);
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-placement/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void scale_22_out_set(const list& v) {
                this->scale_22_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_13_value_set(converted);
                }
            }
            
            void scale_22_input_set(const list& v) {
                this->scale_22_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_22_inlow,
                        this->scale_22_inhigh,
                        this->scale_22_outlow,
                        this->scale_22_outhigh,
                        this->scale_22_power
                    ));
                }
            
                this->scale_22_out_set(tmp);
            }
            
            void gate_05_out1_number_set(number v) {
                this->gate_05_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_22_input_set(converted);
                }
            }
            
            void scale_16_power_set(number v) {
                this->scale_16_power = v;
            }
            
            void numberobj_14_output_set(number v) {
                this->scale_16_power_set(v);
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-placement/number_obj-22"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void scale_23_out_set(const list& v) {
                this->scale_23_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_14_value_set(converted);
                }
            }
            
            void scale_23_input_set(const list& v) {
                this->scale_23_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_23_inlow,
                        this->scale_23_inhigh,
                        this->scale_23_outlow,
                        this->scale_23_outhigh,
                        this->scale_23_power
                    ));
                }
            
                this->scale_23_out_set(tmp);
            }
            
            void gate_05_out2_number_set(number v) {
                this->gate_05_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_23_input_set(converted);
                }
            }
            
            void gate_05_input_number_set(number v) {
                if (this->gate_05_onoff == 1)
                    this->gate_05_out1_number_set(v);
                else if (this->gate_05_onoff == 2)
                    this->gate_05_out2_number_set(v);
            }
            
            void message_10_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_05_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_05_onoff_set(converted);
                }
            }
            
            void message_10_trigger_bang() {
                this->message_10_out_set(this->message_10_set);
            }
            
            void gate_04_onoff_set(number v) {
                this->gate_04_onoff = v;
            }
            
            void linetilde_01_time_set(number v) {
                this->linetilde_01_time = v;
            }
            
            void linetilde_01_segments_set(const list& v) {
                this->linetilde_01_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_01_time == 0) {
                        this->linetilde_01_activeRamps->length = 0;
                        this->linetilde_01_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_01_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_01_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_01_activeRamps->push(lastRampValue);
                            this->linetilde_01_activeRamps->push(0);
                            this->linetilde_01_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_01_keepramp)) {
                                    this->linetilde_01_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_01_activeRamps->push(destinationValue);
                            this->linetilde_01_activeRamps->push(inc);
                            this->linetilde_01_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void p_04_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_01_segments_set(converted);
                }
            }
            
            void p_04_in1_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_08_out1_list_set(v);
            }
            
            void scale_17_out_set(const list& v) {
                this->scale_17_out = jsCreateListCopy(v);
                this->p_04_in1_list_set(v);
            }
            
            void scale_17_input_set(const list& v) {
                this->scale_17_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_17_inlow,
                        this->scale_17_inhigh,
                        this->scale_17_outlow,
                        this->scale_17_outhigh,
                        this->scale_17_power
                    ));
                }
            
                this->scale_17_out_set(tmp);
            }
            
            void gate_04_out1_number_set(number v) {
                this->gate_04_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_17_input_set(converted);
                }
            }
            
            void scale_16_out_set(const list& v) {
                this->scale_16_out = jsCreateListCopy(v);
                this->p_04_in1_list_set(v);
            }
            
            void scale_16_input_set(const list& v) {
                this->scale_16_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_16_inlow,
                        this->scale_16_inhigh,
                        this->scale_16_outlow,
                        this->scale_16_outhigh,
                        this->scale_16_power
                    ));
                }
            
                this->scale_16_out_set(tmp);
            }
            
            void gate_04_out2_number_set(number v) {
                this->gate_04_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_16_input_set(converted);
                }
            }
            
            void gate_04_input_number_set(number v) {
                if (this->gate_04_onoff == 1)
                    this->gate_04_out1_number_set(v);
                else if (this->gate_04_onoff == 2)
                    this->gate_04_out2_number_set(v);
            }
            
            void message_08_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_04_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_04_onoff_set(converted);
                }
            }
            
            void message_08_trigger_bang() {
                this->message_08_out_set(this->message_08_set);
            }
            
            void select_08_match1_bang() {
                this->message_10_trigger_bang();
                this->message_08_trigger_bang();
            }
            
            void select_08_nomatch_number_set(number ) {}
            
            void select_08_input_number_set(number v) {
                if (v == this->select_08_test1)
                    this->select_08_match1_bang();
                else
                    this->select_08_nomatch_number_set(v);
            }
            
            void expr_12_out1_set(number v) {
                this->expr_12_out1 = v;
                this->select_08_input_number_set(this->expr_12_out1);
            }
            
            void expr_12_in1_set(number in1) {
                this->expr_12_in1 = in1;
                this->expr_12_out1_set(this->expr_12_in1 >= this->expr_12_in2);//#map:livegrain/rand-placement/>=_obj-80:1
            }
            
            void message_09_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_05_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_05_onoff_set(converted);
                }
            }
            
            void message_09_trigger_bang() {
                this->message_09_out_set(this->message_09_set);
            }
            
            void message_07_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_04_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_04_onoff_set(converted);
                }
            }
            
            void message_07_trigger_bang() {
                this->message_07_out_set(this->message_07_set);
            }
            
            void select_07_match1_bang() {
                this->message_09_trigger_bang();
                this->message_07_trigger_bang();
            }
            
            void select_07_nomatch_number_set(number ) {}
            
            void select_07_input_number_set(number v) {
                if (v == this->select_07_test1)
                    this->select_07_match1_bang();
                else
                    this->select_07_nomatch_number_set(v);
            }
            
            void expr_11_out1_set(number v) {
                this->expr_11_out1 = v;
                this->select_07_input_number_set(this->expr_11_out1);
            }
            
            void expr_11_in1_set(number in1) {
                this->expr_11_in1 = in1;
                this->expr_11_out1_set(this->expr_11_in1 <= this->expr_11_in2);//#map:livegrain/rand-placement/<=_obj-2:1
            }
            
            void trigger_04_out2_set(number v) {
                this->expr_12_in1_set(v);
                this->expr_11_in1_set(v);
            }
            
            void trigger_04_out1_set(number v) {
                this->gate_05_input_number_set(v);
            }
            
            void trigger_04_input_number_set(number v) {
                this->trigger_04_out2_set(trunc(v));
                this->trigger_04_out1_set(trunc(v));
            }
            
            void receive_05_output_number_set(number v) {
                this->receive_05_output_number = v;
                this->trigger_04_input_number_set(v);
            }
            
            void random_04_result_set(number v) {
                this->gate_04_input_number_set(v);
            }
            
            void random_04_trigger_bang() {
                {
                    this->random_04_result_set(this->random(0, this->random_04_limit));
                }
            }
            
            void eventinlet_13_out1_bang_bang() {
                this->random_04_trigger_bang();
            }
            
            void message_07_set_set(const list& v) {
                this->message_07_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-placement/message_obj-9"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_08_set_set(const list& v) {
                this->message_08_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-placement/message_obj-6"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_09_set_set(const list& v) {
                this->message_09_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-placement/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_10_set_set(const list& v) {
                this->message_10_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-placement/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void linetilde_01_perform(SampleValue * out, Index n) {
                auto __linetilde_01_time = this->linetilde_01_time;
                auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
                auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_01_activeRamps->length)) {
                    while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_01_activeRamps[0];
                        number inc = this->linetilde_01_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_01_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_01_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                                    __linetilde_01_time = 0;
                                }
                            }
                        }
            
                        __linetilde_01_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_01_currentValue;
                    i++;
                }
            
                this->linetilde_01_currentValue = __linetilde_01_currentValue;
                this->linetilde_01_time = __linetilde_01_time;
            }
            
            void pan_tilde_01_perform(
                const Sample * pos,
                const SampleValue * in0,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out2[(Index)i] = this->pan_tilde_01_func_next(pos[(Index)i], 1) * in0[(Index)i];
                    out1[(Index)i] = this->pan_tilde_01_func_next(pos[(Index)i], 0) * in0[(Index)i];
                }
            }
            
            void p_04_perform(Index n) {
                // subpatcher: width
                this->p_04->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_04_limit_setter(number v) {
                if (v >= 0)
                    this->random_04_limit = v;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            number pan_tilde_01_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            {
                                {
                                    if (pos <= -1 || pos >= 2)
                                        return 0;
                                }
                            }
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                {
                                    return this->safesqrt(1.0 - rnbo_abs(pos));
                                }
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void pan_tilde_01_func_reset() {}
            
            void random_04_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_04_nz_state
                );
            }
            
            void random_04_nz_init() {
                this->random_04_nz_reset();
            }
            
            void random_04_nz_seed(number v) {
                xoshiro_reset(v, this->random_04_nz_state);
            }
            
            number random_04_nz_next() {
                return xoshiro_next(this->random_04_nz_state);
            }
            
            void message_07_init() {
                this->message_07_set_set({1});
            }
            
            void message_08_init() {
                this->message_08_set_set({2});
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-placement/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            void message_09_init() {
                this->message_09_set_set({1});
            }
            
            void message_10_init() {
                this->message_10_set_set({2});
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-placement/number_obj-22"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                pan_tilde_01_spread = 0.5;
                pan_tilde_01_pos = 0;
                gate_04_onoff = 0;
                gate_04_out1_number = 0;
                gate_04_out2_number = 0;
                linetilde_01_time = 0;
                linetilde_01_keepramp = 0;
                p_04_target = 0;
                scale_16_inlow = 0;
                scale_16_inhigh = 200;
                scale_16_outlow = 0;
                scale_16_outhigh = 1;
                scale_16_power = 1;
                random_04_limit = 201;
                random_04_limit_setter(random_04_limit);
                random_04_seed = 0;
                scale_17_inlow = 200;
                scale_17_inhigh = 0;
                scale_17_outlow = 1;
                scale_17_outhigh = 0;
                scale_17_power = 1;
                scale_18_inlow = -100;
                scale_18_inhigh = 100;
                scale_18_outlow = 0;
                scale_18_outhigh = 1;
                scale_18_power = 1;
                receive_02_output_number = 0;
                scale_19_inlow = -100;
                scale_19_inhigh = 100;
                scale_19_outlow = 0;
                scale_19_outhigh = 1;
                scale_19_power = 1;
                receive_03_output_number = 0;
                scale_20_inlow = 0;
                scale_20_inhigh = 100;
                scale_20_outlow = 0.5;
                scale_20_outhigh = 0;
                scale_20_power = 1;
                receive_04_output_number = 0;
                scale_21_inlow = 0;
                scale_21_inhigh = 100;
                scale_21_outlow = 0.5;
                scale_21_outhigh = 1;
                scale_21_power = 1;
                scale_22_inlow = -100;
                scale_22_inhigh = 0;
                scale_22_outlow = 0.1;
                scale_22_outhigh = 1;
                scale_22_power = 1;
                gate_05_onoff = 0;
                gate_05_out1_number = 0;
                gate_05_out2_number = 0;
                receive_05_output_number = 0;
                select_07_test1 = 1;
                expr_11_in1 = 0;
                expr_11_in2 = 0;
                expr_11_out1 = 0;
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                select_08_test1 = 1;
                expr_12_in1 = 0;
                expr_12_in2 = 1;
                expr_12_out1 = 0;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                scale_23_inlow = 1;
                scale_23_inhigh = 100;
                scale_23_outlow = 1;
                scale_23_outhigh = 0.1;
                scale_23_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_01_currentValue = 0;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number pan_tilde_01_spread;
                number pan_tilde_01_pos;
                number gate_04_onoff;
                number gate_04_out1_number;
                list gate_04_out1_list;
                number gate_04_out2_number;
                list gate_04_out2_list;
                list linetilde_01_segments;
                number linetilde_01_time;
                number linetilde_01_keepramp;
                number p_04_target;
                list scale_16_input;
                number scale_16_inlow;
                number scale_16_inhigh;
                number scale_16_outlow;
                number scale_16_outhigh;
                number scale_16_power;
                list scale_16_out;
                number random_04_limit;
                number random_04_seed;
                list message_07_set;
                list message_08_set;
                list scale_17_input;
                number scale_17_inlow;
                number scale_17_inhigh;
                number scale_17_outlow;
                number scale_17_outhigh;
                number scale_17_power;
                list scale_17_out;
                list scale_18_input;
                number scale_18_inlow;
                number scale_18_inhigh;
                number scale_18_outlow;
                number scale_18_outhigh;
                number scale_18_power;
                list scale_18_out;
                number receive_02_output_number;
                list receive_02_output_list;
                list scale_19_input;
                number scale_19_inlow;
                number scale_19_inhigh;
                number scale_19_outlow;
                number scale_19_outhigh;
                number scale_19_power;
                list scale_19_out;
                number receive_03_output_number;
                list receive_03_output_list;
                list scale_20_input;
                number scale_20_inlow;
                number scale_20_inhigh;
                number scale_20_outlow;
                number scale_20_outhigh;
                number scale_20_power;
                list scale_20_out;
                number receive_04_output_number;
                list receive_04_output_list;
                list scale_21_input;
                number scale_21_inlow;
                number scale_21_inhigh;
                number scale_21_outlow;
                number scale_21_outhigh;
                number scale_21_power;
                list scale_21_out;
                list scale_22_input;
                number scale_22_inlow;
                number scale_22_inhigh;
                number scale_22_outlow;
                number scale_22_outhigh;
                number scale_22_power;
                list scale_22_out;
                number gate_05_onoff;
                number gate_05_out1_number;
                list gate_05_out1_list;
                number gate_05_out2_number;
                list gate_05_out2_list;
                number receive_05_output_number;
                list receive_05_output_list;
                number select_07_test1;
                number expr_11_in1;
                number expr_11_in2;
                number expr_11_out1;
                number numberobj_13_value;
                number select_08_test1;
                list message_09_set;
                number expr_12_in1;
                number expr_12_in2;
                number expr_12_out1;
                list message_10_set;
                number numberobj_14_value;
                list scale_23_input;
                number scale_23_inlow;
                number scale_23_inhigh;
                number scale_23_outlow;
                number scale_23_outhigh;
                number scale_23_power;
                list scale_23_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_01_activeRamps;
                number linetilde_01_currentValue;
                UInt random_04_nz_state[4] = { };
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_97* p_04;
            
    };
    
    class RNBOSubpatcher_100 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_100()
            {
            }
            
            ~RNBOSubpatcher_100()
            {
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->linetilde_02_perform(out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_02_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-envelope/message_obj-11") == objectId)
                        this->message_11_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-envelope/message_obj-11") == objectId)
                        this->message_11_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("livegrain/rand-envelope/button_obj-50") == objectId)
                        this->button_01_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-envelope/message_obj-11") == objectId)
                        this->message_11_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("livegrain/rand-envelope/button_obj-50"):
                    {
                    return "livegrain/rand-envelope/button_obj-50";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-envelope/message_obj-11"):
                    {
                    return "livegrain/rand-envelope/message_obj-11";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_14_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->message_11_trigger_bang();
            }
            
            void eventinlet_14_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->message_11_trigger_bang();
            }
            
            void button_01_bangin_bang() {
                this->button_01_bangval_bang();
            }
            
            void message_11_listin_list_set(const list& v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_number_set(number v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_bang_bang() {
                this->message_11_trigger_bang();
            }
            
            void eventinlet_15_out1_bang_bang() {
                this->expr_14_in2_bang();
                this->expr_13_in1_bang();
            }
            
            void eventinlet_15_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_14_in2_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_13_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_13_in1_set(converted);
                }
            }
            
            void linetilde_02_target_bang() {
                this->eventoutlet_05_in1_bang_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_11_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_14_in2_set(number v) {
                this->expr_14_in2 = v;
            }
            
            void message_11_set_set(const list& v) {
                this->message_11_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-envelope/message_obj-11"),
                    v,
                    this->_currentTime
                );
            }
            
            void pak_01_out_set(const list& v) {
                this->message_11_set_set(v);
            }
            
            void pak_01_in6_set(number v) {
                this->pak_01_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_01_in1;
                array[1] = this->pak_01_in2;
                array[2] = this->pak_01_in3;
                array[3] = this->pak_01_in4;
                array[4] = this->pak_01_in5;
                array[5] = this->pak_01_in6;
                array[6] = this->pak_01_in7;
                array[7] = this->pak_01_in8;
                this->pak_01_out_set(array);
            }
            
            void expr_14_out1_set(number v) {
                this->expr_14_out1 = v;
                this->pak_01_in6_set(this->expr_14_out1);
            }
            
            void expr_14_in1_set(number in1) {
                this->expr_14_in1 = in1;
                this->expr_14_out1_set(rnbo_abs(this->expr_14_in1 - this->expr_14_in2));//#map:livegrain/rand-envelope/absdiff_obj-40:1
            }
            
            void expr_15_out1_set(number v) {
                this->expr_15_out1 = v;
                this->expr_14_in1_set(this->expr_15_out1);
            }
            
            void expr_15_in1_set(number in1) {
                this->expr_15_in1 = in1;
                this->expr_15_out1_set(this->expr_15_in1 * this->expr_15_in2);//#map:livegrain/rand-envelope/*_obj-2:1
            }
            
            void pak_01_in8_set(number v) {
                this->pak_01_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_01_in1;
                array[1] = this->pak_01_in2;
                array[2] = this->pak_01_in3;
                array[3] = this->pak_01_in4;
                array[4] = this->pak_01_in5;
                array[5] = this->pak_01_in6;
                array[6] = this->pak_01_in7;
                array[7] = this->pak_01_in8;
                this->pak_01_out_set(array);
            }
            
            void pak_01_in4_set(number v) {
                this->pak_01_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_01_in1;
                array[1] = this->pak_01_in2;
                array[2] = this->pak_01_in3;
                array[3] = this->pak_01_in4;
                array[4] = this->pak_01_in5;
                array[5] = this->pak_01_in6;
                array[6] = this->pak_01_in7;
                array[7] = this->pak_01_in8;
                this->pak_01_out_set(array);
            }
            
            void expr_13_out1_set(number v) {
                this->expr_13_out1 = v;
                this->expr_15_in1_set(this->expr_13_out1);
                this->pak_01_in8_set(this->expr_13_out1);
                this->pak_01_in4_set(this->expr_13_out1);
            }
            
            void expr_13_in1_set(number in1) {
                this->expr_13_in1 = in1;
            
                this->expr_13_out1_set(
                    (this->expr_13_in2 == 0 ? 0 : (this->expr_13_in2 == 0. ? 0. : this->expr_13_in1 / this->expr_13_in2))
                );//#map:livegrain/rand-envelope//_obj-21:1
            }
            
            void eventinlet_15_out1_number_set(number v) {
                this->expr_14_in2_set(v);
                this->expr_13_in1_set(v);
            }
            
            void expr_13_in2_set(number v) {
                this->expr_13_in2 = v;
            }
            
            void scale_24_out_set(const list& v) {
                this->scale_24_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_13_in2_set(converted);
                }
            }
            
            void scale_24_input_set(const list& v) {
                this->scale_24_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_24_inlow,
                        this->scale_24_inhigh,
                        this->scale_24_outlow,
                        this->scale_24_outhigh,
                        this->scale_24_power
                    ));
                }
            
                this->scale_24_out_set(tmp);
            }
            
            void receive_06_output_number_set(number v) {
                this->receive_06_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_24_input_set(converted);
                }
            }
            
            void linetilde_02_time_set(number v) {
                this->linetilde_02_time = v;
            }
            
            void linetilde_02_segments_set(const list& v) {
                this->linetilde_02_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_02_time == 0) {
                        this->linetilde_02_activeRamps->length = 0;
                        this->linetilde_02_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_02_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_02_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_02_activeRamps->push(lastRampValue);
                            this->linetilde_02_activeRamps->push(0);
                            this->linetilde_02_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_02_keepramp)) {
                                    this->linetilde_02_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_02_activeRamps->push(destinationValue);
                            this->linetilde_02_activeRamps->push(inc);
                            this->linetilde_02_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void message_11_out_set(const list& v) {
                this->linetilde_02_segments_set(v);
            }
            
            void message_11_trigger_bang() {
                this->message_11_out_set(this->message_11_set);
            }
            
            void eventinlet_14_out1_bang_bang() {
                this->message_11_trigger_bang();
            }
            
            void button_01_output_bang() {
                this->message_11_trigger_bang();
            }
            
            void button_01_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("livegrain/rand-envelope/button_obj-50"),
                    this->_currentTime
                );;
            
                this->button_01_output_bang();
            }
            
            void expr_14_in2_bang() {}
            
            void expr_13_in1_bang() {
                this->expr_13_out1_set(
                    (this->expr_13_in2 == 0 ? 0 : (this->expr_13_in2 == 0. ? 0. : this->expr_13_in1 / this->expr_13_in2))
                );//#map:livegrain/rand-envelope//_obj-21:1
            }
            
            void eventoutlet_05_in1_bang_bang() {
                ;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out2_bang_bang();
            }
            
            void linetilde_02_perform(SampleValue * out, Index n) {
                auto __linetilde_02_time = this->linetilde_02_time;
                auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
                auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_02_activeRamps->length)) {
                    while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_02_activeRamps[0];
                        number inc = this->linetilde_02_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_02_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_02_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                                    __linetilde_02_time = 0;
                                }
                            }
                        }
            
                        __linetilde_02_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_02_currentValue;
                    i++;
                }
            
                this->linetilde_02_currentValue = __linetilde_02_currentValue;
                this->linetilde_02_time = __linetilde_02_time;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void message_11_init() {
                this->message_11_set_set({0, 0, 1, 14.914208, 1, 104.4, 0, 14.914208});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                linetilde_02_time = 0;
                linetilde_02_keepramp = 0;
                expr_13_in1 = 0;
                expr_13_in2 = 10;
                expr_13_out1 = 0;
                pak_01_in1 = 0;
                pak_01_in2 = 0;
                pak_01_in3 = 1;
                pak_01_in4 = 0;
                pak_01_in5 = 1;
                pak_01_in6 = 0;
                pak_01_in7 = 0;
                pak_01_in8 = 0;
                expr_14_in1 = 0;
                expr_14_in2 = 0;
                expr_14_out1 = 0;
                expr_15_in1 = 0;
                expr_15_in2 = 2;
                expr_15_out1 = 0;
                scale_24_inlow = -100;
                scale_24_inhigh = 100;
                scale_24_outlow = 16;
                scale_24_outhigh = 2;
                scale_24_power = 1;
                receive_06_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_02_currentValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list linetilde_02_segments;
                number linetilde_02_time;
                number linetilde_02_keepramp;
                list message_11_set;
                number expr_13_in1;
                number expr_13_in2;
                number expr_13_out1;
                number pak_01_in1;
                number pak_01_in2;
                number pak_01_in3;
                number pak_01_in4;
                number pak_01_in5;
                number pak_01_in6;
                number pak_01_in7;
                number pak_01_in8;
                number expr_14_in1;
                number expr_14_in2;
                number expr_14_out1;
                number expr_15_in1;
                number expr_15_in2;
                number expr_15_out1;
                list scale_24_input;
                number scale_24_inlow;
                number scale_24_inhigh;
                number scale_24_outlow;
                number scale_24_outhigh;
                number scale_24_power;
                list scale_24_out;
                number receive_06_output_number;
                list receive_06_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_02_activeRamps;
                number linetilde_02_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_101 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_101()
            {
            }
            
            ~RNBOSubpatcher_101()
            {
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-67") == objectId)
                        this->message_12_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-89") == objectId)
                        this->message_13_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-91") == objectId)
                        this->message_14_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_15_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_16_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_17_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_18_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-76") == objectId)
                        this->numberobj_15_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-25") == objectId)
                        this->numberobj_16_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-14") == objectId)
                        this->numberobj_17_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-16") == objectId)
                        this->numberobj_18_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-85") == objectId)
                        this->numberobj_19_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-44") == objectId)
                        this->numberobj_20_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-43") == objectId)
                        this->numberobj_21_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-97") == objectId)
                        this->numberobj_22_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-78") == objectId)
                        this->numberobj_23_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-41") == objectId)
                        this->numberobj_24_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-18") == objectId)
                        this->numberobj_25_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-71") == objectId)
                        this->numberobj_26_valin_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-33") == objectId)
                        this->numberobj_27_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-76") == objectId)
                        this->numberobj_15_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-25") == objectId)
                        this->numberobj_16_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-14") == objectId)
                        this->numberobj_17_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-16") == objectId)
                        this->numberobj_18_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-85") == objectId)
                        this->numberobj_19_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-44") == objectId)
                        this->numberobj_20_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-43") == objectId)
                        this->numberobj_21_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-97") == objectId)
                        this->numberobj_22_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-78") == objectId)
                        this->numberobj_23_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-41") == objectId)
                        this->numberobj_24_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-18") == objectId)
                        this->numberobj_25_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-71") == objectId)
                        this->numberobj_26_format_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/number_obj-33") == objectId)
                        this->numberobj_27_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-67") == objectId)
                        this->message_12_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-89") == objectId)
                        this->message_13_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-91") == objectId)
                        this->message_14_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_15_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_16_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_17_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_18_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-67") == objectId)
                        this->message_12_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-89") == objectId)
                        this->message_13_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-91") == objectId)
                        this->message_14_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_15_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_16_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_17_listin_bang_bang();
            
                    if (TAG("livegrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_18_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("livegrain/rand-lengthanddelay/button_obj-63") == objectId)
                        this->button_02_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-67"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-67";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("livegrain/rand-lengthanddelay/button_obj-63"):
                    {
                    return "livegrain/rand-lengthanddelay/button_obj-63";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-76"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-76";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-25"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-25";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-14"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-14";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-16"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-16";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-85"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-85";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-44"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-44";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-43"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-43";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-89"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-89";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-91"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-91";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-97"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-97";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-78"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-78";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-48"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-48";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-50"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-50";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-41"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-41";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-18"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-18";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-71"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-71";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-70"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-70";
                    }
                case TAG("livegrain/rand-lengthanddelay/message_obj-66"):
                    {
                    return "livegrain/rand-lengthanddelay/message_obj-66";
                    }
                case TAG("livegrain/rand-lengthanddelay/number_obj-33"):
                    {
                    return "livegrain/rand-lengthanddelay/number_obj-33";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_12_listin_list_set(const list& v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_number_set(number v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_bang_bang() {
                this->message_12_trigger_bang();
            }
            
            void eventinlet_16_out1_number_set(number v) {
                this->trigger_05_input_number_set(v);
            }
            
            void eventinlet_16_out1_list_set(const list& v) {
                this->trigger_05_input_list_set(v);
            }
            
            void button_02_bangin_bang() {
                this->button_02_bangval_bang();
            }
            
            void numberobj_15_valin_set(number v) {
                this->numberobj_15_value_set(v);
            }
            
            void numberobj_15_format_set(number v) {
                this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_16_valin_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_format_set(number v) {
                this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_17_valin_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void numberobj_17_format_set(number v) {
                this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_18_valin_set(number v) {
                this->numberobj_18_value_set(v);
            }
            
            void numberobj_18_format_set(number v) {
                this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_19_valin_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void numberobj_19_format_set(number v) {
                this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_20_valin_set(number v) {
                this->numberobj_20_value_set(v);
            }
            
            void numberobj_20_format_set(number v) {
                this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_21_valin_set(number v) {
                this->numberobj_21_value_set(v);
            }
            
            void numberobj_21_format_set(number v) {
                this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_13_listin_list_set(const list& v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_number_set(number v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_bang_bang() {
                this->message_13_trigger_bang();
            }
            
            void message_14_listin_list_set(const list& v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_number_set(number v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_bang_bang() {
                this->message_14_trigger_bang();
            }
            
            void numberobj_22_valin_set(number v) {
                this->numberobj_22_value_set(v);
            }
            
            void numberobj_22_format_set(number v) {
                this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_23_valin_set(number v) {
                this->numberobj_23_value_set(v);
            }
            
            void numberobj_23_format_set(number v) {
                this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_15_listin_list_set(const list& v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_number_set(number v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_bang_bang() {
                this->message_15_trigger_bang();
            }
            
            void message_16_listin_list_set(const list& v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_number_set(number v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_bang_bang() {
                this->message_16_trigger_bang();
            }
            
            void numberobj_24_valin_set(number v) {
                this->numberobj_24_value_set(v);
            }
            
            void numberobj_24_format_set(number v) {
                this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_25_valin_set(number v) {
                this->numberobj_25_value_set(v);
            }
            
            void numberobj_25_format_set(number v) {
                this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_26_valin_set(number v) {
                this->numberobj_26_value_set(v);
            }
            
            void numberobj_26_format_set(number v) {
                this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_17_listin_list_set(const list& v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_number_set(number v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_bang_bang() {
                this->message_17_trigger_bang();
            }
            
            void message_18_listin_list_set(const list& v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_number_set(number v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_bang_bang() {
                this->message_18_trigger_bang();
            }
            
            void numberobj_27_valin_set(number v) {
                this->numberobj_27_value_set(v);
            }
            
            void numberobj_27_format_set(number v) {
                this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_17_out1_bang_bang() {
                this->expr_28_in1_bang();
                this->expr_24_in1_bang();
                this->expr_22_in2_bang();
            }
            
            void eventinlet_17_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_28_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_28_in1_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->expr_24_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_24_in1_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_22_in2_set(converted);
                }
            }
            
            void eventinlet_18_out1_bang_bang() {
                this->gate_09_onoff_bang();
                this->gate_06_onoff_bang();
            }
            
            void eventinlet_18_out1_number_set(number v) {
                this->gate_09_onoff_set(v);
                this->gate_06_onoff_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_12_init();
                this->numberobj_15_init();
                this->random_05_nz_init();
                this->random_06_nz_init();
                this->numberobj_16_init();
                this->numberobj_17_init();
                this->numberobj_18_init();
                this->numberobj_19_init();
                this->numberobj_20_init();
                this->numberobj_21_init();
                this->message_13_init();
                this->message_14_init();
                this->numberobj_22_init();
                this->numberobj_23_init();
                this->message_15_init();
                this->message_16_init();
                this->numberobj_24_init();
                this->numberobj_25_init();
                this->numberobj_26_init();
                this->message_17_init();
                this->message_18_init();
                this->numberobj_27_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_23_in2_set(number v) {
                this->expr_23_in2 = v;
            }
            
            void scale_28_outhigh_set(number v) {
                this->scale_28_outhigh = v;
            }
            
            void scale_28_inhigh_set(number v) {
                this->scale_28_inhigh = v;
            }
            
            void scale_27_outlow_set(number v) {
                this->scale_27_outlow = v;
            }
            
            void scale_27_inlow_set(number v) {
                this->scale_27_inlow = v;
            }
            
            void expr_19_in2_set(number v) {
                this->expr_19_in2 = v;
            }
            
            void numberobj_20_output_set(number v) {
                this->expr_23_in2_set(v);
                this->scale_28_outhigh_set(v);
                this->scale_28_inhigh_set(v);
                this->scale_27_outlow_set(v);
                this->scale_27_inlow_set(v);
                this->expr_19_in2_set(v);
            }
            
            void numberobj_20_value_set(number v) {
                this->numberobj_20_value_setter(v);
                v = this->numberobj_20_value;
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_20_output_set(localvalue);
            }
            
            void receive_10_output_number_set(number v) {
                this->receive_10_output_number = v;
                this->numberobj_20_value_set(v);
            }
            
            void random_06_limit_set(number v) {
                this->random_06_limit_setter(v);
                v = this->random_06_limit;
            }
            
            void expr_23_out1_set(number v) {
                this->expr_23_out1 = v;
                this->random_06_limit_set(this->expr_23_out1);
            }
            
            void expr_23_in1_set(number in1) {
                this->expr_23_in1 = in1;
                this->expr_23_out1_set(this->expr_23_in1 - this->expr_23_in2);//#map:livegrain/rand-lengthanddelay/-_obj-39:1
            }
            
            void scale_28_outlow_set(number v) {
                this->scale_28_outlow = v;
            }
            
            void scale_28_inlow_set(number v) {
                this->scale_28_inlow = v;
            }
            
            void scale_27_outhigh_set(number v) {
                this->scale_27_outhigh = v;
            }
            
            void scale_27_inhigh_set(number v) {
                this->scale_27_inhigh = v;
            }
            
            void numberobj_21_output_set(number v) {
                this->expr_23_in1_set(v);
                this->scale_28_outlow_set(v);
                this->scale_28_inlow_set(v);
                this->scale_27_outhigh_set(v);
                this->scale_27_inhigh_set(v);
            }
            
            void numberobj_21_value_set(number v) {
                this->numberobj_21_value_setter(v);
                v = this->numberobj_21_value;
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-43"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_21_output_set(localvalue);
            }
            
            void receive_11_output_number_set(number v) {
                this->receive_11_output_number = v;
                this->numberobj_21_value_set(v);
            }
            
            void gate_11_onoff_set(number v) {
                this->gate_11_onoff = v;
            }
            
            void gate_08_onoff_set(number v) {
                this->gate_08_onoff = v;
            }
            
            void scale_28_power_set(number v) {
                this->scale_28_power = v;
            }
            
            void numberobj_26_output_set(number v) {
                this->scale_28_power_set(v);
            }
            
            void numberobj_26_value_set(number v) {
                this->numberobj_26_value_setter(v);
                v = this->numberobj_26_value;
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_26_output_set(localvalue);
            }
            
            void scale_31_out_set(const list& v) {
                this->scale_31_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_26_value_set(converted);
                }
            }
            
            void scale_31_input_set(const list& v) {
                this->scale_31_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_31_inlow,
                        this->scale_31_inhigh,
                        this->scale_31_outlow,
                        this->scale_31_outhigh,
                        this->scale_31_power
                    ));
                }
            
                this->scale_31_out_set(tmp);
            }
            
            void gate_11_out1_number_set(number v) {
                this->gate_11_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_31_input_set(converted);
                }
            }
            
            void scale_27_power_set(number v) {
                this->scale_27_power = v;
            }
            
            void numberobj_27_output_set(number v) {
                this->scale_27_power_set(v);
            }
            
            void numberobj_27_value_set(number v) {
                this->numberobj_27_value_setter(v);
                v = this->numberobj_27_value;
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-33"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_27_output_set(localvalue);
            }
            
            void scale_32_out_set(const list& v) {
                this->scale_32_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_27_value_set(converted);
                }
            }
            
            void scale_32_input_set(const list& v) {
                this->scale_32_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_32_inlow,
                        this->scale_32_inhigh,
                        this->scale_32_outlow,
                        this->scale_32_outhigh,
                        this->scale_32_power
                    ));
                }
            
                this->scale_32_out_set(tmp);
            }
            
            void gate_11_out2_number_set(number v) {
                this->gate_11_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_32_input_set(converted);
                }
            }
            
            void gate_11_input_number_set(number v) {
                if (this->gate_11_onoff == 1)
                    this->gate_11_out1_number_set(v);
                else if (this->gate_11_onoff == 2)
                    this->gate_11_out2_number_set(v);
            }
            
            void eventoutlet_08_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_08_out3_number_set(v);
            }
            
            void expr_21_in2_set(number v) {
                this->expr_21_in2 = v;
            }
            
            void expr_17_in2_set(number v) {
                this->expr_17_in2 = v;
            }
            
            void expr_22_out1_set(number v) {
                this->expr_22_out1 = v;
                this->expr_21_in2_set(this->expr_22_out1);
                this->expr_17_in2_set(this->expr_22_out1);
            }
            
            void expr_22_in1_set(number in1) {
                this->expr_22_in1 = in1;
                this->expr_22_out1_set(this->expr_22_in1 * this->expr_22_in2);//#map:livegrain/rand-lengthanddelay/*_obj-121:1
            }
            
            void numberobj_19_output_set(number v) {
                this->eventoutlet_08_in1_number_set(v);
                this->expr_22_in1_set(v);
            }
            
            void numberobj_19_value_set(number v) {
                this->numberobj_19_value_setter(v);
                v = this->numberobj_19_value;
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-85"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_19_output_set(localvalue);
            }
            
            void switchobj_01_out_number_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void switchobj_01_in2_number_set(number v) {
                if (this->switchobj_01_onoff == 2) {
                    this->switchobj_01_out_number_set(v);
                }
            }
            
            void numberobj_22_output_set(number v) {
                this->switchobj_01_in2_number_set(v);
            }
            
            void numberobj_22_value_set(number v) {
                this->numberobj_22_value_setter(v);
                v = this->numberobj_22_value;
                number localvalue = v;
            
                if (this->numberobj_22_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-97"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_22_output_set(localvalue);
            }
            
            void expr_26_out1_set(number v) {
                this->expr_26_out1 = v;
                this->numberobj_22_value_set(this->expr_26_out1);
            }
            
            void expr_26_in1_set(number in1) {
                this->expr_26_in1 = in1;
            
                this->expr_26_out1_set(
                    (this->expr_26_in1 > this->expr_26_in3 ? this->expr_26_in3 : (this->expr_26_in1 < this->expr_26_in2 ? this->expr_26_in2 : this->expr_26_in1))
                );//#map:livegrain/rand-lengthanddelay/clip_obj-95:1
            }
            
            void switchobj_01_in1_number_set(number v) {
                if (this->switchobj_01_onoff == 1) {
                    this->switchobj_01_out_number_set(v);
                }
            }
            
            void numberobj_16_output_set(number v) {
                this->expr_26_in1_set(v);
                this->switchobj_01_in1_number_set(v);
            }
            
            void numberobj_16_value_set(number v) {
                this->numberobj_16_value_setter(v);
                v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-25"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void scale_28_out_set(const list& v) {
                this->scale_28_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_16_value_set(converted);
                }
            }
            
            void scale_28_input_set(const list& v) {
                this->scale_28_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_28_inlow,
                        this->scale_28_inhigh,
                        this->scale_28_outlow,
                        this->scale_28_outhigh,
                        this->scale_28_power
                    ));
                }
            
                this->scale_28_out_set(tmp);
            }
            
            void gate_08_out1_number_set(number v) {
                this->gate_08_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_28_input_set(converted);
                }
            }
            
            void scale_27_out_set(const list& v) {
                this->scale_27_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_16_value_set(converted);
                }
            }
            
            void scale_27_input_set(const list& v) {
                this->scale_27_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_27_inlow,
                        this->scale_27_inhigh,
                        this->scale_27_outlow,
                        this->scale_27_outhigh,
                        this->scale_27_power
                    ));
                }
            
                this->scale_27_out_set(tmp);
            }
            
            void gate_08_out2_number_set(number v) {
                this->gate_08_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_27_input_set(converted);
                }
            }
            
            void gate_08_input_number_set(number v) {
                if (this->gate_08_onoff == 1)
                    this->gate_08_out1_number_set(v);
                else if (this->gate_08_onoff == 2)
                    this->gate_08_out2_number_set(v);
            }
            
            void message_18_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_11_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_11_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_08_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_08_onoff_set(converted);
                }
            }
            
            void message_18_trigger_bang() {
                this->message_18_out_set(this->message_18_set);
            }
            
            void select_13_match1_bang() {
                this->message_18_trigger_bang();
            }
            
            void select_13_nomatch_number_set(number ) {}
            
            void select_13_input_number_set(number v) {
                if (v == this->select_13_test1)
                    this->select_13_match1_bang();
                else
                    this->select_13_nomatch_number_set(v);
            }
            
            void expr_31_out1_set(number v) {
                this->expr_31_out1 = v;
                this->select_13_input_number_set(this->expr_31_out1);
            }
            
            void expr_31_in1_set(number in1) {
                this->expr_31_in1 = in1;
                this->expr_31_out1_set(this->expr_31_in1 >= this->expr_31_in2);//#map:livegrain/rand-lengthanddelay/>=_obj-80:1
            }
            
            void message_17_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_11_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_11_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_08_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_08_onoff_set(converted);
                }
            }
            
            void message_17_trigger_bang() {
                this->message_17_out_set(this->message_17_set);
            }
            
            void select_12_match1_bang() {
                this->message_17_trigger_bang();
            }
            
            void select_12_nomatch_number_set(number ) {}
            
            void select_12_input_number_set(number v) {
                if (v == this->select_12_test1)
                    this->select_12_match1_bang();
                else
                    this->select_12_nomatch_number_set(v);
            }
            
            void expr_30_out1_set(number v) {
                this->expr_30_out1 = v;
                this->select_12_input_number_set(this->expr_30_out1);
            }
            
            void expr_30_in1_set(number in1) {
                this->expr_30_in1 = in1;
                this->expr_30_out1_set(this->expr_30_in1 <= this->expr_30_in2);//#map:livegrain/rand-lengthanddelay/<=_obj-82:1
            }
            
            void trigger_10_out2_set(number v) {
                this->expr_31_in1_set(v);
                this->expr_30_in1_set(v);
            }
            
            void trigger_10_out1_set(number v) {
                this->gate_11_input_number_set(v);
            }
            
            void trigger_10_input_number_set(number v) {
                this->trigger_10_out2_set(trunc(v));
                this->trigger_10_out1_set(trunc(v));
            }
            
            void receive_13_output_number_set(number v) {
                this->receive_13_output_number = v;
                this->trigger_10_input_number_set(v);
            }
            
            void expr_26_in3_set(number v) {
                this->expr_26_in3 = v;
            }
            
            void expr_25_out1_set(number v) {
                this->expr_25_out1 = v;
                this->expr_26_in3_set(this->expr_25_out1);
            }
            
            void expr_25_in1_set(number in1) {
                this->expr_25_in1 = in1;
            
                this->expr_25_out1_set(
                    (this->expr_25_in2 == 0 ? 0 : (this->expr_25_in2 == 0. ? 0. : this->expr_25_in1 / this->expr_25_in2))
                );//#map:livegrain/rand-lengthanddelay//_obj-105:1
            }
            
            void expr_25_in2_set(number v) {
                this->expr_25_in2 = v;
                this->expr_25_in1_set(this->expr_25_in1);
            }
            
            void expr_28_out1_set(number v) {
                this->expr_28_out1 = v;
                this->expr_25_in2_set(this->expr_28_out1);
            }
            
            void expr_28_in1_set(number in1) {
                this->expr_28_in1 = in1;
                this->expr_28_out1_set(this->expr_28_in1 - this->expr_28_in2);//#map:livegrain/rand-lengthanddelay/-_obj-104:1
            }
            
            void switchobj_01_onoff_set(number v) {
                this->switchobj_01_onoff = v;
            }
            
            void message_14_out_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_01_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_01_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_01_onoff_set(converted);
                }
            }
            
            void message_14_trigger_bang() {
                this->message_14_out_set(this->message_14_set);
            }
            
            void select_09_match1_bang() {
                this->message_14_trigger_bang();
            }
            
            void message_13_out_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_01_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_01_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_01_onoff_set(converted);
                }
            }
            
            void message_13_trigger_bang() {
                this->message_13_out_set(this->message_13_set);
            }
            
            void select_09_match2_bang() {
                this->message_13_trigger_bang();
            }
            
            void select_09_nomatch_number_set(number ) {}
            
            void select_09_input_number_set(number v) {
                if (v == this->select_09_test1)
                    this->select_09_match1_bang();
                else if (v == this->select_09_test2)
                    this->select_09_match2_bang();
                else
                    this->select_09_nomatch_number_set(v);
            }
            
            void expr_24_out1_set(number v) {
                this->expr_24_out1 = v;
                this->select_09_input_number_set(this->expr_24_out1);
            }
            
            void expr_24_in1_set(number in1) {
                this->expr_24_in1 = in1;
                this->expr_24_out1_set(this->expr_24_in1 > this->expr_24_in2);//#map:livegrain/rand-lengthanddelay/>_obj-86:1
            }
            
            void expr_22_in2_set(number v) {
                this->expr_22_in2 = v;
            }
            
            void eventinlet_17_out1_number_set(number v) {
                this->expr_28_in1_set(v);
                this->expr_24_in1_set(v);
                this->expr_22_in2_set(v);
            }
            
            void scale_26_outhigh_set(number v) {
                this->scale_26_outhigh = v;
            }
            
            void scale_26_inhigh_set(number v) {
                this->scale_26_inhigh = v;
            }
            
            void expr_20_in2_set(number v) {
                this->expr_20_in2 = v;
            }
            
            void scale_25_outlow_set(number v) {
                this->scale_25_outlow = v;
            }
            
            void scale_25_inlow_set(number v) {
                this->scale_25_inlow = v;
            }
            
            void expr_18_in2_set(number v) {
                this->expr_18_in2 = v;
            }
            
            void numberobj_17_output_set(number v) {
                this->scale_26_outhigh_set(v);
                this->scale_26_inhigh_set(v);
                this->expr_20_in2_set(v);
                this->scale_25_outlow_set(v);
                this->scale_25_inlow_set(v);
                this->expr_18_in2_set(v);
            }
            
            void numberobj_17_value_set(number v) {
                this->numberobj_17_value_setter(v);
                v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-14"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void receive_08_output_number_set(number v) {
                this->receive_08_output_number = v;
                this->numberobj_17_value_set(v);
            }
            
            void scale_26_outlow_set(number v) {
                this->scale_26_outlow = v;
            }
            
            void scale_26_inlow_set(number v) {
                this->scale_26_inlow = v;
            }
            
            void random_05_limit_set(number v) {
                this->random_05_limit_setter(v);
                v = this->random_05_limit;
            }
            
            void expr_20_out1_set(number v) {
                this->expr_20_out1 = v;
                this->random_05_limit_set(this->expr_20_out1);
            }
            
            void expr_20_in1_set(number in1) {
                this->expr_20_in1 = in1;
                this->expr_20_out1_set(this->expr_20_in1 - this->expr_20_in2);//#map:livegrain/rand-lengthanddelay/-_obj-22:1
            }
            
            void scale_25_outhigh_set(number v) {
                this->scale_25_outhigh = v;
            }
            
            void scale_25_inhigh_set(number v) {
                this->scale_25_inhigh = v;
            }
            
            void numberobj_18_output_set(number v) {
                this->scale_26_outlow_set(v);
                this->scale_26_inlow_set(v);
                this->expr_20_in1_set(v);
                this->scale_25_outhigh_set(v);
                this->scale_25_inhigh_set(v);
            }
            
            void numberobj_18_value_set(number v) {
                this->numberobj_18_value_setter(v);
                v = this->numberobj_18_value;
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_18_output_set(localvalue);
            }
            
            void receive_09_output_number_set(number v) {
                this->receive_09_output_number = v;
                this->numberobj_18_value_set(v);
            }
            
            void gate_10_onoff_set(number v) {
                this->gate_10_onoff = v;
            }
            
            void gate_07_onoff_set(number v) {
                this->gate_07_onoff = v;
            }
            
            void scale_26_power_set(number v) {
                this->scale_26_power = v;
            }
            
            void numberobj_23_output_set(number v) {
                this->scale_26_power_set(v);
            }
            
            void numberobj_23_value_set(number v) {
                this->numberobj_23_value_setter(v);
                v = this->numberobj_23_value;
                number localvalue = v;
            
                if (this->numberobj_23_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-78"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_23_output_set(localvalue);
            }
            
            void scale_29_out_set(const list& v) {
                this->scale_29_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_23_value_set(converted);
                }
            }
            
            void scale_29_input_set(const list& v) {
                this->scale_29_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_29_inlow,
                        this->scale_29_inhigh,
                        this->scale_29_outlow,
                        this->scale_29_outhigh,
                        this->scale_29_power
                    ));
                }
            
                this->scale_29_out_set(tmp);
            }
            
            void gate_10_out1_number_set(number v) {
                this->gate_10_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_29_input_set(converted);
                }
            }
            
            void scale_25_power_set(number v) {
                this->scale_25_power = v;
            }
            
            void numberobj_24_output_set(number v) {
                this->scale_25_power_set(v);
            }
            
            void numberobj_24_value_set(number v) {
                this->numberobj_24_value_setter(v);
                v = this->numberobj_24_value;
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-41"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_24_output_set(localvalue);
            }
            
            void scale_30_out_set(const list& v) {
                this->scale_30_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_24_value_set(converted);
                }
            }
            
            void scale_30_input_set(const list& v) {
                this->scale_30_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_30_inlow,
                        this->scale_30_inhigh,
                        this->scale_30_outlow,
                        this->scale_30_outhigh,
                        this->scale_30_power
                    ));
                }
            
                this->scale_30_out_set(tmp);
            }
            
            void gate_10_out2_number_set(number v) {
                this->gate_10_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_30_input_set(converted);
                }
            }
            
            void gate_10_input_number_set(number v) {
                if (this->gate_10_onoff == 1)
                    this->gate_10_out1_number_set(v);
                else if (this->gate_10_onoff == 2)
                    this->gate_10_out2_number_set(v);
            }
            
            void expr_16_in2_set(number v) {
                this->expr_16_in2 = v;
            }
            
            void numberobj_15_output_set(number v) {
                this->expr_25_in1_set(v);
                this->expr_16_in2_set(v);
            }
            
            void numberobj_15_value_set(number v) {
                this->numberobj_15_value_setter(v);
                v = this->numberobj_15_value;
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-76"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_15_output_set(localvalue);
            }
            
            void scale_26_out_set(const list& v) {
                this->scale_26_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_15_value_set(converted);
                }
            }
            
            void scale_26_input_set(const list& v) {
                this->scale_26_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_26_inlow,
                        this->scale_26_inhigh,
                        this->scale_26_outlow,
                        this->scale_26_outhigh,
                        this->scale_26_power
                    ));
                }
            
                this->scale_26_out_set(tmp);
            }
            
            void gate_07_out1_number_set(number v) {
                this->gate_07_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_26_input_set(converted);
                }
            }
            
            void scale_25_out_set(const list& v) {
                this->scale_25_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_15_value_set(converted);
                }
            }
            
            void scale_25_input_set(const list& v) {
                this->scale_25_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_25_inlow,
                        this->scale_25_inhigh,
                        this->scale_25_outlow,
                        this->scale_25_outhigh,
                        this->scale_25_power
                    ));
                }
            
                this->scale_25_out_set(tmp);
            }
            
            void gate_07_out2_number_set(number v) {
                this->gate_07_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_25_input_set(converted);
                }
            }
            
            void gate_07_input_number_set(number v) {
                if (this->gate_07_onoff == 1)
                    this->gate_07_out1_number_set(v);
                else if (this->gate_07_onoff == 2)
                    this->gate_07_out2_number_set(v);
            }
            
            void message_16_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_10_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_10_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_07_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_07_onoff_set(converted);
                }
            }
            
            void message_16_trigger_bang() {
                this->message_16_out_set(this->message_16_set);
            }
            
            void select_11_match1_bang() {
                this->message_16_trigger_bang();
            }
            
            void select_11_nomatch_number_set(number ) {}
            
            void select_11_input_number_set(number v) {
                if (v == this->select_11_test1)
                    this->select_11_match1_bang();
                else
                    this->select_11_nomatch_number_set(v);
            }
            
            void expr_29_out1_set(number v) {
                this->expr_29_out1 = v;
                this->select_11_input_number_set(this->expr_29_out1);
            }
            
            void expr_29_in1_set(number in1) {
                this->expr_29_in1 = in1;
                this->expr_29_out1_set(this->expr_29_in1 >= this->expr_29_in2);//#map:livegrain/rand-lengthanddelay/>=_obj-20:1
            }
            
            void message_15_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_10_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_10_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_07_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_07_onoff_set(converted);
                }
            }
            
            void message_15_trigger_bang() {
                this->message_15_out_set(this->message_15_set);
            }
            
            void select_10_match1_bang() {
                this->message_15_trigger_bang();
            }
            
            void select_10_nomatch_number_set(number ) {}
            
            void select_10_input_number_set(number v) {
                if (v == this->select_10_test1)
                    this->select_10_match1_bang();
                else
                    this->select_10_nomatch_number_set(v);
            }
            
            void expr_27_out1_set(number v) {
                this->expr_27_out1 = v;
                this->select_10_input_number_set(this->expr_27_out1);
            }
            
            void expr_27_in1_set(number in1) {
                this->expr_27_in1 = in1;
                this->expr_27_out1_set(this->expr_27_in1 <= this->expr_27_in2);//#map:livegrain/rand-lengthanddelay/<=_obj-10:1
            }
            
            void trigger_09_out2_set(number v) {
                this->expr_29_in1_set(v);
                this->expr_27_in1_set(v);
            }
            
            void trigger_09_out1_set(number v) {
                this->gate_10_input_number_set(v);
            }
            
            void trigger_09_input_number_set(number v) {
                this->trigger_09_out2_set(trunc(v));
                this->trigger_09_out1_set(trunc(v));
            }
            
            void receive_12_output_number_set(number v) {
                this->receive_12_output_number = v;
                this->trigger_09_input_number_set(v);
            }
            
            void message_12_set_set(const list& v) {
                this->message_12_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-67"),
                    v,
                    this->_currentTime
                );
            }
            
            void receive_07_output_number_set(number v) {
                this->receive_07_output_number = v;
            
                {
                    list converted = {v};
                    this->message_12_set_set(converted);
                }
            }
            
            void gate_09_onoff_set(number v) {
                this->gate_09_onoff = v;
            }
            
            void gate_06_onoff_set(number v) {
                this->gate_06_onoff = v;
            }
            
            void eventoutlet_07_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_08_out2_number_set(v);
            }
            
            void wrap_03_out1_set(number v) {
                this->eventoutlet_07_in1_number_set(v);
            }
            
            void wrap_03_x_set(number x) {
                this->wrap_03_x = x;
                auto high = this->wrap_03_high;
                auto low = this->wrap_03_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_03_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_03_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_03_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_03_out1_set(result - range);
                    return;
                } else {
                    this->wrap_03_out1_set(result);
                    return;
                }
            }
            
            void expr_21_out1_set(number v) {
                this->expr_21_out1 = v;
                this->wrap_03_x_set(this->expr_21_out1);
            }
            
            void expr_21_in1_set(number in1) {
                this->expr_21_in1 = in1;
                this->expr_21_out1_set(this->expr_21_in1 + this->expr_21_in2);//#map:livegrain/rand-lengthanddelay/+_obj-46:1
            }
            
            void gate_09_out1_number_set(number v) {
                this->gate_09_out1_number = v;
                this->expr_21_in1_set(v);
            }
            
            void gate_09_out2_number_set(number v) {
                this->gate_09_out2_number = v;
                this->eventoutlet_07_in1_number_set(v);
            }
            
            void gate_09_input_number_set(number v) {
                if (this->gate_09_onoff == 1)
                    this->gate_09_out1_number_set(v);
                else if (this->gate_09_onoff == 2)
                    this->gate_09_out2_number_set(v);
            }
            
            void eventoutlet_06_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_08_out1_number_set(v);
            }
            
            void gate_06_out1_number_set(number v) {
                this->gate_06_out1_number = v;
                this->eventoutlet_06_in1_number_set(v);
            }
            
            void wrap_02_out1_set(number v) {
                this->eventoutlet_06_in1_number_set(v);
            }
            
            void wrap_02_x_set(number x) {
                this->wrap_02_x = x;
                auto high = this->wrap_02_high;
                auto low = this->wrap_02_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_02_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_02_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_02_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_02_out1_set(result - range);
                    return;
                } else {
                    this->wrap_02_out1_set(result);
                    return;
                }
            }
            
            void expr_17_out1_set(number v) {
                this->expr_17_out1 = v;
                this->wrap_02_x_set(this->expr_17_out1);
            }
            
            void expr_17_in1_set(number in1) {
                this->expr_17_in1 = in1;
                this->expr_17_out1_set(this->expr_17_in1 - this->expr_17_in2);//#map:livegrain/rand-lengthanddelay/-_obj-49:1
            }
            
            void gate_06_out2_number_set(number v) {
                this->gate_06_out2_number = v;
                this->expr_17_in1_set(v);
            }
            
            void gate_06_input_number_set(number v) {
                if (this->gate_06_onoff == 1)
                    this->gate_06_out1_number_set(v);
                else if (this->gate_06_onoff == 2)
                    this->gate_06_out2_number_set(v);
            }
            
            void eventinlet_18_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_09_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_09_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_06_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_06_onoff_set(converted);
                }
            }
            
            void numberobj_17_value_bang() {
                number v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-14"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void trigger_07_out2_bang() {
                this->numberobj_17_value_bang();
            }
            
            void numberobj_18_value_bang() {
                number v = this->numberobj_18_value;
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_18_output_set(localvalue);
            }
            
            void trigger_07_out1_bang() {
                this->numberobj_18_value_bang();
            }
            
            void trigger_07_input_bang_bang() {
                this->trigger_07_out2_bang();
                this->trigger_07_out1_bang();
            }
            
            void trigger_05_out3_bang() {
                this->trigger_07_input_bang_bang();
            }
            
            void numberobj_20_value_bang() {
                number v = this->numberobj_20_value;
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_20_output_set(localvalue);
            }
            
            void trigger_08_out2_bang() {
                this->numberobj_20_value_bang();
            }
            
            void numberobj_21_value_bang() {
                number v = this->numberobj_21_value;
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-43"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_21_output_set(localvalue);
            }
            
            void trigger_08_out1_bang() {
                this->numberobj_21_value_bang();
            }
            
            void trigger_08_input_bang_bang() {
                this->trigger_08_out2_bang();
                this->trigger_08_out1_bang();
            }
            
            void expr_19_out1_set(number v) {
                this->expr_19_out1 = v;
                this->gate_08_input_number_set(this->expr_19_out1);
            }
            
            void expr_19_in1_set(number in1) {
                this->expr_19_in1 = in1;
                this->expr_19_out1_set(this->expr_19_in1 + this->expr_19_in2);//#map:livegrain/rand-lengthanddelay/+_obj-47:1
            }
            
            void random_06_result_set(number v) {
                this->expr_19_in1_set(v);
            }
            
            void random_06_trigger_bang() {
                {
                    this->random_06_result_set(this->random(0, this->random_06_limit));
                }
            }
            
            void trigger_06_out3_bang() {
                this->random_06_trigger_bang();
            }
            
            void trigger_06_out2_set(number v) {
                this->gate_09_input_number_set(v);
            }
            
            void trigger_06_out1_set(number v) {
                this->gate_06_input_number_set(v);
            }
            
            void trigger_06_input_number_set(number v) {
                this->trigger_06_out3_bang();
                this->trigger_06_out2_set(v);
                this->trigger_06_out1_set(v);
            }
            
            void wrap_01_out1_set(number v) {
                this->trigger_06_input_number_set(v);
            }
            
            void wrap_01_x_set(number x) {
                this->wrap_01_x = x;
                auto high = this->wrap_01_high;
                auto low = this->wrap_01_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_01_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_01_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_01_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_01_out1_set(result - range);
                    return;
                } else {
                    this->wrap_01_out1_set(result);
                    return;
                }
            }
            
            void expr_16_out1_set(number v) {
                this->expr_16_out1 = v;
                this->wrap_01_x_set(this->expr_16_out1);
            }
            
            void expr_16_in1_set(number in1) {
                this->expr_16_in1 = in1;
                this->expr_16_out1_set(this->expr_16_in1 - this->expr_16_in2);//#map:livegrain/rand-lengthanddelay/-_obj-5:1
            }
            
            void message_12_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_16_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_16_in1_set(converted);
                }
            }
            
            void message_12_trigger_bang() {
                this->message_12_out_set(this->message_12_set);
            }
            
            void trigger_05_out2_bang() {
                this->trigger_08_input_bang_bang();
                this->message_12_trigger_bang();
            }
            
            void expr_18_out1_set(number v) {
                this->expr_18_out1 = v;
                this->gate_07_input_number_set(this->expr_18_out1);
            }
            
            void expr_18_in1_set(number in1) {
                this->expr_18_in1 = in1;
                this->expr_18_out1_set(this->expr_18_in1 + this->expr_18_in2);//#map:livegrain/rand-lengthanddelay/+_obj-79:1
            }
            
            void random_05_result_set(number v) {
                this->expr_18_in1_set(v);
            }
            
            void random_05_trigger_bang() {
                {
                    this->random_05_result_set(this->random(0, this->random_05_limit));
                }
            }
            
            void trigger_05_out1_bang() {
                this->random_05_trigger_bang();
            }
            
            void trigger_05_input_bang_bang() {
                this->trigger_05_out3_bang();
                this->trigger_05_out2_bang();
                this->trigger_05_out1_bang();
            }
            
            void eventinlet_16_out1_bang_bang() {
                this->trigger_05_input_bang_bang();
            }
            
            void trigger_05_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_05_out3_bang();
                this->trigger_05_out2_bang();
                this->trigger_05_out1_bang();
            }
            
            void trigger_05_input_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->trigger_05_out3_bang();
                this->trigger_05_out2_bang();
                this->trigger_05_out1_bang();
            }
            
            void button_02_output_bang() {
                this->trigger_05_input_bang_bang();
            }
            
            void button_02_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("livegrain/rand-lengthanddelay/button_obj-63"),
                    this->_currentTime
                );;
            
                this->button_02_output_bang();
            }
            
            void message_13_set_set(const list& v) {
                this->message_13_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-89"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_14_set_set(const list& v) {
                this->message_14_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-91"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_15_set_set(const list& v) {
                this->message_15_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-48"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_16_set_set(const list& v) {
                this->message_16_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-50"),
                    v,
                    this->_currentTime
                );
            }
            
            void numberobj_25_output_set(number v) {
                this->trigger_09_input_number_set(v);
            }
            
            void numberobj_25_value_set(number v) {
                this->numberobj_25_value_setter(v);
                v = this->numberobj_25_value;
                number localvalue = v;
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_25_output_set(localvalue);
            }
            
            void message_17_set_set(const list& v) {
                this->message_17_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_18_set_set(const list& v) {
                this->message_18_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-lengthanddelay/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_28_in1_bang() {
                this->expr_28_out1_set(this->expr_28_in1 - this->expr_28_in2);//#map:livegrain/rand-lengthanddelay/-_obj-104:1
            }
            
            void expr_24_in1_bang() {
                this->expr_24_out1_set(this->expr_24_in1 > this->expr_24_in2);//#map:livegrain/rand-lengthanddelay/>_obj-86:1
            }
            
            void expr_22_in2_bang() {}
            
            void expr_28_in2_set(number v) {
                this->expr_28_in2 = v;
            }
            
            void expr_24_in2_set(number v) {
                this->expr_24_in2 = v;
            }
            
            void gate_09_onoff_bang() {}
            
            void gate_06_onoff_bang() {}
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_15_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_15_value = localvalue;
            }
            
            void random_05_limit_setter(number v) {
                if (v >= 0)
                    this->random_05_limit = v;
            }
            
            void random_06_limit_setter(number v) {
                if (v >= 0)
                    this->random_06_limit = v;
            }
            
            void numberobj_16_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_16_value = localvalue;
            }
            
            void numberobj_17_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_17_value = localvalue;
            }
            
            void numberobj_18_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_18_value = localvalue;
            }
            
            void numberobj_19_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_19_value = localvalue;
            }
            
            void numberobj_20_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_20_value = localvalue;
            }
            
            void numberobj_21_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_21_value = localvalue;
            }
            
            void numberobj_22_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_22_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_22_value = localvalue;
            }
            
            void numberobj_23_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_23_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_23_value = localvalue;
            }
            
            void numberobj_24_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_24_value = localvalue;
            }
            
            void numberobj_25_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_25_value = localvalue;
            }
            
            void numberobj_26_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_26_value = localvalue;
            }
            
            void numberobj_27_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_27_value = localvalue;
            }
            
            void message_12_init() {
                this->message_12_set_set({12598.6875});
            }
            
            void numberobj_15_init() {
                this->numberobj_15_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-76"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_15_value;
            }
            
            void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_15_value_set(preset["value"]);
            }
            
            void random_05_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_05_nz_state
                );
            }
            
            void random_05_nz_init() {
                this->random_05_nz_reset();
            }
            
            void random_05_nz_seed(number v) {
                xoshiro_reset(v, this->random_05_nz_state);
            }
            
            number random_05_nz_next() {
                return xoshiro_next(this->random_05_nz_state);
            }
            
            void random_06_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_06_nz_state
                );
            }
            
            void random_06_nz_init() {
                this->random_06_nz_reset();
            }
            
            void random_06_nz_seed(number v) {
                xoshiro_reset(v, this->random_06_nz_state);
            }
            
            number random_06_nz_next() {
                return xoshiro_next(this->random_06_nz_state);
            }
            
            void numberobj_16_init() {
                this->numberobj_16_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-25"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_16_value;
            }
            
            void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_16_value_set(preset["value"]);
            }
            
            void numberobj_17_init() {
                this->numberobj_17_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-14"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_17_value;
            }
            
            void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_17_value_set(preset["value"]);
            }
            
            void numberobj_18_init() {
                this->numberobj_18_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-16"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_18_value;
            }
            
            void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_18_value_set(preset["value"]);
            }
            
            void numberobj_19_init() {
                this->numberobj_19_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-85"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_19_value;
            }
            
            void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_19_value_set(preset["value"]);
            }
            
            void numberobj_20_init() {
                this->numberobj_20_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-44"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_20_value;
            }
            
            void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_20_value_set(preset["value"]);
            }
            
            void numberobj_21_init() {
                this->numberobj_21_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-43"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_21_value;
            }
            
            void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_21_value_set(preset["value"]);
            }
            
            void message_13_init() {
                this->message_13_set_set({1});
            }
            
            void message_14_init() {
                this->message_14_set_set({2});
            }
            
            void numberobj_22_init() {
                this->numberobj_22_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-97"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_22_value;
            }
            
            void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_22_value_set(preset["value"]);
            }
            
            void numberobj_23_init() {
                this->numberobj_23_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-78"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_23_value;
            }
            
            void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_23_value_set(preset["value"]);
            }
            
            void message_15_init() {
                this->message_15_set_set({1});
            }
            
            void message_16_init() {
                this->message_16_set_set({2});
            }
            
            void numberobj_24_init() {
                this->numberobj_24_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-41"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_24_value;
            }
            
            void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_24_value_set(preset["value"]);
            }
            
            void numberobj_25_init() {
                this->numberobj_25_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-18"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_25_value;
            }
            
            void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_25_value_set(preset["value"]);
            }
            
            void numberobj_26_init() {
                this->numberobj_26_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_26_value;
            }
            
            void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_26_value_set(preset["value"]);
            }
            
            void message_17_init() {
                this->message_17_set_set({1});
            }
            
            void message_18_init() {
                this->message_18_set_set({2});
            }
            
            void numberobj_27_init() {
                this->numberobj_27_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-lengthanddelay/number_obj-33"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_27_value;
            }
            
            void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_27_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_06_onoff = 0;
                gate_06_out1_number = 0;
                gate_06_out2_number = 0;
                wrap_01_x = 0;
                wrap_01_low = 0;
                wrap_01_high = 21000;
                expr_16_in1 = 0;
                expr_16_in2 = 10;
                expr_16_out1 = 0;
                receive_07_output_number = 0;
                wrap_02_x = 0;
                wrap_02_low = 0;
                wrap_02_high = 21000;
                expr_17_in1 = 0;
                expr_17_in2 = 0;
                expr_17_out1 = 0;
                gate_07_onoff = 0;
                gate_07_out1_number = 0;
                gate_07_out2_number = 0;
                expr_18_in1 = 0;
                expr_18_in2 = 0;
                expr_18_out1 = 0;
                numberobj_15_value = 0;
                numberobj_15_value_setter(numberobj_15_value);
                scale_25_inlow = 0;
                scale_25_inhigh = 1;
                scale_25_outlow = 0;
                scale_25_outhigh = 1;
                scale_25_power = 1;
                random_05_limit = 1;
                random_05_limit_setter(random_05_limit);
                random_05_seed = 0;
                gate_08_onoff = 0;
                gate_08_out1_number = 0;
                gate_08_out2_number = 0;
                expr_19_in1 = 0;
                expr_19_in2 = 0;
                expr_19_out1 = 0;
                random_06_limit = 1;
                random_06_limit_setter(random_06_limit);
                random_06_seed = 0;
                expr_20_in1 = 0;
                expr_20_in2 = 0;
                expr_20_out1 = 0;
                gate_09_onoff = 0;
                gate_09_out1_number = 0;
                gate_09_out2_number = 0;
                receive_08_output_number = 0;
                scale_26_inlow = 0;
                scale_26_inhigh = 1;
                scale_26_outlow = 0;
                scale_26_outhigh = 1;
                scale_26_power = 1;
                numberobj_16_value = 0;
                numberobj_16_value_setter(numberobj_16_value);
                scale_27_inlow = 0;
                scale_27_inhigh = 1;
                scale_27_outlow = 0;
                scale_27_outhigh = 1;
                scale_27_power = 1;
                numberobj_17_value = 0;
                numberobj_17_value_setter(numberobj_17_value);
                wrap_03_x = 0;
                wrap_03_low = 0;
                wrap_03_high = 21000;
                receive_09_output_number = 0;
                expr_21_in1 = 0;
                expr_21_in2 = 0;
                expr_21_out1 = 0;
                numberobj_18_value = 0;
                numberobj_18_value_setter(numberobj_18_value);
                expr_22_in1 = 0;
                expr_22_in2 = 0;
                expr_22_out1 = 0;
                scale_28_inlow = 0;
                scale_28_inhigh = 1;
                scale_28_outlow = 0;
                scale_28_outhigh = 1;
                scale_28_power = 1;
                numberobj_19_value = 0;
                numberobj_19_value_setter(numberobj_19_value);
                switchobj_01_onoff = 0;
                expr_23_in1 = 0;
                expr_23_in2 = 0;
                expr_23_out1 = 0;
                numberobj_20_value = 0;
                numberobj_20_value_setter(numberobj_20_value);
                receive_10_output_number = 0;
                numberobj_21_value = 0;
                numberobj_21_value_setter(numberobj_21_value);
                select_09_test1 = 1;
                select_09_test2 = 0;
                expr_24_in1 = 0;
                expr_24_in2 = 1;
                expr_24_out1 = 0;
                receive_11_output_number = 0;
                expr_25_in1 = 0;
                expr_25_in2 = 0;
                expr_25_out1 = 0;
                gate_10_onoff = 0;
                gate_10_out1_number = 0;
                gate_10_out2_number = 0;
                numberobj_22_value = 0;
                numberobj_22_value_setter(numberobj_22_value);
                expr_26_in1 = 0;
                expr_26_in2 = 0;
                expr_26_in3 = 0;
                expr_26_out1 = 0;
                receive_12_output_number = 0;
                select_10_test1 = 1;
                scale_29_inlow = -100;
                scale_29_inhigh = 0;
                scale_29_outlow = 0.1;
                scale_29_outhigh = 1;
                scale_29_power = 1;
                expr_27_in1 = 0;
                expr_27_in2 = 0;
                expr_27_out1 = 0;
                numberobj_23_value = 0;
                numberobj_23_value_setter(numberobj_23_value);
                expr_28_in1 = 0;
                expr_28_in2 = 1;
                expr_28_out1 = 0;
                select_11_test1 = 1;
                expr_29_in1 = 0;
                expr_29_in2 = 1;
                expr_29_out1 = 0;
                numberobj_24_value = 0;
                numberobj_24_value_setter(numberobj_24_value);
                scale_30_inlow = 1;
                scale_30_inhigh = 100;
                scale_30_outlow = 1;
                scale_30_outhigh = 0.1;
                scale_30_power = 1;
                numberobj_25_value = 0;
                numberobj_25_value_setter(numberobj_25_value);
                gate_11_onoff = 0;
                gate_11_out1_number = 0;
                gate_11_out2_number = 0;
                receive_13_output_number = 0;
                select_12_test1 = 1;
                scale_31_inlow = -100;
                scale_31_inhigh = 0;
                scale_31_outlow = 0.1;
                scale_31_outhigh = 1;
                scale_31_power = 1;
                expr_30_in1 = 0;
                expr_30_in2 = 0;
                expr_30_out1 = 0;
                numberobj_26_value = 0;
                numberobj_26_value_setter(numberobj_26_value);
                select_13_test1 = 1;
                expr_31_in1 = 0;
                expr_31_in2 = 1;
                expr_31_out1 = 0;
                numberobj_27_value = 0;
                numberobj_27_value_setter(numberobj_27_value);
                scale_32_inlow = 1;
                scale_32_inhigh = 100;
                scale_32_outlow = 1;
                scale_32_outhigh = 0.1;
                scale_32_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_15_currentFormat = 6;
                numberobj_15_lastValue = 0;
                numberobj_16_currentFormat = 6;
                numberobj_16_lastValue = 0;
                numberobj_17_currentFormat = 6;
                numberobj_17_lastValue = 0;
                numberobj_18_currentFormat = 6;
                numberobj_18_lastValue = 0;
                numberobj_19_currentFormat = 6;
                numberobj_19_lastValue = 0;
                numberobj_20_currentFormat = 6;
                numberobj_20_lastValue = 0;
                numberobj_21_currentFormat = 6;
                numberobj_21_lastValue = 0;
                numberobj_22_currentFormat = 6;
                numberobj_22_lastValue = 0;
                numberobj_23_currentFormat = 6;
                numberobj_23_lastValue = 0;
                numberobj_24_currentFormat = 6;
                numberobj_24_lastValue = 0;
                numberobj_25_currentFormat = 6;
                numberobj_25_lastValue = 0;
                numberobj_26_currentFormat = 6;
                numberobj_26_lastValue = 0;
                numberobj_27_currentFormat = 6;
                numberobj_27_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_12_set;
                number gate_06_onoff;
                number gate_06_out1_number;
                list gate_06_out1_list;
                number gate_06_out2_number;
                list gate_06_out2_list;
                number wrap_01_x;
                number wrap_01_low;
                number wrap_01_high;
                number expr_16_in1;
                number expr_16_in2;
                number expr_16_out1;
                number receive_07_output_number;
                list receive_07_output_list;
                number wrap_02_x;
                number wrap_02_low;
                number wrap_02_high;
                number expr_17_in1;
                number expr_17_in2;
                number expr_17_out1;
                number gate_07_onoff;
                number gate_07_out1_number;
                list gate_07_out1_list;
                number gate_07_out2_number;
                list gate_07_out2_list;
                number expr_18_in1;
                number expr_18_in2;
                number expr_18_out1;
                number numberobj_15_value;
                list scale_25_input;
                number scale_25_inlow;
                number scale_25_inhigh;
                number scale_25_outlow;
                number scale_25_outhigh;
                number scale_25_power;
                list scale_25_out;
                number random_05_limit;
                number random_05_seed;
                number gate_08_onoff;
                number gate_08_out1_number;
                list gate_08_out1_list;
                number gate_08_out2_number;
                list gate_08_out2_list;
                number expr_19_in1;
                number expr_19_in2;
                number expr_19_out1;
                number random_06_limit;
                number random_06_seed;
                number expr_20_in1;
                number expr_20_in2;
                number expr_20_out1;
                number gate_09_onoff;
                number gate_09_out1_number;
                list gate_09_out1_list;
                number gate_09_out2_number;
                list gate_09_out2_list;
                number receive_08_output_number;
                list receive_08_output_list;
                list scale_26_input;
                number scale_26_inlow;
                number scale_26_inhigh;
                number scale_26_outlow;
                number scale_26_outhigh;
                number scale_26_power;
                list scale_26_out;
                number numberobj_16_value;
                list scale_27_input;
                number scale_27_inlow;
                number scale_27_inhigh;
                number scale_27_outlow;
                number scale_27_outhigh;
                number scale_27_power;
                list scale_27_out;
                number numberobj_17_value;
                number wrap_03_x;
                number wrap_03_low;
                number wrap_03_high;
                number receive_09_output_number;
                list receive_09_output_list;
                number expr_21_in1;
                number expr_21_in2;
                number expr_21_out1;
                number numberobj_18_value;
                number expr_22_in1;
                number expr_22_in2;
                number expr_22_out1;
                list scale_28_input;
                number scale_28_inlow;
                number scale_28_inhigh;
                number scale_28_outlow;
                number scale_28_outhigh;
                number scale_28_power;
                list scale_28_out;
                number numberobj_19_value;
                number switchobj_01_onoff;
                number expr_23_in1;
                number expr_23_in2;
                number expr_23_out1;
                number numberobj_20_value;
                number receive_10_output_number;
                list receive_10_output_list;
                number numberobj_21_value;
                list message_13_set;
                number select_09_test1;
                number select_09_test2;
                number expr_24_in1;
                number expr_24_in2;
                number expr_24_out1;
                number receive_11_output_number;
                list receive_11_output_list;
                list message_14_set;
                number expr_25_in1;
                number expr_25_in2;
                number expr_25_out1;
                number gate_10_onoff;
                number gate_10_out1_number;
                list gate_10_out1_list;
                number gate_10_out2_number;
                list gate_10_out2_list;
                number numberobj_22_value;
                number expr_26_in1;
                number expr_26_in2;
                number expr_26_in3;
                number expr_26_out1;
                number receive_12_output_number;
                list receive_12_output_list;
                number select_10_test1;
                list scale_29_input;
                number scale_29_inlow;
                number scale_29_inhigh;
                number scale_29_outlow;
                number scale_29_outhigh;
                number scale_29_power;
                list scale_29_out;
                number expr_27_in1;
                number expr_27_in2;
                number expr_27_out1;
                number numberobj_23_value;
                number expr_28_in1;
                number expr_28_in2;
                number expr_28_out1;
                number select_11_test1;
                list message_15_set;
                number expr_29_in1;
                number expr_29_in2;
                number expr_29_out1;
                list message_16_set;
                number numberobj_24_value;
                list scale_30_input;
                number scale_30_inlow;
                number scale_30_inhigh;
                number scale_30_outlow;
                number scale_30_outhigh;
                number scale_30_power;
                list scale_30_out;
                number numberobj_25_value;
                number gate_11_onoff;
                number gate_11_out1_number;
                list gate_11_out1_list;
                number gate_11_out2_number;
                list gate_11_out2_list;
                number receive_13_output_number;
                list receive_13_output_list;
                number select_12_test1;
                list scale_31_input;
                number scale_31_inlow;
                number scale_31_inhigh;
                number scale_31_outlow;
                number scale_31_outhigh;
                number scale_31_power;
                list scale_31_out;
                number expr_30_in1;
                number expr_30_in2;
                number expr_30_out1;
                number numberobj_26_value;
                number select_13_test1;
                list message_17_set;
                number expr_31_in1;
                number expr_31_in2;
                number expr_31_out1;
                list message_18_set;
                number numberobj_27_value;
                list scale_32_input;
                number scale_32_inlow;
                number scale_32_inhigh;
                number scale_32_outlow;
                number scale_32_outhigh;
                number scale_32_power;
                list scale_32_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_15_currentFormat;
                number numberobj_15_lastValue;
                UInt random_05_nz_state[4] = { };
                UInt random_06_nz_state[4] = { };
                Int numberobj_16_currentFormat;
                number numberobj_16_lastValue;
                Int numberobj_17_currentFormat;
                number numberobj_17_lastValue;
                Int numberobj_18_currentFormat;
                number numberobj_18_lastValue;
                Int numberobj_19_currentFormat;
                number numberobj_19_lastValue;
                Int numberobj_20_currentFormat;
                number numberobj_20_lastValue;
                Int numberobj_21_currentFormat;
                number numberobj_21_lastValue;
                Int numberobj_22_currentFormat;
                number numberobj_22_lastValue;
                Int numberobj_23_currentFormat;
                number numberobj_23_lastValue;
                Int numberobj_24_currentFormat;
                number numberobj_24_lastValue;
                Int numberobj_25_currentFormat;
                number numberobj_25_lastValue;
                Int numberobj_26_currentFormat;
                number numberobj_26_lastValue;
                Int numberobj_27_currentFormat;
                number numberobj_27_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_102 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_102()
            {
            }
            
            ~RNBOSubpatcher_102()
            {
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-volume/message_obj-7") == objectId)
                        this->message_19_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-6") == objectId)
                        this->message_20_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-70") == objectId)
                        this->message_21_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-66") == objectId)
                        this->message_22_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("livegrain/rand-volume/number_obj-71") == objectId)
                        this->numberobj_28_valin_set(payload);
            
                    if (TAG("livegrain/rand-volume/number_obj-5") == objectId)
                        this->numberobj_29_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("livegrain/rand-volume/number_obj-71") == objectId)
                        this->numberobj_28_format_set(payload);
            
                    if (TAG("livegrain/rand-volume/number_obj-5") == objectId)
                        this->numberobj_29_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-volume/message_obj-7") == objectId)
                        this->message_19_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-6") == objectId)
                        this->message_20_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-70") == objectId)
                        this->message_21_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-volume/message_obj-66") == objectId)
                        this->message_22_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-volume/message_obj-7") == objectId)
                        this->message_19_listin_bang_bang();
            
                    if (TAG("livegrain/rand-volume/message_obj-6") == objectId)
                        this->message_20_listin_bang_bang();
            
                    if (TAG("livegrain/rand-volume/message_obj-70") == objectId)
                        this->message_21_listin_bang_bang();
            
                    if (TAG("livegrain/rand-volume/message_obj-66") == objectId)
                        this->message_22_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-volume/message_obj-7"):
                    {
                    return "livegrain/rand-volume/message_obj-7";
                    }
                case TAG("livegrain/rand-volume/message_obj-6"):
                    {
                    return "livegrain/rand-volume/message_obj-6";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("livegrain/rand-volume/number_obj-71"):
                    {
                    return "livegrain/rand-volume/number_obj-71";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("livegrain/rand-volume/message_obj-70"):
                    {
                    return "livegrain/rand-volume/message_obj-70";
                    }
                case TAG("livegrain/rand-volume/message_obj-66"):
                    {
                    return "livegrain/rand-volume/message_obj-66";
                    }
                case TAG("livegrain/rand-volume/number_obj-5"):
                    {
                    return "livegrain/rand-volume/number_obj-5";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_19_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_07_trigger_bang();
            }
            
            void eventinlet_19_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_07_trigger_bang();
            }
            
            void message_19_listin_list_set(const list& v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_number_set(number v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_bang_bang() {
                this->message_19_trigger_bang();
            }
            
            void message_20_listin_list_set(const list& v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_number_set(number v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_bang_bang() {
                this->message_20_trigger_bang();
            }
            
            void numberobj_28_valin_set(number v) {
                this->numberobj_28_value_set(v);
            }
            
            void numberobj_28_format_set(number v) {
                this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_21_listin_list_set(const list& v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_number_set(number v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_bang_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_listin_list_set(const list& v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_number_set(number v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_bang_bang() {
                this->message_22_trigger_bang();
            }
            
            void numberobj_29_valin_set(number v) {
                this->numberobj_29_value_set(v);
            }
            
            void numberobj_29_format_set(number v) {
                this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->random_07_nz_init();
                this->message_19_init();
                this->message_20_init();
                this->numberobj_28_init();
                this->message_21_init();
                this->message_22_init();
                this->numberobj_29_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void scale_34_outhigh_set(number v) {
                this->scale_34_outhigh = v;
            }
            
            void scale_33_outlow_set(number v) {
                this->scale_33_outlow = v;
            }
            
            void receive_14_output_number_set(number v) {
                this->receive_14_output_number = v;
                this->scale_34_outhigh_set(v);
                this->scale_33_outlow_set(v);
            }
            
            void scale_34_outlow_set(number v) {
                this->scale_34_outlow = v;
            }
            
            void scale_33_outhigh_set(number v) {
                this->scale_33_outhigh = v;
            }
            
            void receive_15_output_number_set(number v) {
                this->receive_15_output_number = v;
                this->scale_34_outlow_set(v);
                this->scale_33_outhigh_set(v);
            }
            
            void gate_13_onoff_set(number v) {
                this->gate_13_onoff = v;
            }
            
            void scale_34_power_set(number v) {
                this->scale_34_power = v;
            }
            
            void numberobj_28_output_set(number v) {
                this->scale_34_power_set(v);
            }
            
            void numberobj_28_value_set(number v) {
                this->numberobj_28_value_setter(v);
                v = this->numberobj_28_value;
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-volume/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_28_output_set(localvalue);
            }
            
            void scale_35_out_set(const list& v) {
                this->scale_35_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_28_value_set(converted);
                }
            }
            
            void scale_35_input_set(const list& v) {
                this->scale_35_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_35_inlow,
                        this->scale_35_inhigh,
                        this->scale_35_outlow,
                        this->scale_35_outhigh,
                        this->scale_35_power
                    ));
                }
            
                this->scale_35_out_set(tmp);
            }
            
            void gate_13_out1_number_set(number v) {
                this->gate_13_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_35_input_set(converted);
                }
            }
            
            void scale_33_power_set(number v) {
                this->scale_33_power = v;
            }
            
            void numberobj_29_output_set(number v) {
                this->scale_33_power_set(v);
            }
            
            void numberobj_29_value_set(number v) {
                this->numberobj_29_value_setter(v);
                v = this->numberobj_29_value;
                number localvalue = v;
            
                if (this->numberobj_29_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-volume/number_obj-5"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_29_output_set(localvalue);
            }
            
            void scale_36_out_set(const list& v) {
                this->scale_36_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_29_value_set(converted);
                }
            }
            
            void scale_36_input_set(const list& v) {
                this->scale_36_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_36_inlow,
                        this->scale_36_inhigh,
                        this->scale_36_outlow,
                        this->scale_36_outhigh,
                        this->scale_36_power
                    ));
                }
            
                this->scale_36_out_set(tmp);
            }
            
            void gate_13_out2_number_set(number v) {
                this->gate_13_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_36_input_set(converted);
                }
            }
            
            void gate_13_input_number_set(number v) {
                if (this->gate_13_onoff == 1)
                    this->gate_13_out1_number_set(v);
                else if (this->gate_13_onoff == 2)
                    this->gate_13_out2_number_set(v);
            }
            
            void message_22_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_13_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_13_onoff_set(converted);
                }
            }
            
            void message_22_trigger_bang() {
                this->message_22_out_set(this->message_22_set);
            }
            
            void gate_12_onoff_set(number v) {
                this->gate_12_onoff = v;
            }
            
            void eventoutlet_09_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_09_out1_number_set(v);
            }
            
            void expr_32_out1_set(number v) {
                this->expr_32_out1 = v;
                this->eventoutlet_09_in1_number_set(this->expr_32_out1);
            }
            
            void expr_32_in1_set(number in1) {
                this->expr_32_in1 = in1;
                this->expr_32_out1_set(rnbo_pow(10, this->expr_32_in1 * 0.05));//#map:livegrain/rand-volume/dbtoa_obj-1:1
            }
            
            void scale_34_out_set(const list& v) {
                this->scale_34_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_32_in1_set(converted);
                }
            }
            
            void scale_34_input_set(const list& v) {
                this->scale_34_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_34_inlow,
                        this->scale_34_inhigh,
                        this->scale_34_outlow,
                        this->scale_34_outhigh,
                        this->scale_34_power
                    ));
                }
            
                this->scale_34_out_set(tmp);
            }
            
            void gate_12_out1_number_set(number v) {
                this->gate_12_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_34_input_set(converted);
                }
            }
            
            void scale_33_out_set(const list& v) {
                this->scale_33_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_32_in1_set(converted);
                }
            }
            
            void scale_33_input_set(const list& v) {
                this->scale_33_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_33_inlow,
                        this->scale_33_inhigh,
                        this->scale_33_outlow,
                        this->scale_33_outhigh,
                        this->scale_33_power
                    ));
                }
            
                this->scale_33_out_set(tmp);
            }
            
            void gate_12_out2_number_set(number v) {
                this->gate_12_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_33_input_set(converted);
                }
            }
            
            void gate_12_input_number_set(number v) {
                if (this->gate_12_onoff == 1)
                    this->gate_12_out1_number_set(v);
                else if (this->gate_12_onoff == 2)
                    this->gate_12_out2_number_set(v);
            }
            
            void message_20_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_12_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_12_onoff_set(converted);
                }
            }
            
            void message_20_trigger_bang() {
                this->message_20_out_set(this->message_20_set);
            }
            
            void select_15_match1_bang() {
                this->message_22_trigger_bang();
                this->message_20_trigger_bang();
            }
            
            void select_15_nomatch_number_set(number ) {}
            
            void select_15_input_number_set(number v) {
                if (v == this->select_15_test1)
                    this->select_15_match1_bang();
                else
                    this->select_15_nomatch_number_set(v);
            }
            
            void expr_34_out1_set(number v) {
                this->expr_34_out1 = v;
                this->select_15_input_number_set(this->expr_34_out1);
            }
            
            void expr_34_in1_set(number in1) {
                this->expr_34_in1 = in1;
                this->expr_34_out1_set(this->expr_34_in1 >= this->expr_34_in2);//#map:livegrain/rand-volume/>=_obj-80:1
            }
            
            void message_21_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_13_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_13_onoff_set(converted);
                }
            }
            
            void message_21_trigger_bang() {
                this->message_21_out_set(this->message_21_set);
            }
            
            void message_19_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_12_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_12_onoff_set(converted);
                }
            }
            
            void message_19_trigger_bang() {
                this->message_19_out_set(this->message_19_set);
            }
            
            void select_14_match1_bang() {
                this->message_21_trigger_bang();
                this->message_19_trigger_bang();
            }
            
            void select_14_nomatch_number_set(number ) {}
            
            void select_14_input_number_set(number v) {
                if (v == this->select_14_test1)
                    this->select_14_match1_bang();
                else
                    this->select_14_nomatch_number_set(v);
            }
            
            void expr_33_out1_set(number v) {
                this->expr_33_out1 = v;
                this->select_14_input_number_set(this->expr_33_out1);
            }
            
            void expr_33_in1_set(number in1) {
                this->expr_33_in1 = in1;
                this->expr_33_out1_set(this->expr_33_in1 <= this->expr_33_in2);//#map:livegrain/rand-volume/<=_obj-82:1
            }
            
            void trigger_11_out2_set(number v) {
                this->expr_34_in1_set(v);
                this->expr_33_in1_set(v);
            }
            
            void trigger_11_out1_set(number v) {
                this->gate_13_input_number_set(v);
            }
            
            void trigger_11_input_number_set(number v) {
                this->trigger_11_out2_set(v);
                this->trigger_11_out1_set(v);
            }
            
            void receive_16_output_number_set(number v) {
                this->receive_16_output_number = v;
                this->trigger_11_input_number_set(v);
            }
            
            void random_07_result_set(number v) {
                this->gate_12_input_number_set(v);
            }
            
            void random_07_trigger_bang() {
                {
                    this->random_07_result_set(this->random(0, this->random_07_limit));
                }
            }
            
            void eventinlet_19_out1_bang_bang() {
                this->random_07_trigger_bang();
            }
            
            void message_19_set_set(const list& v) {
                this->message_19_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-volume/message_obj-7"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_20_set_set(const list& v) {
                this->message_20_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-volume/message_obj-6"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_21_set_set(const list& v) {
                this->message_21_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-volume/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_22_set_set(const list& v) {
                this->message_22_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-volume/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_07_limit_setter(number v) {
                if (v >= 0)
                    this->random_07_limit = v;
            }
            
            void numberobj_28_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_28_value = localvalue;
            }
            
            void numberobj_29_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_29_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_29_value = localvalue;
            }
            
            void random_07_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_07_nz_state
                );
            }
            
            void random_07_nz_init() {
                this->random_07_nz_reset();
            }
            
            void random_07_nz_seed(number v) {
                xoshiro_reset(v, this->random_07_nz_state);
            }
            
            number random_07_nz_next() {
                return xoshiro_next(this->random_07_nz_state);
            }
            
            void message_19_init() {
                this->message_19_set_set({1});
            }
            
            void message_20_init() {
                this->message_20_set_set({2});
            }
            
            void numberobj_28_init() {
                this->numberobj_28_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-volume/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_28_value;
            }
            
            void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_28_value_set(preset["value"]);
            }
            
            void message_21_init() {
                this->message_21_set_set({1});
            }
            
            void message_22_init() {
                this->message_22_set_set({2});
            }
            
            void numberobj_29_init() {
                this->numberobj_29_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-volume/number_obj-5"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_29_value;
            }
            
            void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_29_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                scale_33_inlow = 0;
                scale_33_inhigh = 99;
                scale_33_outlow = -70;
                scale_33_outhigh = 0;
                scale_33_power = 1;
                random_07_limit = 100;
                random_07_limit_setter(random_07_limit);
                random_07_seed = 0;
                expr_32_in1 = 0;
                expr_32_out1 = 0;
                gate_12_onoff = 0;
                gate_12_out1_number = 0;
                gate_12_out2_number = 0;
                scale_34_inlow = 99;
                scale_34_inhigh = 0;
                scale_34_outlow = -70;
                scale_34_outhigh = 0;
                scale_34_power = 1;
                receive_14_output_number = 0;
                receive_15_output_number = 0;
                gate_13_onoff = 0;
                gate_13_out1_number = 0;
                gate_13_out2_number = 0;
                receive_16_output_number = 0;
                select_14_test1 = 1;
                scale_35_inlow = -100;
                scale_35_inhigh = 0;
                scale_35_outlow = 0.1;
                scale_35_outhigh = 1;
                scale_35_power = 1;
                expr_33_in1 = 0;
                expr_33_in2 = 0;
                expr_33_out1 = 0;
                numberobj_28_value = 0;
                numberobj_28_value_setter(numberobj_28_value);
                select_15_test1 = 1;
                expr_34_in1 = 0;
                expr_34_in2 = 1;
                expr_34_out1 = 0;
                numberobj_29_value = 0;
                numberobj_29_value_setter(numberobj_29_value);
                scale_36_inlow = 1;
                scale_36_inhigh = 100;
                scale_36_outlow = 1;
                scale_36_outhigh = 0.1;
                scale_36_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_28_currentFormat = 6;
                numberobj_28_lastValue = 0;
                numberobj_29_currentFormat = 6;
                numberobj_29_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list scale_33_input;
                number scale_33_inlow;
                number scale_33_inhigh;
                number scale_33_outlow;
                number scale_33_outhigh;
                number scale_33_power;
                list scale_33_out;
                number random_07_limit;
                number random_07_seed;
                number expr_32_in1;
                number expr_32_out1;
                number gate_12_onoff;
                number gate_12_out1_number;
                list gate_12_out1_list;
                number gate_12_out2_number;
                list gate_12_out2_list;
                list message_19_set;
                list message_20_set;
                list scale_34_input;
                number scale_34_inlow;
                number scale_34_inhigh;
                number scale_34_outlow;
                number scale_34_outhigh;
                number scale_34_power;
                list scale_34_out;
                number receive_14_output_number;
                list receive_14_output_list;
                number receive_15_output_number;
                list receive_15_output_list;
                number gate_13_onoff;
                number gate_13_out1_number;
                list gate_13_out1_list;
                number gate_13_out2_number;
                list gate_13_out2_list;
                number receive_16_output_number;
                list receive_16_output_list;
                number select_14_test1;
                list scale_35_input;
                number scale_35_inlow;
                number scale_35_inhigh;
                number scale_35_outlow;
                number scale_35_outhigh;
                number scale_35_power;
                list scale_35_out;
                number expr_33_in1;
                number expr_33_in2;
                number expr_33_out1;
                number numberobj_28_value;
                number select_15_test1;
                list message_21_set;
                number expr_34_in1;
                number expr_34_in2;
                number expr_34_out1;
                list message_22_set;
                number numberobj_29_value;
                list scale_36_input;
                number scale_36_inlow;
                number scale_36_inhigh;
                number scale_36_outlow;
                number scale_36_outhigh;
                number scale_36_power;
                list scale_36_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                UInt random_07_nz_state[4] = { };
                Int numberobj_28_currentFormat;
                number numberobj_28_lastValue;
                Int numberobj_29_currentFormat;
                number numberobj_29_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_103 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_103()
            {
            }
            
            ~RNBOSubpatcher_103()
            {
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("livegrain/rand-pitchspeed/number_obj-40") == objectId)
                        this->numberobj_30_valin_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-38") == objectId)
                        this->numberobj_31_valin_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-15") == objectId)
                        this->numberobj_32_valin_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-17") == objectId)
                        this->numberobj_33_valin_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-71") == objectId)
                        this->numberobj_34_valin_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-16") == objectId)
                        this->numberobj_35_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("livegrain/rand-pitchspeed/number_obj-40") == objectId)
                        this->numberobj_30_format_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-38") == objectId)
                        this->numberobj_31_format_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-15") == objectId)
                        this->numberobj_32_format_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-17") == objectId)
                        this->numberobj_33_format_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-71") == objectId)
                        this->numberobj_34_format_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/number_obj-16") == objectId)
                        this->numberobj_35_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_23_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_24_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_25_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_26_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_23_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_24_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_25_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_26_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_23_listin_bang_bang();
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_24_listin_bang_bang();
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_25_listin_bang_bang();
            
                    if (TAG("livegrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_26_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-40"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-40";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-38"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-38";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-pitchspeed/message_obj-32"):
                    {
                    return "livegrain/rand-pitchspeed/message_obj-32";
                    }
                case TAG("livegrain/rand-pitchspeed/message_obj-31"):
                    {
                    return "livegrain/rand-pitchspeed/message_obj-31";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-15"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-15";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-17"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-17";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-71"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-71";
                    }
                case TAG("livegrain/rand-pitchspeed/message_obj-70"):
                    {
                    return "livegrain/rand-pitchspeed/message_obj-70";
                    }
                case TAG("livegrain/rand-pitchspeed/message_obj-66"):
                    {
                    return "livegrain/rand-pitchspeed/message_obj-66";
                    }
                case TAG("livegrain/rand-pitchspeed/number_obj-16"):
                    {
                    return "livegrain/rand-pitchspeed/number_obj-16";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_20_out1_number_set(number v) {
                this->trigger_12_input_number_set(v);
            }
            
            void eventinlet_20_out1_list_set(const list& v) {
                this->trigger_12_input_list_set(v);
            }
            
            void numberobj_30_valin_set(number v) {
                this->numberobj_30_value_set(v);
            }
            
            void numberobj_30_format_set(number v) {
                this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_31_valin_set(number v) {
                this->numberobj_31_value_set(v);
            }
            
            void numberobj_31_format_set(number v) {
                this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_23_listin_list_set(const list& v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_number_set(number v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_bang_bang() {
                this->message_23_trigger_bang();
            }
            
            void message_24_listin_list_set(const list& v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_number_set(number v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_bang_bang() {
                this->message_24_trigger_bang();
            }
            
            void numberobj_32_valin_set(number v) {
                this->numberobj_32_value_set(v);
            }
            
            void numberobj_32_format_set(number v) {
                this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_33_valin_set(number v) {
                this->numberobj_33_value_set(v);
            }
            
            void numberobj_33_format_set(number v) {
                this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_34_valin_set(number v) {
                this->numberobj_34_value_set(v);
            }
            
            void numberobj_34_format_set(number v) {
                this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_25_listin_list_set(const list& v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_number_set(number v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_bang_bang() {
                this->message_25_trigger_bang();
            }
            
            void message_26_listin_list_set(const list& v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_number_set(number v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_bang_bang() {
                this->message_26_trigger_bang();
            }
            
            void numberobj_35_valin_set(number v) {
                this->numberobj_35_value_set(v);
            }
            
            void numberobj_35_format_set(number v) {
                this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_21_out1_bang_bang() {
                this->gate_15_onoff_bang();
            }
            
            void eventinlet_21_out1_number_set(number v) {
                this->gate_15_onoff_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_30_init();
                this->random_08_nz_init();
                this->numberobj_31_init();
                this->message_23_init();
                this->message_24_init();
                this->numberobj_32_init();
                this->numberobj_33_init();
                this->numberobj_34_init();
                this->message_25_init();
                this->message_26_init();
                this->numberobj_35_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void scale_38_outhigh_set(number v) {
                this->scale_38_outhigh = v;
            }
            
            void expr_37_in2_set(number v) {
                this->expr_37_in2 = v;
            }
            
            void scale_38_inhigh_set(number v) {
                this->scale_38_inhigh = v;
            }
            
            void scale_37_outlow_set(number v) {
                this->scale_37_outlow = v;
            }
            
            void scale_37_inlow_set(number v) {
                this->scale_37_inlow = v;
            }
            
            void expr_35_in2_set(number v) {
                this->expr_35_in2 = v;
            }
            
            void numberobj_32_output_set(number v) {
                this->scale_38_outhigh_set(v);
                this->expr_37_in2_set(v);
                this->scale_38_inhigh_set(v);
                this->scale_37_outlow_set(v);
                this->scale_37_inlow_set(v);
                this->expr_35_in2_set(v);
            }
            
            void numberobj_32_value_set(number v) {
                this->numberobj_32_value_setter(v);
                v = this->numberobj_32_value;
                number localvalue = v;
            
                if (this->numberobj_32_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_32_output_set(localvalue);
            }
            
            void receive_17_output_number_set(number v) {
                this->receive_17_output_number = v;
                this->numberobj_32_value_set(v);
            }
            
            void scale_38_outlow_set(number v) {
                this->scale_38_outlow = v;
            }
            
            void random_08_limit_set(number v) {
                this->random_08_limit_setter(v);
                v = this->random_08_limit;
            }
            
            void expr_37_out1_set(number v) {
                this->expr_37_out1 = v;
                this->random_08_limit_set(this->expr_37_out1);
            }
            
            void expr_37_in1_set(number in1) {
                this->expr_37_in1 = in1;
                this->expr_37_out1_set(this->expr_37_in1 - this->expr_37_in2);//#map:livegrain/rand-pitchspeed/-_obj-18:1
            }
            
            void scale_38_inlow_set(number v) {
                this->scale_38_inlow = v;
            }
            
            void scale_37_outhigh_set(number v) {
                this->scale_37_outhigh = v;
            }
            
            void scale_37_inhigh_set(number v) {
                this->scale_37_inhigh = v;
            }
            
            void numberobj_33_output_set(number v) {
                this->scale_38_outlow_set(v);
                this->expr_37_in1_set(v);
                this->scale_38_inlow_set(v);
                this->scale_37_outhigh_set(v);
                this->scale_37_inhigh_set(v);
            }
            
            void numberobj_33_value_set(number v) {
                this->numberobj_33_value_setter(v);
                v = this->numberobj_33_value;
                number localvalue = v;
            
                if (this->numberobj_33_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_33_output_set(localvalue);
            }
            
            void receive_18_output_number_set(number v) {
                this->receive_18_output_number = v;
                this->numberobj_33_value_set(v);
            }
            
            void gate_16_onoff_set(number v) {
                this->gate_16_onoff = v;
            }
            
            void scale_38_power_set(number v) {
                this->scale_38_power = v;
            }
            
            void numberobj_34_output_set(number v) {
                this->scale_38_power_set(v);
            }
            
            void numberobj_34_value_set(number v) {
                this->numberobj_34_value_setter(v);
                v = this->numberobj_34_value;
                number localvalue = v;
            
                if (this->numberobj_34_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_34_output_set(localvalue);
            }
            
            void scale_39_out_set(const list& v) {
                this->scale_39_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_34_value_set(converted);
                }
            }
            
            void scale_39_input_set(const list& v) {
                this->scale_39_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_39_inlow,
                        this->scale_39_inhigh,
                        this->scale_39_outlow,
                        this->scale_39_outhigh,
                        this->scale_39_power
                    ));
                }
            
                this->scale_39_out_set(tmp);
            }
            
            void gate_16_out1_number_set(number v) {
                this->gate_16_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_39_input_set(converted);
                }
            }
            
            void scale_37_power_set(number v) {
                this->scale_37_power = v;
            }
            
            void numberobj_35_output_set(number v) {
                this->scale_37_power_set(v);
            }
            
            void numberobj_35_value_set(number v) {
                this->numberobj_35_value_setter(v);
                v = this->numberobj_35_value;
                number localvalue = v;
            
                if (this->numberobj_35_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_35_output_set(localvalue);
            }
            
            void scale_40_out_set(const list& v) {
                this->scale_40_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_35_value_set(converted);
                }
            }
            
            void scale_40_input_set(const list& v) {
                this->scale_40_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_40_inlow,
                        this->scale_40_inhigh,
                        this->scale_40_outlow,
                        this->scale_40_outhigh,
                        this->scale_40_power
                    ));
                }
            
                this->scale_40_out_set(tmp);
            }
            
            void gate_16_out2_number_set(number v) {
                this->gate_16_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_40_input_set(converted);
                }
            }
            
            void gate_16_input_number_set(number v) {
                if (this->gate_16_onoff == 1)
                    this->gate_16_out1_number_set(v);
                else if (this->gate_16_onoff == 2)
                    this->gate_16_out2_number_set(v);
            }
            
            void message_26_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_16_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_16_onoff_set(converted);
                }
            }
            
            void message_26_trigger_bang() {
                this->message_26_out_set(this->message_26_set);
            }
            
            void gate_14_onoff_set(number v) {
                this->gate_14_onoff = v;
            }
            
            void eventoutlet_11_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_10_out2_number_set(v);
            }
            
            void expr_38_out1_set(number v) {
                this->expr_38_out1 = v;
                this->eventoutlet_11_in1_number_set(this->expr_38_out1);
            }
            
            void expr_38_in1_set(number in1) {
                this->expr_38_in1 = in1;
                this->expr_38_out1_set(rnbo_abs(this->expr_38_in1));//#map:livegrain/rand-pitchspeed/abs_obj-14:1
            }
            
            void eventoutlet_10_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_10_out1_number_set(v);
            }
            
            void numberobj_30_output_set(number v) {
                this->expr_38_in1_set(v);
                this->eventoutlet_10_in1_number_set(v);
            }
            
            void numberobj_30_value_set(number v) {
                this->numberobj_30_value_setter(v);
                v = this->numberobj_30_value;
                number localvalue = v;
            
                if (this->numberobj_30_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-40"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_30_output_set(localvalue);
            }
            
            void gate_15_out1_list_set(const list& v) {
                this->gate_15_out1_list = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_30_value_set(converted);
                }
            }
            
            void numberobj_31_output_set(number v) {
                this->numberobj_30_value_set(v);
            }
            
            void numberobj_31_value_set(number v) {
                this->numberobj_31_value_setter(v);
                v = this->numberobj_31_value;
                number localvalue = v;
            
                if (this->numberobj_31_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-38"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_31_output_set(localvalue);
            }
            
            void expr_36_out1_set(number v) {
                this->expr_36_out1 = v;
                this->numberobj_31_value_set(this->expr_36_out1);
            }
            
            void expr_36_in1_set(number in1) {
                this->expr_36_in1 = in1;
                this->expr_36_out1_set(-this->expr_36_in1);//#map:livegrain/rand-pitchspeed/neg_obj-11:1
            }
            
            void gate_15_out2_list_set(const list& v) {
                this->gate_15_out2_list = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_36_in1_set(converted);
                }
            }
            
            void gate_15_input_list_set(const list& v) {
                if (this->gate_15_onoff == 1)
                    this->gate_15_out1_list_set(v);
                else if (this->gate_15_onoff == 2)
                    this->gate_15_out2_list_set(v);
            }
            
            void scale_38_out_set(const list& v) {
                this->scale_38_out = jsCreateListCopy(v);
                this->gate_15_input_list_set(v);
            }
            
            void scale_38_input_set(const list& v) {
                this->scale_38_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_38_inlow,
                        this->scale_38_inhigh,
                        this->scale_38_outlow,
                        this->scale_38_outhigh,
                        this->scale_38_power
                    ));
                }
            
                this->scale_38_out_set(tmp);
            }
            
            void gate_14_out1_number_set(number v) {
                this->gate_14_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_38_input_set(converted);
                }
            }
            
            void scale_37_out_set(const list& v) {
                this->scale_37_out = jsCreateListCopy(v);
                this->gate_15_input_list_set(v);
            }
            
            void scale_37_input_set(const list& v) {
                this->scale_37_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_37_inlow,
                        this->scale_37_inhigh,
                        this->scale_37_outlow,
                        this->scale_37_outhigh,
                        this->scale_37_power
                    ));
                }
            
                this->scale_37_out_set(tmp);
            }
            
            void gate_14_out2_number_set(number v) {
                this->gate_14_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_37_input_set(converted);
                }
            }
            
            void gate_14_input_number_set(number v) {
                if (this->gate_14_onoff == 1)
                    this->gate_14_out1_number_set(v);
                else if (this->gate_14_onoff == 2)
                    this->gate_14_out2_number_set(v);
            }
            
            void message_24_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_14_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_14_onoff_set(converted);
                }
            }
            
            void message_24_trigger_bang() {
                this->message_24_out_set(this->message_24_set);
            }
            
            void select_17_match1_bang() {
                this->message_26_trigger_bang();
                this->message_24_trigger_bang();
            }
            
            void select_17_nomatch_number_set(number ) {}
            
            void select_17_input_number_set(number v) {
                if (v == this->select_17_test1)
                    this->select_17_match1_bang();
                else
                    this->select_17_nomatch_number_set(v);
            }
            
            void expr_40_out1_set(number v) {
                this->expr_40_out1 = v;
                this->select_17_input_number_set(this->expr_40_out1);
            }
            
            void expr_40_in1_set(number in1) {
                this->expr_40_in1 = in1;
                this->expr_40_out1_set(this->expr_40_in1 >= this->expr_40_in2);//#map:livegrain/rand-pitchspeed/>=_obj-80:1
            }
            
            void message_25_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_16_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_16_onoff_set(converted);
                }
            }
            
            void message_25_trigger_bang() {
                this->message_25_out_set(this->message_25_set);
            }
            
            void message_23_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_14_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_14_onoff_set(converted);
                }
            }
            
            void message_23_trigger_bang() {
                this->message_23_out_set(this->message_23_set);
            }
            
            void select_16_match1_bang() {
                this->message_25_trigger_bang();
                this->message_23_trigger_bang();
            }
            
            void select_16_nomatch_number_set(number ) {}
            
            void select_16_input_number_set(number v) {
                if (v == this->select_16_test1)
                    this->select_16_match1_bang();
                else
                    this->select_16_nomatch_number_set(v);
            }
            
            void expr_39_out1_set(number v) {
                this->expr_39_out1 = v;
                this->select_16_input_number_set(this->expr_39_out1);
            }
            
            void expr_39_in1_set(number in1) {
                this->expr_39_in1 = in1;
                this->expr_39_out1_set(this->expr_39_in1 <= this->expr_39_in2);//#map:livegrain/rand-pitchspeed/<=_obj-82:1
            }
            
            void trigger_13_out2_set(number v) {
                this->expr_40_in1_set(v);
                this->expr_39_in1_set(v);
            }
            
            void trigger_13_out1_set(number v) {
                this->gate_16_input_number_set(v);
            }
            
            void trigger_13_input_number_set(number v) {
                this->trigger_13_out2_set(trunc(v));
                this->trigger_13_out1_set(trunc(v));
            }
            
            void receive_19_output_number_set(number v) {
                this->receive_19_output_number = v;
                this->trigger_13_input_number_set(v);
            }
            
            void gate_15_onoff_set(number v) {
                this->gate_15_onoff = v;
            }
            
            void gate_15_out1_number_set(number v) {
                this->gate_15_out1_number = v;
                this->numberobj_30_value_set(v);
            }
            
            void gate_15_out2_number_set(number v) {
                this->gate_15_out2_number = v;
                this->expr_36_in1_set(v);
            }
            
            void gate_15_input_number_set(number v) {
                if (this->gate_15_onoff == 1)
                    this->gate_15_out1_number_set(v);
                else if (this->gate_15_onoff == 2)
                    this->gate_15_out2_number_set(v);
            }
            
            void eventinlet_21_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_15_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_15_onoff_set(converted);
                }
            }
            
            void numberobj_32_value_bang() {
                number v = this->numberobj_32_value;
                number localvalue = v;
            
                if (this->numberobj_32_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_32_output_set(localvalue);
            }
            
            void trigger_12_out3_bang() {
                this->numberobj_32_value_bang();
            }
            
            void numberobj_33_value_bang() {
                number v = this->numberobj_33_value;
                number localvalue = v;
            
                if (this->numberobj_33_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("livegrain/rand-pitchspeed/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_33_output_set(localvalue);
            }
            
            void trigger_12_out2_bang() {
                this->numberobj_33_value_bang();
            }
            
            void expr_35_out1_set(number v) {
                this->expr_35_out1 = v;
                this->gate_14_input_number_set(this->expr_35_out1);
            }
            
            void expr_35_in1_set(number in1) {
                this->expr_35_in1 = in1;
                this->expr_35_out1_set(this->expr_35_in1 + this->expr_35_in2);//#map:livegrain/rand-pitchspeed/+_obj-28:1
            }
            
            void random_08_result_set(number v) {
                this->expr_35_in1_set(v);
            }
            
            void random_08_trigger_bang() {
                {
                    this->random_08_result_set(this->random(0, this->random_08_limit));
                }
            }
            
            void trigger_12_out1_bang() {
                this->random_08_trigger_bang();
            }
            
            void trigger_12_input_bang_bang() {
                this->trigger_12_out3_bang();
                this->trigger_12_out2_bang();
                this->trigger_12_out1_bang();
            }
            
            void eventinlet_20_out1_bang_bang() {
                this->trigger_12_input_bang_bang();
            }
            
            void trigger_12_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_12_out3_bang();
                this->trigger_12_out2_bang();
                this->trigger_12_out1_bang();
            }
            
            void trigger_12_input_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->trigger_12_out3_bang();
                this->trigger_12_out2_bang();
                this->trigger_12_out1_bang();
            }
            
            void message_23_set_set(const list& v) {
                this->message_23_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-pitchspeed/message_obj-32"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_24_set_set(const list& v) {
                this->message_24_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-pitchspeed/message_obj-31"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_25_set_set(const list& v) {
                this->message_25_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-pitchspeed/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_26_set_set(const list& v) {
                this->message_26_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-pitchspeed/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void gate_15_onoff_bang() {}
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_30_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_30_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_30_value = localvalue;
            }
            
            void random_08_limit_setter(number v) {
                if (v >= 0)
                    this->random_08_limit = v;
            }
            
            void numberobj_31_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_31_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_31_value = localvalue;
            }
            
            void numberobj_32_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_32_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_32_value = localvalue;
            }
            
            void numberobj_33_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_33_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_33_value = localvalue;
            }
            
            void numberobj_34_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_34_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_34_value = localvalue;
            }
            
            void numberobj_35_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_35_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_35_value = localvalue;
            }
            
            void numberobj_30_init() {
                this->numberobj_30_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-40"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_30_value;
            }
            
            void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_30_value_set(preset["value"]);
            }
            
            void random_08_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_08_nz_state
                );
            }
            
            void random_08_nz_init() {
                this->random_08_nz_reset();
            }
            
            void random_08_nz_seed(number v) {
                xoshiro_reset(v, this->random_08_nz_state);
            }
            
            number random_08_nz_next() {
                return xoshiro_next(this->random_08_nz_state);
            }
            
            void numberobj_31_init() {
                this->numberobj_31_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-38"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_31_value;
            }
            
            void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_31_value_set(preset["value"]);
            }
            
            void message_23_init() {
                this->message_23_set_set({1});
            }
            
            void message_24_init() {
                this->message_24_set_set({2});
            }
            
            void numberobj_32_init() {
                this->numberobj_32_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_32_value;
            }
            
            void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_32_value_set(preset["value"]);
            }
            
            void numberobj_33_init() {
                this->numberobj_33_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-17"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_33_value;
            }
            
            void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_33_value_set(preset["value"]);
            }
            
            void numberobj_34_init() {
                this->numberobj_34_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_34_value;
            }
            
            void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_34_value_set(preset["value"]);
            }
            
            void message_25_init() {
                this->message_25_set_set({1});
            }
            
            void message_26_init() {
                this->message_26_set_set({2});
            }
            
            void numberobj_35_init() {
                this->numberobj_35_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("livegrain/rand-pitchspeed/number_obj-16"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_35_value;
            }
            
            void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_35_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_14_onoff = 0;
                gate_14_out1_number = 0;
                gate_14_out2_number = 0;
                numberobj_30_value = 0;
                numberobj_30_value_setter(numberobj_30_value);
                gate_15_onoff = 0;
                gate_15_out1_number = 0;
                gate_15_out2_number = 0;
                scale_37_inlow = 0;
                scale_37_inhigh = 1;
                scale_37_outlow = 0;
                scale_37_outhigh = 1;
                scale_37_power = 1;
                expr_35_in1 = 0;
                expr_35_in2 = 0;
                expr_35_out1 = 0;
                random_08_limit = 1;
                random_08_limit_setter(random_08_limit);
                random_08_seed = 0;
                numberobj_31_value = 0;
                numberobj_31_value_setter(numberobj_31_value);
                expr_36_in1 = 0;
                expr_36_out1 = 0;
                scale_38_inlow = 0;
                scale_38_inhigh = 1;
                scale_38_outlow = 0;
                scale_38_outhigh = 1;
                scale_38_power = 1;
                expr_37_in1 = 0;
                expr_37_in2 = 0;
                expr_37_out1 = 0;
                numberobj_32_value = 0;
                numberobj_32_value_setter(numberobj_32_value);
                receive_17_output_number = 0;
                expr_38_in1 = 0;
                expr_38_out1 = 0;
                numberobj_33_value = 0;
                numberobj_33_value_setter(numberobj_33_value);
                receive_18_output_number = 0;
                gate_16_onoff = 0;
                gate_16_out1_number = 0;
                gate_16_out2_number = 0;
                receive_19_output_number = 0;
                select_16_test1 = 1;
                scale_39_inlow = -100;
                scale_39_inhigh = 0;
                scale_39_outlow = 0.1;
                scale_39_outhigh = 1;
                scale_39_power = 1;
                expr_39_in1 = 0;
                expr_39_in2 = 0;
                expr_39_out1 = 0;
                numberobj_34_value = 0;
                numberobj_34_value_setter(numberobj_34_value);
                select_17_test1 = 1;
                expr_40_in1 = 0;
                expr_40_in2 = 1;
                expr_40_out1 = 0;
                numberobj_35_value = 0;
                numberobj_35_value_setter(numberobj_35_value);
                scale_40_inlow = 1;
                scale_40_inhigh = 100;
                scale_40_outlow = 1;
                scale_40_outhigh = 0.1;
                scale_40_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_30_currentFormat = 6;
                numberobj_30_lastValue = 0;
                numberobj_31_currentFormat = 6;
                numberobj_31_lastValue = 0;
                numberobj_32_currentFormat = 6;
                numberobj_32_lastValue = 0;
                numberobj_33_currentFormat = 6;
                numberobj_33_lastValue = 0;
                numberobj_34_currentFormat = 6;
                numberobj_34_lastValue = 0;
                numberobj_35_currentFormat = 6;
                numberobj_35_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gate_14_onoff;
                number gate_14_out1_number;
                list gate_14_out1_list;
                number gate_14_out2_number;
                list gate_14_out2_list;
                number numberobj_30_value;
                number gate_15_onoff;
                number gate_15_out1_number;
                list gate_15_out1_list;
                number gate_15_out2_number;
                list gate_15_out2_list;
                list scale_37_input;
                number scale_37_inlow;
                number scale_37_inhigh;
                number scale_37_outlow;
                number scale_37_outhigh;
                number scale_37_power;
                list scale_37_out;
                number expr_35_in1;
                number expr_35_in2;
                number expr_35_out1;
                number random_08_limit;
                number random_08_seed;
                number numberobj_31_value;
                number expr_36_in1;
                number expr_36_out1;
                list message_23_set;
                list message_24_set;
                list scale_38_input;
                number scale_38_inlow;
                number scale_38_inhigh;
                number scale_38_outlow;
                number scale_38_outhigh;
                number scale_38_power;
                list scale_38_out;
                number expr_37_in1;
                number expr_37_in2;
                number expr_37_out1;
                number numberobj_32_value;
                number receive_17_output_number;
                list receive_17_output_list;
                number expr_38_in1;
                number expr_38_out1;
                number numberobj_33_value;
                number receive_18_output_number;
                list receive_18_output_list;
                number gate_16_onoff;
                number gate_16_out1_number;
                list gate_16_out1_list;
                number gate_16_out2_number;
                list gate_16_out2_list;
                number receive_19_output_number;
                list receive_19_output_list;
                number select_16_test1;
                list scale_39_input;
                number scale_39_inlow;
                number scale_39_inhigh;
                number scale_39_outlow;
                number scale_39_outhigh;
                number scale_39_power;
                list scale_39_out;
                number expr_39_in1;
                number expr_39_in2;
                number expr_39_out1;
                number numberobj_34_value;
                number select_17_test1;
                list message_25_set;
                number expr_40_in1;
                number expr_40_in2;
                number expr_40_out1;
                list message_26_set;
                number numberobj_35_value;
                list scale_40_input;
                number scale_40_inlow;
                number scale_40_inhigh;
                number scale_40_outlow;
                number scale_40_outhigh;
                number scale_40_power;
                list scale_40_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_30_currentFormat;
                number numberobj_30_lastValue;
                UInt random_08_nz_state[4] = { };
                Int numberobj_31_currentFormat;
                number numberobj_31_lastValue;
                Int numberobj_32_currentFormat;
                number numberobj_32_lastValue;
                Int numberobj_33_currentFormat;
                number numberobj_33_lastValue;
                Int numberobj_34_currentFormat;
                number numberobj_34_lastValue;
                Int numberobj_35_currentFormat;
                number numberobj_35_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_104 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_117;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_104()
            {
            }
            
            ~RNBOSubpatcher_104()
            {
            }
            
            virtual RNBOSubpatcher_117* getPatcher() const {
                return static_cast<RNBOSubpatcher_117 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-reverse/message_obj-37") == objectId)
                        this->message_27_listin_number_set(payload);
            
                    if (TAG("livegrain/rand-reverse/message_obj-39") == objectId)
                        this->message_28_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-reverse/message_obj-37") == objectId)
                        this->message_27_listin_list_set(payload);
            
                    if (TAG("livegrain/rand-reverse/message_obj-39") == objectId)
                        this->message_28_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("livegrain/rand-reverse/message_obj-37") == objectId)
                        this->message_27_listin_bang_bang();
            
                    if (TAG("livegrain/rand-reverse/message_obj-39") == objectId)
                        this->message_28_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("livegrain/rand-reverse/message_obj-37"):
                    {
                    return "livegrain/rand-reverse/message_obj-37";
                    }
                case TAG("livegrain/rand-reverse/message_obj-39"):
                    {
                    return "livegrain/rand-reverse/message_obj-39";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_27_listin_list_set(const list& v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_number_set(number v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_bang_bang() {
                this->message_27_trigger_bang();
            }
            
            void eventinlet_22_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_09_trigger_bang();
            }
            
            void eventinlet_22_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_09_trigger_bang();
            }
            
            void message_28_listin_list_set(const list& v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_number_set(number v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_bang_bang() {
                this->message_28_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_27_init();
                this->random_09_nz_init();
                this->message_28_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_43_in2_set(number v) {
                this->expr_43_in2 = v;
            }
            
            void expr_42_in2_set(number v) {
                this->expr_42_in2 = v;
            }
            
            void scale_41_out_set(const list& v) {
                this->scale_41_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_43_in2_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_42_in2_set(converted);
                }
            }
            
            void scale_41_input_set(const list& v) {
                this->scale_41_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_41_inlow,
                        this->scale_41_inhigh,
                        this->scale_41_outlow,
                        this->scale_41_outhigh,
                        this->scale_41_power
                    ));
                }
            
                this->scale_41_out_set(tmp);
            }
            
            void receive_20_output_number_set(number v) {
                this->receive_20_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_41_input_set(converted);
                }
            }
            
            void eventoutlet_12_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_11_out1_list_set((list)v);
            }
            
            void message_28_out_set(const list& v) {
                this->eventoutlet_12_in1_list_set(v);
            }
            
            void message_28_trigger_bang() {
                this->message_28_out_set(this->message_28_set);
            }
            
            void select_19_match1_bang() {
                this->message_28_trigger_bang();
            }
            
            void select_19_nomatch_number_set(number ) {}
            
            void select_19_input_number_set(number v) {
                if (v == this->select_19_test1)
                    this->select_19_match1_bang();
                else
                    this->select_19_nomatch_number_set(v);
            }
            
            void expr_43_out1_set(number v) {
                this->expr_43_out1 = v;
                this->select_19_input_number_set(this->expr_43_out1);
            }
            
            void expr_43_in1_set(number in1) {
                this->expr_43_in1 = in1;
                this->expr_43_out1_set(this->expr_43_in1 >= this->expr_43_in2);//#map:livegrain/rand-reverse/>=_obj-10:1
            }
            
            void message_27_out_set(const list& v) {
                this->eventoutlet_12_in1_list_set(v);
            }
            
            void message_27_trigger_bang() {
                this->message_27_out_set(this->message_27_set);
            }
            
            void select_18_match1_bang() {
                this->message_27_trigger_bang();
            }
            
            void select_18_nomatch_number_set(number ) {}
            
            void select_18_input_number_set(number v) {
                if (v == this->select_18_test1)
                    this->select_18_match1_bang();
                else
                    this->select_18_nomatch_number_set(v);
            }
            
            void expr_42_out1_set(number v) {
                this->expr_42_out1 = v;
                this->select_18_input_number_set(this->expr_42_out1);
            }
            
            void expr_42_in1_set(number in1) {
                this->expr_42_in1 = in1;
                this->expr_42_out1_set(this->expr_42_in1 <= this->expr_42_in2);//#map:livegrain/rand-reverse/<=_obj-7:1
            }
            
            void expr_41_out1_set(number v) {
                this->expr_41_out1 = v;
                this->expr_43_in1_set(this->expr_41_out1);
                this->expr_42_in1_set(this->expr_41_out1);
            }
            
            void expr_41_in1_set(number in1) {
                this->expr_41_in1 = in1;
                this->expr_41_out1_set(this->expr_41_in1 - this->expr_41_in2);//#map:livegrain/rand-reverse/-_obj-2:1
            }
            
            void random_09_result_set(number v) {
                this->expr_41_in1_set(v);
            }
            
            void random_09_trigger_bang() {
                {
                    this->random_09_result_set(this->random(0, this->random_09_limit));
                }
            }
            
            void eventinlet_22_out1_bang_bang() {
                this->random_09_trigger_bang();
            }
            
            void message_27_set_set(const list& v) {
                this->message_27_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-reverse/message_obj-37"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_28_set_set(const list& v) {
                this->message_28_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("livegrain/rand-reverse/message_obj-39"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_09_limit_setter(number v) {
                if (v >= 0)
                    this->random_09_limit = v;
            }
            
            void message_27_init() {
                this->message_27_set_set({2});
            }
            
            void random_09_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_09_nz_state
                );
            }
            
            void random_09_nz_init() {
                this->random_09_nz_reset();
            }
            
            void random_09_nz_seed(number v) {
                xoshiro_reset(v, this->random_09_nz_state);
            }
            
            number random_09_nz_next() {
                return xoshiro_next(this->random_09_nz_state);
            }
            
            void message_28_init() {
                this->message_28_set_set({1});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_41_in1 = 0;
                expr_41_in2 = 100;
                expr_41_out1 = 0;
                select_18_test1 = 1;
                expr_42_in1 = 0;
                expr_42_in2 = 0;
                expr_42_out1 = 0;
                random_09_limit = 201;
                random_09_limit_setter(random_09_limit);
                random_09_seed = 0;
                select_19_test1 = 1;
                expr_43_in1 = 0;
                expr_43_in2 = 1;
                expr_43_out1 = 0;
                scale_41_inlow = -100;
                scale_41_inhigh = 100;
                scale_41_outlow = 100;
                scale_41_outhigh = -100;
                scale_41_power = 1;
                receive_20_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_27_set;
                number expr_41_in1;
                number expr_41_in2;
                number expr_41_out1;
                number select_18_test1;
                number expr_42_in1;
                number expr_42_in2;
                number expr_42_out1;
                number random_09_limit;
                number random_09_seed;
                list message_28_set;
                number select_19_test1;
                number expr_43_in1;
                number expr_43_in2;
                number expr_43_out1;
                list scale_41_input;
                number scale_41_inlow;
                number scale_41_inhigh;
                number scale_41_outlow;
                number scale_41_outhigh;
                number scale_41_power;
                list scale_41_out;
                number receive_20_output_number;
                list receive_20_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                UInt random_09_nz_state[4] = { };
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_117()
    {
    }
    
    ~RNBOSubpatcher_117()
    {
        delete this->p_05;
        delete this->p_06;
        delete this->p_07;
        delete this->p_08;
        delete this->p_09;
        delete this->p_10;
        delete this->p_11;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1494586265, false);
    }
    
    number minimum(number x, number y) {
        return (y < x ? y : x);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    
        if (this->getIsMuted())
            return;
    
        this->groove_01_perform(
            this->groove_01_rate_auto,
            this->groove_01_begin,
            this->groove_01_end,
            this->signals[0],
            this->signals[1],
            n
        );
    
        this->dspexpr_02_perform(this->signals[0], this->dspexpr_02_in2, this->signals[2], n);
        this->p_05_perform(this->signals[2], this->signals[0], n);
        this->p_06_perform(this->signals[0], this->signals[2], this->signals[3], n);
        this->numbertilde_09_perform(this->signals[1], this->dummyBuffer, n);
        this->p_07_perform(this->signals[1], n);
        this->dspexpr_03_perform(this->signals[3], this->signals[1], this->signals[0], n);
        this->signaladder_03_perform(this->signals[0], out2, out2, n);
        this->dspexpr_01_perform(this->signals[2], this->signals[1], this->signals[0], n);
        this->signaladder_04_perform(this->signals[0], out1, out1, n);
        this->p_08_perform(n);
        this->p_09_perform(n);
        this->p_10_perform(n);
        this->p_11_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->groove_01_dspsetup(forceDSPSetup);
        this->numbertilde_09_dspsetup(forceDSPSetup);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    void setVoiceIndex(Index index)  {
        this->_voiceIndex = index;
        this->p_05->setVoiceIndex(index);
        this->p_06->setVoiceIndex(index);
        this->p_07->setVoiceIndex(index);
        this->p_08->setVoiceIndex(index);
        this->p_09->setVoiceIndex(index);
        this->p_10->setVoiceIndex(index);
        this->p_11->setVoiceIndex(index);
    }
    
    void setNoteNumber(Int noteNumber)  {
        this->_noteNumber = noteNumber;
        this->p_05->setNoteNumber(noteNumber);
        this->p_06->setNoteNumber(noteNumber);
        this->p_07->setNoteNumber(noteNumber);
        this->p_08->setNoteNumber(noteNumber);
        this->p_09->setNoteNumber(noteNumber);
        this->p_10->setNoteNumber(noteNumber);
        this->p_11->setNoteNumber(noteNumber);
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_05 = new RNBOSubpatcher_98();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
        this->p_06 = new RNBOSubpatcher_99();
        this->p_06->setEngineAndPatcher(this->getEngine(), this);
        this->p_06->initialize();
        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
        this->p_07 = new RNBOSubpatcher_100();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
        this->p_08 = new RNBOSubpatcher_101();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
        this->p_09 = new RNBOSubpatcher_102();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
        this->p_10 = new RNBOSubpatcher_103();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
        this->p_11 = new RNBOSubpatcher_104();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "rand-filter"));
        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "rand-placement"));
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "rand-envelope"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "rand-lengthanddelay"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "rand-volume"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "rand-pitchspeed"));
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "rand-reverse"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                this->p_06->setParameterValue(index, v, time);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterValue(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterValue getPolyParameterValue(PatcherInterface** voices, ParameterIndex index)  {
        switch (index) {
        default:
            {
            return voices[0]->getParameterValue(index);
            }
        }
    }
    
    void setPolyParameterValue(
        PatcherInterface** voices,
        ParameterIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        switch (index) {
        default:
            {
            for (Index i = 0; i < 100; i++)
                voices[i]->setParameterValue(index, value, time);
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterName(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterId(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                index -= this->p_05->getNumParameters();
    
                if (index < this->p_06->getNumParameters())
                    this->p_06->getParameterInfo(index, info);
    
                index -= this->p_06->getNumParameters();
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                index -= this->p_07->getNumParameters();
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                index -= this->p_08->getNumParameters();
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                index -= this->p_09->getNumParameters();
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                index -= this->p_10->getNumParameters();
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        if (this->_voiceIndex == 1)
            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void sendPolyParameter(ParameterIndex index, Index voiceIndex, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset + voiceIndex - 1, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_05)
            return 0;
    
        if (subpatcher == this->p_06)
            return 0 + this->p_05->getNumParameters();
    
        if (subpatcher == this->p_07)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters();
    
        if (subpatcher == this->p_08)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters();
    
        if (subpatcher == this->p_09)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters();
    
        if (subpatcher == this->p_10)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters();
    
        if (subpatcher == this->p_11)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->constrainParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1494586265:
            {
            this->numbertilde_09_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("livegrain/number_obj-11") == objectId)
                this->numberobj_36_valin_set(payload);
    
            if (TAG("livegrain/number_obj-14") == objectId)
                this->numberobj_37_valin_set(payload);
    
            if (TAG("livegrain/number_obj-7") == objectId)
                this->numberobj_38_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("livegrain/number_obj-11") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("livegrain/number_obj-14") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("livegrain/number_obj-7") == objectId)
                this->numberobj_38_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("livegrain/number~_obj-31") == objectId)
                this->numbertilde_09_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("livegrain/number~_obj-31") == objectId)
                this->numbertilde_09_mode_set(payload);
    
            break;
            }
        }
    
        this->p_05->processNumMessage(tag, objectId, time, payload);
        this->p_06->processNumMessage(tag, objectId, time, payload);
        this->p_07->processNumMessage(tag, objectId, time, payload);
        this->p_08->processNumMessage(tag, objectId, time, payload);
        this->p_09->processNumMessage(tag, objectId, time, payload);
        this->p_10->processNumMessage(tag, objectId, time, payload);
        this->p_11->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("livegrain/number~_obj-31") == objectId)
                this->numbertilde_09_sig_list_set(payload);
    
            break;
            }
        }
    
        this->p_05->processListMessage(tag, objectId, time, payload);
        this->p_06->processListMessage(tag, objectId, time, payload);
        this->p_07->processListMessage(tag, objectId, time, payload);
        this->p_08->processListMessage(tag, objectId, time, payload);
        this->p_09->processListMessage(tag, objectId, time, payload);
        this->p_10->processListMessage(tag, objectId, time, payload);
        this->p_11->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("livegrain/button_obj-18") == objectId)
                this->button_03_bangin_bang();
    
            break;
            }
        }
    
        this->p_05->processBangMessage(tag, objectId, time);
        this->p_06->processBangMessage(tag, objectId, time);
        this->p_07->processBangMessage(tag, objectId, time);
        this->p_08->processBangMessage(tag, objectId, time);
        this->p_09->processBangMessage(tag, objectId, time);
        this->p_10->processBangMessage(tag, objectId, time);
        this->p_11->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("livegrain/button_obj-18"):
            {
            return "livegrain/button_obj-18";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("livegrain/number_obj-11"):
            {
            return "livegrain/number_obj-11";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("livegrain/number_obj-14"):
            {
            return "livegrain/number_obj-14";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("livegrain/number~_obj-31"):
            {
            return "livegrain/number~_obj-31";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("livegrain/number_obj-7"):
            {
            return "livegrain/number_obj-7";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        }
    
        auto subpatchResult_0 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_06->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->groove_01_buffer = new Float32Buffer(this->getPatcher()->livegran);
        }
    
        this->p_05->processDataViewUpdate(index, time);
        this->p_06->processDataViewUpdate(index, time);
        this->p_07->processDataViewUpdate(index, time);
        this->p_08->processDataViewUpdate(index, time);
        this->p_09->processDataViewUpdate(index, time);
        this->p_10->processDataViewUpdate(index, time);
        this->p_11->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->groove_01_buffer = new Float32Buffer(this->getPatcher()->livegran);
    }
    
    protected:
    
    void eventinlet_23_out1_number_set(number v) {
        this->trigger_14_input_number_set(v);
    }
    
    void eventinlet_23_out1_list_set(const list& v) {
        this->trigger_14_input_list_set(v);
    }
    
    void button_03_bangin_bang() {
        this->button_03_bangval_bang();
    }
    
    void numberobj_36_valin_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void numberobj_36_format_set(number v) {
        this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_37_valin_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void numberobj_37_format_set(number v) {
        this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_09_sig_number_set(number v) {
        this->numbertilde_09_outValue = v;
    }
    
    void numbertilde_09_sig_list_set(const list& v) {
        this->numbertilde_09_outValue = v[0];
    }
    
    void numbertilde_09_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_09_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_09_currentMode = 1;
        }
    }
    
    void numberobj_38_valin_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_38_format_set(number v) {
        this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_09_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_36_init();
        this->numberobj_37_init();
        this->numbertilde_09_init();
        this->numberobj_38_init();
        this->p_05->initializeObjects();
        this->p_06->initializeObjects();
        this->p_07->initializeObjects();
        this->p_08->initializeObjects();
        this->p_09->initializeObjects();
        this->p_10->initializeObjects();
        this->p_11->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_05->startup();
        this->p_06->startup();
        this->p_07->startup();
        this->p_08->startup();
        this->p_09->startup();
        this->p_10->startup();
        this->p_11->startup();
    }
    
    void allocateDataRefs() {
        this->p_05->allocateDataRefs();
        this->p_06->allocateDataRefs();
        this->p_07->allocateDataRefs();
        this->p_08->allocateDataRefs();
        this->p_09->allocateDataRefs();
        this->p_10->allocateDataRefs();
        this->p_11->allocateDataRefs();
        this->groove_01_buffer = this->groove_01_buffer->allocateIfNeeded();
    }
    
    void p_08_target_size_min_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_10_output_number_set(v);
    }
    
    void p_08_target_size_max_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_11_output_number_set(v);
    }
    
    void p_07_in2_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_15_out1_number_set(v);
    }
    
    void p_08_out3_number_set(number v) {
        this->p_07_in2_number_set(v);
    }
    
    void p_08_target_size_prob_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_13_output_number_set(v);
    }
    
    void p_09_target_vol_min_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->receive_14_output_number_set(v);
    }
    
    void p_09_target_vol_max_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->receive_15_output_number_set(v);
    }
    
    void dspexpr_02_in2_set(number v) {
        this->dspexpr_02_in2 = v;
    }
    
    void p_09_out1_number_set(number v) {
        this->dspexpr_02_in2_set(v);
    }
    
    void p_09_target_vol_prob_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->receive_16_output_number_set(v);
    }
    
    void p_10_target_pitch_min_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->receive_17_output_number_set(v);
    }
    
    void p_10_target_pitch_max_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->receive_18_output_number_set(v);
    }
    
    void p_08_in2_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_17_out1_number_set(v);
    }
    
    void p_10_out2_number_set(number v) {
        this->p_08_in2_number_set(v);
    }
    
    void groove_01_rate_auto_set(number v) {
        this->groove_01_rate_auto = v;
    }
    
    void numberobj_38_output_set(number v) {
        this->groove_01_rate_auto_set(v);
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("livegrain/number_obj-7"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_38_output_set(localvalue);
    }
    
    void p_10_out1_number_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void p_10_target_pitch_prob_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->receive_19_output_number_set(v);
    }
    
    void p_06_target_pan_min_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_02_output_number_set(v);
    }
    
    void p_06_target_pan_max_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_03_output_number_set(v);
    }
    
    void p_06_target_pan_width_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_04_output_number_set(v);
    }
    
    void p_06_target_pan_prob_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_05_output_number_set(v);
    }
    
    void p_08_target_delay_min_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_08_output_number_set(v);
    }
    
    void p_08_target_delay_max_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_09_output_number_set(v);
    }
    
    void p_08_target_delay_prob_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_12_output_number_set(v);
    }
    
    void p_11_target_direction_number_set(number v) {
        this->p_11->updateTime(this->_currentTime);
        this->p_11->receive_20_output_number_set(v);
    }
    
    void p_05_target_filter_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->receive_01_output_number_set(v);
    }
    
    void p_07_target_env_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->receive_06_output_number_set(v);
    }
    
    void p_08_target_currentbuff_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_07_output_number_set(v);
    }
    
    void voice_01_mutestatus_set(number ) {}
    
    void voice_01_mutein_list_set(const list& v) {
        if (v[0] == this->voice() || v[0] == 0) {
            this->voice_01_mutestatus_set(v[1]);
        }
    }
    
    void voice_01_activevoices_set(number ) {}
    
    void p_10_in5_list_set(const list& v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_21_out1_list_set(v);
    }
    
    void groove_01_end_set(number v) {
        this->groove_01_end = v;
    }
    
    void numberobj_37_output_set(number v) {
        this->groove_01_end_set(v);
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("livegrain/number_obj-14"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_37_output_set(localvalue);
    }
    
    void p_08_out2_number_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void groove_01_begin_set(number v) {
        this->groove_01_begin = v;
    }
    
    void numberobj_36_output_set(number v) {
        this->groove_01_begin_set(v);
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("livegrain/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_36_output_set(localvalue);
    }
    
    void p_08_out1_number_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void p_08_in3_list_set(const list& v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_18_out1_list_set(v);
    }
    
    void p_11_out1_list_set(const list& v) {
        this->p_10_in5_list_set(v);
        this->p_08_in3_list_set(v);
    }
    
    void p_11_in1_bang_bang() {
        this->p_11->updateTime(this->_currentTime);
        this->p_11->eventinlet_22_out1_bang_bang();
    }
    
    void trigger_14_out8_bang() {
        this->p_11_in1_bang_bang();
    }
    
    void p_10_in1_bang_bang() {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_20_out1_bang_bang();
    }
    
    void trigger_14_out7_bang() {
        this->p_10_in1_bang_bang();
    }
    
    void p_09_in1_bang_bang() {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_19_out1_bang_bang();
    }
    
    void trigger_14_out6_bang() {
        this->p_09_in1_bang_bang();
    }
    
    void p_06_in2_bang_bang() {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->eventinlet_13_out1_bang_bang();
    }
    
    void trigger_14_out5_bang() {
        this->p_06_in2_bang_bang();
    }
    
    void p_05_in2_bang_bang() {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_07_out1_bang_bang();
    }
    
    void trigger_14_out4_bang() {
        this->p_05_in2_bang_bang();
    }
    
    void p_08_in1_bang_bang() {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_16_out1_bang_bang();
    }
    
    void trigger_14_out3_bang() {
        this->p_08_in1_bang_bang();
    }
    
    void p_07_in1_bang_bang() {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_14_out1_bang_bang();
    }
    
    void trigger_14_out2_bang() {
        this->p_07_in1_bang_bang();
    }
    
    void groove_01_rate_bang_bang() {
        this->groove_01_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
        this->groove_01_incomingChange = 1;
    }
    
    void button_03_output_bang() {
        this->groove_01_rate_bang_bang();
    }
    
    void button_03_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("livegrain/button_obj-18"), this->_currentTime);;
        this->button_03_output_bang();
    }
    
    void trigger_14_out1_bang() {
        this->button_03_bangval_bang();
    }
    
    void trigger_14_input_bang_bang() {
        this->trigger_14_out8_bang();
        this->trigger_14_out7_bang();
        this->trigger_14_out6_bang();
        this->trigger_14_out5_bang();
        this->trigger_14_out4_bang();
        this->trigger_14_out3_bang();
        this->trigger_14_out2_bang();
        this->trigger_14_out1_bang();
    }
    
    void eventinlet_23_out1_bang_bang() {
        this->trigger_14_input_bang_bang();
    }
    
    void trigger_14_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_14_out8_bang();
        this->trigger_14_out7_bang();
        this->trigger_14_out6_bang();
        this->trigger_14_out5_bang();
        this->trigger_14_out4_bang();
        this->trigger_14_out3_bang();
        this->trigger_14_out2_bang();
        this->trigger_14_out1_bang();
    }
    
    void trigger_14_input_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->trigger_14_out8_bang();
        this->trigger_14_out7_bang();
        this->trigger_14_out6_bang();
        this->trigger_14_out5_bang();
        this->trigger_14_out4_bang();
        this->trigger_14_out3_bang();
        this->trigger_14_out2_bang();
        this->trigger_14_out1_bang();
    }
    
    void midiouthelper_midiout_set(number ) {}
    
    void groove_01_perform(
        number rate_auto,
        number begin,
        number end,
        SampleValue * out1,
        SampleValue * sync,
        Index n
    ) {
        RNBO_UNUSED(out1);
        auto __groove_01_crossfade = this->groove_01_crossfade;
        auto __groove_01_loop = this->groove_01_loop;
        auto __groove_01_playStatus = this->groove_01_playStatus;
        auto __groove_01_readIndex = this->groove_01_readIndex;
        auto __groove_01_incomingChange = this->groove_01_incomingChange;
        auto __groove_01_changeIncomingInSamples = this->groove_01_changeIncomingInSamples;
        auto __groove_01_buffer = this->groove_01_buffer;
        SampleArray<1> out = {out1};
        SampleIndex bufferLength = (SampleIndex)(__groove_01_buffer->getSize());
        Index i = 0;
    
        if (bufferLength > 1) {
            auto effectiveChannels = this->minimum(__groove_01_buffer->getChannels(), 1);
            number srMult = 0.001 * __groove_01_buffer->getSampleRate();
            number srInv = (number)1 / this->samplerate();
            number rateMult = __groove_01_buffer->getSampleRate() * srInv;
    
            for (; i < n; i++) {
                Index channel = 0;
                number offset = 0;
                number loopMin = begin * srMult;
                loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                number loopMax = (end < 0 ? bufferLength : end * srMult);
                loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
    
                if (loopMin >= loopMax) {
                    offset = loopMax;
                    loopMax = bufferLength;
                    loopMin -= offset;
                }
    
                number loopLength = loopMax - loopMin;
                number currentRate = rate_auto * rateMult;
                number currentSync = 0;
    
                if (__groove_01_changeIncomingInSamples > 0) {
                    __groove_01_changeIncomingInSamples--;
    
                    if (__groove_01_changeIncomingInSamples <= 0) {
                        if (__groove_01_incomingChange == 1) {
                            if (currentRate < 0) {
                                __groove_01_readIndex = loopMax - 1;
                            } else {
                                __groove_01_readIndex = loopMin;
                            }
    
                            __groove_01_playStatus = 1;
                        } else if (__groove_01_incomingChange == 0) {
                            __groove_01_playStatus = 0;
                        }
    
                        __groove_01_incomingChange = 2;
                    }
                }
    
                if (loopLength > 0) {
                    if (currentRate != 0) {
                        if (__groove_01_playStatus == 1) {
                            if ((bool)(__groove_01_loop)) {
                                while (__groove_01_readIndex < loopMin) {
                                    __groove_01_readIndex += loopLength;
                                }
    
                                while (__groove_01_readIndex >= loopMax) {
                                    __groove_01_readIndex -= loopLength;
                                }
                            } else if (__groove_01_readIndex >= loopMax || __groove_01_readIndex < loopMin) {
                                __groove_01_playStatus = 0;
                                break;
                            }
    
                            for (; channel < effectiveChannels; channel++) {
                                number outSample = (currentRate == 1 ? this->groove_01_getSample((Index)(channel), trunc(__groove_01_readIndex), offset, bufferLength) : this->groove_01_interpolatedSample(
                                    (Index)(channel),
                                    __groove_01_readIndex,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                ));
    
                                if (__groove_01_crossfade > 0) {
                                    out[(Index)channel][(Index)i] = this->groove_01_crossfadedSample(
                                        outSample,
                                        __groove_01_readIndex,
                                        (Index)(channel),
                                        currentRate,
                                        loopMin,
                                        loopMax,
                                        loopLength,
                                        offset,
                                        bufferLength
                                    );
                                } else {
                                    out[(Index)channel][(Index)i] = outSample;
                                }
                            }
    
                            {
                                currentSync = this->groove_01_calcSync(__groove_01_readIndex, offset, loopMin, loopLength, bufferLength, srInv);
                            }
    
                            __groove_01_readIndex += currentRate;
                        }
                    } else {
                        if (__groove_01_playStatus == 1) {
                            currentSync = this->groove_01_calcSync(__groove_01_readIndex, offset, loopMin, loopLength, bufferLength, srInv);
                        }
                    }
                }
    
                {
                    sync[(Index)i] = currentSync;
                }
    
                for (; channel < 1; channel++) {
                    if (__groove_01_playStatus <= 0)
                        sync[(Index)i] = 0;
    
                    out[(Index)channel][(Index)i] = 0;
                }
            }
        }
    
        for (; i < n; i++) {
            if (__groove_01_playStatus <= 0)
                sync[(Index)i] = 0;
    
            for (number channel = 0; channel < 1; channel++) {
                out[(Index)channel][(Index)i] = 0;
            }
        }
    
        this->groove_01_changeIncomingInSamples = __groove_01_changeIncomingInSamples;
        this->groove_01_incomingChange = __groove_01_incomingChange;
        this->groove_01_readIndex = __groove_01_readIndex;
        this->groove_01_playStatus = __groove_01_playStatus;
    }
    
    void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void p_05_perform(const SampleValue * in1, SampleValue * out1, Index n) {
        // subpatcher: rand-filter
        ConstSampleArray<1> ins = {in1};
    
        SampleArray<1> outs = {out1};
        this->p_05->process(ins, 1, outs, 1, n);
    }
    
    void p_06_perform(const SampleValue * in1, SampleValue * out1, SampleValue * out2, Index n) {
        // subpatcher: rand-placement
        ConstSampleArray<1> ins = {in1};
    
        SampleArray<2> outs = {out1, out2};
        this->p_06->process(ins, 1, outs, 2, n);
    }
    
    void numbertilde_09_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_09_currentIntervalInSamples = this->numbertilde_09_currentIntervalInSamples;
        auto __numbertilde_09_lastValue = this->numbertilde_09_lastValue;
        auto __numbertilde_09_currentInterval = this->numbertilde_09_currentInterval;
        auto __numbertilde_09_rampInSamples = this->numbertilde_09_rampInSamples;
        auto __numbertilde_09_outValue = this->numbertilde_09_outValue;
        auto __numbertilde_09_currentMode = this->numbertilde_09_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_09_currentMode == 0) {
                output[(Index)i] = this->numbertilde_09_smooth_next(
                    __numbertilde_09_outValue,
                    __numbertilde_09_rampInSamples,
                    __numbertilde_09_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_09_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_09_lastValue && __numbertilde_09_currentInterval <= 0) {
            __numbertilde_09_currentInterval = __numbertilde_09_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_09_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("livegrain/number~_obj-31"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_09_currentInterval = __numbertilde_09_currentInterval;
        this->numbertilde_09_lastValue = __numbertilde_09_lastValue;
    }
    
    void p_07_perform(SampleValue * out1, Index n) {
        // subpatcher: rand-envelope
        SampleArray<1> outs = {out1};
    
        this->p_07->process(nullptr, 0, outs, 1, n);
    }
    
    void dspexpr_03_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_08_perform(Index n) {
        // subpatcher: rand-lengthanddelay
        this->p_08->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_09_perform(Index n) {
        // subpatcher: rand-volume
        this->p_09->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_10_perform(Index n) {
        // subpatcher: rand-pitchspeed
        this->p_10->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_11_perform(Index n) {
        // subpatcher: rand-reverse
        this->p_11->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void groove_01_stop_bang() {
        this->groove_01_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
        this->groove_01_incomingChange = 0;
    }
    
    void trigger_15_out2_bang() {
        this->groove_01_stop_bang();
    }
    
    void voice_01_muteout_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_24_mute_set(v);
    }
    
    void voice_01_mute_bang_bang() {
        this->voice_01_muteout_set({this->voice(), 1});
    }
    
    void trigger_15_out1_bang() {
        this->voice_01_mute_bang_bang();
    }
    
    void trigger_15_input_bang_bang() {
        this->trigger_15_out2_bang();
        this->trigger_15_out1_bang();
    }
    
    void p_07_out2_bang_bang() {
        this->trigger_15_input_bang_bang();
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    number groove_01_getSample(
        Index channel,
        SampleIndex index,
        SampleIndex offset,
        SampleIndex bufferLength
    ) {
        if (offset > 0) {
            index += offset;
    
            if (index >= bufferLength)
                index -= bufferLength;
        }
    
        return this->groove_01_buffer->getSample(channel, index);
    }
    
    number groove_01_interpolatedSample(
        Index channel,
        number index,
        SampleIndex end,
        SampleIndex length,
        SampleIndex offset,
        SampleIndex bufferLength
    ) {
        SampleIndex index1 = (SampleIndex)(trunc(index));
        number i_x = index - index1;
        number i_1px = 1. + i_x;
        number i_1mx = 1. - i_x;
        number i_2mx = 2. - i_x;
        number i_a = i_1mx * i_2mx;
        number i_b = i_1px * i_x;
        number i_p1 = -.1666667 * i_a * i_x;
        number i_p2 = .5 * i_1px * i_a;
        number i_p3 = .5 * i_b * i_2mx;
        number i_p4 = -.1666667 * i_b * i_1mx;
        SampleIndex index2 = (SampleIndex)(index1 + 1);
    
        if (index2 >= end)
            index2 -= length;
    
        SampleIndex index3 = (SampleIndex)(index1 + 2);
    
        if (index3 >= end)
            index3 -= length;
    
        SampleIndex index4 = (SampleIndex)(index1 + 3);
    
        if (index4 >= end)
            index4 -= length;
    
        return this->groove_01_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_01_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_01_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_01_getSample(channel, index4, offset, bufferLength) * i_p4;
    }
    
    number groove_01_crossfadedSample(
        SampleValue out,
        number readIndex,
        Index channel,
        number rate,
        number loopMin,
        number loopMax,
        number loopLength,
        number offset,
        number bufferLength
    ) {
        auto crossFadeStart1 = this->maximum(loopMin - this->groove_01_crossfadeInSamples, 0);
        auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_01_crossfadeInSamples, bufferLength);
        number crossFadeStart2 = crossFadeStart1 + loopLength;
        auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
        number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
    
        if (crossFadeLength > 0) {
            crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
            number diff = -1;
            number addFactor = 0;
    
            if (readIndex >= crossFadeStart2) {
                diff = readIndex - crossFadeStart2;
                addFactor = -1;
            } else if (readIndex < crossFadeEnd1) {
                diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                addFactor = 1;
            }
    
            if (diff >= 0) {
                number out2ReadIndex = readIndex + loopLength * addFactor;
                number out2 = (rate == 1 ? this->groove_01_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_01_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                number out2Factor = diff / crossFadeLength;
                number out1Factor = 1 - out2Factor;
                return out * out1Factor + out2 * out2Factor;
            }
        }
    
        return out;
    }
    
    number groove_01_calcSync(
        number readIndex,
        number offset,
        number loopMin,
        number loopLength,
        SampleIndex bufferLength,
        number srInv
    ) {
        RNBO_UNUSED(loopLength);
        RNBO_UNUSED(loopMin);
    
        {
            if (offset > 0) {
                readIndex += offset;
    
                if (readIndex >= bufferLength)
                    readIndex -= bufferLength;
            }
    
            {
                {
                    {
                        return readIndex * srInv * 1000;
                    }
                }
            }
        }
    }
    
    void groove_01_dspsetup(bool force) {
        if ((bool)(this->groove_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->groove_01_crossfadeInSamples = this->mstosamps(this->groove_01_crossfade);
        this->groove_01_setupDone = true;
    }
    
    void numberobj_36_init() {
        this->numberobj_36_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("livegrain/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    void numberobj_37_init() {
        this->numberobj_37_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("livegrain/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    number numbertilde_09_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_09_smooth_d_prev);
        this->numbertilde_09_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_09_smooth_d_dspsetup() {
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_smooth_d_reset() {
        this->numbertilde_09_smooth_d_prev = 0;
    }
    
    number numbertilde_09_smooth_next(number x, number up, number down) {
        if (this->numbertilde_09_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_09_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_09_smooth_index = _up;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _up;
            } else if (x < this->numbertilde_09_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_09_smooth_index = _down;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_09_smooth_index > 0) {
            this->numbertilde_09_smooth_prev += this->numbertilde_09_smooth_increment;
            this->numbertilde_09_smooth_index -= 1;
        } else {
            this->numbertilde_09_smooth_prev = x;
        }
    
        return this->numbertilde_09_smooth_prev;
    }
    
    void numbertilde_09_smooth_reset() {
        this->numbertilde_09_smooth_prev = 0;
        this->numbertilde_09_smooth_index = 0;
        this->numbertilde_09_smooth_increment = 0;
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_init() {
        this->numbertilde_09_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("livegrain/number~_obj-31"), 1, this->_currentTime);
    }
    
    void numbertilde_09_dspsetup(bool force) {
        if ((bool)(this->numbertilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_09_currentIntervalInSamples = this->mstosamps(20);
        this->numbertilde_09_currentInterval = this->numbertilde_09_currentIntervalInSamples;
        this->numbertilde_09_rampInSamples = this->mstosamps(this->numbertilde_09_ramp);
        this->numbertilde_09_setupDone = true;
        this->numbertilde_09_smooth_d_dspsetup();
    }
    
    void numberobj_38_init() {
        this->numberobj_38_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("livegrain/number_obj-7"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void midiouthelper_sendMidi(number v) {
        this->midiouthelper_midiout_set(v);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        dspexpr_02_in1 = 0;
        dspexpr_02_in2 = 0;
        p_05_target = 0;
        p_06_target = 0;
        groove_01_rate_auto = 1;
        groove_01_begin = 0;
        groove_01_end = -1;
        groove_01_loop = 1;
        groove_01_crossfade = 0;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        dspexpr_03_in1 = 0;
        dspexpr_03_in2 = 0;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        numbertilde_09_input_number = 0;
        numbertilde_09_ramp = 0;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        p_07_target = 0;
        p_08_target = 0;
        p_09_target = 0;
        voice_01_mute_number = 0;
        p_10_target = 0;
        p_11_target = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        groove_01_readIndex = 0;
        groove_01_playStatus = 0;
        groove_01_changeIncomingInSamples = 0;
        groove_01_incomingChange = 2;
        groove_01_crossfadeInSamples = 0;
        groove_01_setupDone = false;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        numbertilde_09_currentInterval = 0;
        numbertilde_09_currentIntervalInSamples = 0;
        numbertilde_09_lastValue = 0;
        numbertilde_09_outValue = 0;
        numbertilde_09_rampInSamples = 0;
        numbertilde_09_currentMode = 0;
        numbertilde_09_smooth_d_prev = 0;
        numbertilde_09_smooth_prev = 0;
        numbertilde_09_smooth_index = 0;
        numbertilde_09_smooth_increment = 0;
        numbertilde_09_setupDone = false;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 0;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number dspexpr_02_in1;
        number dspexpr_02_in2;
        number p_05_target;
        number p_06_target;
        number groove_01_rate_auto;
        number groove_01_begin;
        number groove_01_end;
        number groove_01_loop;
        number groove_01_crossfade;
        number numberobj_36_value;
        number dspexpr_03_in1;
        number dspexpr_03_in2;
        number numberobj_37_value;
        number numbertilde_09_input_number;
        number numbertilde_09_ramp;
        number numberobj_38_value;
        number p_07_target;
        number p_08_target;
        number p_09_target;
        number voice_01_mute_number;
        number p_10_target;
        number p_11_target;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Float32BufferRef groove_01_buffer;
        number groove_01_readIndex;
        Index groove_01_playStatus;
        SampleIndex groove_01_changeIncomingInSamples;
        Int groove_01_incomingChange;
        SampleIndex groove_01_crossfadeInSamples;
        bool groove_01_setupDone;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        SampleIndex numbertilde_09_currentInterval;
        SampleIndex numbertilde_09_currentIntervalInSamples;
        number numbertilde_09_lastValue;
        number numbertilde_09_outValue;
        number numbertilde_09_rampInSamples;
        Int numbertilde_09_currentMode;
        number numbertilde_09_smooth_d_prev;
        number numbertilde_09_smooth_prev;
        number numbertilde_09_smooth_index;
        number numbertilde_09_smooth_increment;
        bool numbertilde_09_setupDone;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_98* p_05;
        RNBOSubpatcher_99* p_06;
        RNBOSubpatcher_100* p_07;
        RNBOSubpatcher_101* p_08;
        RNBOSubpatcher_102* p_09;
        RNBOSubpatcher_103* p_10;
        RNBOSubpatcher_104* p_11;
    
};

class RNBOSubpatcher_118 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_118()
    {
    }
    
    ~RNBOSubpatcher_118()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort[1]/message_obj-75") == objectId)
                this->message_29_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-144") == objectId)
                this->message_30_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-104") == objectId)
                this->message_31_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-146") == objectId)
                this->message_32_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-68") == objectId)
                this->message_33_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-94") == objectId)
                this->message_34_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-6") == objectId)
                this->message_35_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-78") == objectId)
                this->message_36_listin_number_set(payload);
    
            if (TAG("sort[1]/message_obj-74") == objectId)
                this->message_37_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("sort[1]/number_obj-5") == objectId)
                this->numberobj_39_valin_set(payload);
    
            if (TAG("sort[1]/toggle_obj-91") == objectId)
                this->toggle_01_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-58") == objectId)
                this->numberobj_40_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-3") == objectId)
                this->numberobj_41_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-7") == objectId)
                this->numberobj_42_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-8") == objectId)
                this->numberobj_43_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-9") == objectId)
                this->numberobj_44_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-10") == objectId)
                this->numberobj_45_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-15") == objectId)
                this->numberobj_46_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-14") == objectId)
                this->numberobj_47_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-13") == objectId)
                this->numberobj_48_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-12") == objectId)
                this->numberobj_49_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-11") == objectId)
                this->numberobj_50_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-25") == objectId)
                this->numberobj_51_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-24") == objectId)
                this->numberobj_52_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-23") == objectId)
                this->numberobj_53_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-22") == objectId)
                this->numberobj_54_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-21") == objectId)
                this->numberobj_55_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-20") == objectId)
                this->numberobj_56_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-19") == objectId)
                this->numberobj_57_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-18") == objectId)
                this->numberobj_58_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-17") == objectId)
                this->numberobj_59_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-16") == objectId)
                this->numberobj_60_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-45") == objectId)
                this->numberobj_61_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-44") == objectId)
                this->numberobj_62_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-43") == objectId)
                this->numberobj_63_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-42") == objectId)
                this->numberobj_64_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-41") == objectId)
                this->numberobj_65_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-40") == objectId)
                this->numberobj_66_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-39") == objectId)
                this->numberobj_67_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-38") == objectId)
                this->numberobj_68_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-37") == objectId)
                this->numberobj_69_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-36") == objectId)
                this->numberobj_70_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-35") == objectId)
                this->numberobj_71_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-34") == objectId)
                this->numberobj_72_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-33") == objectId)
                this->numberobj_73_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-32") == objectId)
                this->numberobj_74_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-31") == objectId)
                this->numberobj_75_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-30") == objectId)
                this->numberobj_76_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-29") == objectId)
                this->numberobj_77_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-28") == objectId)
                this->numberobj_78_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-27") == objectId)
                this->numberobj_79_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-26") == objectId)
                this->numberobj_80_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-55") == objectId)
                this->numberobj_81_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-54") == objectId)
                this->numberobj_82_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-53") == objectId)
                this->numberobj_83_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-52") == objectId)
                this->numberobj_84_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-51") == objectId)
                this->numberobj_85_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-50") == objectId)
                this->numberobj_86_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-49") == objectId)
                this->numberobj_87_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-48") == objectId)
                this->numberobj_88_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-47") == objectId)
                this->numberobj_89_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-46") == objectId)
                this->numberobj_90_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-140") == objectId)
                this->numberobj_91_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-139") == objectId)
                this->numberobj_92_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-138") == objectId)
                this->numberobj_93_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-137") == objectId)
                this->numberobj_94_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-136") == objectId)
                this->numberobj_95_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-135") == objectId)
                this->numberobj_96_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-134") == objectId)
                this->numberobj_97_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-133") == objectId)
                this->numberobj_98_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-132") == objectId)
                this->numberobj_99_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-131") == objectId)
                this->numberobj_100_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-130") == objectId)
                this->numberobj_101_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-129") == objectId)
                this->numberobj_102_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-128") == objectId)
                this->numberobj_103_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-127") == objectId)
                this->numberobj_104_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-126") == objectId)
                this->numberobj_105_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-125") == objectId)
                this->numberobj_106_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-124") == objectId)
                this->numberobj_107_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-123") == objectId)
                this->numberobj_108_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-122") == objectId)
                this->numberobj_109_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-121") == objectId)
                this->numberobj_110_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-120") == objectId)
                this->numberobj_111_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-119") == objectId)
                this->numberobj_112_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-118") == objectId)
                this->numberobj_113_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-117") == objectId)
                this->numberobj_114_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-116") == objectId)
                this->numberobj_115_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-115") == objectId)
                this->numberobj_116_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-114") == objectId)
                this->numberobj_117_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-113") == objectId)
                this->numberobj_118_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-112") == objectId)
                this->numberobj_119_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-111") == objectId)
                this->numberobj_120_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-110") == objectId)
                this->numberobj_121_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-109") == objectId)
                this->numberobj_122_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-106") == objectId)
                this->numberobj_123_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-105") == objectId)
                this->numberobj_124_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-103") == objectId)
                this->numberobj_125_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-101") == objectId)
                this->numberobj_126_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-100") == objectId)
                this->numberobj_127_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-99") == objectId)
                this->numberobj_128_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-98") == objectId)
                this->numberobj_129_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-97") == objectId)
                this->numberobj_130_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-96") == objectId)
                this->numberobj_131_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-95") == objectId)
                this->numberobj_132_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-93") == objectId)
                this->numberobj_133_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-89") == objectId)
                this->numberobj_134_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-87") == objectId)
                this->numberobj_135_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-83") == objectId)
                this->numberobj_136_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-81") == objectId)
                this->numberobj_137_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-80") == objectId)
                this->numberobj_138_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-79") == objectId)
                this->numberobj_139_valin_set(payload);
    
            if (TAG("sort[1]/number_obj-65") == objectId)
                this->numberobj_140_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("sort[1]/number_obj-5") == objectId)
                this->numberobj_39_format_set(payload);
    
            if (TAG("sort[1]/number_obj-58") == objectId)
                this->numberobj_40_format_set(payload);
    
            if (TAG("sort[1]/number_obj-3") == objectId)
                this->numberobj_41_format_set(payload);
    
            if (TAG("sort[1]/number_obj-7") == objectId)
                this->numberobj_42_format_set(payload);
    
            if (TAG("sort[1]/number_obj-8") == objectId)
                this->numberobj_43_format_set(payload);
    
            if (TAG("sort[1]/number_obj-9") == objectId)
                this->numberobj_44_format_set(payload);
    
            if (TAG("sort[1]/number_obj-10") == objectId)
                this->numberobj_45_format_set(payload);
    
            if (TAG("sort[1]/number_obj-15") == objectId)
                this->numberobj_46_format_set(payload);
    
            if (TAG("sort[1]/number_obj-14") == objectId)
                this->numberobj_47_format_set(payload);
    
            if (TAG("sort[1]/number_obj-13") == objectId)
                this->numberobj_48_format_set(payload);
    
            if (TAG("sort[1]/number_obj-12") == objectId)
                this->numberobj_49_format_set(payload);
    
            if (TAG("sort[1]/number_obj-11") == objectId)
                this->numberobj_50_format_set(payload);
    
            if (TAG("sort[1]/number_obj-25") == objectId)
                this->numberobj_51_format_set(payload);
    
            if (TAG("sort[1]/number_obj-24") == objectId)
                this->numberobj_52_format_set(payload);
    
            if (TAG("sort[1]/number_obj-23") == objectId)
                this->numberobj_53_format_set(payload);
    
            if (TAG("sort[1]/number_obj-22") == objectId)
                this->numberobj_54_format_set(payload);
    
            if (TAG("sort[1]/number_obj-21") == objectId)
                this->numberobj_55_format_set(payload);
    
            if (TAG("sort[1]/number_obj-20") == objectId)
                this->numberobj_56_format_set(payload);
    
            if (TAG("sort[1]/number_obj-19") == objectId)
                this->numberobj_57_format_set(payload);
    
            if (TAG("sort[1]/number_obj-18") == objectId)
                this->numberobj_58_format_set(payload);
    
            if (TAG("sort[1]/number_obj-17") == objectId)
                this->numberobj_59_format_set(payload);
    
            if (TAG("sort[1]/number_obj-16") == objectId)
                this->numberobj_60_format_set(payload);
    
            if (TAG("sort[1]/number_obj-45") == objectId)
                this->numberobj_61_format_set(payload);
    
            if (TAG("sort[1]/number_obj-44") == objectId)
                this->numberobj_62_format_set(payload);
    
            if (TAG("sort[1]/number_obj-43") == objectId)
                this->numberobj_63_format_set(payload);
    
            if (TAG("sort[1]/number_obj-42") == objectId)
                this->numberobj_64_format_set(payload);
    
            if (TAG("sort[1]/number_obj-41") == objectId)
                this->numberobj_65_format_set(payload);
    
            if (TAG("sort[1]/number_obj-40") == objectId)
                this->numberobj_66_format_set(payload);
    
            if (TAG("sort[1]/number_obj-39") == objectId)
                this->numberobj_67_format_set(payload);
    
            if (TAG("sort[1]/number_obj-38") == objectId)
                this->numberobj_68_format_set(payload);
    
            if (TAG("sort[1]/number_obj-37") == objectId)
                this->numberobj_69_format_set(payload);
    
            if (TAG("sort[1]/number_obj-36") == objectId)
                this->numberobj_70_format_set(payload);
    
            if (TAG("sort[1]/number_obj-35") == objectId)
                this->numberobj_71_format_set(payload);
    
            if (TAG("sort[1]/number_obj-34") == objectId)
                this->numberobj_72_format_set(payload);
    
            if (TAG("sort[1]/number_obj-33") == objectId)
                this->numberobj_73_format_set(payload);
    
            if (TAG("sort[1]/number_obj-32") == objectId)
                this->numberobj_74_format_set(payload);
    
            if (TAG("sort[1]/number_obj-31") == objectId)
                this->numberobj_75_format_set(payload);
    
            if (TAG("sort[1]/number_obj-30") == objectId)
                this->numberobj_76_format_set(payload);
    
            if (TAG("sort[1]/number_obj-29") == objectId)
                this->numberobj_77_format_set(payload);
    
            if (TAG("sort[1]/number_obj-28") == objectId)
                this->numberobj_78_format_set(payload);
    
            if (TAG("sort[1]/number_obj-27") == objectId)
                this->numberobj_79_format_set(payload);
    
            if (TAG("sort[1]/number_obj-26") == objectId)
                this->numberobj_80_format_set(payload);
    
            if (TAG("sort[1]/number_obj-55") == objectId)
                this->numberobj_81_format_set(payload);
    
            if (TAG("sort[1]/number_obj-54") == objectId)
                this->numberobj_82_format_set(payload);
    
            if (TAG("sort[1]/number_obj-53") == objectId)
                this->numberobj_83_format_set(payload);
    
            if (TAG("sort[1]/number_obj-52") == objectId)
                this->numberobj_84_format_set(payload);
    
            if (TAG("sort[1]/number_obj-51") == objectId)
                this->numberobj_85_format_set(payload);
    
            if (TAG("sort[1]/number_obj-50") == objectId)
                this->numberobj_86_format_set(payload);
    
            if (TAG("sort[1]/number_obj-49") == objectId)
                this->numberobj_87_format_set(payload);
    
            if (TAG("sort[1]/number_obj-48") == objectId)
                this->numberobj_88_format_set(payload);
    
            if (TAG("sort[1]/number_obj-47") == objectId)
                this->numberobj_89_format_set(payload);
    
            if (TAG("sort[1]/number_obj-46") == objectId)
                this->numberobj_90_format_set(payload);
    
            if (TAG("sort[1]/number_obj-140") == objectId)
                this->numberobj_91_format_set(payload);
    
            if (TAG("sort[1]/number_obj-139") == objectId)
                this->numberobj_92_format_set(payload);
    
            if (TAG("sort[1]/number_obj-138") == objectId)
                this->numberobj_93_format_set(payload);
    
            if (TAG("sort[1]/number_obj-137") == objectId)
                this->numberobj_94_format_set(payload);
    
            if (TAG("sort[1]/number_obj-136") == objectId)
                this->numberobj_95_format_set(payload);
    
            if (TAG("sort[1]/number_obj-135") == objectId)
                this->numberobj_96_format_set(payload);
    
            if (TAG("sort[1]/number_obj-134") == objectId)
                this->numberobj_97_format_set(payload);
    
            if (TAG("sort[1]/number_obj-133") == objectId)
                this->numberobj_98_format_set(payload);
    
            if (TAG("sort[1]/number_obj-132") == objectId)
                this->numberobj_99_format_set(payload);
    
            if (TAG("sort[1]/number_obj-131") == objectId)
                this->numberobj_100_format_set(payload);
    
            if (TAG("sort[1]/number_obj-130") == objectId)
                this->numberobj_101_format_set(payload);
    
            if (TAG("sort[1]/number_obj-129") == objectId)
                this->numberobj_102_format_set(payload);
    
            if (TAG("sort[1]/number_obj-128") == objectId)
                this->numberobj_103_format_set(payload);
    
            if (TAG("sort[1]/number_obj-127") == objectId)
                this->numberobj_104_format_set(payload);
    
            if (TAG("sort[1]/number_obj-126") == objectId)
                this->numberobj_105_format_set(payload);
    
            if (TAG("sort[1]/number_obj-125") == objectId)
                this->numberobj_106_format_set(payload);
    
            if (TAG("sort[1]/number_obj-124") == objectId)
                this->numberobj_107_format_set(payload);
    
            if (TAG("sort[1]/number_obj-123") == objectId)
                this->numberobj_108_format_set(payload);
    
            if (TAG("sort[1]/number_obj-122") == objectId)
                this->numberobj_109_format_set(payload);
    
            if (TAG("sort[1]/number_obj-121") == objectId)
                this->numberobj_110_format_set(payload);
    
            if (TAG("sort[1]/number_obj-120") == objectId)
                this->numberobj_111_format_set(payload);
    
            if (TAG("sort[1]/number_obj-119") == objectId)
                this->numberobj_112_format_set(payload);
    
            if (TAG("sort[1]/number_obj-118") == objectId)
                this->numberobj_113_format_set(payload);
    
            if (TAG("sort[1]/number_obj-117") == objectId)
                this->numberobj_114_format_set(payload);
    
            if (TAG("sort[1]/number_obj-116") == objectId)
                this->numberobj_115_format_set(payload);
    
            if (TAG("sort[1]/number_obj-115") == objectId)
                this->numberobj_116_format_set(payload);
    
            if (TAG("sort[1]/number_obj-114") == objectId)
                this->numberobj_117_format_set(payload);
    
            if (TAG("sort[1]/number_obj-113") == objectId)
                this->numberobj_118_format_set(payload);
    
            if (TAG("sort[1]/number_obj-112") == objectId)
                this->numberobj_119_format_set(payload);
    
            if (TAG("sort[1]/number_obj-111") == objectId)
                this->numberobj_120_format_set(payload);
    
            if (TAG("sort[1]/number_obj-110") == objectId)
                this->numberobj_121_format_set(payload);
    
            if (TAG("sort[1]/number_obj-109") == objectId)
                this->numberobj_122_format_set(payload);
    
            if (TAG("sort[1]/number_obj-106") == objectId)
                this->numberobj_123_format_set(payload);
    
            if (TAG("sort[1]/number_obj-105") == objectId)
                this->numberobj_124_format_set(payload);
    
            if (TAG("sort[1]/number_obj-103") == objectId)
                this->numberobj_125_format_set(payload);
    
            if (TAG("sort[1]/number_obj-101") == objectId)
                this->numberobj_126_format_set(payload);
    
            if (TAG("sort[1]/number_obj-100") == objectId)
                this->numberobj_127_format_set(payload);
    
            if (TAG("sort[1]/number_obj-99") == objectId)
                this->numberobj_128_format_set(payload);
    
            if (TAG("sort[1]/number_obj-98") == objectId)
                this->numberobj_129_format_set(payload);
    
            if (TAG("sort[1]/number_obj-97") == objectId)
                this->numberobj_130_format_set(payload);
    
            if (TAG("sort[1]/number_obj-96") == objectId)
                this->numberobj_131_format_set(payload);
    
            if (TAG("sort[1]/number_obj-95") == objectId)
                this->numberobj_132_format_set(payload);
    
            if (TAG("sort[1]/number_obj-93") == objectId)
                this->numberobj_133_format_set(payload);
    
            if (TAG("sort[1]/number_obj-89") == objectId)
                this->numberobj_134_format_set(payload);
    
            if (TAG("sort[1]/number_obj-87") == objectId)
                this->numberobj_135_format_set(payload);
    
            if (TAG("sort[1]/number_obj-83") == objectId)
                this->numberobj_136_format_set(payload);
    
            if (TAG("sort[1]/number_obj-81") == objectId)
                this->numberobj_137_format_set(payload);
    
            if (TAG("sort[1]/number_obj-80") == objectId)
                this->numberobj_138_format_set(payload);
    
            if (TAG("sort[1]/number_obj-79") == objectId)
                this->numberobj_139_format_set(payload);
    
            if (TAG("sort[1]/number_obj-65") == objectId)
                this->numberobj_140_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort[1]/message_obj-75") == objectId)
                this->message_29_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-144") == objectId)
                this->message_30_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-104") == objectId)
                this->message_31_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-146") == objectId)
                this->message_32_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-68") == objectId)
                this->message_33_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-94") == objectId)
                this->message_34_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-6") == objectId)
                this->message_35_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-78") == objectId)
                this->message_36_listin_list_set(payload);
    
            if (TAG("sort[1]/message_obj-74") == objectId)
                this->message_37_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort[1]/message_obj-75") == objectId)
                this->message_29_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-144") == objectId)
                this->message_30_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-104") == objectId)
                this->message_31_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-146") == objectId)
                this->message_32_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-68") == objectId)
                this->message_33_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-94") == objectId)
                this->message_34_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-6") == objectId)
                this->message_35_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-78") == objectId)
                this->message_36_listin_bang_bang();
    
            if (TAG("sort[1]/message_obj-74") == objectId)
                this->message_37_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("sort[1]/button_obj-64") == objectId)
                this->button_04_bangin_bang();
    
            if (TAG("sort[1]/button_obj-76") == objectId)
                this->button_05_bangin_bang();
    
            if (TAG("sort[1]/button_obj-71") == objectId)
                this->button_06_bangin_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("sort[1]/message_obj-75"):
            {
            return "sort[1]/message_obj-75";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("sort[1]/button_obj-64"):
            {
            return "sort[1]/button_obj-64";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("sort[1]/number_obj-5"):
            {
            return "sort[1]/number_obj-5";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("sort[1]/message_obj-144"):
            {
            return "sort[1]/message_obj-144";
            }
        case TAG("sort[1]/message_obj-104"):
            {
            return "sort[1]/message_obj-104";
            }
        case TAG("sort[1]/toggle_obj-91"):
            {
            return "sort[1]/toggle_obj-91";
            }
        case TAG("sort[1]/button_obj-76"):
            {
            return "sort[1]/button_obj-76";
            }
        case TAG("sort[1]/number_obj-58"):
            {
            return "sort[1]/number_obj-58";
            }
        case TAG("sort[1]/message_obj-146"):
            {
            return "sort[1]/message_obj-146";
            }
        case TAG("sort[1]/message_obj-68"):
            {
            return "sort[1]/message_obj-68";
            }
        case TAG("sort[1]/message_obj-94"):
            {
            return "sort[1]/message_obj-94";
            }
        case TAG("sort[1]/number_obj-3"):
            {
            return "sort[1]/number_obj-3";
            }
        case TAG("sort[1]/message_obj-6"):
            {
            return "sort[1]/message_obj-6";
            }
        case TAG("sort[1]/message_obj-78"):
            {
            return "sort[1]/message_obj-78";
            }
        case TAG("sort[1]/number_obj-7"):
            {
            return "sort[1]/number_obj-7";
            }
        case TAG("sort[1]/button_obj-71"):
            {
            return "sort[1]/button_obj-71";
            }
        case TAG("sort[1]/number_obj-8"):
            {
            return "sort[1]/number_obj-8";
            }
        case TAG("sort[1]/message_obj-74"):
            {
            return "sort[1]/message_obj-74";
            }
        case TAG("sort[1]/number_obj-9"):
            {
            return "sort[1]/number_obj-9";
            }
        case TAG("sort[1]/number_obj-10"):
            {
            return "sort[1]/number_obj-10";
            }
        case TAG("sort[1]/number_obj-15"):
            {
            return "sort[1]/number_obj-15";
            }
        case TAG("sort[1]/number_obj-14"):
            {
            return "sort[1]/number_obj-14";
            }
        case TAG("sort[1]/number_obj-13"):
            {
            return "sort[1]/number_obj-13";
            }
        case TAG("sort[1]/number_obj-12"):
            {
            return "sort[1]/number_obj-12";
            }
        case TAG("sort[1]/number_obj-11"):
            {
            return "sort[1]/number_obj-11";
            }
        case TAG("sort[1]/number_obj-25"):
            {
            return "sort[1]/number_obj-25";
            }
        case TAG("sort[1]/number_obj-24"):
            {
            return "sort[1]/number_obj-24";
            }
        case TAG("sort[1]/number_obj-23"):
            {
            return "sort[1]/number_obj-23";
            }
        case TAG("sort[1]/number_obj-22"):
            {
            return "sort[1]/number_obj-22";
            }
        case TAG("sort[1]/number_obj-21"):
            {
            return "sort[1]/number_obj-21";
            }
        case TAG("sort[1]/number_obj-20"):
            {
            return "sort[1]/number_obj-20";
            }
        case TAG("sort[1]/number_obj-19"):
            {
            return "sort[1]/number_obj-19";
            }
        case TAG("sort[1]/number_obj-18"):
            {
            return "sort[1]/number_obj-18";
            }
        case TAG("sort[1]/number_obj-17"):
            {
            return "sort[1]/number_obj-17";
            }
        case TAG("sort[1]/number_obj-16"):
            {
            return "sort[1]/number_obj-16";
            }
        case TAG("sort[1]/number_obj-45"):
            {
            return "sort[1]/number_obj-45";
            }
        case TAG("sort[1]/number_obj-44"):
            {
            return "sort[1]/number_obj-44";
            }
        case TAG("sort[1]/number_obj-43"):
            {
            return "sort[1]/number_obj-43";
            }
        case TAG("sort[1]/number_obj-42"):
            {
            return "sort[1]/number_obj-42";
            }
        case TAG("sort[1]/number_obj-41"):
            {
            return "sort[1]/number_obj-41";
            }
        case TAG("sort[1]/number_obj-40"):
            {
            return "sort[1]/number_obj-40";
            }
        case TAG("sort[1]/number_obj-39"):
            {
            return "sort[1]/number_obj-39";
            }
        case TAG("sort[1]/number_obj-38"):
            {
            return "sort[1]/number_obj-38";
            }
        case TAG("sort[1]/number_obj-37"):
            {
            return "sort[1]/number_obj-37";
            }
        case TAG("sort[1]/number_obj-36"):
            {
            return "sort[1]/number_obj-36";
            }
        case TAG("sort[1]/number_obj-35"):
            {
            return "sort[1]/number_obj-35";
            }
        case TAG("sort[1]/number_obj-34"):
            {
            return "sort[1]/number_obj-34";
            }
        case TAG("sort[1]/number_obj-33"):
            {
            return "sort[1]/number_obj-33";
            }
        case TAG("sort[1]/number_obj-32"):
            {
            return "sort[1]/number_obj-32";
            }
        case TAG("sort[1]/number_obj-31"):
            {
            return "sort[1]/number_obj-31";
            }
        case TAG("sort[1]/number_obj-30"):
            {
            return "sort[1]/number_obj-30";
            }
        case TAG("sort[1]/number_obj-29"):
            {
            return "sort[1]/number_obj-29";
            }
        case TAG("sort[1]/number_obj-28"):
            {
            return "sort[1]/number_obj-28";
            }
        case TAG("sort[1]/number_obj-27"):
            {
            return "sort[1]/number_obj-27";
            }
        case TAG("sort[1]/number_obj-26"):
            {
            return "sort[1]/number_obj-26";
            }
        case TAG("sort[1]/number_obj-55"):
            {
            return "sort[1]/number_obj-55";
            }
        case TAG("sort[1]/number_obj-54"):
            {
            return "sort[1]/number_obj-54";
            }
        case TAG("sort[1]/number_obj-53"):
            {
            return "sort[1]/number_obj-53";
            }
        case TAG("sort[1]/number_obj-52"):
            {
            return "sort[1]/number_obj-52";
            }
        case TAG("sort[1]/number_obj-51"):
            {
            return "sort[1]/number_obj-51";
            }
        case TAG("sort[1]/number_obj-50"):
            {
            return "sort[1]/number_obj-50";
            }
        case TAG("sort[1]/number_obj-49"):
            {
            return "sort[1]/number_obj-49";
            }
        case TAG("sort[1]/number_obj-48"):
            {
            return "sort[1]/number_obj-48";
            }
        case TAG("sort[1]/number_obj-47"):
            {
            return "sort[1]/number_obj-47";
            }
        case TAG("sort[1]/number_obj-46"):
            {
            return "sort[1]/number_obj-46";
            }
        case TAG("sort[1]/number_obj-140"):
            {
            return "sort[1]/number_obj-140";
            }
        case TAG("sort[1]/number_obj-139"):
            {
            return "sort[1]/number_obj-139";
            }
        case TAG("sort[1]/number_obj-138"):
            {
            return "sort[1]/number_obj-138";
            }
        case TAG("sort[1]/number_obj-137"):
            {
            return "sort[1]/number_obj-137";
            }
        case TAG("sort[1]/number_obj-136"):
            {
            return "sort[1]/number_obj-136";
            }
        case TAG("sort[1]/number_obj-135"):
            {
            return "sort[1]/number_obj-135";
            }
        case TAG("sort[1]/number_obj-134"):
            {
            return "sort[1]/number_obj-134";
            }
        case TAG("sort[1]/number_obj-133"):
            {
            return "sort[1]/number_obj-133";
            }
        case TAG("sort[1]/number_obj-132"):
            {
            return "sort[1]/number_obj-132";
            }
        case TAG("sort[1]/number_obj-131"):
            {
            return "sort[1]/number_obj-131";
            }
        case TAG("sort[1]/number_obj-130"):
            {
            return "sort[1]/number_obj-130";
            }
        case TAG("sort[1]/number_obj-129"):
            {
            return "sort[1]/number_obj-129";
            }
        case TAG("sort[1]/number_obj-128"):
            {
            return "sort[1]/number_obj-128";
            }
        case TAG("sort[1]/number_obj-127"):
            {
            return "sort[1]/number_obj-127";
            }
        case TAG("sort[1]/number_obj-126"):
            {
            return "sort[1]/number_obj-126";
            }
        case TAG("sort[1]/number_obj-125"):
            {
            return "sort[1]/number_obj-125";
            }
        case TAG("sort[1]/number_obj-124"):
            {
            return "sort[1]/number_obj-124";
            }
        case TAG("sort[1]/number_obj-123"):
            {
            return "sort[1]/number_obj-123";
            }
        case TAG("sort[1]/number_obj-122"):
            {
            return "sort[1]/number_obj-122";
            }
        case TAG("sort[1]/number_obj-121"):
            {
            return "sort[1]/number_obj-121";
            }
        case TAG("sort[1]/number_obj-120"):
            {
            return "sort[1]/number_obj-120";
            }
        case TAG("sort[1]/number_obj-119"):
            {
            return "sort[1]/number_obj-119";
            }
        case TAG("sort[1]/number_obj-118"):
            {
            return "sort[1]/number_obj-118";
            }
        case TAG("sort[1]/number_obj-117"):
            {
            return "sort[1]/number_obj-117";
            }
        case TAG("sort[1]/number_obj-116"):
            {
            return "sort[1]/number_obj-116";
            }
        case TAG("sort[1]/number_obj-115"):
            {
            return "sort[1]/number_obj-115";
            }
        case TAG("sort[1]/number_obj-114"):
            {
            return "sort[1]/number_obj-114";
            }
        case TAG("sort[1]/number_obj-113"):
            {
            return "sort[1]/number_obj-113";
            }
        case TAG("sort[1]/number_obj-112"):
            {
            return "sort[1]/number_obj-112";
            }
        case TAG("sort[1]/number_obj-111"):
            {
            return "sort[1]/number_obj-111";
            }
        case TAG("sort[1]/number_obj-110"):
            {
            return "sort[1]/number_obj-110";
            }
        case TAG("sort[1]/number_obj-109"):
            {
            return "sort[1]/number_obj-109";
            }
        case TAG("sort[1]/number_obj-106"):
            {
            return "sort[1]/number_obj-106";
            }
        case TAG("sort[1]/number_obj-105"):
            {
            return "sort[1]/number_obj-105";
            }
        case TAG("sort[1]/number_obj-103"):
            {
            return "sort[1]/number_obj-103";
            }
        case TAG("sort[1]/number_obj-101"):
            {
            return "sort[1]/number_obj-101";
            }
        case TAG("sort[1]/number_obj-100"):
            {
            return "sort[1]/number_obj-100";
            }
        case TAG("sort[1]/number_obj-99"):
            {
            return "sort[1]/number_obj-99";
            }
        case TAG("sort[1]/number_obj-98"):
            {
            return "sort[1]/number_obj-98";
            }
        case TAG("sort[1]/number_obj-97"):
            {
            return "sort[1]/number_obj-97";
            }
        case TAG("sort[1]/number_obj-96"):
            {
            return "sort[1]/number_obj-96";
            }
        case TAG("sort[1]/number_obj-95"):
            {
            return "sort[1]/number_obj-95";
            }
        case TAG("sort[1]/number_obj-93"):
            {
            return "sort[1]/number_obj-93";
            }
        case TAG("sort[1]/number_obj-89"):
            {
            return "sort[1]/number_obj-89";
            }
        case TAG("sort[1]/number_obj-87"):
            {
            return "sort[1]/number_obj-87";
            }
        case TAG("sort[1]/number_obj-83"):
            {
            return "sort[1]/number_obj-83";
            }
        case TAG("sort[1]/number_obj-81"):
            {
            return "sort[1]/number_obj-81";
            }
        case TAG("sort[1]/number_obj-80"):
            {
            return "sort[1]/number_obj-80";
            }
        case TAG("sort[1]/number_obj-79"):
            {
            return "sort[1]/number_obj-79";
            }
        case TAG("sort[1]/number_obj-65"):
            {
            return "sort[1]/number_obj-65";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void message_29_listin_list_set(const list& v) {
        this->message_29_set_set(v);
    }
    
    void message_29_listin_number_set(number v) {
        this->message_29_set_set(v);
    }
    
    void message_29_listin_bang_bang() {
        this->message_29_trigger_bang();
    }
    
    void button_04_bangin_bang() {
        this->button_04_bangval_bang();
    }
    
    void numberobj_39_valin_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void numberobj_39_format_set(number v) {
        this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_24_out1_number_set(number v) {
        this->gate_17_input_number_set(v);
    }
    
    void eventinlet_24_out1_list_set(const list& v) {
        this->gate_17_input_list_set(v);
    }
    
    void message_30_listin_list_set(const list& v) {
        this->message_30_set_set(v);
    }
    
    void message_30_listin_number_set(number v) {
        this->message_30_set_set(v);
    }
    
    void message_30_listin_bang_bang() {
        this->message_30_trigger_bang();
    }
    
    void message_31_listin_list_set(const list& v) {
        this->message_31_set_set(v);
    }
    
    void message_31_listin_number_set(number v) {
        this->message_31_set_set(v);
    }
    
    void message_31_listin_bang_bang() {
        this->message_31_trigger_bang();
    }
    
    void toggle_01_valin_set(number v) {
        this->toggle_01_value_number_set(v);
    }
    
    void button_05_bangin_bang() {
        this->button_05_bangval_bang();
    }
    
    void numberobj_40_valin_set(number v) {
        this->numberobj_40_value_set(v);
    }
    
    void numberobj_40_format_set(number v) {
        this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_32_listin_list_set(const list& v) {
        this->message_32_set_set(v);
    }
    
    void message_32_listin_number_set(number v) {
        this->message_32_set_set(v);
    }
    
    void message_32_listin_bang_bang() {
        this->message_32_trigger_bang();
    }
    
    void message_33_listin_list_set(const list& v) {
        this->message_33_set_set(v);
    }
    
    void message_33_listin_number_set(number v) {
        this->message_33_set_set(v);
    }
    
    void message_33_listin_bang_bang() {
        this->message_33_trigger_bang();
    }
    
    void message_34_listin_list_set(const list& v) {
        this->message_34_set_set(v);
    }
    
    void message_34_listin_number_set(number v) {
        this->message_34_set_set(v);
    }
    
    void message_34_listin_bang_bang() {
        this->message_34_trigger_bang();
    }
    
    void eventinlet_25_out1_bang_bang() {
        this->route_01_input_bang_bang();
    }
    
    void eventinlet_25_out1_number_set(number v) {
        this->route_01_input_number_set(v);
    }
    
    void numberobj_41_valin_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void numberobj_41_format_set(number v) {
        this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_35_listin_list_set(const list& v) {
        this->message_35_set_set(v);
    }
    
    void message_35_listin_number_set(number v) {
        this->message_35_set_set(v);
    }
    
    void message_35_listin_bang_bang() {
        this->message_35_trigger_bang();
    }
    
    void message_36_listin_list_set(const list& v) {
        this->message_36_set_set(v);
    }
    
    void message_36_listin_number_set(number v) {
        this->message_36_set_set(v);
    }
    
    void message_36_listin_bang_bang() {
        this->message_36_trigger_bang();
    }
    
    void numberobj_42_valin_set(number v) {
        this->numberobj_42_value_set(v);
    }
    
    void numberobj_42_format_set(number v) {
        this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_06_bangin_bang() {
        this->button_06_bangval_bang();
    }
    
    void numberobj_43_valin_set(number v) {
        this->numberobj_43_value_set(v);
    }
    
    void numberobj_43_format_set(number v) {
        this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_37_listin_list_set(const list& v) {
        this->message_37_set_set(v);
    }
    
    void message_37_listin_number_set(number v) {
        this->message_37_set_set(v);
    }
    
    void message_37_listin_bang_bang() {
        this->message_37_trigger_bang();
    }
    
    void numberobj_44_valin_set(number v) {
        this->numberobj_44_value_set(v);
    }
    
    void numberobj_44_format_set(number v) {
        this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_45_valin_set(number v) {
        this->numberobj_45_value_set(v);
    }
    
    void numberobj_45_format_set(number v) {
        this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_46_valin_set(number v) {
        this->numberobj_46_value_set(v);
    }
    
    void numberobj_46_format_set(number v) {
        this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_47_valin_set(number v) {
        this->numberobj_47_value_set(v);
    }
    
    void numberobj_47_format_set(number v) {
        this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_48_valin_set(number v) {
        this->numberobj_48_value_set(v);
    }
    
    void numberobj_48_format_set(number v) {
        this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_49_valin_set(number v) {
        this->numberobj_49_value_set(v);
    }
    
    void numberobj_49_format_set(number v) {
        this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_50_valin_set(number v) {
        this->numberobj_50_value_set(v);
    }
    
    void numberobj_50_format_set(number v) {
        this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_51_valin_set(number v) {
        this->numberobj_51_value_set(v);
    }
    
    void numberobj_51_format_set(number v) {
        this->numberobj_51_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_52_valin_set(number v) {
        this->numberobj_52_value_set(v);
    }
    
    void numberobj_52_format_set(number v) {
        this->numberobj_52_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_53_valin_set(number v) {
        this->numberobj_53_value_set(v);
    }
    
    void numberobj_53_format_set(number v) {
        this->numberobj_53_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_54_valin_set(number v) {
        this->numberobj_54_value_set(v);
    }
    
    void numberobj_54_format_set(number v) {
        this->numberobj_54_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_55_valin_set(number v) {
        this->numberobj_55_value_set(v);
    }
    
    void numberobj_55_format_set(number v) {
        this->numberobj_55_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_56_valin_set(number v) {
        this->numberobj_56_value_set(v);
    }
    
    void numberobj_56_format_set(number v) {
        this->numberobj_56_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_57_valin_set(number v) {
        this->numberobj_57_value_set(v);
    }
    
    void numberobj_57_format_set(number v) {
        this->numberobj_57_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_58_valin_set(number v) {
        this->numberobj_58_value_set(v);
    }
    
    void numberobj_58_format_set(number v) {
        this->numberobj_58_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_59_valin_set(number v) {
        this->numberobj_59_value_set(v);
    }
    
    void numberobj_59_format_set(number v) {
        this->numberobj_59_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_60_valin_set(number v) {
        this->numberobj_60_value_set(v);
    }
    
    void numberobj_60_format_set(number v) {
        this->numberobj_60_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_61_valin_set(number v) {
        this->numberobj_61_value_set(v);
    }
    
    void numberobj_61_format_set(number v) {
        this->numberobj_61_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_62_valin_set(number v) {
        this->numberobj_62_value_set(v);
    }
    
    void numberobj_62_format_set(number v) {
        this->numberobj_62_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_63_valin_set(number v) {
        this->numberobj_63_value_set(v);
    }
    
    void numberobj_63_format_set(number v) {
        this->numberobj_63_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_64_valin_set(number v) {
        this->numberobj_64_value_set(v);
    }
    
    void numberobj_64_format_set(number v) {
        this->numberobj_64_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_65_valin_set(number v) {
        this->numberobj_65_value_set(v);
    }
    
    void numberobj_65_format_set(number v) {
        this->numberobj_65_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_66_valin_set(number v) {
        this->numberobj_66_value_set(v);
    }
    
    void numberobj_66_format_set(number v) {
        this->numberobj_66_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_67_valin_set(number v) {
        this->numberobj_67_value_set(v);
    }
    
    void numberobj_67_format_set(number v) {
        this->numberobj_67_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_68_valin_set(number v) {
        this->numberobj_68_value_set(v);
    }
    
    void numberobj_68_format_set(number v) {
        this->numberobj_68_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_69_valin_set(number v) {
        this->numberobj_69_value_set(v);
    }
    
    void numberobj_69_format_set(number v) {
        this->numberobj_69_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_70_valin_set(number v) {
        this->numberobj_70_value_set(v);
    }
    
    void numberobj_70_format_set(number v) {
        this->numberobj_70_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_71_valin_set(number v) {
        this->numberobj_71_value_set(v);
    }
    
    void numberobj_71_format_set(number v) {
        this->numberobj_71_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_72_valin_set(number v) {
        this->numberobj_72_value_set(v);
    }
    
    void numberobj_72_format_set(number v) {
        this->numberobj_72_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_73_valin_set(number v) {
        this->numberobj_73_value_set(v);
    }
    
    void numberobj_73_format_set(number v) {
        this->numberobj_73_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_74_valin_set(number v) {
        this->numberobj_74_value_set(v);
    }
    
    void numberobj_74_format_set(number v) {
        this->numberobj_74_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_75_valin_set(number v) {
        this->numberobj_75_value_set(v);
    }
    
    void numberobj_75_format_set(number v) {
        this->numberobj_75_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_76_valin_set(number v) {
        this->numberobj_76_value_set(v);
    }
    
    void numberobj_76_format_set(number v) {
        this->numberobj_76_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_77_valin_set(number v) {
        this->numberobj_77_value_set(v);
    }
    
    void numberobj_77_format_set(number v) {
        this->numberobj_77_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_78_valin_set(number v) {
        this->numberobj_78_value_set(v);
    }
    
    void numberobj_78_format_set(number v) {
        this->numberobj_78_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_79_valin_set(number v) {
        this->numberobj_79_value_set(v);
    }
    
    void numberobj_79_format_set(number v) {
        this->numberobj_79_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_80_valin_set(number v) {
        this->numberobj_80_value_set(v);
    }
    
    void numberobj_80_format_set(number v) {
        this->numberobj_80_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_81_valin_set(number v) {
        this->numberobj_81_value_set(v);
    }
    
    void numberobj_81_format_set(number v) {
        this->numberobj_81_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_82_valin_set(number v) {
        this->numberobj_82_value_set(v);
    }
    
    void numberobj_82_format_set(number v) {
        this->numberobj_82_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_83_valin_set(number v) {
        this->numberobj_83_value_set(v);
    }
    
    void numberobj_83_format_set(number v) {
        this->numberobj_83_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_84_valin_set(number v) {
        this->numberobj_84_value_set(v);
    }
    
    void numberobj_84_format_set(number v) {
        this->numberobj_84_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_85_valin_set(number v) {
        this->numberobj_85_value_set(v);
    }
    
    void numberobj_85_format_set(number v) {
        this->numberobj_85_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_86_valin_set(number v) {
        this->numberobj_86_value_set(v);
    }
    
    void numberobj_86_format_set(number v) {
        this->numberobj_86_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_87_valin_set(number v) {
        this->numberobj_87_value_set(v);
    }
    
    void numberobj_87_format_set(number v) {
        this->numberobj_87_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_88_valin_set(number v) {
        this->numberobj_88_value_set(v);
    }
    
    void numberobj_88_format_set(number v) {
        this->numberobj_88_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_89_valin_set(number v) {
        this->numberobj_89_value_set(v);
    }
    
    void numberobj_89_format_set(number v) {
        this->numberobj_89_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_90_valin_set(number v) {
        this->numberobj_90_value_set(v);
    }
    
    void numberobj_90_format_set(number v) {
        this->numberobj_90_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_91_valin_set(number v) {
        this->numberobj_91_value_set(v);
    }
    
    void numberobj_91_format_set(number v) {
        this->numberobj_91_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_92_valin_set(number v) {
        this->numberobj_92_value_set(v);
    }
    
    void numberobj_92_format_set(number v) {
        this->numberobj_92_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_93_valin_set(number v) {
        this->numberobj_93_value_set(v);
    }
    
    void numberobj_93_format_set(number v) {
        this->numberobj_93_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_94_valin_set(number v) {
        this->numberobj_94_value_set(v);
    }
    
    void numberobj_94_format_set(number v) {
        this->numberobj_94_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_95_valin_set(number v) {
        this->numberobj_95_value_set(v);
    }
    
    void numberobj_95_format_set(number v) {
        this->numberobj_95_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_96_valin_set(number v) {
        this->numberobj_96_value_set(v);
    }
    
    void numberobj_96_format_set(number v) {
        this->numberobj_96_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_97_valin_set(number v) {
        this->numberobj_97_value_set(v);
    }
    
    void numberobj_97_format_set(number v) {
        this->numberobj_97_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_98_valin_set(number v) {
        this->numberobj_98_value_set(v);
    }
    
    void numberobj_98_format_set(number v) {
        this->numberobj_98_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_99_valin_set(number v) {
        this->numberobj_99_value_set(v);
    }
    
    void numberobj_99_format_set(number v) {
        this->numberobj_99_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_100_valin_set(number v) {
        this->numberobj_100_value_set(v);
    }
    
    void numberobj_100_format_set(number v) {
        this->numberobj_100_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_101_valin_set(number v) {
        this->numberobj_101_value_set(v);
    }
    
    void numberobj_101_format_set(number v) {
        this->numberobj_101_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_102_valin_set(number v) {
        this->numberobj_102_value_set(v);
    }
    
    void numberobj_102_format_set(number v) {
        this->numberobj_102_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_103_valin_set(number v) {
        this->numberobj_103_value_set(v);
    }
    
    void numberobj_103_format_set(number v) {
        this->numberobj_103_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_104_valin_set(number v) {
        this->numberobj_104_value_set(v);
    }
    
    void numberobj_104_format_set(number v) {
        this->numberobj_104_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_105_valin_set(number v) {
        this->numberobj_105_value_set(v);
    }
    
    void numberobj_105_format_set(number v) {
        this->numberobj_105_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_106_valin_set(number v) {
        this->numberobj_106_value_set(v);
    }
    
    void numberobj_106_format_set(number v) {
        this->numberobj_106_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_107_valin_set(number v) {
        this->numberobj_107_value_set(v);
    }
    
    void numberobj_107_format_set(number v) {
        this->numberobj_107_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_108_valin_set(number v) {
        this->numberobj_108_value_set(v);
    }
    
    void numberobj_108_format_set(number v) {
        this->numberobj_108_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_109_valin_set(number v) {
        this->numberobj_109_value_set(v);
    }
    
    void numberobj_109_format_set(number v) {
        this->numberobj_109_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_110_valin_set(number v) {
        this->numberobj_110_value_set(v);
    }
    
    void numberobj_110_format_set(number v) {
        this->numberobj_110_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_111_valin_set(number v) {
        this->numberobj_111_value_set(v);
    }
    
    void numberobj_111_format_set(number v) {
        this->numberobj_111_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_112_valin_set(number v) {
        this->numberobj_112_value_set(v);
    }
    
    void numberobj_112_format_set(number v) {
        this->numberobj_112_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_113_valin_set(number v) {
        this->numberobj_113_value_set(v);
    }
    
    void numberobj_113_format_set(number v) {
        this->numberobj_113_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_114_valin_set(number v) {
        this->numberobj_114_value_set(v);
    }
    
    void numberobj_114_format_set(number v) {
        this->numberobj_114_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_115_valin_set(number v) {
        this->numberobj_115_value_set(v);
    }
    
    void numberobj_115_format_set(number v) {
        this->numberobj_115_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_116_valin_set(number v) {
        this->numberobj_116_value_set(v);
    }
    
    void numberobj_116_format_set(number v) {
        this->numberobj_116_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_117_valin_set(number v) {
        this->numberobj_117_value_set(v);
    }
    
    void numberobj_117_format_set(number v) {
        this->numberobj_117_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_118_valin_set(number v) {
        this->numberobj_118_value_set(v);
    }
    
    void numberobj_118_format_set(number v) {
        this->numberobj_118_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_119_valin_set(number v) {
        this->numberobj_119_value_set(v);
    }
    
    void numberobj_119_format_set(number v) {
        this->numberobj_119_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_120_valin_set(number v) {
        this->numberobj_120_value_set(v);
    }
    
    void numberobj_120_format_set(number v) {
        this->numberobj_120_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_121_valin_set(number v) {
        this->numberobj_121_value_set(v);
    }
    
    void numberobj_121_format_set(number v) {
        this->numberobj_121_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_122_valin_set(number v) {
        this->numberobj_122_value_set(v);
    }
    
    void numberobj_122_format_set(number v) {
        this->numberobj_122_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_123_valin_set(number v) {
        this->numberobj_123_value_set(v);
    }
    
    void numberobj_123_format_set(number v) {
        this->numberobj_123_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_124_valin_set(number v) {
        this->numberobj_124_value_set(v);
    }
    
    void numberobj_124_format_set(number v) {
        this->numberobj_124_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_125_valin_set(number v) {
        this->numberobj_125_value_set(v);
    }
    
    void numberobj_125_format_set(number v) {
        this->numberobj_125_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_126_valin_set(number v) {
        this->numberobj_126_value_set(v);
    }
    
    void numberobj_126_format_set(number v) {
        this->numberobj_126_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_127_valin_set(number v) {
        this->numberobj_127_value_set(v);
    }
    
    void numberobj_127_format_set(number v) {
        this->numberobj_127_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_128_valin_set(number v) {
        this->numberobj_128_value_set(v);
    }
    
    void numberobj_128_format_set(number v) {
        this->numberobj_128_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_129_valin_set(number v) {
        this->numberobj_129_value_set(v);
    }
    
    void numberobj_129_format_set(number v) {
        this->numberobj_129_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_130_valin_set(number v) {
        this->numberobj_130_value_set(v);
    }
    
    void numberobj_130_format_set(number v) {
        this->numberobj_130_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_131_valin_set(number v) {
        this->numberobj_131_value_set(v);
    }
    
    void numberobj_131_format_set(number v) {
        this->numberobj_131_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_132_valin_set(number v) {
        this->numberobj_132_value_set(v);
    }
    
    void numberobj_132_format_set(number v) {
        this->numberobj_132_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_133_valin_set(number v) {
        this->numberobj_133_value_set(v);
    }
    
    void numberobj_133_format_set(number v) {
        this->numberobj_133_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_134_valin_set(number v) {
        this->numberobj_134_value_set(v);
    }
    
    void numberobj_134_format_set(number v) {
        this->numberobj_134_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_135_valin_set(number v) {
        this->numberobj_135_value_set(v);
    }
    
    void numberobj_135_format_set(number v) {
        this->numberobj_135_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_136_valin_set(number v) {
        this->numberobj_136_value_set(v);
    }
    
    void numberobj_136_format_set(number v) {
        this->numberobj_136_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_137_valin_set(number v) {
        this->numberobj_137_value_set(v);
    }
    
    void numberobj_137_format_set(number v) {
        this->numberobj_137_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_138_valin_set(number v) {
        this->numberobj_138_value_set(v);
    }
    
    void numberobj_138_format_set(number v) {
        this->numberobj_138_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_139_valin_set(number v) {
        this->numberobj_139_value_set(v);
    }
    
    void numberobj_139_format_set(number v) {
        this->numberobj_139_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_140_valin_set(number v) {
        this->numberobj_140_value_set(v);
    }
    
    void numberobj_140_format_set(number v) {
        this->numberobj_140_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_29_init();
        this->numberobj_39_init();
        this->message_30_init();
        this->message_31_init();
        this->numberobj_40_init();
        this->message_32_init();
        this->message_33_init();
        this->message_34_init();
        this->numberobj_41_init();
        this->message_35_init();
        this->message_36_init();
        this->numberobj_42_init();
        this->numberobj_43_init();
        this->message_37_init();
        this->numberobj_44_init();
        this->numberobj_45_init();
        this->numberobj_46_init();
        this->numberobj_47_init();
        this->numberobj_48_init();
        this->numberobj_49_init();
        this->numberobj_50_init();
        this->numberobj_51_init();
        this->numberobj_52_init();
        this->numberobj_53_init();
        this->numberobj_54_init();
        this->numberobj_55_init();
        this->numberobj_56_init();
        this->numberobj_57_init();
        this->numberobj_58_init();
        this->numberobj_59_init();
        this->numberobj_60_init();
        this->numberobj_61_init();
        this->numberobj_62_init();
        this->numberobj_63_init();
        this->numberobj_64_init();
        this->numberobj_65_init();
        this->numberobj_66_init();
        this->numberobj_67_init();
        this->numberobj_68_init();
        this->numberobj_69_init();
        this->numberobj_70_init();
        this->numberobj_71_init();
        this->numberobj_72_init();
        this->numberobj_73_init();
        this->numberobj_74_init();
        this->numberobj_75_init();
        this->numberobj_76_init();
        this->numberobj_77_init();
        this->numberobj_78_init();
        this->numberobj_79_init();
        this->numberobj_80_init();
        this->numberobj_81_init();
        this->numberobj_82_init();
        this->numberobj_83_init();
        this->numberobj_84_init();
        this->numberobj_85_init();
        this->numberobj_86_init();
        this->numberobj_87_init();
        this->numberobj_88_init();
        this->numberobj_89_init();
        this->numberobj_90_init();
        this->numberobj_91_init();
        this->numberobj_92_init();
        this->numberobj_93_init();
        this->numberobj_94_init();
        this->numberobj_95_init();
        this->numberobj_96_init();
        this->numberobj_97_init();
        this->numberobj_98_init();
        this->numberobj_99_init();
        this->numberobj_100_init();
        this->numberobj_101_init();
        this->numberobj_102_init();
        this->numberobj_103_init();
        this->numberobj_104_init();
        this->numberobj_105_init();
        this->numberobj_106_init();
        this->numberobj_107_init();
        this->numberobj_108_init();
        this->numberobj_109_init();
        this->numberobj_110_init();
        this->numberobj_111_init();
        this->numberobj_112_init();
        this->numberobj_113_init();
        this->numberobj_114_init();
        this->numberobj_115_init();
        this->numberobj_116_init();
        this->numberobj_117_init();
        this->numberobj_118_init();
        this->numberobj_119_init();
        this->numberobj_120_init();
        this->numberobj_121_init();
        this->numberobj_122_init();
        this->numberobj_123_init();
        this->numberobj_124_init();
        this->numberobj_125_init();
        this->numberobj_126_init();
        this->numberobj_127_init();
        this->numberobj_128_init();
        this->numberobj_129_init();
        this->numberobj_130_init();
        this->numberobj_131_init();
        this->numberobj_132_init();
        this->numberobj_133_init();
        this->numberobj_134_init();
        this->numberobj_135_init();
        this->numberobj_136_init();
        this->numberobj_137_init();
        this->numberobj_138_init();
        this->numberobj_139_init();
        this->numberobj_140_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void route_01_nomatch_bang_bang() {}
    
    void message_35_set_set(const list& v) {
        this->message_35_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-6"), v, this->_currentTime);
    }
    
    void pak_02_out_set(const list& v) {
        this->message_35_set_set(v);
    }
    
    void pak_02_in100_set(number v) {
        this->pak_02_in100 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_140_output_set(number v) {
        this->pak_02_in100_set(v);
    }
    
    void numberobj_140_value_bang() {
        number v = this->numberobj_140_value;
        number localvalue = v;
    
        if (this->numberobj_140_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-65"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_140_output_set(localvalue);
    }
    
    void route_01_match100_bang_bang() {
        this->numberobj_140_value_bang();
    }
    
    void numberobj_140_value_set(number v) {
        this->numberobj_140_value_setter(v);
        v = this->numberobj_140_value;
        number localvalue = v;
    
        if (this->numberobj_140_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-65"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_140_output_set(localvalue);
    }
    
    void route_01_match100_number_set(number v) {
        this->numberobj_140_value_set(v);
    }
    
    void route_01_match100_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_140_value_set(converted);
        }
    }
    
    void pak_02_in99_set(number v) {
        this->pak_02_in99 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_139_output_set(number v) {
        this->pak_02_in99_set(v);
    }
    
    void numberobj_139_value_bang() {
        number v = this->numberobj_139_value;
        number localvalue = v;
    
        if (this->numberobj_139_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-79"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_139_output_set(localvalue);
    }
    
    void route_01_match99_bang_bang() {
        this->numberobj_139_value_bang();
    }
    
    void numberobj_139_value_set(number v) {
        this->numberobj_139_value_setter(v);
        v = this->numberobj_139_value;
        number localvalue = v;
    
        if (this->numberobj_139_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-79"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_139_output_set(localvalue);
    }
    
    void route_01_match99_number_set(number v) {
        this->numberobj_139_value_set(v);
    }
    
    void route_01_match99_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_139_value_set(converted);
        }
    }
    
    void pak_02_in98_set(number v) {
        this->pak_02_in98 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_138_output_set(number v) {
        this->pak_02_in98_set(v);
    }
    
    void numberobj_138_value_bang() {
        number v = this->numberobj_138_value;
        number localvalue = v;
    
        if (this->numberobj_138_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-80"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_138_output_set(localvalue);
    }
    
    void route_01_match98_bang_bang() {
        this->numberobj_138_value_bang();
    }
    
    void numberobj_138_value_set(number v) {
        this->numberobj_138_value_setter(v);
        v = this->numberobj_138_value;
        number localvalue = v;
    
        if (this->numberobj_138_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-80"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_138_output_set(localvalue);
    }
    
    void route_01_match98_number_set(number v) {
        this->numberobj_138_value_set(v);
    }
    
    void route_01_match98_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_138_value_set(converted);
        }
    }
    
    void pak_02_in97_set(number v) {
        this->pak_02_in97 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_137_output_set(number v) {
        this->pak_02_in97_set(v);
    }
    
    void numberobj_137_value_bang() {
        number v = this->numberobj_137_value;
        number localvalue = v;
    
        if (this->numberobj_137_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-81"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_137_output_set(localvalue);
    }
    
    void route_01_match97_bang_bang() {
        this->numberobj_137_value_bang();
    }
    
    void numberobj_137_value_set(number v) {
        this->numberobj_137_value_setter(v);
        v = this->numberobj_137_value;
        number localvalue = v;
    
        if (this->numberobj_137_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-81"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_137_output_set(localvalue);
    }
    
    void route_01_match97_number_set(number v) {
        this->numberobj_137_value_set(v);
    }
    
    void route_01_match97_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_137_value_set(converted);
        }
    }
    
    void pak_02_in96_set(number v) {
        this->pak_02_in96 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_136_output_set(number v) {
        this->pak_02_in96_set(v);
    }
    
    void numberobj_136_value_bang() {
        number v = this->numberobj_136_value;
        number localvalue = v;
    
        if (this->numberobj_136_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-83"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_136_output_set(localvalue);
    }
    
    void route_01_match96_bang_bang() {
        this->numberobj_136_value_bang();
    }
    
    void numberobj_136_value_set(number v) {
        this->numberobj_136_value_setter(v);
        v = this->numberobj_136_value;
        number localvalue = v;
    
        if (this->numberobj_136_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-83"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_136_output_set(localvalue);
    }
    
    void route_01_match96_number_set(number v) {
        this->numberobj_136_value_set(v);
    }
    
    void route_01_match96_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_136_value_set(converted);
        }
    }
    
    void pak_02_in95_set(number v) {
        this->pak_02_in95 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_135_output_set(number v) {
        this->pak_02_in95_set(v);
    }
    
    void numberobj_135_value_bang() {
        number v = this->numberobj_135_value;
        number localvalue = v;
    
        if (this->numberobj_135_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-87"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_135_output_set(localvalue);
    }
    
    void route_01_match95_bang_bang() {
        this->numberobj_135_value_bang();
    }
    
    void numberobj_135_value_set(number v) {
        this->numberobj_135_value_setter(v);
        v = this->numberobj_135_value;
        number localvalue = v;
    
        if (this->numberobj_135_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-87"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_135_output_set(localvalue);
    }
    
    void route_01_match95_number_set(number v) {
        this->numberobj_135_value_set(v);
    }
    
    void route_01_match95_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_135_value_set(converted);
        }
    }
    
    void pak_02_in94_set(number v) {
        this->pak_02_in94 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_134_output_set(number v) {
        this->pak_02_in94_set(v);
    }
    
    void numberobj_134_value_bang() {
        number v = this->numberobj_134_value;
        number localvalue = v;
    
        if (this->numberobj_134_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-89"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_134_output_set(localvalue);
    }
    
    void route_01_match94_bang_bang() {
        this->numberobj_134_value_bang();
    }
    
    void numberobj_134_value_set(number v) {
        this->numberobj_134_value_setter(v);
        v = this->numberobj_134_value;
        number localvalue = v;
    
        if (this->numberobj_134_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-89"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_134_output_set(localvalue);
    }
    
    void route_01_match94_number_set(number v) {
        this->numberobj_134_value_set(v);
    }
    
    void route_01_match94_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_134_value_set(converted);
        }
    }
    
    void pak_02_in93_set(number v) {
        this->pak_02_in93 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_133_output_set(number v) {
        this->pak_02_in93_set(v);
    }
    
    void numberobj_133_value_bang() {
        number v = this->numberobj_133_value;
        number localvalue = v;
    
        if (this->numberobj_133_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-93"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_133_output_set(localvalue);
    }
    
    void route_01_match93_bang_bang() {
        this->numberobj_133_value_bang();
    }
    
    void numberobj_133_value_set(number v) {
        this->numberobj_133_value_setter(v);
        v = this->numberobj_133_value;
        number localvalue = v;
    
        if (this->numberobj_133_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-93"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_133_output_set(localvalue);
    }
    
    void route_01_match93_number_set(number v) {
        this->numberobj_133_value_set(v);
    }
    
    void route_01_match93_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_133_value_set(converted);
        }
    }
    
    void pak_02_in92_set(number v) {
        this->pak_02_in92 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_132_output_set(number v) {
        this->pak_02_in92_set(v);
    }
    
    void numberobj_132_value_bang() {
        number v = this->numberobj_132_value;
        number localvalue = v;
    
        if (this->numberobj_132_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-95"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_132_output_set(localvalue);
    }
    
    void route_01_match92_bang_bang() {
        this->numberobj_132_value_bang();
    }
    
    void numberobj_132_value_set(number v) {
        this->numberobj_132_value_setter(v);
        v = this->numberobj_132_value;
        number localvalue = v;
    
        if (this->numberobj_132_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-95"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_132_output_set(localvalue);
    }
    
    void route_01_match92_number_set(number v) {
        this->numberobj_132_value_set(v);
    }
    
    void route_01_match92_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_132_value_set(converted);
        }
    }
    
    void pak_02_in91_set(number v) {
        this->pak_02_in91 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_131_output_set(number v) {
        this->pak_02_in91_set(v);
    }
    
    void numberobj_131_value_bang() {
        number v = this->numberobj_131_value;
        number localvalue = v;
    
        if (this->numberobj_131_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-96"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_131_output_set(localvalue);
    }
    
    void route_01_match91_bang_bang() {
        this->numberobj_131_value_bang();
    }
    
    void numberobj_131_value_set(number v) {
        this->numberobj_131_value_setter(v);
        v = this->numberobj_131_value;
        number localvalue = v;
    
        if (this->numberobj_131_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-96"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_131_output_set(localvalue);
    }
    
    void route_01_match91_number_set(number v) {
        this->numberobj_131_value_set(v);
    }
    
    void route_01_match91_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_131_value_set(converted);
        }
    }
    
    void pak_02_in90_set(number v) {
        this->pak_02_in90 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_130_output_set(number v) {
        this->pak_02_in90_set(v);
    }
    
    void numberobj_130_value_bang() {
        number v = this->numberobj_130_value;
        number localvalue = v;
    
        if (this->numberobj_130_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-97"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_130_output_set(localvalue);
    }
    
    void route_01_match90_bang_bang() {
        this->numberobj_130_value_bang();
    }
    
    void numberobj_130_value_set(number v) {
        this->numberobj_130_value_setter(v);
        v = this->numberobj_130_value;
        number localvalue = v;
    
        if (this->numberobj_130_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-97"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_130_output_set(localvalue);
    }
    
    void route_01_match90_number_set(number v) {
        this->numberobj_130_value_set(v);
    }
    
    void route_01_match90_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_130_value_set(converted);
        }
    }
    
    void pak_02_in89_set(number v) {
        this->pak_02_in89 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_129_output_set(number v) {
        this->pak_02_in89_set(v);
    }
    
    void numberobj_129_value_bang() {
        number v = this->numberobj_129_value;
        number localvalue = v;
    
        if (this->numberobj_129_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-98"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_129_output_set(localvalue);
    }
    
    void route_01_match89_bang_bang() {
        this->numberobj_129_value_bang();
    }
    
    void numberobj_129_value_set(number v) {
        this->numberobj_129_value_setter(v);
        v = this->numberobj_129_value;
        number localvalue = v;
    
        if (this->numberobj_129_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-98"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_129_output_set(localvalue);
    }
    
    void route_01_match89_number_set(number v) {
        this->numberobj_129_value_set(v);
    }
    
    void route_01_match89_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_129_value_set(converted);
        }
    }
    
    void pak_02_in88_set(number v) {
        this->pak_02_in88 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_128_output_set(number v) {
        this->pak_02_in88_set(v);
    }
    
    void numberobj_128_value_bang() {
        number v = this->numberobj_128_value;
        number localvalue = v;
    
        if (this->numberobj_128_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-99"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_128_output_set(localvalue);
    }
    
    void route_01_match88_bang_bang() {
        this->numberobj_128_value_bang();
    }
    
    void numberobj_128_value_set(number v) {
        this->numberobj_128_value_setter(v);
        v = this->numberobj_128_value;
        number localvalue = v;
    
        if (this->numberobj_128_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-99"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_128_output_set(localvalue);
    }
    
    void route_01_match88_number_set(number v) {
        this->numberobj_128_value_set(v);
    }
    
    void route_01_match88_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_128_value_set(converted);
        }
    }
    
    void pak_02_in87_set(number v) {
        this->pak_02_in87 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_127_output_set(number v) {
        this->pak_02_in87_set(v);
    }
    
    void numberobj_127_value_bang() {
        number v = this->numberobj_127_value;
        number localvalue = v;
    
        if (this->numberobj_127_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-100"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_127_output_set(localvalue);
    }
    
    void route_01_match87_bang_bang() {
        this->numberobj_127_value_bang();
    }
    
    void numberobj_127_value_set(number v) {
        this->numberobj_127_value_setter(v);
        v = this->numberobj_127_value;
        number localvalue = v;
    
        if (this->numberobj_127_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-100"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_127_output_set(localvalue);
    }
    
    void route_01_match87_number_set(number v) {
        this->numberobj_127_value_set(v);
    }
    
    void route_01_match87_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_127_value_set(converted);
        }
    }
    
    void pak_02_in86_set(number v) {
        this->pak_02_in86 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_126_output_set(number v) {
        this->pak_02_in86_set(v);
    }
    
    void numberobj_126_value_bang() {
        number v = this->numberobj_126_value;
        number localvalue = v;
    
        if (this->numberobj_126_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-101"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_126_output_set(localvalue);
    }
    
    void route_01_match86_bang_bang() {
        this->numberobj_126_value_bang();
    }
    
    void numberobj_126_value_set(number v) {
        this->numberobj_126_value_setter(v);
        v = this->numberobj_126_value;
        number localvalue = v;
    
        if (this->numberobj_126_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-101"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_126_output_set(localvalue);
    }
    
    void route_01_match86_number_set(number v) {
        this->numberobj_126_value_set(v);
    }
    
    void route_01_match86_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_126_value_set(converted);
        }
    }
    
    void pak_02_in85_set(number v) {
        this->pak_02_in85 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_125_output_set(number v) {
        this->pak_02_in85_set(v);
    }
    
    void numberobj_125_value_bang() {
        number v = this->numberobj_125_value;
        number localvalue = v;
    
        if (this->numberobj_125_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-103"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_125_output_set(localvalue);
    }
    
    void route_01_match85_bang_bang() {
        this->numberobj_125_value_bang();
    }
    
    void numberobj_125_value_set(number v) {
        this->numberobj_125_value_setter(v);
        v = this->numberobj_125_value;
        number localvalue = v;
    
        if (this->numberobj_125_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-103"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_125_output_set(localvalue);
    }
    
    void route_01_match85_number_set(number v) {
        this->numberobj_125_value_set(v);
    }
    
    void route_01_match85_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_125_value_set(converted);
        }
    }
    
    void pak_02_in84_set(number v) {
        this->pak_02_in84 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_124_output_set(number v) {
        this->pak_02_in84_set(v);
    }
    
    void numberobj_124_value_bang() {
        number v = this->numberobj_124_value;
        number localvalue = v;
    
        if (this->numberobj_124_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-105"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_124_output_set(localvalue);
    }
    
    void route_01_match84_bang_bang() {
        this->numberobj_124_value_bang();
    }
    
    void numberobj_124_value_set(number v) {
        this->numberobj_124_value_setter(v);
        v = this->numberobj_124_value;
        number localvalue = v;
    
        if (this->numberobj_124_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-105"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_124_output_set(localvalue);
    }
    
    void route_01_match84_number_set(number v) {
        this->numberobj_124_value_set(v);
    }
    
    void route_01_match84_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_124_value_set(converted);
        }
    }
    
    void pak_02_in83_set(number v) {
        this->pak_02_in83 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_123_output_set(number v) {
        this->pak_02_in83_set(v);
    }
    
    void numberobj_123_value_bang() {
        number v = this->numberobj_123_value;
        number localvalue = v;
    
        if (this->numberobj_123_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-106"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_123_output_set(localvalue);
    }
    
    void route_01_match83_bang_bang() {
        this->numberobj_123_value_bang();
    }
    
    void numberobj_123_value_set(number v) {
        this->numberobj_123_value_setter(v);
        v = this->numberobj_123_value;
        number localvalue = v;
    
        if (this->numberobj_123_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-106"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_123_output_set(localvalue);
    }
    
    void route_01_match83_number_set(number v) {
        this->numberobj_123_value_set(v);
    }
    
    void route_01_match83_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_123_value_set(converted);
        }
    }
    
    void pak_02_in82_set(number v) {
        this->pak_02_in82 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_122_output_set(number v) {
        this->pak_02_in82_set(v);
    }
    
    void numberobj_122_value_bang() {
        number v = this->numberobj_122_value;
        number localvalue = v;
    
        if (this->numberobj_122_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-109"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_122_output_set(localvalue);
    }
    
    void route_01_match82_bang_bang() {
        this->numberobj_122_value_bang();
    }
    
    void numberobj_122_value_set(number v) {
        this->numberobj_122_value_setter(v);
        v = this->numberobj_122_value;
        number localvalue = v;
    
        if (this->numberobj_122_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-109"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_122_output_set(localvalue);
    }
    
    void route_01_match82_number_set(number v) {
        this->numberobj_122_value_set(v);
    }
    
    void route_01_match82_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_122_value_set(converted);
        }
    }
    
    void pak_02_in81_set(number v) {
        this->pak_02_in81 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_121_output_set(number v) {
        this->pak_02_in81_set(v);
    }
    
    void numberobj_121_value_bang() {
        number v = this->numberobj_121_value;
        number localvalue = v;
    
        if (this->numberobj_121_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-110"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_121_output_set(localvalue);
    }
    
    void route_01_match81_bang_bang() {
        this->numberobj_121_value_bang();
    }
    
    void numberobj_121_value_set(number v) {
        this->numberobj_121_value_setter(v);
        v = this->numberobj_121_value;
        number localvalue = v;
    
        if (this->numberobj_121_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-110"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_121_output_set(localvalue);
    }
    
    void route_01_match81_number_set(number v) {
        this->numberobj_121_value_set(v);
    }
    
    void route_01_match81_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_121_value_set(converted);
        }
    }
    
    void pak_02_in80_set(number v) {
        this->pak_02_in80 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_120_output_set(number v) {
        this->pak_02_in80_set(v);
    }
    
    void numberobj_120_value_bang() {
        number v = this->numberobj_120_value;
        number localvalue = v;
    
        if (this->numberobj_120_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-111"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_120_output_set(localvalue);
    }
    
    void route_01_match80_bang_bang() {
        this->numberobj_120_value_bang();
    }
    
    void numberobj_120_value_set(number v) {
        this->numberobj_120_value_setter(v);
        v = this->numberobj_120_value;
        number localvalue = v;
    
        if (this->numberobj_120_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-111"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_120_output_set(localvalue);
    }
    
    void route_01_match80_number_set(number v) {
        this->numberobj_120_value_set(v);
    }
    
    void route_01_match80_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_120_value_set(converted);
        }
    }
    
    void pak_02_in79_set(number v) {
        this->pak_02_in79 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_119_output_set(number v) {
        this->pak_02_in79_set(v);
    }
    
    void numberobj_119_value_bang() {
        number v = this->numberobj_119_value;
        number localvalue = v;
    
        if (this->numberobj_119_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-112"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_119_output_set(localvalue);
    }
    
    void route_01_match79_bang_bang() {
        this->numberobj_119_value_bang();
    }
    
    void numberobj_119_value_set(number v) {
        this->numberobj_119_value_setter(v);
        v = this->numberobj_119_value;
        number localvalue = v;
    
        if (this->numberobj_119_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-112"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_119_output_set(localvalue);
    }
    
    void route_01_match79_number_set(number v) {
        this->numberobj_119_value_set(v);
    }
    
    void route_01_match79_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_119_value_set(converted);
        }
    }
    
    void pak_02_in78_set(number v) {
        this->pak_02_in78 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_118_output_set(number v) {
        this->pak_02_in78_set(v);
    }
    
    void numberobj_118_value_bang() {
        number v = this->numberobj_118_value;
        number localvalue = v;
    
        if (this->numberobj_118_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-113"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_118_output_set(localvalue);
    }
    
    void route_01_match78_bang_bang() {
        this->numberobj_118_value_bang();
    }
    
    void numberobj_118_value_set(number v) {
        this->numberobj_118_value_setter(v);
        v = this->numberobj_118_value;
        number localvalue = v;
    
        if (this->numberobj_118_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-113"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_118_output_set(localvalue);
    }
    
    void route_01_match78_number_set(number v) {
        this->numberobj_118_value_set(v);
    }
    
    void route_01_match78_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_118_value_set(converted);
        }
    }
    
    void pak_02_in77_set(number v) {
        this->pak_02_in77 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_117_output_set(number v) {
        this->pak_02_in77_set(v);
    }
    
    void numberobj_117_value_bang() {
        number v = this->numberobj_117_value;
        number localvalue = v;
    
        if (this->numberobj_117_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-114"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_117_output_set(localvalue);
    }
    
    void route_01_match77_bang_bang() {
        this->numberobj_117_value_bang();
    }
    
    void numberobj_117_value_set(number v) {
        this->numberobj_117_value_setter(v);
        v = this->numberobj_117_value;
        number localvalue = v;
    
        if (this->numberobj_117_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-114"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_117_output_set(localvalue);
    }
    
    void route_01_match77_number_set(number v) {
        this->numberobj_117_value_set(v);
    }
    
    void route_01_match77_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_117_value_set(converted);
        }
    }
    
    void pak_02_in76_set(number v) {
        this->pak_02_in76 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_116_output_set(number v) {
        this->pak_02_in76_set(v);
    }
    
    void numberobj_116_value_bang() {
        number v = this->numberobj_116_value;
        number localvalue = v;
    
        if (this->numberobj_116_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-115"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_116_output_set(localvalue);
    }
    
    void route_01_match76_bang_bang() {
        this->numberobj_116_value_bang();
    }
    
    void numberobj_116_value_set(number v) {
        this->numberobj_116_value_setter(v);
        v = this->numberobj_116_value;
        number localvalue = v;
    
        if (this->numberobj_116_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-115"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_116_output_set(localvalue);
    }
    
    void route_01_match76_number_set(number v) {
        this->numberobj_116_value_set(v);
    }
    
    void route_01_match76_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_116_value_set(converted);
        }
    }
    
    void pak_02_in75_set(number v) {
        this->pak_02_in75 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_115_output_set(number v) {
        this->pak_02_in75_set(v);
    }
    
    void numberobj_115_value_bang() {
        number v = this->numberobj_115_value;
        number localvalue = v;
    
        if (this->numberobj_115_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-116"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_115_output_set(localvalue);
    }
    
    void route_01_match75_bang_bang() {
        this->numberobj_115_value_bang();
    }
    
    void numberobj_115_value_set(number v) {
        this->numberobj_115_value_setter(v);
        v = this->numberobj_115_value;
        number localvalue = v;
    
        if (this->numberobj_115_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-116"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_115_output_set(localvalue);
    }
    
    void route_01_match75_number_set(number v) {
        this->numberobj_115_value_set(v);
    }
    
    void route_01_match75_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_115_value_set(converted);
        }
    }
    
    void pak_02_in74_set(number v) {
        this->pak_02_in74 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_114_output_set(number v) {
        this->pak_02_in74_set(v);
    }
    
    void numberobj_114_value_bang() {
        number v = this->numberobj_114_value;
        number localvalue = v;
    
        if (this->numberobj_114_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-117"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_114_output_set(localvalue);
    }
    
    void route_01_match74_bang_bang() {
        this->numberobj_114_value_bang();
    }
    
    void numberobj_114_value_set(number v) {
        this->numberobj_114_value_setter(v);
        v = this->numberobj_114_value;
        number localvalue = v;
    
        if (this->numberobj_114_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-117"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_114_output_set(localvalue);
    }
    
    void route_01_match74_number_set(number v) {
        this->numberobj_114_value_set(v);
    }
    
    void route_01_match74_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_114_value_set(converted);
        }
    }
    
    void pak_02_in73_set(number v) {
        this->pak_02_in73 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_113_output_set(number v) {
        this->pak_02_in73_set(v);
    }
    
    void numberobj_113_value_bang() {
        number v = this->numberobj_113_value;
        number localvalue = v;
    
        if (this->numberobj_113_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-118"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_113_output_set(localvalue);
    }
    
    void route_01_match73_bang_bang() {
        this->numberobj_113_value_bang();
    }
    
    void numberobj_113_value_set(number v) {
        this->numberobj_113_value_setter(v);
        v = this->numberobj_113_value;
        number localvalue = v;
    
        if (this->numberobj_113_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-118"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_113_output_set(localvalue);
    }
    
    void route_01_match73_number_set(number v) {
        this->numberobj_113_value_set(v);
    }
    
    void route_01_match73_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_113_value_set(converted);
        }
    }
    
    void pak_02_in72_set(number v) {
        this->pak_02_in72 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_112_output_set(number v) {
        this->pak_02_in72_set(v);
    }
    
    void numberobj_112_value_bang() {
        number v = this->numberobj_112_value;
        number localvalue = v;
    
        if (this->numberobj_112_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-119"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_112_output_set(localvalue);
    }
    
    void route_01_match72_bang_bang() {
        this->numberobj_112_value_bang();
    }
    
    void numberobj_112_value_set(number v) {
        this->numberobj_112_value_setter(v);
        v = this->numberobj_112_value;
        number localvalue = v;
    
        if (this->numberobj_112_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-119"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_112_output_set(localvalue);
    }
    
    void route_01_match72_number_set(number v) {
        this->numberobj_112_value_set(v);
    }
    
    void route_01_match72_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_112_value_set(converted);
        }
    }
    
    void pak_02_in71_set(number v) {
        this->pak_02_in71 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_111_output_set(number v) {
        this->pak_02_in71_set(v);
    }
    
    void numberobj_111_value_bang() {
        number v = this->numberobj_111_value;
        number localvalue = v;
    
        if (this->numberobj_111_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-120"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_111_output_set(localvalue);
    }
    
    void route_01_match71_bang_bang() {
        this->numberobj_111_value_bang();
    }
    
    void numberobj_111_value_set(number v) {
        this->numberobj_111_value_setter(v);
        v = this->numberobj_111_value;
        number localvalue = v;
    
        if (this->numberobj_111_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-120"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_111_output_set(localvalue);
    }
    
    void route_01_match71_number_set(number v) {
        this->numberobj_111_value_set(v);
    }
    
    void route_01_match71_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_111_value_set(converted);
        }
    }
    
    void pak_02_in70_set(number v) {
        this->pak_02_in70 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_110_output_set(number v) {
        this->pak_02_in70_set(v);
    }
    
    void numberobj_110_value_bang() {
        number v = this->numberobj_110_value;
        number localvalue = v;
    
        if (this->numberobj_110_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-121"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_110_output_set(localvalue);
    }
    
    void route_01_match70_bang_bang() {
        this->numberobj_110_value_bang();
    }
    
    void numberobj_110_value_set(number v) {
        this->numberobj_110_value_setter(v);
        v = this->numberobj_110_value;
        number localvalue = v;
    
        if (this->numberobj_110_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-121"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_110_output_set(localvalue);
    }
    
    void route_01_match70_number_set(number v) {
        this->numberobj_110_value_set(v);
    }
    
    void route_01_match70_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_110_value_set(converted);
        }
    }
    
    void pak_02_in69_set(number v) {
        this->pak_02_in69 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_109_output_set(number v) {
        this->pak_02_in69_set(v);
    }
    
    void numberobj_109_value_bang() {
        number v = this->numberobj_109_value;
        number localvalue = v;
    
        if (this->numberobj_109_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-122"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_109_output_set(localvalue);
    }
    
    void route_01_match69_bang_bang() {
        this->numberobj_109_value_bang();
    }
    
    void numberobj_109_value_set(number v) {
        this->numberobj_109_value_setter(v);
        v = this->numberobj_109_value;
        number localvalue = v;
    
        if (this->numberobj_109_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-122"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_109_output_set(localvalue);
    }
    
    void route_01_match69_number_set(number v) {
        this->numberobj_109_value_set(v);
    }
    
    void route_01_match69_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_109_value_set(converted);
        }
    }
    
    void pak_02_in68_set(number v) {
        this->pak_02_in68 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_108_output_set(number v) {
        this->pak_02_in68_set(v);
    }
    
    void numberobj_108_value_bang() {
        number v = this->numberobj_108_value;
        number localvalue = v;
    
        if (this->numberobj_108_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-123"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_108_output_set(localvalue);
    }
    
    void route_01_match68_bang_bang() {
        this->numberobj_108_value_bang();
    }
    
    void numberobj_108_value_set(number v) {
        this->numberobj_108_value_setter(v);
        v = this->numberobj_108_value;
        number localvalue = v;
    
        if (this->numberobj_108_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-123"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_108_output_set(localvalue);
    }
    
    void route_01_match68_number_set(number v) {
        this->numberobj_108_value_set(v);
    }
    
    void route_01_match68_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_108_value_set(converted);
        }
    }
    
    void pak_02_in67_set(number v) {
        this->pak_02_in67 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_107_output_set(number v) {
        this->pak_02_in67_set(v);
    }
    
    void numberobj_107_value_bang() {
        number v = this->numberobj_107_value;
        number localvalue = v;
    
        if (this->numberobj_107_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-124"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_107_output_set(localvalue);
    }
    
    void route_01_match67_bang_bang() {
        this->numberobj_107_value_bang();
    }
    
    void numberobj_107_value_set(number v) {
        this->numberobj_107_value_setter(v);
        v = this->numberobj_107_value;
        number localvalue = v;
    
        if (this->numberobj_107_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-124"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_107_output_set(localvalue);
    }
    
    void route_01_match67_number_set(number v) {
        this->numberobj_107_value_set(v);
    }
    
    void route_01_match67_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_107_value_set(converted);
        }
    }
    
    void pak_02_in66_set(number v) {
        this->pak_02_in66 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_106_output_set(number v) {
        this->pak_02_in66_set(v);
    }
    
    void numberobj_106_value_bang() {
        number v = this->numberobj_106_value;
        number localvalue = v;
    
        if (this->numberobj_106_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-125"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_106_output_set(localvalue);
    }
    
    void route_01_match66_bang_bang() {
        this->numberobj_106_value_bang();
    }
    
    void numberobj_106_value_set(number v) {
        this->numberobj_106_value_setter(v);
        v = this->numberobj_106_value;
        number localvalue = v;
    
        if (this->numberobj_106_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-125"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_106_output_set(localvalue);
    }
    
    void route_01_match66_number_set(number v) {
        this->numberobj_106_value_set(v);
    }
    
    void route_01_match66_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_106_value_set(converted);
        }
    }
    
    void pak_02_in65_set(number v) {
        this->pak_02_in65 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_105_output_set(number v) {
        this->pak_02_in65_set(v);
    }
    
    void numberobj_105_value_bang() {
        number v = this->numberobj_105_value;
        number localvalue = v;
    
        if (this->numberobj_105_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-126"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_105_output_set(localvalue);
    }
    
    void route_01_match65_bang_bang() {
        this->numberobj_105_value_bang();
    }
    
    void numberobj_105_value_set(number v) {
        this->numberobj_105_value_setter(v);
        v = this->numberobj_105_value;
        number localvalue = v;
    
        if (this->numberobj_105_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-126"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_105_output_set(localvalue);
    }
    
    void route_01_match65_number_set(number v) {
        this->numberobj_105_value_set(v);
    }
    
    void route_01_match65_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_105_value_set(converted);
        }
    }
    
    void pak_02_in64_set(number v) {
        this->pak_02_in64 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_104_output_set(number v) {
        this->pak_02_in64_set(v);
    }
    
    void numberobj_104_value_bang() {
        number v = this->numberobj_104_value;
        number localvalue = v;
    
        if (this->numberobj_104_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-127"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_104_output_set(localvalue);
    }
    
    void route_01_match64_bang_bang() {
        this->numberobj_104_value_bang();
    }
    
    void numberobj_104_value_set(number v) {
        this->numberobj_104_value_setter(v);
        v = this->numberobj_104_value;
        number localvalue = v;
    
        if (this->numberobj_104_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-127"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_104_output_set(localvalue);
    }
    
    void route_01_match64_number_set(number v) {
        this->numberobj_104_value_set(v);
    }
    
    void route_01_match64_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_104_value_set(converted);
        }
    }
    
    void pak_02_in63_set(number v) {
        this->pak_02_in63 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_103_output_set(number v) {
        this->pak_02_in63_set(v);
    }
    
    void numberobj_103_value_bang() {
        number v = this->numberobj_103_value;
        number localvalue = v;
    
        if (this->numberobj_103_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-128"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_103_output_set(localvalue);
    }
    
    void route_01_match63_bang_bang() {
        this->numberobj_103_value_bang();
    }
    
    void numberobj_103_value_set(number v) {
        this->numberobj_103_value_setter(v);
        v = this->numberobj_103_value;
        number localvalue = v;
    
        if (this->numberobj_103_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-128"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_103_output_set(localvalue);
    }
    
    void route_01_match63_number_set(number v) {
        this->numberobj_103_value_set(v);
    }
    
    void route_01_match63_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_103_value_set(converted);
        }
    }
    
    void pak_02_in62_set(number v) {
        this->pak_02_in62 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_102_output_set(number v) {
        this->pak_02_in62_set(v);
    }
    
    void numberobj_102_value_bang() {
        number v = this->numberobj_102_value;
        number localvalue = v;
    
        if (this->numberobj_102_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-129"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_102_output_set(localvalue);
    }
    
    void route_01_match62_bang_bang() {
        this->numberobj_102_value_bang();
    }
    
    void numberobj_102_value_set(number v) {
        this->numberobj_102_value_setter(v);
        v = this->numberobj_102_value;
        number localvalue = v;
    
        if (this->numberobj_102_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-129"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_102_output_set(localvalue);
    }
    
    void route_01_match62_number_set(number v) {
        this->numberobj_102_value_set(v);
    }
    
    void route_01_match62_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_102_value_set(converted);
        }
    }
    
    void pak_02_in61_set(number v) {
        this->pak_02_in61 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_101_output_set(number v) {
        this->pak_02_in61_set(v);
    }
    
    void numberobj_101_value_bang() {
        number v = this->numberobj_101_value;
        number localvalue = v;
    
        if (this->numberobj_101_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-130"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_101_output_set(localvalue);
    }
    
    void route_01_match61_bang_bang() {
        this->numberobj_101_value_bang();
    }
    
    void numberobj_101_value_set(number v) {
        this->numberobj_101_value_setter(v);
        v = this->numberobj_101_value;
        number localvalue = v;
    
        if (this->numberobj_101_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-130"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_101_output_set(localvalue);
    }
    
    void route_01_match61_number_set(number v) {
        this->numberobj_101_value_set(v);
    }
    
    void route_01_match61_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_101_value_set(converted);
        }
    }
    
    void pak_02_in60_set(number v) {
        this->pak_02_in60 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_100_output_set(number v) {
        this->pak_02_in60_set(v);
    }
    
    void numberobj_100_value_bang() {
        number v = this->numberobj_100_value;
        number localvalue = v;
    
        if (this->numberobj_100_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-131"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_100_output_set(localvalue);
    }
    
    void route_01_match60_bang_bang() {
        this->numberobj_100_value_bang();
    }
    
    void numberobj_100_value_set(number v) {
        this->numberobj_100_value_setter(v);
        v = this->numberobj_100_value;
        number localvalue = v;
    
        if (this->numberobj_100_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-131"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_100_output_set(localvalue);
    }
    
    void route_01_match60_number_set(number v) {
        this->numberobj_100_value_set(v);
    }
    
    void route_01_match60_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_100_value_set(converted);
        }
    }
    
    void pak_02_in59_set(number v) {
        this->pak_02_in59 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_99_output_set(number v) {
        this->pak_02_in59_set(v);
    }
    
    void numberobj_99_value_bang() {
        number v = this->numberobj_99_value;
        number localvalue = v;
    
        if (this->numberobj_99_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-132"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_99_output_set(localvalue);
    }
    
    void route_01_match59_bang_bang() {
        this->numberobj_99_value_bang();
    }
    
    void numberobj_99_value_set(number v) {
        this->numberobj_99_value_setter(v);
        v = this->numberobj_99_value;
        number localvalue = v;
    
        if (this->numberobj_99_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-132"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_99_output_set(localvalue);
    }
    
    void route_01_match59_number_set(number v) {
        this->numberobj_99_value_set(v);
    }
    
    void route_01_match59_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_99_value_set(converted);
        }
    }
    
    void pak_02_in58_set(number v) {
        this->pak_02_in58 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_98_output_set(number v) {
        this->pak_02_in58_set(v);
    }
    
    void numberobj_98_value_bang() {
        number v = this->numberobj_98_value;
        number localvalue = v;
    
        if (this->numberobj_98_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-133"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_98_output_set(localvalue);
    }
    
    void route_01_match58_bang_bang() {
        this->numberobj_98_value_bang();
    }
    
    void numberobj_98_value_set(number v) {
        this->numberobj_98_value_setter(v);
        v = this->numberobj_98_value;
        number localvalue = v;
    
        if (this->numberobj_98_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-133"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_98_output_set(localvalue);
    }
    
    void route_01_match58_number_set(number v) {
        this->numberobj_98_value_set(v);
    }
    
    void route_01_match58_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_98_value_set(converted);
        }
    }
    
    void pak_02_in57_set(number v) {
        this->pak_02_in57 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_97_output_set(number v) {
        this->pak_02_in57_set(v);
    }
    
    void numberobj_97_value_bang() {
        number v = this->numberobj_97_value;
        number localvalue = v;
    
        if (this->numberobj_97_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-134"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_97_output_set(localvalue);
    }
    
    void route_01_match57_bang_bang() {
        this->numberobj_97_value_bang();
    }
    
    void numberobj_97_value_set(number v) {
        this->numberobj_97_value_setter(v);
        v = this->numberobj_97_value;
        number localvalue = v;
    
        if (this->numberobj_97_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-134"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_97_output_set(localvalue);
    }
    
    void route_01_match57_number_set(number v) {
        this->numberobj_97_value_set(v);
    }
    
    void route_01_match57_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_97_value_set(converted);
        }
    }
    
    void pak_02_in56_set(number v) {
        this->pak_02_in56 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_96_output_set(number v) {
        this->pak_02_in56_set(v);
    }
    
    void numberobj_96_value_bang() {
        number v = this->numberobj_96_value;
        number localvalue = v;
    
        if (this->numberobj_96_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-135"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_96_output_set(localvalue);
    }
    
    void route_01_match56_bang_bang() {
        this->numberobj_96_value_bang();
    }
    
    void numberobj_96_value_set(number v) {
        this->numberobj_96_value_setter(v);
        v = this->numberobj_96_value;
        number localvalue = v;
    
        if (this->numberobj_96_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-135"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_96_output_set(localvalue);
    }
    
    void route_01_match56_number_set(number v) {
        this->numberobj_96_value_set(v);
    }
    
    void route_01_match56_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_96_value_set(converted);
        }
    }
    
    void pak_02_in55_set(number v) {
        this->pak_02_in55 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_95_output_set(number v) {
        this->pak_02_in55_set(v);
    }
    
    void numberobj_95_value_bang() {
        number v = this->numberobj_95_value;
        number localvalue = v;
    
        if (this->numberobj_95_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-136"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_95_output_set(localvalue);
    }
    
    void route_01_match55_bang_bang() {
        this->numberobj_95_value_bang();
    }
    
    void numberobj_95_value_set(number v) {
        this->numberobj_95_value_setter(v);
        v = this->numberobj_95_value;
        number localvalue = v;
    
        if (this->numberobj_95_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-136"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_95_output_set(localvalue);
    }
    
    void route_01_match55_number_set(number v) {
        this->numberobj_95_value_set(v);
    }
    
    void route_01_match55_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_95_value_set(converted);
        }
    }
    
    void pak_02_in54_set(number v) {
        this->pak_02_in54 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_94_output_set(number v) {
        this->pak_02_in54_set(v);
    }
    
    void numberobj_94_value_bang() {
        number v = this->numberobj_94_value;
        number localvalue = v;
    
        if (this->numberobj_94_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-137"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_94_output_set(localvalue);
    }
    
    void route_01_match54_bang_bang() {
        this->numberobj_94_value_bang();
    }
    
    void numberobj_94_value_set(number v) {
        this->numberobj_94_value_setter(v);
        v = this->numberobj_94_value;
        number localvalue = v;
    
        if (this->numberobj_94_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-137"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_94_output_set(localvalue);
    }
    
    void route_01_match54_number_set(number v) {
        this->numberobj_94_value_set(v);
    }
    
    void route_01_match54_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_94_value_set(converted);
        }
    }
    
    void pak_02_in53_set(number v) {
        this->pak_02_in53 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_93_output_set(number v) {
        this->pak_02_in53_set(v);
    }
    
    void numberobj_93_value_bang() {
        number v = this->numberobj_93_value;
        number localvalue = v;
    
        if (this->numberobj_93_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-138"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_93_output_set(localvalue);
    }
    
    void route_01_match53_bang_bang() {
        this->numberobj_93_value_bang();
    }
    
    void numberobj_93_value_set(number v) {
        this->numberobj_93_value_setter(v);
        v = this->numberobj_93_value;
        number localvalue = v;
    
        if (this->numberobj_93_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-138"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_93_output_set(localvalue);
    }
    
    void route_01_match53_number_set(number v) {
        this->numberobj_93_value_set(v);
    }
    
    void route_01_match53_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_93_value_set(converted);
        }
    }
    
    void pak_02_in52_set(number v) {
        this->pak_02_in52 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_92_output_set(number v) {
        this->pak_02_in52_set(v);
    }
    
    void numberobj_92_value_bang() {
        number v = this->numberobj_92_value;
        number localvalue = v;
    
        if (this->numberobj_92_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-139"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_92_output_set(localvalue);
    }
    
    void route_01_match52_bang_bang() {
        this->numberobj_92_value_bang();
    }
    
    void numberobj_92_value_set(number v) {
        this->numberobj_92_value_setter(v);
        v = this->numberobj_92_value;
        number localvalue = v;
    
        if (this->numberobj_92_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-139"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_92_output_set(localvalue);
    }
    
    void route_01_match52_number_set(number v) {
        this->numberobj_92_value_set(v);
    }
    
    void route_01_match52_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_92_value_set(converted);
        }
    }
    
    void pak_02_in51_set(number v) {
        this->pak_02_in51 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_91_output_set(number v) {
        this->pak_02_in51_set(v);
    }
    
    void numberobj_91_value_bang() {
        number v = this->numberobj_91_value;
        number localvalue = v;
    
        if (this->numberobj_91_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-140"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_91_output_set(localvalue);
    }
    
    void route_01_match51_bang_bang() {
        this->numberobj_91_value_bang();
    }
    
    void numberobj_91_value_set(number v) {
        this->numberobj_91_value_setter(v);
        v = this->numberobj_91_value;
        number localvalue = v;
    
        if (this->numberobj_91_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-140"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_91_output_set(localvalue);
    }
    
    void route_01_match51_number_set(number v) {
        this->numberobj_91_value_set(v);
    }
    
    void route_01_match51_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_91_value_set(converted);
        }
    }
    
    void pak_02_in50_set(number v) {
        this->pak_02_in50 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_90_output_set(number v) {
        this->pak_02_in50_set(v);
    }
    
    void numberobj_90_value_bang() {
        number v = this->numberobj_90_value;
        number localvalue = v;
    
        if (this->numberobj_90_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-46"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_90_output_set(localvalue);
    }
    
    void route_01_match50_bang_bang() {
        this->numberobj_90_value_bang();
    }
    
    void numberobj_90_value_set(number v) {
        this->numberobj_90_value_setter(v);
        v = this->numberobj_90_value;
        number localvalue = v;
    
        if (this->numberobj_90_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-46"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_90_output_set(localvalue);
    }
    
    void route_01_match50_number_set(number v) {
        this->numberobj_90_value_set(v);
    }
    
    void route_01_match50_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_90_value_set(converted);
        }
    }
    
    void pak_02_in49_set(number v) {
        this->pak_02_in49 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_89_output_set(number v) {
        this->pak_02_in49_set(v);
    }
    
    void numberobj_89_value_bang() {
        number v = this->numberobj_89_value;
        number localvalue = v;
    
        if (this->numberobj_89_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-47"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_89_output_set(localvalue);
    }
    
    void route_01_match49_bang_bang() {
        this->numberobj_89_value_bang();
    }
    
    void numberobj_89_value_set(number v) {
        this->numberobj_89_value_setter(v);
        v = this->numberobj_89_value;
        number localvalue = v;
    
        if (this->numberobj_89_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-47"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_89_output_set(localvalue);
    }
    
    void route_01_match49_number_set(number v) {
        this->numberobj_89_value_set(v);
    }
    
    void route_01_match49_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_89_value_set(converted);
        }
    }
    
    void pak_02_in48_set(number v) {
        this->pak_02_in48 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_88_output_set(number v) {
        this->pak_02_in48_set(v);
    }
    
    void numberobj_88_value_bang() {
        number v = this->numberobj_88_value;
        number localvalue = v;
    
        if (this->numberobj_88_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-48"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_88_output_set(localvalue);
    }
    
    void route_01_match48_bang_bang() {
        this->numberobj_88_value_bang();
    }
    
    void numberobj_88_value_set(number v) {
        this->numberobj_88_value_setter(v);
        v = this->numberobj_88_value;
        number localvalue = v;
    
        if (this->numberobj_88_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-48"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_88_output_set(localvalue);
    }
    
    void route_01_match48_number_set(number v) {
        this->numberobj_88_value_set(v);
    }
    
    void route_01_match48_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_88_value_set(converted);
        }
    }
    
    void pak_02_in47_set(number v) {
        this->pak_02_in47 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_87_output_set(number v) {
        this->pak_02_in47_set(v);
    }
    
    void numberobj_87_value_bang() {
        number v = this->numberobj_87_value;
        number localvalue = v;
    
        if (this->numberobj_87_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-49"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_87_output_set(localvalue);
    }
    
    void route_01_match47_bang_bang() {
        this->numberobj_87_value_bang();
    }
    
    void numberobj_87_value_set(number v) {
        this->numberobj_87_value_setter(v);
        v = this->numberobj_87_value;
        number localvalue = v;
    
        if (this->numberobj_87_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-49"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_87_output_set(localvalue);
    }
    
    void route_01_match47_number_set(number v) {
        this->numberobj_87_value_set(v);
    }
    
    void route_01_match47_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_87_value_set(converted);
        }
    }
    
    void pak_02_in46_set(number v) {
        this->pak_02_in46 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_86_output_set(number v) {
        this->pak_02_in46_set(v);
    }
    
    void numberobj_86_value_bang() {
        number v = this->numberobj_86_value;
        number localvalue = v;
    
        if (this->numberobj_86_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-50"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_86_output_set(localvalue);
    }
    
    void route_01_match46_bang_bang() {
        this->numberobj_86_value_bang();
    }
    
    void numberobj_86_value_set(number v) {
        this->numberobj_86_value_setter(v);
        v = this->numberobj_86_value;
        number localvalue = v;
    
        if (this->numberobj_86_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-50"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_86_output_set(localvalue);
    }
    
    void route_01_match46_number_set(number v) {
        this->numberobj_86_value_set(v);
    }
    
    void route_01_match46_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_86_value_set(converted);
        }
    }
    
    void pak_02_in45_set(number v) {
        this->pak_02_in45 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_85_output_set(number v) {
        this->pak_02_in45_set(v);
    }
    
    void numberobj_85_value_bang() {
        number v = this->numberobj_85_value;
        number localvalue = v;
    
        if (this->numberobj_85_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-51"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_85_output_set(localvalue);
    }
    
    void route_01_match45_bang_bang() {
        this->numberobj_85_value_bang();
    }
    
    void numberobj_85_value_set(number v) {
        this->numberobj_85_value_setter(v);
        v = this->numberobj_85_value;
        number localvalue = v;
    
        if (this->numberobj_85_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-51"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_85_output_set(localvalue);
    }
    
    void route_01_match45_number_set(number v) {
        this->numberobj_85_value_set(v);
    }
    
    void route_01_match45_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_85_value_set(converted);
        }
    }
    
    void pak_02_in44_set(number v) {
        this->pak_02_in44 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_84_output_set(number v) {
        this->pak_02_in44_set(v);
    }
    
    void numberobj_84_value_bang() {
        number v = this->numberobj_84_value;
        number localvalue = v;
    
        if (this->numberobj_84_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-52"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_84_output_set(localvalue);
    }
    
    void route_01_match44_bang_bang() {
        this->numberobj_84_value_bang();
    }
    
    void numberobj_84_value_set(number v) {
        this->numberobj_84_value_setter(v);
        v = this->numberobj_84_value;
        number localvalue = v;
    
        if (this->numberobj_84_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-52"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_84_output_set(localvalue);
    }
    
    void route_01_match44_number_set(number v) {
        this->numberobj_84_value_set(v);
    }
    
    void route_01_match44_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_84_value_set(converted);
        }
    }
    
    void pak_02_in43_set(number v) {
        this->pak_02_in43 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_83_output_set(number v) {
        this->pak_02_in43_set(v);
    }
    
    void numberobj_83_value_bang() {
        number v = this->numberobj_83_value;
        number localvalue = v;
    
        if (this->numberobj_83_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-53"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_83_output_set(localvalue);
    }
    
    void route_01_match43_bang_bang() {
        this->numberobj_83_value_bang();
    }
    
    void numberobj_83_value_set(number v) {
        this->numberobj_83_value_setter(v);
        v = this->numberobj_83_value;
        number localvalue = v;
    
        if (this->numberobj_83_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-53"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_83_output_set(localvalue);
    }
    
    void route_01_match43_number_set(number v) {
        this->numberobj_83_value_set(v);
    }
    
    void route_01_match43_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_83_value_set(converted);
        }
    }
    
    void pak_02_in42_set(number v) {
        this->pak_02_in42 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_82_output_set(number v) {
        this->pak_02_in42_set(v);
    }
    
    void numberobj_82_value_bang() {
        number v = this->numberobj_82_value;
        number localvalue = v;
    
        if (this->numberobj_82_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-54"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_82_output_set(localvalue);
    }
    
    void route_01_match42_bang_bang() {
        this->numberobj_82_value_bang();
    }
    
    void numberobj_82_value_set(number v) {
        this->numberobj_82_value_setter(v);
        v = this->numberobj_82_value;
        number localvalue = v;
    
        if (this->numberobj_82_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-54"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_82_output_set(localvalue);
    }
    
    void route_01_match42_number_set(number v) {
        this->numberobj_82_value_set(v);
    }
    
    void route_01_match42_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_82_value_set(converted);
        }
    }
    
    void pak_02_in41_set(number v) {
        this->pak_02_in41 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_81_output_set(number v) {
        this->pak_02_in41_set(v);
    }
    
    void numberobj_81_value_bang() {
        number v = this->numberobj_81_value;
        number localvalue = v;
    
        if (this->numberobj_81_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-55"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_81_output_set(localvalue);
    }
    
    void route_01_match41_bang_bang() {
        this->numberobj_81_value_bang();
    }
    
    void numberobj_81_value_set(number v) {
        this->numberobj_81_value_setter(v);
        v = this->numberobj_81_value;
        number localvalue = v;
    
        if (this->numberobj_81_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-55"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_81_output_set(localvalue);
    }
    
    void route_01_match41_number_set(number v) {
        this->numberobj_81_value_set(v);
    }
    
    void route_01_match41_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_81_value_set(converted);
        }
    }
    
    void pak_02_in40_set(number v) {
        this->pak_02_in40 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_80_output_set(number v) {
        this->pak_02_in40_set(v);
    }
    
    void numberobj_80_value_bang() {
        number v = this->numberobj_80_value;
        number localvalue = v;
    
        if (this->numberobj_80_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-26"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_80_output_set(localvalue);
    }
    
    void route_01_match40_bang_bang() {
        this->numberobj_80_value_bang();
    }
    
    void numberobj_80_value_set(number v) {
        this->numberobj_80_value_setter(v);
        v = this->numberobj_80_value;
        number localvalue = v;
    
        if (this->numberobj_80_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-26"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_80_output_set(localvalue);
    }
    
    void route_01_match40_number_set(number v) {
        this->numberobj_80_value_set(v);
    }
    
    void route_01_match40_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_80_value_set(converted);
        }
    }
    
    void pak_02_in39_set(number v) {
        this->pak_02_in39 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_79_output_set(number v) {
        this->pak_02_in39_set(v);
    }
    
    void numberobj_79_value_bang() {
        number v = this->numberobj_79_value;
        number localvalue = v;
    
        if (this->numberobj_79_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-27"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_79_output_set(localvalue);
    }
    
    void route_01_match39_bang_bang() {
        this->numberobj_79_value_bang();
    }
    
    void numberobj_79_value_set(number v) {
        this->numberobj_79_value_setter(v);
        v = this->numberobj_79_value;
        number localvalue = v;
    
        if (this->numberobj_79_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-27"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_79_output_set(localvalue);
    }
    
    void route_01_match39_number_set(number v) {
        this->numberobj_79_value_set(v);
    }
    
    void route_01_match39_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_79_value_set(converted);
        }
    }
    
    void pak_02_in38_set(number v) {
        this->pak_02_in38 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_78_output_set(number v) {
        this->pak_02_in38_set(v);
    }
    
    void numberobj_78_value_bang() {
        number v = this->numberobj_78_value;
        number localvalue = v;
    
        if (this->numberobj_78_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-28"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_78_output_set(localvalue);
    }
    
    void route_01_match38_bang_bang() {
        this->numberobj_78_value_bang();
    }
    
    void numberobj_78_value_set(number v) {
        this->numberobj_78_value_setter(v);
        v = this->numberobj_78_value;
        number localvalue = v;
    
        if (this->numberobj_78_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-28"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_78_output_set(localvalue);
    }
    
    void route_01_match38_number_set(number v) {
        this->numberobj_78_value_set(v);
    }
    
    void route_01_match38_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_78_value_set(converted);
        }
    }
    
    void pak_02_in37_set(number v) {
        this->pak_02_in37 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_77_output_set(number v) {
        this->pak_02_in37_set(v);
    }
    
    void numberobj_77_value_bang() {
        number v = this->numberobj_77_value;
        number localvalue = v;
    
        if (this->numberobj_77_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-29"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_77_output_set(localvalue);
    }
    
    void route_01_match37_bang_bang() {
        this->numberobj_77_value_bang();
    }
    
    void numberobj_77_value_set(number v) {
        this->numberobj_77_value_setter(v);
        v = this->numberobj_77_value;
        number localvalue = v;
    
        if (this->numberobj_77_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-29"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_77_output_set(localvalue);
    }
    
    void route_01_match37_number_set(number v) {
        this->numberobj_77_value_set(v);
    }
    
    void route_01_match37_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_77_value_set(converted);
        }
    }
    
    void pak_02_in36_set(number v) {
        this->pak_02_in36 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_76_output_set(number v) {
        this->pak_02_in36_set(v);
    }
    
    void numberobj_76_value_bang() {
        number v = this->numberobj_76_value;
        number localvalue = v;
    
        if (this->numberobj_76_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-30"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_76_output_set(localvalue);
    }
    
    void route_01_match36_bang_bang() {
        this->numberobj_76_value_bang();
    }
    
    void numberobj_76_value_set(number v) {
        this->numberobj_76_value_setter(v);
        v = this->numberobj_76_value;
        number localvalue = v;
    
        if (this->numberobj_76_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-30"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_76_output_set(localvalue);
    }
    
    void route_01_match36_number_set(number v) {
        this->numberobj_76_value_set(v);
    }
    
    void route_01_match36_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_76_value_set(converted);
        }
    }
    
    void pak_02_in35_set(number v) {
        this->pak_02_in35 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_75_output_set(number v) {
        this->pak_02_in35_set(v);
    }
    
    void numberobj_75_value_bang() {
        number v = this->numberobj_75_value;
        number localvalue = v;
    
        if (this->numberobj_75_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-31"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_75_output_set(localvalue);
    }
    
    void route_01_match35_bang_bang() {
        this->numberobj_75_value_bang();
    }
    
    void numberobj_75_value_set(number v) {
        this->numberobj_75_value_setter(v);
        v = this->numberobj_75_value;
        number localvalue = v;
    
        if (this->numberobj_75_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-31"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_75_output_set(localvalue);
    }
    
    void route_01_match35_number_set(number v) {
        this->numberobj_75_value_set(v);
    }
    
    void route_01_match35_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_75_value_set(converted);
        }
    }
    
    void pak_02_in34_set(number v) {
        this->pak_02_in34 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_74_output_set(number v) {
        this->pak_02_in34_set(v);
    }
    
    void numberobj_74_value_bang() {
        number v = this->numberobj_74_value;
        number localvalue = v;
    
        if (this->numberobj_74_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-32"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_74_output_set(localvalue);
    }
    
    void route_01_match34_bang_bang() {
        this->numberobj_74_value_bang();
    }
    
    void numberobj_74_value_set(number v) {
        this->numberobj_74_value_setter(v);
        v = this->numberobj_74_value;
        number localvalue = v;
    
        if (this->numberobj_74_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-32"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_74_output_set(localvalue);
    }
    
    void route_01_match34_number_set(number v) {
        this->numberobj_74_value_set(v);
    }
    
    void route_01_match34_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_74_value_set(converted);
        }
    }
    
    void pak_02_in33_set(number v) {
        this->pak_02_in33 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_73_output_set(number v) {
        this->pak_02_in33_set(v);
    }
    
    void numberobj_73_value_bang() {
        number v = this->numberobj_73_value;
        number localvalue = v;
    
        if (this->numberobj_73_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-33"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_73_output_set(localvalue);
    }
    
    void route_01_match33_bang_bang() {
        this->numberobj_73_value_bang();
    }
    
    void numberobj_73_value_set(number v) {
        this->numberobj_73_value_setter(v);
        v = this->numberobj_73_value;
        number localvalue = v;
    
        if (this->numberobj_73_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-33"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_73_output_set(localvalue);
    }
    
    void route_01_match33_number_set(number v) {
        this->numberobj_73_value_set(v);
    }
    
    void route_01_match33_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_73_value_set(converted);
        }
    }
    
    void pak_02_in32_set(number v) {
        this->pak_02_in32 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_72_output_set(number v) {
        this->pak_02_in32_set(v);
    }
    
    void numberobj_72_value_bang() {
        number v = this->numberobj_72_value;
        number localvalue = v;
    
        if (this->numberobj_72_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-34"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_72_output_set(localvalue);
    }
    
    void route_01_match32_bang_bang() {
        this->numberobj_72_value_bang();
    }
    
    void numberobj_72_value_set(number v) {
        this->numberobj_72_value_setter(v);
        v = this->numberobj_72_value;
        number localvalue = v;
    
        if (this->numberobj_72_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-34"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_72_output_set(localvalue);
    }
    
    void route_01_match32_number_set(number v) {
        this->numberobj_72_value_set(v);
    }
    
    void route_01_match32_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_72_value_set(converted);
        }
    }
    
    void pak_02_in31_set(number v) {
        this->pak_02_in31 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_71_output_set(number v) {
        this->pak_02_in31_set(v);
    }
    
    void numberobj_71_value_bang() {
        number v = this->numberobj_71_value;
        number localvalue = v;
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-35"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_71_output_set(localvalue);
    }
    
    void route_01_match31_bang_bang() {
        this->numberobj_71_value_bang();
    }
    
    void numberobj_71_value_set(number v) {
        this->numberobj_71_value_setter(v);
        v = this->numberobj_71_value;
        number localvalue = v;
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-35"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_71_output_set(localvalue);
    }
    
    void route_01_match31_number_set(number v) {
        this->numberobj_71_value_set(v);
    }
    
    void route_01_match31_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_71_value_set(converted);
        }
    }
    
    void pak_02_in30_set(number v) {
        this->pak_02_in30 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_70_output_set(number v) {
        this->pak_02_in30_set(v);
    }
    
    void numberobj_70_value_bang() {
        number v = this->numberobj_70_value;
        number localvalue = v;
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-36"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_70_output_set(localvalue);
    }
    
    void route_01_match30_bang_bang() {
        this->numberobj_70_value_bang();
    }
    
    void numberobj_70_value_set(number v) {
        this->numberobj_70_value_setter(v);
        v = this->numberobj_70_value;
        number localvalue = v;
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-36"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_70_output_set(localvalue);
    }
    
    void route_01_match30_number_set(number v) {
        this->numberobj_70_value_set(v);
    }
    
    void route_01_match30_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_70_value_set(converted);
        }
    }
    
    void pak_02_in29_set(number v) {
        this->pak_02_in29 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_69_output_set(number v) {
        this->pak_02_in29_set(v);
    }
    
    void numberobj_69_value_bang() {
        number v = this->numberobj_69_value;
        number localvalue = v;
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-37"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_69_output_set(localvalue);
    }
    
    void route_01_match29_bang_bang() {
        this->numberobj_69_value_bang();
    }
    
    void numberobj_69_value_set(number v) {
        this->numberobj_69_value_setter(v);
        v = this->numberobj_69_value;
        number localvalue = v;
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-37"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_69_output_set(localvalue);
    }
    
    void route_01_match29_number_set(number v) {
        this->numberobj_69_value_set(v);
    }
    
    void route_01_match29_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_69_value_set(converted);
        }
    }
    
    void pak_02_in28_set(number v) {
        this->pak_02_in28 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_68_output_set(number v) {
        this->pak_02_in28_set(v);
    }
    
    void numberobj_68_value_bang() {
        number v = this->numberobj_68_value;
        number localvalue = v;
    
        if (this->numberobj_68_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-38"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_68_output_set(localvalue);
    }
    
    void route_01_match28_bang_bang() {
        this->numberobj_68_value_bang();
    }
    
    void numberobj_68_value_set(number v) {
        this->numberobj_68_value_setter(v);
        v = this->numberobj_68_value;
        number localvalue = v;
    
        if (this->numberobj_68_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-38"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_68_output_set(localvalue);
    }
    
    void route_01_match28_number_set(number v) {
        this->numberobj_68_value_set(v);
    }
    
    void route_01_match28_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_68_value_set(converted);
        }
    }
    
    void pak_02_in27_set(number v) {
        this->pak_02_in27 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_67_output_set(number v) {
        this->pak_02_in27_set(v);
    }
    
    void numberobj_67_value_bang() {
        number v = this->numberobj_67_value;
        number localvalue = v;
    
        if (this->numberobj_67_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-39"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_67_output_set(localvalue);
    }
    
    void route_01_match27_bang_bang() {
        this->numberobj_67_value_bang();
    }
    
    void numberobj_67_value_set(number v) {
        this->numberobj_67_value_setter(v);
        v = this->numberobj_67_value;
        number localvalue = v;
    
        if (this->numberobj_67_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-39"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_67_output_set(localvalue);
    }
    
    void route_01_match27_number_set(number v) {
        this->numberobj_67_value_set(v);
    }
    
    void route_01_match27_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_67_value_set(converted);
        }
    }
    
    void pak_02_in26_set(number v) {
        this->pak_02_in26 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_66_output_set(number v) {
        this->pak_02_in26_set(v);
    }
    
    void numberobj_66_value_bang() {
        number v = this->numberobj_66_value;
        number localvalue = v;
    
        if (this->numberobj_66_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-40"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_66_output_set(localvalue);
    }
    
    void route_01_match26_bang_bang() {
        this->numberobj_66_value_bang();
    }
    
    void numberobj_66_value_set(number v) {
        this->numberobj_66_value_setter(v);
        v = this->numberobj_66_value;
        number localvalue = v;
    
        if (this->numberobj_66_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-40"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_66_output_set(localvalue);
    }
    
    void route_01_match26_number_set(number v) {
        this->numberobj_66_value_set(v);
    }
    
    void route_01_match26_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_66_value_set(converted);
        }
    }
    
    void pak_02_in25_set(number v) {
        this->pak_02_in25 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_65_output_set(number v) {
        this->pak_02_in25_set(v);
    }
    
    void numberobj_65_value_bang() {
        number v = this->numberobj_65_value;
        number localvalue = v;
    
        if (this->numberobj_65_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-41"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_65_output_set(localvalue);
    }
    
    void route_01_match25_bang_bang() {
        this->numberobj_65_value_bang();
    }
    
    void numberobj_65_value_set(number v) {
        this->numberobj_65_value_setter(v);
        v = this->numberobj_65_value;
        number localvalue = v;
    
        if (this->numberobj_65_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-41"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_65_output_set(localvalue);
    }
    
    void route_01_match25_number_set(number v) {
        this->numberobj_65_value_set(v);
    }
    
    void route_01_match25_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_65_value_set(converted);
        }
    }
    
    void pak_02_in24_set(number v) {
        this->pak_02_in24 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_64_output_set(number v) {
        this->pak_02_in24_set(v);
    }
    
    void numberobj_64_value_bang() {
        number v = this->numberobj_64_value;
        number localvalue = v;
    
        if (this->numberobj_64_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-42"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_64_output_set(localvalue);
    }
    
    void route_01_match24_bang_bang() {
        this->numberobj_64_value_bang();
    }
    
    void numberobj_64_value_set(number v) {
        this->numberobj_64_value_setter(v);
        v = this->numberobj_64_value;
        number localvalue = v;
    
        if (this->numberobj_64_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-42"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_64_output_set(localvalue);
    }
    
    void route_01_match24_number_set(number v) {
        this->numberobj_64_value_set(v);
    }
    
    void route_01_match24_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_64_value_set(converted);
        }
    }
    
    void pak_02_in23_set(number v) {
        this->pak_02_in23 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_63_output_set(number v) {
        this->pak_02_in23_set(v);
    }
    
    void numberobj_63_value_bang() {
        number v = this->numberobj_63_value;
        number localvalue = v;
    
        if (this->numberobj_63_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-43"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_63_output_set(localvalue);
    }
    
    void route_01_match23_bang_bang() {
        this->numberobj_63_value_bang();
    }
    
    void numberobj_63_value_set(number v) {
        this->numberobj_63_value_setter(v);
        v = this->numberobj_63_value;
        number localvalue = v;
    
        if (this->numberobj_63_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-43"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_63_output_set(localvalue);
    }
    
    void route_01_match23_number_set(number v) {
        this->numberobj_63_value_set(v);
    }
    
    void route_01_match23_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_63_value_set(converted);
        }
    }
    
    void pak_02_in22_set(number v) {
        this->pak_02_in22 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_62_output_set(number v) {
        this->pak_02_in22_set(v);
    }
    
    void numberobj_62_value_bang() {
        number v = this->numberobj_62_value;
        number localvalue = v;
    
        if (this->numberobj_62_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-44"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_62_output_set(localvalue);
    }
    
    void route_01_match22_bang_bang() {
        this->numberobj_62_value_bang();
    }
    
    void numberobj_62_value_set(number v) {
        this->numberobj_62_value_setter(v);
        v = this->numberobj_62_value;
        number localvalue = v;
    
        if (this->numberobj_62_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-44"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_62_output_set(localvalue);
    }
    
    void route_01_match22_number_set(number v) {
        this->numberobj_62_value_set(v);
    }
    
    void route_01_match22_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_62_value_set(converted);
        }
    }
    
    void pak_02_in21_set(number v) {
        this->pak_02_in21 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_61_output_set(number v) {
        this->pak_02_in21_set(v);
    }
    
    void numberobj_61_value_bang() {
        number v = this->numberobj_61_value;
        number localvalue = v;
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-45"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_61_output_set(localvalue);
    }
    
    void route_01_match21_bang_bang() {
        this->numberobj_61_value_bang();
    }
    
    void numberobj_61_value_set(number v) {
        this->numberobj_61_value_setter(v);
        v = this->numberobj_61_value;
        number localvalue = v;
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-45"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_61_output_set(localvalue);
    }
    
    void route_01_match21_number_set(number v) {
        this->numberobj_61_value_set(v);
    }
    
    void route_01_match21_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_61_value_set(converted);
        }
    }
    
    void pak_02_in20_set(number v) {
        this->pak_02_in20 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_60_output_set(number v) {
        this->pak_02_in20_set(v);
    }
    
    void numberobj_60_value_bang() {
        number v = this->numberobj_60_value;
        number localvalue = v;
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-16"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_60_output_set(localvalue);
    }
    
    void route_01_match20_bang_bang() {
        this->numberobj_60_value_bang();
    }
    
    void numberobj_60_value_set(number v) {
        this->numberobj_60_value_setter(v);
        v = this->numberobj_60_value;
        number localvalue = v;
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-16"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_60_output_set(localvalue);
    }
    
    void route_01_match20_number_set(number v) {
        this->numberobj_60_value_set(v);
    }
    
    void route_01_match20_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_60_value_set(converted);
        }
    }
    
    void pak_02_in19_set(number v) {
        this->pak_02_in19 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_59_output_set(number v) {
        this->pak_02_in19_set(v);
    }
    
    void numberobj_59_value_bang() {
        number v = this->numberobj_59_value;
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-17"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_59_output_set(localvalue);
    }
    
    void route_01_match19_bang_bang() {
        this->numberobj_59_value_bang();
    }
    
    void numberobj_59_value_set(number v) {
        this->numberobj_59_value_setter(v);
        v = this->numberobj_59_value;
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-17"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_59_output_set(localvalue);
    }
    
    void route_01_match19_number_set(number v) {
        this->numberobj_59_value_set(v);
    }
    
    void route_01_match19_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_59_value_set(converted);
        }
    }
    
    void pak_02_in18_set(number v) {
        this->pak_02_in18 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_58_output_set(number v) {
        this->pak_02_in18_set(v);
    }
    
    void numberobj_58_value_bang() {
        number v = this->numberobj_58_value;
        number localvalue = v;
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-18"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_58_output_set(localvalue);
    }
    
    void route_01_match18_bang_bang() {
        this->numberobj_58_value_bang();
    }
    
    void numberobj_58_value_set(number v) {
        this->numberobj_58_value_setter(v);
        v = this->numberobj_58_value;
        number localvalue = v;
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-18"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_58_output_set(localvalue);
    }
    
    void route_01_match18_number_set(number v) {
        this->numberobj_58_value_set(v);
    }
    
    void route_01_match18_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_58_value_set(converted);
        }
    }
    
    void pak_02_in17_set(number v) {
        this->pak_02_in17 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_57_output_set(number v) {
        this->pak_02_in17_set(v);
    }
    
    void numberobj_57_value_bang() {
        number v = this->numberobj_57_value;
        number localvalue = v;
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-19"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_57_output_set(localvalue);
    }
    
    void route_01_match17_bang_bang() {
        this->numberobj_57_value_bang();
    }
    
    void numberobj_57_value_set(number v) {
        this->numberobj_57_value_setter(v);
        v = this->numberobj_57_value;
        number localvalue = v;
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-19"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_57_output_set(localvalue);
    }
    
    void route_01_match17_number_set(number v) {
        this->numberobj_57_value_set(v);
    }
    
    void route_01_match17_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_57_value_set(converted);
        }
    }
    
    void pak_02_in16_set(number v) {
        this->pak_02_in16 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_56_output_set(number v) {
        this->pak_02_in16_set(v);
    }
    
    void numberobj_56_value_bang() {
        number v = this->numberobj_56_value;
        number localvalue = v;
    
        if (this->numberobj_56_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_56_output_set(localvalue);
    }
    
    void route_01_match16_bang_bang() {
        this->numberobj_56_value_bang();
    }
    
    void numberobj_56_value_set(number v) {
        this->numberobj_56_value_setter(v);
        v = this->numberobj_56_value;
        number localvalue = v;
    
        if (this->numberobj_56_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_56_output_set(localvalue);
    }
    
    void route_01_match16_number_set(number v) {
        this->numberobj_56_value_set(v);
    }
    
    void route_01_match16_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_56_value_set(converted);
        }
    }
    
    void pak_02_in15_set(number v) {
        this->pak_02_in15 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_55_output_set(number v) {
        this->pak_02_in15_set(v);
    }
    
    void numberobj_55_value_bang() {
        number v = this->numberobj_55_value;
        number localvalue = v;
    
        if (this->numberobj_55_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-21"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_55_output_set(localvalue);
    }
    
    void route_01_match15_bang_bang() {
        this->numberobj_55_value_bang();
    }
    
    void numberobj_55_value_set(number v) {
        this->numberobj_55_value_setter(v);
        v = this->numberobj_55_value;
        number localvalue = v;
    
        if (this->numberobj_55_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-21"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_55_output_set(localvalue);
    }
    
    void route_01_match15_number_set(number v) {
        this->numberobj_55_value_set(v);
    }
    
    void route_01_match15_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_55_value_set(converted);
        }
    }
    
    void pak_02_in14_set(number v) {
        this->pak_02_in14 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_54_output_set(number v) {
        this->pak_02_in14_set(v);
    }
    
    void numberobj_54_value_bang() {
        number v = this->numberobj_54_value;
        number localvalue = v;
    
        if (this->numberobj_54_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-22"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_54_output_set(localvalue);
    }
    
    void route_01_match14_bang_bang() {
        this->numberobj_54_value_bang();
    }
    
    void numberobj_54_value_set(number v) {
        this->numberobj_54_value_setter(v);
        v = this->numberobj_54_value;
        number localvalue = v;
    
        if (this->numberobj_54_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-22"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_54_output_set(localvalue);
    }
    
    void route_01_match14_number_set(number v) {
        this->numberobj_54_value_set(v);
    }
    
    void route_01_match14_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_54_value_set(converted);
        }
    }
    
    void pak_02_in13_set(number v) {
        this->pak_02_in13 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_53_output_set(number v) {
        this->pak_02_in13_set(v);
    }
    
    void numberobj_53_value_bang() {
        number v = this->numberobj_53_value;
        number localvalue = v;
    
        if (this->numberobj_53_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-23"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_53_output_set(localvalue);
    }
    
    void route_01_match13_bang_bang() {
        this->numberobj_53_value_bang();
    }
    
    void numberobj_53_value_set(number v) {
        this->numberobj_53_value_setter(v);
        v = this->numberobj_53_value;
        number localvalue = v;
    
        if (this->numberobj_53_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-23"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_53_output_set(localvalue);
    }
    
    void route_01_match13_number_set(number v) {
        this->numberobj_53_value_set(v);
    }
    
    void route_01_match13_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_53_value_set(converted);
        }
    }
    
    void pak_02_in12_set(number v) {
        this->pak_02_in12 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_52_output_set(number v) {
        this->pak_02_in12_set(v);
    }
    
    void numberobj_52_value_bang() {
        number v = this->numberobj_52_value;
        number localvalue = v;
    
        if (this->numberobj_52_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-24"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_52_output_set(localvalue);
    }
    
    void route_01_match12_bang_bang() {
        this->numberobj_52_value_bang();
    }
    
    void numberobj_52_value_set(number v) {
        this->numberobj_52_value_setter(v);
        v = this->numberobj_52_value;
        number localvalue = v;
    
        if (this->numberobj_52_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-24"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_52_output_set(localvalue);
    }
    
    void route_01_match12_number_set(number v) {
        this->numberobj_52_value_set(v);
    }
    
    void route_01_match12_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_52_value_set(converted);
        }
    }
    
    void pak_02_in11_set(number v) {
        this->pak_02_in11 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_51_output_set(number v) {
        this->pak_02_in11_set(v);
    }
    
    void numberobj_51_value_bang() {
        number v = this->numberobj_51_value;
        number localvalue = v;
    
        if (this->numberobj_51_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-25"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_51_output_set(localvalue);
    }
    
    void route_01_match11_bang_bang() {
        this->numberobj_51_value_bang();
    }
    
    void numberobj_51_value_set(number v) {
        this->numberobj_51_value_setter(v);
        v = this->numberobj_51_value;
        number localvalue = v;
    
        if (this->numberobj_51_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-25"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_51_output_set(localvalue);
    }
    
    void route_01_match11_number_set(number v) {
        this->numberobj_51_value_set(v);
    }
    
    void route_01_match11_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_51_value_set(converted);
        }
    }
    
    void pak_02_in10_set(number v) {
        this->pak_02_in10 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_50_output_set(number v) {
        this->pak_02_in10_set(v);
    }
    
    void numberobj_50_value_bang() {
        number v = this->numberobj_50_value;
        number localvalue = v;
    
        if (this->numberobj_50_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_50_output_set(localvalue);
    }
    
    void route_01_match10_bang_bang() {
        this->numberobj_50_value_bang();
    }
    
    void numberobj_50_value_set(number v) {
        this->numberobj_50_value_setter(v);
        v = this->numberobj_50_value;
        number localvalue = v;
    
        if (this->numberobj_50_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_50_output_set(localvalue);
    }
    
    void route_01_match10_number_set(number v) {
        this->numberobj_50_value_set(v);
    }
    
    void route_01_match10_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_50_value_set(converted);
        }
    }
    
    void pak_02_in9_set(number v) {
        this->pak_02_in9 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_49_output_set(number v) {
        this->pak_02_in9_set(v);
    }
    
    void numberobj_49_value_bang() {
        number v = this->numberobj_49_value;
        number localvalue = v;
    
        if (this->numberobj_49_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_49_output_set(localvalue);
    }
    
    void route_01_match9_bang_bang() {
        this->numberobj_49_value_bang();
    }
    
    void numberobj_49_value_set(number v) {
        this->numberobj_49_value_setter(v);
        v = this->numberobj_49_value;
        number localvalue = v;
    
        if (this->numberobj_49_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_49_output_set(localvalue);
    }
    
    void route_01_match9_number_set(number v) {
        this->numberobj_49_value_set(v);
    }
    
    void route_01_match9_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_49_value_set(converted);
        }
    }
    
    void pak_02_in8_set(number v) {
        this->pak_02_in8 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_48_output_set(number v) {
        this->pak_02_in8_set(v);
    }
    
    void numberobj_48_value_bang() {
        number v = this->numberobj_48_value;
        number localvalue = v;
    
        if (this->numberobj_48_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-13"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_48_output_set(localvalue);
    }
    
    void route_01_match8_bang_bang() {
        this->numberobj_48_value_bang();
    }
    
    void numberobj_48_value_set(number v) {
        this->numberobj_48_value_setter(v);
        v = this->numberobj_48_value;
        number localvalue = v;
    
        if (this->numberobj_48_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-13"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_48_output_set(localvalue);
    }
    
    void route_01_match8_number_set(number v) {
        this->numberobj_48_value_set(v);
    }
    
    void route_01_match8_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_48_value_set(converted);
        }
    }
    
    void pak_02_in7_set(number v) {
        this->pak_02_in7 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_47_output_set(number v) {
        this->pak_02_in7_set(v);
    }
    
    void numberobj_47_value_bang() {
        number v = this->numberobj_47_value;
        number localvalue = v;
    
        if (this->numberobj_47_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-14"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_47_output_set(localvalue);
    }
    
    void route_01_match7_bang_bang() {
        this->numberobj_47_value_bang();
    }
    
    void numberobj_47_value_set(number v) {
        this->numberobj_47_value_setter(v);
        v = this->numberobj_47_value;
        number localvalue = v;
    
        if (this->numberobj_47_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-14"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_47_output_set(localvalue);
    }
    
    void route_01_match7_number_set(number v) {
        this->numberobj_47_value_set(v);
    }
    
    void route_01_match7_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_47_value_set(converted);
        }
    }
    
    void pak_02_in6_set(number v) {
        this->pak_02_in6 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_46_output_set(number v) {
        this->pak_02_in6_set(v);
    }
    
    void numberobj_46_value_bang() {
        number v = this->numberobj_46_value;
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-15"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_46_output_set(localvalue);
    }
    
    void route_01_match6_bang_bang() {
        this->numberobj_46_value_bang();
    }
    
    void numberobj_46_value_set(number v) {
        this->numberobj_46_value_setter(v);
        v = this->numberobj_46_value;
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-15"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_46_output_set(localvalue);
    }
    
    void route_01_match6_number_set(number v) {
        this->numberobj_46_value_set(v);
    }
    
    void route_01_match6_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_46_value_set(converted);
        }
    }
    
    void pak_02_in5_set(number v) {
        this->pak_02_in5 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_45_output_set(number v) {
        this->pak_02_in5_set(v);
    }
    
    void numberobj_45_value_bang() {
        number v = this->numberobj_45_value;
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-10"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_45_output_set(localvalue);
    }
    
    void route_01_match5_bang_bang() {
        this->numberobj_45_value_bang();
    }
    
    void numberobj_45_value_set(number v) {
        this->numberobj_45_value_setter(v);
        v = this->numberobj_45_value;
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-10"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_45_output_set(localvalue);
    }
    
    void route_01_match5_number_set(number v) {
        this->numberobj_45_value_set(v);
    }
    
    void route_01_match5_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_45_value_set(converted);
        }
    }
    
    void pak_02_in4_set(number v) {
        this->pak_02_in4 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_44_output_set(number v) {
        this->pak_02_in4_set(v);
    }
    
    void numberobj_44_value_bang() {
        number v = this->numberobj_44_value;
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_44_output_set(localvalue);
    }
    
    void route_01_match4_bang_bang() {
        this->numberobj_44_value_bang();
    }
    
    void numberobj_44_value_set(number v) {
        this->numberobj_44_value_setter(v);
        v = this->numberobj_44_value;
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_44_output_set(localvalue);
    }
    
    void route_01_match4_number_set(number v) {
        this->numberobj_44_value_set(v);
    }
    
    void route_01_match4_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_44_value_set(converted);
        }
    }
    
    void pak_02_in3_set(number v) {
        this->pak_02_in3 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_43_output_set(number v) {
        this->pak_02_in3_set(v);
    }
    
    void numberobj_43_value_bang() {
        number v = this->numberobj_43_value;
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-8"), localvalue, this->_currentTime);
        this->numberobj_43_output_set(localvalue);
    }
    
    void route_01_match3_bang_bang() {
        this->numberobj_43_value_bang();
    }
    
    void numberobj_43_value_set(number v) {
        this->numberobj_43_value_setter(v);
        v = this->numberobj_43_value;
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-8"), localvalue, this->_currentTime);
        this->numberobj_43_output_set(localvalue);
    }
    
    void route_01_match3_number_set(number v) {
        this->numberobj_43_value_set(v);
    }
    
    void route_01_match3_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_43_value_set(converted);
        }
    }
    
    void pak_02_in2_set(number v) {
        this->pak_02_in2 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_42_output_set(number v) {
        this->pak_02_in2_set(v);
    }
    
    void numberobj_42_value_bang() {
        number v = this->numberobj_42_value;
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-7"), localvalue, this->_currentTime);
        this->numberobj_42_output_set(localvalue);
    }
    
    void route_01_match2_bang_bang() {
        this->numberobj_42_value_bang();
    }
    
    void numberobj_42_value_set(number v) {
        this->numberobj_42_value_setter(v);
        v = this->numberobj_42_value;
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-7"), localvalue, this->_currentTime);
        this->numberobj_42_output_set(localvalue);
    }
    
    void route_01_match2_number_set(number v) {
        this->numberobj_42_value_set(v);
    }
    
    void route_01_match2_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_42_value_set(converted);
        }
    }
    
    void pak_02_in1_set(number v) {
        this->pak_02_in1 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_02_in1);
        array[1] = trunc(this->pak_02_in2);
        array[2] = trunc(this->pak_02_in3);
        array[3] = trunc(this->pak_02_in4);
        array[4] = trunc(this->pak_02_in5);
        array[5] = trunc(this->pak_02_in6);
        array[6] = trunc(this->pak_02_in7);
        array[7] = trunc(this->pak_02_in8);
        array[8] = trunc(this->pak_02_in9);
        array[9] = trunc(this->pak_02_in10);
        array[10] = trunc(this->pak_02_in11);
        array[11] = trunc(this->pak_02_in12);
        array[12] = trunc(this->pak_02_in13);
        array[13] = trunc(this->pak_02_in14);
        array[14] = trunc(this->pak_02_in15);
        array[15] = trunc(this->pak_02_in16);
        array[16] = trunc(this->pak_02_in17);
        array[17] = trunc(this->pak_02_in18);
        array[18] = trunc(this->pak_02_in19);
        array[19] = trunc(this->pak_02_in20);
        array[20] = trunc(this->pak_02_in21);
        array[21] = trunc(this->pak_02_in22);
        array[22] = trunc(this->pak_02_in23);
        array[23] = trunc(this->pak_02_in24);
        array[24] = trunc(this->pak_02_in25);
        array[25] = trunc(this->pak_02_in26);
        array[26] = trunc(this->pak_02_in27);
        array[27] = trunc(this->pak_02_in28);
        array[28] = trunc(this->pak_02_in29);
        array[29] = trunc(this->pak_02_in30);
        array[30] = trunc(this->pak_02_in31);
        array[31] = trunc(this->pak_02_in32);
        array[32] = trunc(this->pak_02_in33);
        array[33] = trunc(this->pak_02_in34);
        array[34] = trunc(this->pak_02_in35);
        array[35] = trunc(this->pak_02_in36);
        array[36] = trunc(this->pak_02_in37);
        array[37] = trunc(this->pak_02_in38);
        array[38] = trunc(this->pak_02_in39);
        array[39] = trunc(this->pak_02_in40);
        array[40] = trunc(this->pak_02_in41);
        array[41] = trunc(this->pak_02_in42);
        array[42] = trunc(this->pak_02_in43);
        array[43] = trunc(this->pak_02_in44);
        array[44] = trunc(this->pak_02_in45);
        array[45] = trunc(this->pak_02_in46);
        array[46] = trunc(this->pak_02_in47);
        array[47] = trunc(this->pak_02_in48);
        array[48] = trunc(this->pak_02_in49);
        array[49] = trunc(this->pak_02_in50);
        array[50] = trunc(this->pak_02_in51);
        array[51] = trunc(this->pak_02_in52);
        array[52] = trunc(this->pak_02_in53);
        array[53] = trunc(this->pak_02_in54);
        array[54] = trunc(this->pak_02_in55);
        array[55] = trunc(this->pak_02_in56);
        array[56] = trunc(this->pak_02_in57);
        array[57] = trunc(this->pak_02_in58);
        array[58] = trunc(this->pak_02_in59);
        array[59] = trunc(this->pak_02_in60);
        array[60] = trunc(this->pak_02_in61);
        array[61] = trunc(this->pak_02_in62);
        array[62] = trunc(this->pak_02_in63);
        array[63] = trunc(this->pak_02_in64);
        array[64] = trunc(this->pak_02_in65);
        array[65] = trunc(this->pak_02_in66);
        array[66] = trunc(this->pak_02_in67);
        array[67] = trunc(this->pak_02_in68);
        array[68] = trunc(this->pak_02_in69);
        array[69] = trunc(this->pak_02_in70);
        array[70] = trunc(this->pak_02_in71);
        array[71] = trunc(this->pak_02_in72);
        array[72] = trunc(this->pak_02_in73);
        array[73] = trunc(this->pak_02_in74);
        array[74] = trunc(this->pak_02_in75);
        array[75] = trunc(this->pak_02_in76);
        array[76] = trunc(this->pak_02_in77);
        array[77] = trunc(this->pak_02_in78);
        array[78] = trunc(this->pak_02_in79);
        array[79] = trunc(this->pak_02_in80);
        array[80] = trunc(this->pak_02_in81);
        array[81] = trunc(this->pak_02_in82);
        array[82] = trunc(this->pak_02_in83);
        array[83] = trunc(this->pak_02_in84);
        array[84] = trunc(this->pak_02_in85);
        array[85] = trunc(this->pak_02_in86);
        array[86] = trunc(this->pak_02_in87);
        array[87] = trunc(this->pak_02_in88);
        array[88] = trunc(this->pak_02_in89);
        array[89] = trunc(this->pak_02_in90);
        array[90] = trunc(this->pak_02_in91);
        array[91] = trunc(this->pak_02_in92);
        array[92] = trunc(this->pak_02_in93);
        array[93] = trunc(this->pak_02_in94);
        array[94] = trunc(this->pak_02_in95);
        array[95] = trunc(this->pak_02_in96);
        array[96] = trunc(this->pak_02_in97);
        array[97] = trunc(this->pak_02_in98);
        array[98] = trunc(this->pak_02_in99);
        array[99] = trunc(this->pak_02_in100);
        this->pak_02_out_set(array);
    }
    
    void numberobj_41_output_set(number v) {
        this->pak_02_in1_set(v);
    }
    
    void numberobj_41_value_bang() {
        number v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_41_output_set(localvalue);
    }
    
    void route_01_match1_bang_bang() {
        this->numberobj_41_value_bang();
    }
    
    void numberobj_41_value_set(number v) {
        this->numberobj_41_value_setter(v);
        v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_41_output_set(localvalue);
    }
    
    void route_01_match1_number_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void route_01_match1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_41_value_set(converted);
        }
    }
    
    void route_01_nomatch_number_set(number ) {}
    
    void route_01_nomatch_list_set(const list& ) {}
    
    void route_01_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_01_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_01_selector100) {
                if (input->length == 0)
                    this->route_01_match100_bang_bang();
                else if (input->length == 1)
                    this->route_01_match100_number_set(input[0]);
                else
                    this->route_01_match100_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector99) {
                if (input->length == 0)
                    this->route_01_match99_bang_bang();
                else if (input->length == 1)
                    this->route_01_match99_number_set(input[0]);
                else
                    this->route_01_match99_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector98) {
                if (input->length == 0)
                    this->route_01_match98_bang_bang();
                else if (input->length == 1)
                    this->route_01_match98_number_set(input[0]);
                else
                    this->route_01_match98_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector97) {
                if (input->length == 0)
                    this->route_01_match97_bang_bang();
                else if (input->length == 1)
                    this->route_01_match97_number_set(input[0]);
                else
                    this->route_01_match97_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector96) {
                if (input->length == 0)
                    this->route_01_match96_bang_bang();
                else if (input->length == 1)
                    this->route_01_match96_number_set(input[0]);
                else
                    this->route_01_match96_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector95) {
                if (input->length == 0)
                    this->route_01_match95_bang_bang();
                else if (input->length == 1)
                    this->route_01_match95_number_set(input[0]);
                else
                    this->route_01_match95_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector94) {
                if (input->length == 0)
                    this->route_01_match94_bang_bang();
                else if (input->length == 1)
                    this->route_01_match94_number_set(input[0]);
                else
                    this->route_01_match94_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector93) {
                if (input->length == 0)
                    this->route_01_match93_bang_bang();
                else if (input->length == 1)
                    this->route_01_match93_number_set(input[0]);
                else
                    this->route_01_match93_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector92) {
                if (input->length == 0)
                    this->route_01_match92_bang_bang();
                else if (input->length == 1)
                    this->route_01_match92_number_set(input[0]);
                else
                    this->route_01_match92_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector91) {
                if (input->length == 0)
                    this->route_01_match91_bang_bang();
                else if (input->length == 1)
                    this->route_01_match91_number_set(input[0]);
                else
                    this->route_01_match91_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector90) {
                if (input->length == 0)
                    this->route_01_match90_bang_bang();
                else if (input->length == 1)
                    this->route_01_match90_number_set(input[0]);
                else
                    this->route_01_match90_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector89) {
                if (input->length == 0)
                    this->route_01_match89_bang_bang();
                else if (input->length == 1)
                    this->route_01_match89_number_set(input[0]);
                else
                    this->route_01_match89_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector88) {
                if (input->length == 0)
                    this->route_01_match88_bang_bang();
                else if (input->length == 1)
                    this->route_01_match88_number_set(input[0]);
                else
                    this->route_01_match88_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector87) {
                if (input->length == 0)
                    this->route_01_match87_bang_bang();
                else if (input->length == 1)
                    this->route_01_match87_number_set(input[0]);
                else
                    this->route_01_match87_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector86) {
                if (input->length == 0)
                    this->route_01_match86_bang_bang();
                else if (input->length == 1)
                    this->route_01_match86_number_set(input[0]);
                else
                    this->route_01_match86_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector85) {
                if (input->length == 0)
                    this->route_01_match85_bang_bang();
                else if (input->length == 1)
                    this->route_01_match85_number_set(input[0]);
                else
                    this->route_01_match85_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector84) {
                if (input->length == 0)
                    this->route_01_match84_bang_bang();
                else if (input->length == 1)
                    this->route_01_match84_number_set(input[0]);
                else
                    this->route_01_match84_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector83) {
                if (input->length == 0)
                    this->route_01_match83_bang_bang();
                else if (input->length == 1)
                    this->route_01_match83_number_set(input[0]);
                else
                    this->route_01_match83_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector82) {
                if (input->length == 0)
                    this->route_01_match82_bang_bang();
                else if (input->length == 1)
                    this->route_01_match82_number_set(input[0]);
                else
                    this->route_01_match82_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector81) {
                if (input->length == 0)
                    this->route_01_match81_bang_bang();
                else if (input->length == 1)
                    this->route_01_match81_number_set(input[0]);
                else
                    this->route_01_match81_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector80) {
                if (input->length == 0)
                    this->route_01_match80_bang_bang();
                else if (input->length == 1)
                    this->route_01_match80_number_set(input[0]);
                else
                    this->route_01_match80_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector79) {
                if (input->length == 0)
                    this->route_01_match79_bang_bang();
                else if (input->length == 1)
                    this->route_01_match79_number_set(input[0]);
                else
                    this->route_01_match79_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector78) {
                if (input->length == 0)
                    this->route_01_match78_bang_bang();
                else if (input->length == 1)
                    this->route_01_match78_number_set(input[0]);
                else
                    this->route_01_match78_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector77) {
                if (input->length == 0)
                    this->route_01_match77_bang_bang();
                else if (input->length == 1)
                    this->route_01_match77_number_set(input[0]);
                else
                    this->route_01_match77_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector76) {
                if (input->length == 0)
                    this->route_01_match76_bang_bang();
                else if (input->length == 1)
                    this->route_01_match76_number_set(input[0]);
                else
                    this->route_01_match76_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector75) {
                if (input->length == 0)
                    this->route_01_match75_bang_bang();
                else if (input->length == 1)
                    this->route_01_match75_number_set(input[0]);
                else
                    this->route_01_match75_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector74) {
                if (input->length == 0)
                    this->route_01_match74_bang_bang();
                else if (input->length == 1)
                    this->route_01_match74_number_set(input[0]);
                else
                    this->route_01_match74_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector73) {
                if (input->length == 0)
                    this->route_01_match73_bang_bang();
                else if (input->length == 1)
                    this->route_01_match73_number_set(input[0]);
                else
                    this->route_01_match73_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector72) {
                if (input->length == 0)
                    this->route_01_match72_bang_bang();
                else if (input->length == 1)
                    this->route_01_match72_number_set(input[0]);
                else
                    this->route_01_match72_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector71) {
                if (input->length == 0)
                    this->route_01_match71_bang_bang();
                else if (input->length == 1)
                    this->route_01_match71_number_set(input[0]);
                else
                    this->route_01_match71_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector70) {
                if (input->length == 0)
                    this->route_01_match70_bang_bang();
                else if (input->length == 1)
                    this->route_01_match70_number_set(input[0]);
                else
                    this->route_01_match70_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector69) {
                if (input->length == 0)
                    this->route_01_match69_bang_bang();
                else if (input->length == 1)
                    this->route_01_match69_number_set(input[0]);
                else
                    this->route_01_match69_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector68) {
                if (input->length == 0)
                    this->route_01_match68_bang_bang();
                else if (input->length == 1)
                    this->route_01_match68_number_set(input[0]);
                else
                    this->route_01_match68_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector67) {
                if (input->length == 0)
                    this->route_01_match67_bang_bang();
                else if (input->length == 1)
                    this->route_01_match67_number_set(input[0]);
                else
                    this->route_01_match67_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector66) {
                if (input->length == 0)
                    this->route_01_match66_bang_bang();
                else if (input->length == 1)
                    this->route_01_match66_number_set(input[0]);
                else
                    this->route_01_match66_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector65) {
                if (input->length == 0)
                    this->route_01_match65_bang_bang();
                else if (input->length == 1)
                    this->route_01_match65_number_set(input[0]);
                else
                    this->route_01_match65_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector64) {
                if (input->length == 0)
                    this->route_01_match64_bang_bang();
                else if (input->length == 1)
                    this->route_01_match64_number_set(input[0]);
                else
                    this->route_01_match64_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector63) {
                if (input->length == 0)
                    this->route_01_match63_bang_bang();
                else if (input->length == 1)
                    this->route_01_match63_number_set(input[0]);
                else
                    this->route_01_match63_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector62) {
                if (input->length == 0)
                    this->route_01_match62_bang_bang();
                else if (input->length == 1)
                    this->route_01_match62_number_set(input[0]);
                else
                    this->route_01_match62_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector61) {
                if (input->length == 0)
                    this->route_01_match61_bang_bang();
                else if (input->length == 1)
                    this->route_01_match61_number_set(input[0]);
                else
                    this->route_01_match61_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector60) {
                if (input->length == 0)
                    this->route_01_match60_bang_bang();
                else if (input->length == 1)
                    this->route_01_match60_number_set(input[0]);
                else
                    this->route_01_match60_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector59) {
                if (input->length == 0)
                    this->route_01_match59_bang_bang();
                else if (input->length == 1)
                    this->route_01_match59_number_set(input[0]);
                else
                    this->route_01_match59_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector58) {
                if (input->length == 0)
                    this->route_01_match58_bang_bang();
                else if (input->length == 1)
                    this->route_01_match58_number_set(input[0]);
                else
                    this->route_01_match58_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector57) {
                if (input->length == 0)
                    this->route_01_match57_bang_bang();
                else if (input->length == 1)
                    this->route_01_match57_number_set(input[0]);
                else
                    this->route_01_match57_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector56) {
                if (input->length == 0)
                    this->route_01_match56_bang_bang();
                else if (input->length == 1)
                    this->route_01_match56_number_set(input[0]);
                else
                    this->route_01_match56_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector55) {
                if (input->length == 0)
                    this->route_01_match55_bang_bang();
                else if (input->length == 1)
                    this->route_01_match55_number_set(input[0]);
                else
                    this->route_01_match55_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector54) {
                if (input->length == 0)
                    this->route_01_match54_bang_bang();
                else if (input->length == 1)
                    this->route_01_match54_number_set(input[0]);
                else
                    this->route_01_match54_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector53) {
                if (input->length == 0)
                    this->route_01_match53_bang_bang();
                else if (input->length == 1)
                    this->route_01_match53_number_set(input[0]);
                else
                    this->route_01_match53_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector52) {
                if (input->length == 0)
                    this->route_01_match52_bang_bang();
                else if (input->length == 1)
                    this->route_01_match52_number_set(input[0]);
                else
                    this->route_01_match52_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector51) {
                if (input->length == 0)
                    this->route_01_match51_bang_bang();
                else if (input->length == 1)
                    this->route_01_match51_number_set(input[0]);
                else
                    this->route_01_match51_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector50) {
                if (input->length == 0)
                    this->route_01_match50_bang_bang();
                else if (input->length == 1)
                    this->route_01_match50_number_set(input[0]);
                else
                    this->route_01_match50_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector49) {
                if (input->length == 0)
                    this->route_01_match49_bang_bang();
                else if (input->length == 1)
                    this->route_01_match49_number_set(input[0]);
                else
                    this->route_01_match49_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector48) {
                if (input->length == 0)
                    this->route_01_match48_bang_bang();
                else if (input->length == 1)
                    this->route_01_match48_number_set(input[0]);
                else
                    this->route_01_match48_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector47) {
                if (input->length == 0)
                    this->route_01_match47_bang_bang();
                else if (input->length == 1)
                    this->route_01_match47_number_set(input[0]);
                else
                    this->route_01_match47_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector46) {
                if (input->length == 0)
                    this->route_01_match46_bang_bang();
                else if (input->length == 1)
                    this->route_01_match46_number_set(input[0]);
                else
                    this->route_01_match46_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector45) {
                if (input->length == 0)
                    this->route_01_match45_bang_bang();
                else if (input->length == 1)
                    this->route_01_match45_number_set(input[0]);
                else
                    this->route_01_match45_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector44) {
                if (input->length == 0)
                    this->route_01_match44_bang_bang();
                else if (input->length == 1)
                    this->route_01_match44_number_set(input[0]);
                else
                    this->route_01_match44_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector43) {
                if (input->length == 0)
                    this->route_01_match43_bang_bang();
                else if (input->length == 1)
                    this->route_01_match43_number_set(input[0]);
                else
                    this->route_01_match43_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector42) {
                if (input->length == 0)
                    this->route_01_match42_bang_bang();
                else if (input->length == 1)
                    this->route_01_match42_number_set(input[0]);
                else
                    this->route_01_match42_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector41) {
                if (input->length == 0)
                    this->route_01_match41_bang_bang();
                else if (input->length == 1)
                    this->route_01_match41_number_set(input[0]);
                else
                    this->route_01_match41_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector40) {
                if (input->length == 0)
                    this->route_01_match40_bang_bang();
                else if (input->length == 1)
                    this->route_01_match40_number_set(input[0]);
                else
                    this->route_01_match40_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector39) {
                if (input->length == 0)
                    this->route_01_match39_bang_bang();
                else if (input->length == 1)
                    this->route_01_match39_number_set(input[0]);
                else
                    this->route_01_match39_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector38) {
                if (input->length == 0)
                    this->route_01_match38_bang_bang();
                else if (input->length == 1)
                    this->route_01_match38_number_set(input[0]);
                else
                    this->route_01_match38_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector37) {
                if (input->length == 0)
                    this->route_01_match37_bang_bang();
                else if (input->length == 1)
                    this->route_01_match37_number_set(input[0]);
                else
                    this->route_01_match37_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector36) {
                if (input->length == 0)
                    this->route_01_match36_bang_bang();
                else if (input->length == 1)
                    this->route_01_match36_number_set(input[0]);
                else
                    this->route_01_match36_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector35) {
                if (input->length == 0)
                    this->route_01_match35_bang_bang();
                else if (input->length == 1)
                    this->route_01_match35_number_set(input[0]);
                else
                    this->route_01_match35_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector34) {
                if (input->length == 0)
                    this->route_01_match34_bang_bang();
                else if (input->length == 1)
                    this->route_01_match34_number_set(input[0]);
                else
                    this->route_01_match34_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector33) {
                if (input->length == 0)
                    this->route_01_match33_bang_bang();
                else if (input->length == 1)
                    this->route_01_match33_number_set(input[0]);
                else
                    this->route_01_match33_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector32) {
                if (input->length == 0)
                    this->route_01_match32_bang_bang();
                else if (input->length == 1)
                    this->route_01_match32_number_set(input[0]);
                else
                    this->route_01_match32_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector31) {
                if (input->length == 0)
                    this->route_01_match31_bang_bang();
                else if (input->length == 1)
                    this->route_01_match31_number_set(input[0]);
                else
                    this->route_01_match31_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector30) {
                if (input->length == 0)
                    this->route_01_match30_bang_bang();
                else if (input->length == 1)
                    this->route_01_match30_number_set(input[0]);
                else
                    this->route_01_match30_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector29) {
                if (input->length == 0)
                    this->route_01_match29_bang_bang();
                else if (input->length == 1)
                    this->route_01_match29_number_set(input[0]);
                else
                    this->route_01_match29_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector28) {
                if (input->length == 0)
                    this->route_01_match28_bang_bang();
                else if (input->length == 1)
                    this->route_01_match28_number_set(input[0]);
                else
                    this->route_01_match28_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector27) {
                if (input->length == 0)
                    this->route_01_match27_bang_bang();
                else if (input->length == 1)
                    this->route_01_match27_number_set(input[0]);
                else
                    this->route_01_match27_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector26) {
                if (input->length == 0)
                    this->route_01_match26_bang_bang();
                else if (input->length == 1)
                    this->route_01_match26_number_set(input[0]);
                else
                    this->route_01_match26_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector25) {
                if (input->length == 0)
                    this->route_01_match25_bang_bang();
                else if (input->length == 1)
                    this->route_01_match25_number_set(input[0]);
                else
                    this->route_01_match25_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector24) {
                if (input->length == 0)
                    this->route_01_match24_bang_bang();
                else if (input->length == 1)
                    this->route_01_match24_number_set(input[0]);
                else
                    this->route_01_match24_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector23) {
                if (input->length == 0)
                    this->route_01_match23_bang_bang();
                else if (input->length == 1)
                    this->route_01_match23_number_set(input[0]);
                else
                    this->route_01_match23_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector22) {
                if (input->length == 0)
                    this->route_01_match22_bang_bang();
                else if (input->length == 1)
                    this->route_01_match22_number_set(input[0]);
                else
                    this->route_01_match22_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector21) {
                if (input->length == 0)
                    this->route_01_match21_bang_bang();
                else if (input->length == 1)
                    this->route_01_match21_number_set(input[0]);
                else
                    this->route_01_match21_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector20) {
                if (input->length == 0)
                    this->route_01_match20_bang_bang();
                else if (input->length == 1)
                    this->route_01_match20_number_set(input[0]);
                else
                    this->route_01_match20_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector19) {
                if (input->length == 0)
                    this->route_01_match19_bang_bang();
                else if (input->length == 1)
                    this->route_01_match19_number_set(input[0]);
                else
                    this->route_01_match19_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector18) {
                if (input->length == 0)
                    this->route_01_match18_bang_bang();
                else if (input->length == 1)
                    this->route_01_match18_number_set(input[0]);
                else
                    this->route_01_match18_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector17) {
                if (input->length == 0)
                    this->route_01_match17_bang_bang();
                else if (input->length == 1)
                    this->route_01_match17_number_set(input[0]);
                else
                    this->route_01_match17_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector16) {
                if (input->length == 0)
                    this->route_01_match16_bang_bang();
                else if (input->length == 1)
                    this->route_01_match16_number_set(input[0]);
                else
                    this->route_01_match16_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector15) {
                if (input->length == 0)
                    this->route_01_match15_bang_bang();
                else if (input->length == 1)
                    this->route_01_match15_number_set(input[0]);
                else
                    this->route_01_match15_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector14) {
                if (input->length == 0)
                    this->route_01_match14_bang_bang();
                else if (input->length == 1)
                    this->route_01_match14_number_set(input[0]);
                else
                    this->route_01_match14_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector13) {
                if (input->length == 0)
                    this->route_01_match13_bang_bang();
                else if (input->length == 1)
                    this->route_01_match13_number_set(input[0]);
                else
                    this->route_01_match13_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector12) {
                if (input->length == 0)
                    this->route_01_match12_bang_bang();
                else if (input->length == 1)
                    this->route_01_match12_number_set(input[0]);
                else
                    this->route_01_match12_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector11) {
                if (input->length == 0)
                    this->route_01_match11_bang_bang();
                else if (input->length == 1)
                    this->route_01_match11_number_set(input[0]);
                else
                    this->route_01_match11_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector10) {
                if (input->length == 0)
                    this->route_01_match10_bang_bang();
                else if (input->length == 1)
                    this->route_01_match10_number_set(input[0]);
                else
                    this->route_01_match10_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector9) {
                if (input->length == 0)
                    this->route_01_match9_bang_bang();
                else if (input->length == 1)
                    this->route_01_match9_number_set(input[0]);
                else
                    this->route_01_match9_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector8) {
                if (input->length == 0)
                    this->route_01_match8_bang_bang();
                else if (input->length == 1)
                    this->route_01_match8_number_set(input[0]);
                else
                    this->route_01_match8_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector7) {
                if (input->length == 0)
                    this->route_01_match7_bang_bang();
                else if (input->length == 1)
                    this->route_01_match7_number_set(input[0]);
                else
                    this->route_01_match7_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector6) {
                if (input->length == 0)
                    this->route_01_match6_bang_bang();
                else if (input->length == 1)
                    this->route_01_match6_number_set(input[0]);
                else
                    this->route_01_match6_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector5) {
                if (input->length == 0)
                    this->route_01_match5_bang_bang();
                else if (input->length == 1)
                    this->route_01_match5_number_set(input[0]);
                else
                    this->route_01_match5_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector4) {
                if (input->length == 0)
                    this->route_01_match4_bang_bang();
                else if (input->length == 1)
                    this->route_01_match4_number_set(input[0]);
                else
                    this->route_01_match4_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector3) {
                if (input->length == 0)
                    this->route_01_match3_bang_bang();
                else if (input->length == 1)
                    this->route_01_match3_number_set(input[0]);
                else
                    this->route_01_match3_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector2) {
                if (input->length == 0)
                    this->route_01_match2_bang_bang();
                else if (input->length == 1)
                    this->route_01_match2_number_set(input[0]);
                else
                    this->route_01_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector1) {
                if (input->length == 0)
                    this->route_01_match1_bang_bang();
                else if (input->length == 1)
                    this->route_01_match1_number_set(input[0]);
                else
                    this->route_01_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_01_nomatch_number_set(v[0]);
                } else {
                    this->route_01_nomatch_list_set(v);
                }
            }
        }
    }
    
    void eventinlet_25_out1_list_set(const list& v) {
        this->route_01_input_list_set(v);
    }
    
    void gate_17_onoff_set(number v) {
        this->gate_17_onoff = v;
    }
    
    void message_32_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_32_out_set(this->message_32_set);
    }
    
    void trigger_16_out2_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_32_trigger_bang();
    }
    
    void listlookup_01_lookup_set(const list& v) {
        this->listlookup_01_lookup = jsCreateListCopy(v);
    }
    
    void message_35_out_set(const list& v) {
        this->listlookup_01_lookup_set(v);
    }
    
    void message_35_trigger_bang() {
        this->message_35_out_set(this->message_35_set);
    }
    
    void trigger_17_out2_bang() {
        this->message_35_trigger_bang();
    }
    
    void message_37_set_set(const list& v) {
        this->message_37_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-74"), v, this->_currentTime);
    }
    
    void pack_01_out_set(const list& v) {
        this->message_37_set_set(v);
    }
    
    void pack_01_in1_set(number v) {
        this->pack_01_in1 = v;
        list array = list(0, 0);
        array[0] = trunc(this->pack_01_in1);
        array[1] = this->pack_01_in2;
        this->pack_01_out_set(array);
    }
    
    void expr_45_out1_set(number v) {
        this->expr_45_out1 = v;
        this->pack_01_in1_set(this->expr_45_out1);
    }
    
    void expr_45_in1_set(number in1) {
        this->expr_45_in1 = in1;
        this->expr_45_out1_set(this->expr_45_in1 + this->expr_45_in2);//#map:sort[1]/+_obj-56:1
    }
    
    void trigger_18_out3_set(number v) {
        this->expr_45_in1_set(v);
    }
    
    void message_36_set_set(const list& v) {
        this->message_36_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-78"), v, this->_currentTime);
    }
    
    void expr_44_out1_set(number v) {
        this->expr_44_out1 = v;
    
        {
            list converted = {this->expr_44_out1};
            this->message_36_set_set(converted);
        }
    }
    
    void expr_44_in1_set(number in1) {
        this->expr_44_in1 = in1;
        this->expr_44_out1_set(this->expr_44_in1 + this->expr_44_in2);//#map:sort[1]/+_obj-62:1
    }
    
    void trigger_18_out2_set(number v) {
        this->expr_44_in1_set(v);
    }
    
    void eventoutlet_15_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_25_out3_list_set((list)v);
    }
    
    void message_37_out_set(const list& v) {
        this->eventoutlet_15_in1_list_set(v);
    }
    
    void message_37_trigger_bang() {
        this->message_37_out_set(this->message_37_set);
    }
    
    void trigger_19_out7_bang() {
        this->message_37_trigger_bang();
    }
    
    void eventoutlet_14_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_25_out2_list_set((list)v);
    }
    
    void message_36_out_set(const list& v) {
        this->eventoutlet_14_in1_list_set(v);
    }
    
    void message_36_trigger_bang() {
        this->message_36_out_set(this->message_36_set);
    }
    
    void trigger_19_out6_bang() {
        this->message_36_trigger_bang();
    }
    
    void eventoutlet_13_in1_bang_bang() {
        ;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_25_out1_bang_bang();
    }
    
    void button_05_output_bang() {
        this->eventoutlet_13_in1_bang_bang();
    }
    
    void button_05_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort[1]/button_obj-76"), this->_currentTime);;
        this->button_05_output_bang();
    }
    
    void trigger_19_out5_bang() {
        this->button_05_bangval_bang();
    }
    
    void accum_01_reset_set(number v) {
        this->accum_01_reset = v;
    }
    
    void toggle_01_output_set(number v) {
        this->accum_01_reset_set(v);
    }
    
    void toggle_01_value_number_set(number v) {
        this->toggle_01_value_number_setter(v);
        v = this->toggle_01_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/toggle_obj-91"), v, this->_currentTime);
        this->toggle_01_output_set(v);
    }
    
    void message_34_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_01_value_number_set(converted);
        }
    }
    
    void message_34_trigger_bang() {
        this->message_34_out_set(this->message_34_set);
    }
    
    void trigger_19_out4_bang() {
        this->message_34_trigger_bang();
    }
    
    void message_29_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_29_out_set(this->message_29_set);
    }
    
    void trigger_19_out3_bang() {
        this->message_29_trigger_bang();
    }
    
    void message_31_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_01_value_number_set(converted);
        }
    }
    
    void message_31_trigger_bang() {
        this->message_31_out_set(this->message_31_set);
    }
    
    void trigger_19_out2_bang() {
        this->message_31_trigger_bang();
    }
    
    void gate_17_input_number_set(number v) {
        if (this->stackprotect_check())
            return;
    
        if (this->gate_17_onoff == 1)
            this->gate_17_out1_number_set(v);
        else if (this->gate_17_onoff == 2)
            this->gate_17_out2_number_set(v);
    }
    
    void message_30_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_17_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_17_onoff_set(converted);
        }
    }
    
    void message_30_trigger_bang() {
        this->message_30_out_set(this->message_30_set);
    }
    
    void trigger_19_out1_bang() {
        this->message_30_trigger_bang();
    }
    
    void trigger_19_input_bang_bang() {
        this->trigger_19_out7_bang();
        this->trigger_19_out6_bang();
        this->trigger_19_out5_bang();
        this->trigger_19_out4_bang();
        this->trigger_19_out3_bang();
        this->trigger_19_out2_bang();
        this->trigger_19_out1_bang();
    }
    
    void select_20_match1_bang() {
        this->trigger_19_input_bang_bang();
    }
    
    void button_06_output_bang() {
        this->message_29_trigger_bang();
    }
    
    void button_06_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort[1]/button_obj-71"), this->_currentTime);;
        this->button_06_output_bang();
    }
    
    void select_20_nomatch_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_06_bangval_bang();
    }
    
    void select_20_input_number_set(number v) {
        if (v == this->select_20_test1)
            this->select_20_match1_bang();
        else
            this->select_20_nomatch_number_set(v);
    }
    
    void numberobj_40_output_set(number v) {
        this->select_20_input_number_set(v);
    }
    
    void numberobj_40_value_set(number v) {
        this->numberobj_40_value_setter(v);
        v = this->numberobj_40_value;
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("sort[1]/number_obj-58"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_40_output_set(localvalue);
    }
    
    void listlookup_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_40_value_set(converted);
        }
    }
    
    void listlookup_01_input_set(const list& v) {
        this->listlookup_01_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_01_lookup->length)
                tmp->push(this->listlookup_01_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_01_out_set(tmp);
    }
    
    void trigger_18_out1_set(number v) {
        {
            list converted = {v};
            this->listlookup_01_input_set(converted);
        }
    }
    
    void trigger_18_input_number_set(number v) {
        this->trigger_18_out3_set(trunc(v));
        this->trigger_18_out2_set(trunc(v));
        this->trigger_18_out1_set(trunc(v));
    }
    
    void numberobj_39_output_set(number v) {
        this->trigger_18_input_number_set(v);
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort[1]/number_obj-5"), localvalue, this->_currentTime);
        this->numberobj_39_output_set(localvalue);
    }
    
    void accum_01_out1_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void accum_01_x_set(number x) {
        this->accum_01_x = x;
        auto reset = this->accum_01_reset;
    
        {
            {
                this->accum_01_value = ((bool)(reset) ? -1 : this->accum_01_value + x);
    
                {
                    this->accum_01_out1_set(this->accum_01_value);
                    return;
                }
            }
        }
    }
    
    void message_29_out_set(const list& v) {
        {
            if (v->length > 1)
                this->accum_01_reset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->accum_01_x_set(converted);
        }
    }
    
    void trigger_17_out1_bang() {
        this->message_29_trigger_bang();
    }
    
    void trigger_17_input_bang_bang() {
        this->trigger_17_out2_bang();
        this->trigger_17_out1_bang();
    }
    
    void button_04_output_bang() {
        this->trigger_17_input_bang_bang();
    }
    
    void button_04_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort[1]/button_obj-64"), this->_currentTime);;
        this->button_04_output_bang();
    }
    
    void trigger_16_out1_bang() {
        this->button_04_bangval_bang();
    }
    
    void trigger_16_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_16_out2_bang();
        this->trigger_16_out1_bang();
    }
    
    void gate_17_out1_number_set(number v) {
        this->gate_17_out1_number = v;
        this->trigger_16_input_number_set(v);
    }
    
    void gate_17_out2_number_set(number v) {
        this->gate_17_out2_number = v;
    }
    
    void message_32_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_17_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_17_onoff_set(converted);
        }
    }
    
    void trigger_16_input_bang_bang() {
        this->trigger_16_out2_bang();
        this->trigger_16_out1_bang();
    }
    
    void gate_17_out1_bang_bang() {
        this->trigger_16_input_bang_bang();
    }
    
    void gate_17_out2_bang_bang() {}
    
    void gate_17_input_bang_bang() {
        if (this->gate_17_onoff == 1)
            this->gate_17_out1_bang_bang();
        else if (this->gate_17_onoff == 2)
            this->gate_17_out2_bang_bang();
    }
    
    void eventinlet_24_out1_bang_bang() {
        this->gate_17_input_bang_bang();
    }
    
    void message_29_set_set(const list& v) {
        this->message_29_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-75"), v, this->_currentTime);
    }
    
    void trigger_16_input_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->trigger_16_out2_bang();
        this->trigger_16_out1_bang();
    }
    
    void gate_17_out1_list_set(const list& v) {
        this->gate_17_out1_list = jsCreateListCopy(v);
        this->trigger_16_input_list_set(v);
    }
    
    void gate_17_out2_list_set(const list& v) {
        this->gate_17_out2_list = jsCreateListCopy(v);
    }
    
    void gate_17_input_list_set(const list& v) {
        if (this->gate_17_onoff == 1)
            this->gate_17_out1_list_set(v);
        else if (this->gate_17_onoff == 2)
            this->gate_17_out2_list_set(v);
    }
    
    void message_30_set_set(const list& v) {
        this->message_30_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-144"), v, this->_currentTime);
    }
    
    void message_31_set_set(const list& v) {
        this->message_31_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-104"), v, this->_currentTime);
    }
    
    void message_32_set_set(const list& v) {
        this->message_32_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-146"), v, this->_currentTime);
    }
    
    void message_33_set_set(const list& v) {
        this->message_33_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-68"), v, this->_currentTime);
    }
    
    void message_33_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_41_value_set(converted);
        }
    }
    
    void message_33_trigger_bang() {
        this->message_33_out_set(this->message_33_set);
    }
    
    void message_34_set_set(const list& v) {
        this->message_34_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort[1]/message_obj-94"), v, this->_currentTime);
    }
    
    void route_01_input_bang_bang() {
        this->route_01_nomatch_bang_bang();
    }
    
    void route_01_input_number_set(number v) {
        this->route_01_input_list_set({v});
    }
    
    void receive_21_output_bang_bang() {
        this->message_33_trigger_bang();
        this->message_30_trigger_bang();
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void toggle_01_value_number_setter(number v) {
        this->toggle_01_value_number = (v != 0 ? 1 : 0);
    }
    
    void numberobj_40_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_40_value = localvalue;
    }
    
    void numberobj_41_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_41_value = localvalue;
    }
    
    void numberobj_42_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_42_value = localvalue;
    }
    
    void numberobj_43_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_43_value = localvalue;
    }
    
    void numberobj_44_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_44_value = localvalue;
    }
    
    void numberobj_45_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_45_value = localvalue;
    }
    
    void numberobj_46_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_46_value = localvalue;
    }
    
    void numberobj_47_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_47_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_47_value = localvalue;
    }
    
    void numberobj_48_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_48_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_48_value = localvalue;
    }
    
    void numberobj_49_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_49_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_49_value = localvalue;
    }
    
    void numberobj_50_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_50_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_50_value = localvalue;
    }
    
    void numberobj_51_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_51_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_51_value = localvalue;
    }
    
    void numberobj_52_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_52_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_52_value = localvalue;
    }
    
    void numberobj_53_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_53_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_53_value = localvalue;
    }
    
    void numberobj_54_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_54_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_54_value = localvalue;
    }
    
    void numberobj_55_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_55_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_55_value = localvalue;
    }
    
    void numberobj_56_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_56_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_56_value = localvalue;
    }
    
    void numberobj_57_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_57_value = localvalue;
    }
    
    void numberobj_58_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_58_value = localvalue;
    }
    
    void numberobj_59_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_59_value = localvalue;
    }
    
    void numberobj_60_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_60_value = localvalue;
    }
    
    void numberobj_61_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_61_value = localvalue;
    }
    
    void numberobj_62_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_62_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_62_value = localvalue;
    }
    
    void numberobj_63_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_63_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_63_value = localvalue;
    }
    
    void numberobj_64_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_64_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_64_value = localvalue;
    }
    
    void numberobj_65_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_65_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_65_value = localvalue;
    }
    
    void numberobj_66_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_66_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_66_value = localvalue;
    }
    
    void numberobj_67_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_67_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_67_value = localvalue;
    }
    
    void numberobj_68_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_68_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_68_value = localvalue;
    }
    
    void numberobj_69_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_69_value = localvalue;
    }
    
    void numberobj_70_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_70_value = localvalue;
    }
    
    void numberobj_71_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_71_value = localvalue;
    }
    
    void numberobj_72_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_72_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_72_value = localvalue;
    }
    
    void numberobj_73_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_73_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_73_value = localvalue;
    }
    
    void numberobj_74_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_74_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_74_value = localvalue;
    }
    
    void numberobj_75_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_75_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_75_value = localvalue;
    }
    
    void numberobj_76_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_76_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_76_value = localvalue;
    }
    
    void numberobj_77_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_77_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_77_value = localvalue;
    }
    
    void numberobj_78_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_78_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_78_value = localvalue;
    }
    
    void numberobj_79_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_79_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_79_value = localvalue;
    }
    
    void numberobj_80_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_80_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_80_value = localvalue;
    }
    
    void numberobj_81_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_81_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_81_value = localvalue;
    }
    
    void numberobj_82_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_82_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_82_value = localvalue;
    }
    
    void numberobj_83_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_83_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_83_value = localvalue;
    }
    
    void numberobj_84_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_84_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_84_value = localvalue;
    }
    
    void numberobj_85_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_85_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_85_value = localvalue;
    }
    
    void numberobj_86_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_86_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_86_value = localvalue;
    }
    
    void numberobj_87_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_87_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_87_value = localvalue;
    }
    
    void numberobj_88_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_88_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_88_value = localvalue;
    }
    
    void numberobj_89_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_89_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_89_value = localvalue;
    }
    
    void numberobj_90_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_90_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_90_value = localvalue;
    }
    
    void numberobj_91_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_91_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_91_value = localvalue;
    }
    
    void numberobj_92_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_92_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_92_value = localvalue;
    }
    
    void numberobj_93_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_93_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_93_value = localvalue;
    }
    
    void numberobj_94_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_94_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_94_value = localvalue;
    }
    
    void numberobj_95_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_95_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_95_value = localvalue;
    }
    
    void numberobj_96_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_96_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_96_value = localvalue;
    }
    
    void numberobj_97_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_97_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_97_value = localvalue;
    }
    
    void numberobj_98_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_98_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_98_value = localvalue;
    }
    
    void numberobj_99_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_99_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_99_value = localvalue;
    }
    
    void numberobj_100_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_100_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_100_value = localvalue;
    }
    
    void numberobj_101_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_101_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_101_value = localvalue;
    }
    
    void numberobj_102_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_102_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_102_value = localvalue;
    }
    
    void numberobj_103_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_103_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_103_value = localvalue;
    }
    
    void numberobj_104_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_104_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_104_value = localvalue;
    }
    
    void numberobj_105_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_105_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_105_value = localvalue;
    }
    
    void numberobj_106_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_106_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_106_value = localvalue;
    }
    
    void numberobj_107_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_107_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_107_value = localvalue;
    }
    
    void numberobj_108_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_108_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_108_value = localvalue;
    }
    
    void numberobj_109_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_109_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_109_value = localvalue;
    }
    
    void numberobj_110_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_110_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_110_value = localvalue;
    }
    
    void numberobj_111_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_111_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_111_value = localvalue;
    }
    
    void numberobj_112_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_112_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_112_value = localvalue;
    }
    
    void numberobj_113_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_113_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_113_value = localvalue;
    }
    
    void numberobj_114_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_114_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_114_value = localvalue;
    }
    
    void numberobj_115_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_115_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_115_value = localvalue;
    }
    
    void numberobj_116_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_116_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_116_value = localvalue;
    }
    
    void numberobj_117_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_117_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_117_value = localvalue;
    }
    
    void numberobj_118_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_118_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_118_value = localvalue;
    }
    
    void numberobj_119_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_119_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_119_value = localvalue;
    }
    
    void numberobj_120_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_120_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_120_value = localvalue;
    }
    
    void numberobj_121_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_121_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_121_value = localvalue;
    }
    
    void numberobj_122_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_122_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_122_value = localvalue;
    }
    
    void numberobj_123_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_123_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_123_value = localvalue;
    }
    
    void numberobj_124_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_124_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_124_value = localvalue;
    }
    
    void numberobj_125_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_125_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_125_value = localvalue;
    }
    
    void numberobj_126_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_126_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_126_value = localvalue;
    }
    
    void numberobj_127_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_127_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_127_value = localvalue;
    }
    
    void numberobj_128_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_128_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_128_value = localvalue;
    }
    
    void numberobj_129_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_129_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_129_value = localvalue;
    }
    
    void numberobj_130_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_130_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_130_value = localvalue;
    }
    
    void numberobj_131_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_131_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_131_value = localvalue;
    }
    
    void numberobj_132_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_132_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_132_value = localvalue;
    }
    
    void numberobj_133_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_133_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_133_value = localvalue;
    }
    
    void numberobj_134_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_134_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_134_value = localvalue;
    }
    
    void numberobj_135_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_135_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_135_value = localvalue;
    }
    
    void numberobj_136_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_136_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_136_value = localvalue;
    }
    
    void numberobj_137_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_137_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_137_value = localvalue;
    }
    
    void numberobj_138_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_138_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_138_value = localvalue;
    }
    
    void numberobj_139_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_139_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_139_value = localvalue;
    }
    
    void numberobj_140_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_140_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_140_value = localvalue;
    }
    
    void message_29_init() {
        this->message_29_set_set({1});
    }
    
    void numberobj_39_init() {
        this->numberobj_39_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-5"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    void message_30_init() {
        this->message_30_set_set({1});
    }
    
    void message_31_init() {
        this->message_31_set_set({0});
    }
    
    void toggle_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_01_value_number;
    }
    
    void toggle_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_01_value_number_set(preset["value"]);
    }
    
    void numberobj_40_init() {
        this->numberobj_40_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-58"), 1, this->_currentTime);
    }
    
    void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_40_value;
    }
    
    void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_40_value_set(preset["value"]);
    }
    
    void message_32_init() {
        this->message_32_set_set({2});
    }
    
    void message_33_init() {
        this->message_33_set_set({1});
    }
    
    void message_34_init() {
        this->message_34_set_set({1});
    }
    
    void numberobj_41_init() {
        this->numberobj_41_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_41_value;
    }
    
    void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_41_value_set(preset["value"]);
    }
    
    void message_35_init() {
        this->message_35_set_set({
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        });
    }
    
    void message_36_init() {
        this->message_36_set_set({0});
    }
    
    void numberobj_42_init() {
        this->numberobj_42_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-7"), 1, this->_currentTime);
    }
    
    void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_42_value;
    }
    
    void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_42_value_set(preset["value"]);
    }
    
    void numberobj_43_init() {
        this->numberobj_43_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-8"), 1, this->_currentTime);
    }
    
    void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_43_value;
    }
    
    void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_43_value_set(preset["value"]);
    }
    
    void message_37_init() {
        this->message_37_set_set({0, 0});
    }
    
    void numberobj_44_init() {
        this->numberobj_44_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_44_value;
    }
    
    void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_44_value_set(preset["value"]);
    }
    
    void numberobj_45_init() {
        this->numberobj_45_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-10"), 1, this->_currentTime);
    }
    
    void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_45_value;
    }
    
    void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_45_value_set(preset["value"]);
    }
    
    void numberobj_46_init() {
        this->numberobj_46_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-15"), 1, this->_currentTime);
    }
    
    void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_46_value;
    }
    
    void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_46_value_set(preset["value"]);
    }
    
    void numberobj_47_init() {
        this->numberobj_47_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_47_value;
    }
    
    void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_47_value_set(preset["value"]);
    }
    
    void numberobj_48_init() {
        this->numberobj_48_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-13"), 1, this->_currentTime);
    }
    
    void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_48_value;
    }
    
    void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_48_value_set(preset["value"]);
    }
    
    void numberobj_49_init() {
        this->numberobj_49_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_49_value;
    }
    
    void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_49_value_set(preset["value"]);
    }
    
    void numberobj_50_init() {
        this->numberobj_50_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_50_value;
    }
    
    void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_50_value_set(preset["value"]);
    }
    
    void numberobj_51_init() {
        this->numberobj_51_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-25"), 1, this->_currentTime);
    }
    
    void numberobj_51_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_51_value;
    }
    
    void numberobj_51_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_51_value_set(preset["value"]);
    }
    
    void numberobj_52_init() {
        this->numberobj_52_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-24"), 1, this->_currentTime);
    }
    
    void numberobj_52_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_52_value;
    }
    
    void numberobj_52_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_52_value_set(preset["value"]);
    }
    
    void numberobj_53_init() {
        this->numberobj_53_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_53_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_53_value;
    }
    
    void numberobj_53_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_53_value_set(preset["value"]);
    }
    
    void numberobj_54_init() {
        this->numberobj_54_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-22"), 1, this->_currentTime);
    }
    
    void numberobj_54_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_54_value;
    }
    
    void numberobj_54_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_54_value_set(preset["value"]);
    }
    
    void numberobj_55_init() {
        this->numberobj_55_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_55_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_55_value;
    }
    
    void numberobj_55_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_55_value_set(preset["value"]);
    }
    
    void numberobj_56_init() {
        this->numberobj_56_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_56_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_56_value;
    }
    
    void numberobj_56_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_56_value_set(preset["value"]);
    }
    
    void numberobj_57_init() {
        this->numberobj_57_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-19"), 1, this->_currentTime);
    }
    
    void numberobj_57_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_57_value;
    }
    
    void numberobj_57_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_57_value_set(preset["value"]);
    }
    
    void numberobj_58_init() {
        this->numberobj_58_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_58_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_58_value;
    }
    
    void numberobj_58_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_58_value_set(preset["value"]);
    }
    
    void numberobj_59_init() {
        this->numberobj_59_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-17"), 1, this->_currentTime);
    }
    
    void numberobj_59_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_59_value;
    }
    
    void numberobj_59_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_59_value_set(preset["value"]);
    }
    
    void numberobj_60_init() {
        this->numberobj_60_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_60_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_60_value;
    }
    
    void numberobj_60_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_60_value_set(preset["value"]);
    }
    
    void numberobj_61_init() {
        this->numberobj_61_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-45"), 1, this->_currentTime);
    }
    
    void numberobj_61_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_61_value;
    }
    
    void numberobj_61_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_61_value_set(preset["value"]);
    }
    
    void numberobj_62_init() {
        this->numberobj_62_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-44"), 1, this->_currentTime);
    }
    
    void numberobj_62_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_62_value;
    }
    
    void numberobj_62_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_62_value_set(preset["value"]);
    }
    
    void numberobj_63_init() {
        this->numberobj_63_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-43"), 1, this->_currentTime);
    }
    
    void numberobj_63_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_63_value;
    }
    
    void numberobj_63_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_63_value_set(preset["value"]);
    }
    
    void numberobj_64_init() {
        this->numberobj_64_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-42"), 1, this->_currentTime);
    }
    
    void numberobj_64_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_64_value;
    }
    
    void numberobj_64_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_64_value_set(preset["value"]);
    }
    
    void numberobj_65_init() {
        this->numberobj_65_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-41"), 1, this->_currentTime);
    }
    
    void numberobj_65_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_65_value;
    }
    
    void numberobj_65_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_65_value_set(preset["value"]);
    }
    
    void numberobj_66_init() {
        this->numberobj_66_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-40"), 1, this->_currentTime);
    }
    
    void numberobj_66_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_66_value;
    }
    
    void numberobj_66_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_66_value_set(preset["value"]);
    }
    
    void numberobj_67_init() {
        this->numberobj_67_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-39"), 1, this->_currentTime);
    }
    
    void numberobj_67_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_67_value;
    }
    
    void numberobj_67_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_67_value_set(preset["value"]);
    }
    
    void numberobj_68_init() {
        this->numberobj_68_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-38"), 1, this->_currentTime);
    }
    
    void numberobj_68_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_68_value;
    }
    
    void numberobj_68_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_68_value_set(preset["value"]);
    }
    
    void numberobj_69_init() {
        this->numberobj_69_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-37"), 1, this->_currentTime);
    }
    
    void numberobj_69_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_69_value;
    }
    
    void numberobj_69_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_69_value_set(preset["value"]);
    }
    
    void numberobj_70_init() {
        this->numberobj_70_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-36"), 1, this->_currentTime);
    }
    
    void numberobj_70_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_70_value;
    }
    
    void numberobj_70_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_70_value_set(preset["value"]);
    }
    
    void numberobj_71_init() {
        this->numberobj_71_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-35"), 1, this->_currentTime);
    }
    
    void numberobj_71_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_71_value;
    }
    
    void numberobj_71_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_71_value_set(preset["value"]);
    }
    
    void numberobj_72_init() {
        this->numberobj_72_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-34"), 1, this->_currentTime);
    }
    
    void numberobj_72_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_72_value;
    }
    
    void numberobj_72_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_72_value_set(preset["value"]);
    }
    
    void numberobj_73_init() {
        this->numberobj_73_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-33"), 1, this->_currentTime);
    }
    
    void numberobj_73_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_73_value;
    }
    
    void numberobj_73_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_73_value_set(preset["value"]);
    }
    
    void numberobj_74_init() {
        this->numberobj_74_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_74_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_74_value;
    }
    
    void numberobj_74_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_74_value_set(preset["value"]);
    }
    
    void numberobj_75_init() {
        this->numberobj_75_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-31"), 1, this->_currentTime);
    }
    
    void numberobj_75_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_75_value;
    }
    
    void numberobj_75_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_75_value_set(preset["value"]);
    }
    
    void numberobj_76_init() {
        this->numberobj_76_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-30"), 1, this->_currentTime);
    }
    
    void numberobj_76_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_76_value;
    }
    
    void numberobj_76_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_76_value_set(preset["value"]);
    }
    
    void numberobj_77_init() {
        this->numberobj_77_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-29"), 1, this->_currentTime);
    }
    
    void numberobj_77_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_77_value;
    }
    
    void numberobj_77_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_77_value_set(preset["value"]);
    }
    
    void numberobj_78_init() {
        this->numberobj_78_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-28"), 1, this->_currentTime);
    }
    
    void numberobj_78_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_78_value;
    }
    
    void numberobj_78_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_78_value_set(preset["value"]);
    }
    
    void numberobj_79_init() {
        this->numberobj_79_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-27"), 1, this->_currentTime);
    }
    
    void numberobj_79_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_79_value;
    }
    
    void numberobj_79_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_79_value_set(preset["value"]);
    }
    
    void numberobj_80_init() {
        this->numberobj_80_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_80_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_80_value;
    }
    
    void numberobj_80_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_80_value_set(preset["value"]);
    }
    
    void numberobj_81_init() {
        this->numberobj_81_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-55"), 1, this->_currentTime);
    }
    
    void numberobj_81_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_81_value;
    }
    
    void numberobj_81_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_81_value_set(preset["value"]);
    }
    
    void numberobj_82_init() {
        this->numberobj_82_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_82_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_82_value;
    }
    
    void numberobj_82_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_82_value_set(preset["value"]);
    }
    
    void numberobj_83_init() {
        this->numberobj_83_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-53"), 1, this->_currentTime);
    }
    
    void numberobj_83_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_83_value;
    }
    
    void numberobj_83_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_83_value_set(preset["value"]);
    }
    
    void numberobj_84_init() {
        this->numberobj_84_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-52"), 1, this->_currentTime);
    }
    
    void numberobj_84_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_84_value;
    }
    
    void numberobj_84_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_84_value_set(preset["value"]);
    }
    
    void numberobj_85_init() {
        this->numberobj_85_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-51"), 1, this->_currentTime);
    }
    
    void numberobj_85_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_85_value;
    }
    
    void numberobj_85_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_85_value_set(preset["value"]);
    }
    
    void numberobj_86_init() {
        this->numberobj_86_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-50"), 1, this->_currentTime);
    }
    
    void numberobj_86_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_86_value;
    }
    
    void numberobj_86_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_86_value_set(preset["value"]);
    }
    
    void numberobj_87_init() {
        this->numberobj_87_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-49"), 1, this->_currentTime);
    }
    
    void numberobj_87_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_87_value;
    }
    
    void numberobj_87_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_87_value_set(preset["value"]);
    }
    
    void numberobj_88_init() {
        this->numberobj_88_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-48"), 1, this->_currentTime);
    }
    
    void numberobj_88_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_88_value;
    }
    
    void numberobj_88_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_88_value_set(preset["value"]);
    }
    
    void numberobj_89_init() {
        this->numberobj_89_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-47"), 1, this->_currentTime);
    }
    
    void numberobj_89_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_89_value;
    }
    
    void numberobj_89_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_89_value_set(preset["value"]);
    }
    
    void numberobj_90_init() {
        this->numberobj_90_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-46"), 1, this->_currentTime);
    }
    
    void numberobj_90_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_90_value;
    }
    
    void numberobj_90_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_90_value_set(preset["value"]);
    }
    
    void numberobj_91_init() {
        this->numberobj_91_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-140"), 1, this->_currentTime);
    }
    
    void numberobj_91_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_91_value;
    }
    
    void numberobj_91_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_91_value_set(preset["value"]);
    }
    
    void numberobj_92_init() {
        this->numberobj_92_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-139"), 1, this->_currentTime);
    }
    
    void numberobj_92_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_92_value;
    }
    
    void numberobj_92_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_92_value_set(preset["value"]);
    }
    
    void numberobj_93_init() {
        this->numberobj_93_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-138"), 1, this->_currentTime);
    }
    
    void numberobj_93_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_93_value;
    }
    
    void numberobj_93_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_93_value_set(preset["value"]);
    }
    
    void numberobj_94_init() {
        this->numberobj_94_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-137"), 1, this->_currentTime);
    }
    
    void numberobj_94_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_94_value;
    }
    
    void numberobj_94_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_94_value_set(preset["value"]);
    }
    
    void numberobj_95_init() {
        this->numberobj_95_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-136"), 1, this->_currentTime);
    }
    
    void numberobj_95_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_95_value;
    }
    
    void numberobj_95_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_95_value_set(preset["value"]);
    }
    
    void numberobj_96_init() {
        this->numberobj_96_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-135"), 1, this->_currentTime);
    }
    
    void numberobj_96_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_96_value;
    }
    
    void numberobj_96_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_96_value_set(preset["value"]);
    }
    
    void numberobj_97_init() {
        this->numberobj_97_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-134"), 1, this->_currentTime);
    }
    
    void numberobj_97_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_97_value;
    }
    
    void numberobj_97_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_97_value_set(preset["value"]);
    }
    
    void numberobj_98_init() {
        this->numberobj_98_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-133"), 1, this->_currentTime);
    }
    
    void numberobj_98_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_98_value;
    }
    
    void numberobj_98_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_98_value_set(preset["value"]);
    }
    
    void numberobj_99_init() {
        this->numberobj_99_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-132"), 1, this->_currentTime);
    }
    
    void numberobj_99_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_99_value;
    }
    
    void numberobj_99_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_99_value_set(preset["value"]);
    }
    
    void numberobj_100_init() {
        this->numberobj_100_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-131"), 1, this->_currentTime);
    }
    
    void numberobj_100_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_100_value;
    }
    
    void numberobj_100_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_100_value_set(preset["value"]);
    }
    
    void numberobj_101_init() {
        this->numberobj_101_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-130"), 1, this->_currentTime);
    }
    
    void numberobj_101_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_101_value;
    }
    
    void numberobj_101_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_101_value_set(preset["value"]);
    }
    
    void numberobj_102_init() {
        this->numberobj_102_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-129"), 1, this->_currentTime);
    }
    
    void numberobj_102_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_102_value;
    }
    
    void numberobj_102_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_102_value_set(preset["value"]);
    }
    
    void numberobj_103_init() {
        this->numberobj_103_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-128"), 1, this->_currentTime);
    }
    
    void numberobj_103_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_103_value;
    }
    
    void numberobj_103_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_103_value_set(preset["value"]);
    }
    
    void numberobj_104_init() {
        this->numberobj_104_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-127"), 1, this->_currentTime);
    }
    
    void numberobj_104_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_104_value;
    }
    
    void numberobj_104_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_104_value_set(preset["value"]);
    }
    
    void numberobj_105_init() {
        this->numberobj_105_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-126"), 1, this->_currentTime);
    }
    
    void numberobj_105_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_105_value;
    }
    
    void numberobj_105_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_105_value_set(preset["value"]);
    }
    
    void numberobj_106_init() {
        this->numberobj_106_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-125"), 1, this->_currentTime);
    }
    
    void numberobj_106_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_106_value;
    }
    
    void numberobj_106_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_106_value_set(preset["value"]);
    }
    
    void numberobj_107_init() {
        this->numberobj_107_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-124"), 1, this->_currentTime);
    }
    
    void numberobj_107_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_107_value;
    }
    
    void numberobj_107_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_107_value_set(preset["value"]);
    }
    
    void numberobj_108_init() {
        this->numberobj_108_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-123"), 1, this->_currentTime);
    }
    
    void numberobj_108_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_108_value;
    }
    
    void numberobj_108_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_108_value_set(preset["value"]);
    }
    
    void numberobj_109_init() {
        this->numberobj_109_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-122"), 1, this->_currentTime);
    }
    
    void numberobj_109_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_109_value;
    }
    
    void numberobj_109_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_109_value_set(preset["value"]);
    }
    
    void numberobj_110_init() {
        this->numberobj_110_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-121"), 1, this->_currentTime);
    }
    
    void numberobj_110_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_110_value;
    }
    
    void numberobj_110_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_110_value_set(preset["value"]);
    }
    
    void numberobj_111_init() {
        this->numberobj_111_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-120"), 1, this->_currentTime);
    }
    
    void numberobj_111_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_111_value;
    }
    
    void numberobj_111_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_111_value_set(preset["value"]);
    }
    
    void numberobj_112_init() {
        this->numberobj_112_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_112_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_112_value;
    }
    
    void numberobj_112_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_112_value_set(preset["value"]);
    }
    
    void numberobj_113_init() {
        this->numberobj_113_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-118"), 1, this->_currentTime);
    }
    
    void numberobj_113_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_113_value;
    }
    
    void numberobj_113_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_113_value_set(preset["value"]);
    }
    
    void numberobj_114_init() {
        this->numberobj_114_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-117"), 1, this->_currentTime);
    }
    
    void numberobj_114_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_114_value;
    }
    
    void numberobj_114_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_114_value_set(preset["value"]);
    }
    
    void numberobj_115_init() {
        this->numberobj_115_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-116"), 1, this->_currentTime);
    }
    
    void numberobj_115_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_115_value;
    }
    
    void numberobj_115_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_115_value_set(preset["value"]);
    }
    
    void numberobj_116_init() {
        this->numberobj_116_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-115"), 1, this->_currentTime);
    }
    
    void numberobj_116_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_116_value;
    }
    
    void numberobj_116_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_116_value_set(preset["value"]);
    }
    
    void numberobj_117_init() {
        this->numberobj_117_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-114"), 1, this->_currentTime);
    }
    
    void numberobj_117_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_117_value;
    }
    
    void numberobj_117_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_117_value_set(preset["value"]);
    }
    
    void numberobj_118_init() {
        this->numberobj_118_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-113"), 1, this->_currentTime);
    }
    
    void numberobj_118_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_118_value;
    }
    
    void numberobj_118_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_118_value_set(preset["value"]);
    }
    
    void numberobj_119_init() {
        this->numberobj_119_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-112"), 1, this->_currentTime);
    }
    
    void numberobj_119_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_119_value;
    }
    
    void numberobj_119_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_119_value_set(preset["value"]);
    }
    
    void numberobj_120_init() {
        this->numberobj_120_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-111"), 1, this->_currentTime);
    }
    
    void numberobj_120_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_120_value;
    }
    
    void numberobj_120_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_120_value_set(preset["value"]);
    }
    
    void numberobj_121_init() {
        this->numberobj_121_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-110"), 1, this->_currentTime);
    }
    
    void numberobj_121_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_121_value;
    }
    
    void numberobj_121_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_121_value_set(preset["value"]);
    }
    
    void numberobj_122_init() {
        this->numberobj_122_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-109"), 1, this->_currentTime);
    }
    
    void numberobj_122_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_122_value;
    }
    
    void numberobj_122_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_122_value_set(preset["value"]);
    }
    
    void numberobj_123_init() {
        this->numberobj_123_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-106"), 1, this->_currentTime);
    }
    
    void numberobj_123_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_123_value;
    }
    
    void numberobj_123_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_123_value_set(preset["value"]);
    }
    
    void numberobj_124_init() {
        this->numberobj_124_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-105"), 1, this->_currentTime);
    }
    
    void numberobj_124_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_124_value;
    }
    
    void numberobj_124_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_124_value_set(preset["value"]);
    }
    
    void numberobj_125_init() {
        this->numberobj_125_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-103"), 1, this->_currentTime);
    }
    
    void numberobj_125_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_125_value;
    }
    
    void numberobj_125_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_125_value_set(preset["value"]);
    }
    
    void numberobj_126_init() {
        this->numberobj_126_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-101"), 1, this->_currentTime);
    }
    
    void numberobj_126_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_126_value;
    }
    
    void numberobj_126_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_126_value_set(preset["value"]);
    }
    
    void numberobj_127_init() {
        this->numberobj_127_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-100"), 1, this->_currentTime);
    }
    
    void numberobj_127_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_127_value;
    }
    
    void numberobj_127_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_127_value_set(preset["value"]);
    }
    
    void numberobj_128_init() {
        this->numberobj_128_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-99"), 1, this->_currentTime);
    }
    
    void numberobj_128_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_128_value;
    }
    
    void numberobj_128_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_128_value_set(preset["value"]);
    }
    
    void numberobj_129_init() {
        this->numberobj_129_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-98"), 1, this->_currentTime);
    }
    
    void numberobj_129_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_129_value;
    }
    
    void numberobj_129_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_129_value_set(preset["value"]);
    }
    
    void numberobj_130_init() {
        this->numberobj_130_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-97"), 1, this->_currentTime);
    }
    
    void numberobj_130_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_130_value;
    }
    
    void numberobj_130_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_130_value_set(preset["value"]);
    }
    
    void numberobj_131_init() {
        this->numberobj_131_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-96"), 1, this->_currentTime);
    }
    
    void numberobj_131_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_131_value;
    }
    
    void numberobj_131_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_131_value_set(preset["value"]);
    }
    
    void numberobj_132_init() {
        this->numberobj_132_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-95"), 1, this->_currentTime);
    }
    
    void numberobj_132_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_132_value;
    }
    
    void numberobj_132_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_132_value_set(preset["value"]);
    }
    
    void numberobj_133_init() {
        this->numberobj_133_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-93"), 1, this->_currentTime);
    }
    
    void numberobj_133_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_133_value;
    }
    
    void numberobj_133_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_133_value_set(preset["value"]);
    }
    
    void numberobj_134_init() {
        this->numberobj_134_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-89"), 1, this->_currentTime);
    }
    
    void numberobj_134_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_134_value;
    }
    
    void numberobj_134_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_134_value_set(preset["value"]);
    }
    
    void numberobj_135_init() {
        this->numberobj_135_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-87"), 1, this->_currentTime);
    }
    
    void numberobj_135_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_135_value;
    }
    
    void numberobj_135_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_135_value_set(preset["value"]);
    }
    
    void numberobj_136_init() {
        this->numberobj_136_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-83"), 1, this->_currentTime);
    }
    
    void numberobj_136_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_136_value;
    }
    
    void numberobj_136_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_136_value_set(preset["value"]);
    }
    
    void numberobj_137_init() {
        this->numberobj_137_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-81"), 1, this->_currentTime);
    }
    
    void numberobj_137_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_137_value;
    }
    
    void numberobj_137_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_137_value_set(preset["value"]);
    }
    
    void numberobj_138_init() {
        this->numberobj_138_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-80"), 1, this->_currentTime);
    }
    
    void numberobj_138_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_138_value;
    }
    
    void numberobj_138_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_138_value_set(preset["value"]);
    }
    
    void numberobj_139_init() {
        this->numberobj_139_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-79"), 1, this->_currentTime);
    }
    
    void numberobj_139_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_139_value;
    }
    
    void numberobj_139_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_139_value_set(preset["value"]);
    }
    
    void numberobj_140_init() {
        this->numberobj_140_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort[1]/number_obj-65"), 1, this->_currentTime);
    }
    
    void numberobj_140_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_140_value;
    }
    
    void numberobj_140_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_140_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        gate_17_onoff = 0;
        gate_17_out1_number = 0;
        gate_17_out2_number = 0;
        accum_01_x = 0;
        accum_01_reset = 0;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        toggle_01_value_number = 0;
        toggle_01_value_number_setter(toggle_01_value_number);
        receive_21_output_number = 0;
        select_20_test1 = 1;
        numberobj_40_value = 0;
        numberobj_40_value_setter(numberobj_40_value);
        pak_02_in1 = 0;
        pak_02_in2 = 0;
        pak_02_in3 = 0;
        pak_02_in4 = 0;
        pak_02_in5 = 0;
        pak_02_in6 = 0;
        pak_02_in7 = 0;
        pak_02_in8 = 0;
        pak_02_in9 = 0;
        pak_02_in10 = 0;
        pak_02_in11 = 0;
        pak_02_in12 = 0;
        pak_02_in13 = 0;
        pak_02_in14 = 0;
        pak_02_in15 = 0;
        pak_02_in16 = 0;
        pak_02_in17 = 0;
        pak_02_in18 = 0;
        pak_02_in19 = 0;
        pak_02_in20 = 0;
        pak_02_in21 = 0;
        pak_02_in22 = 0;
        pak_02_in23 = 0;
        pak_02_in24 = 0;
        pak_02_in25 = 0;
        pak_02_in26 = 0;
        pak_02_in27 = 0;
        pak_02_in28 = 0;
        pak_02_in29 = 0;
        pak_02_in30 = 0;
        pak_02_in31 = 0;
        pak_02_in32 = 0;
        pak_02_in33 = 0;
        pak_02_in34 = 0;
        pak_02_in35 = 0;
        pak_02_in36 = 0;
        pak_02_in37 = 0;
        pak_02_in38 = 0;
        pak_02_in39 = 0;
        pak_02_in40 = 0;
        pak_02_in41 = 0;
        pak_02_in42 = 0;
        pak_02_in43 = 0;
        pak_02_in44 = 0;
        pak_02_in45 = 0;
        pak_02_in46 = 0;
        pak_02_in47 = 0;
        pak_02_in48 = 0;
        pak_02_in49 = 0;
        pak_02_in50 = 0;
        pak_02_in51 = 0;
        pak_02_in52 = 0;
        pak_02_in53 = 0;
        pak_02_in54 = 0;
        pak_02_in55 = 0;
        pak_02_in56 = 0;
        pak_02_in57 = 0;
        pak_02_in58 = 0;
        pak_02_in59 = 0;
        pak_02_in60 = 0;
        pak_02_in61 = 0;
        pak_02_in62 = 0;
        pak_02_in63 = 0;
        pak_02_in64 = 0;
        pak_02_in65 = 0;
        pak_02_in66 = 0;
        pak_02_in67 = 0;
        pak_02_in68 = 0;
        pak_02_in69 = 0;
        pak_02_in70 = 0;
        pak_02_in71 = 0;
        pak_02_in72 = 0;
        pak_02_in73 = 0;
        pak_02_in74 = 0;
        pak_02_in75 = 0;
        pak_02_in76 = 0;
        pak_02_in77 = 0;
        pak_02_in78 = 0;
        pak_02_in79 = 0;
        pak_02_in80 = 0;
        pak_02_in81 = 0;
        pak_02_in82 = 0;
        pak_02_in83 = 0;
        pak_02_in84 = 0;
        pak_02_in85 = 0;
        pak_02_in86 = 0;
        pak_02_in87 = 0;
        pak_02_in88 = 0;
        pak_02_in89 = 0;
        pak_02_in90 = 0;
        pak_02_in91 = 0;
        pak_02_in92 = 0;
        pak_02_in93 = 0;
        pak_02_in94 = 0;
        pak_02_in95 = 0;
        pak_02_in96 = 0;
        pak_02_in97 = 0;
        pak_02_in98 = 0;
        pak_02_in99 = 0;
        pak_02_in100 = 0;
        numberobj_41_value = 0;
        numberobj_41_value_setter(numberobj_41_value);
        route_01_selector1 = 1;
        route_01_selector2 = 2;
        route_01_selector3 = 3;
        route_01_selector4 = 4;
        route_01_selector5 = 5;
        route_01_selector6 = 6;
        route_01_selector7 = 7;
        route_01_selector8 = 8;
        route_01_selector9 = 9;
        route_01_selector10 = 10;
        route_01_selector11 = 11;
        route_01_selector12 = 12;
        route_01_selector13 = 13;
        route_01_selector14 = 14;
        route_01_selector15 = 15;
        route_01_selector16 = 16;
        route_01_selector17 = 17;
        route_01_selector18 = 18;
        route_01_selector19 = 19;
        route_01_selector20 = 20;
        route_01_selector21 = 21;
        route_01_selector22 = 22;
        route_01_selector23 = 23;
        route_01_selector24 = 24;
        route_01_selector25 = 25;
        route_01_selector26 = 26;
        route_01_selector27 = 27;
        route_01_selector28 = 28;
        route_01_selector29 = 29;
        route_01_selector30 = 30;
        route_01_selector31 = 31;
        route_01_selector32 = 32;
        route_01_selector33 = 33;
        route_01_selector34 = 34;
        route_01_selector35 = 35;
        route_01_selector36 = 36;
        route_01_selector37 = 37;
        route_01_selector38 = 38;
        route_01_selector39 = 39;
        route_01_selector40 = 40;
        route_01_selector41 = 41;
        route_01_selector42 = 42;
        route_01_selector43 = 43;
        route_01_selector44 = 44;
        route_01_selector45 = 45;
        route_01_selector46 = 46;
        route_01_selector47 = 47;
        route_01_selector48 = 48;
        route_01_selector49 = 49;
        route_01_selector50 = 50;
        route_01_selector51 = 51;
        route_01_selector52 = 52;
        route_01_selector53 = 53;
        route_01_selector54 = 54;
        route_01_selector55 = 55;
        route_01_selector56 = 56;
        route_01_selector57 = 57;
        route_01_selector58 = 58;
        route_01_selector59 = 59;
        route_01_selector60 = 60;
        route_01_selector61 = 61;
        route_01_selector62 = 62;
        route_01_selector63 = 63;
        route_01_selector64 = 64;
        route_01_selector65 = 65;
        route_01_selector66 = 66;
        route_01_selector67 = 67;
        route_01_selector68 = 68;
        route_01_selector69 = 69;
        route_01_selector70 = 70;
        route_01_selector71 = 71;
        route_01_selector72 = 72;
        route_01_selector73 = 73;
        route_01_selector74 = 74;
        route_01_selector75 = 75;
        route_01_selector76 = 76;
        route_01_selector77 = 77;
        route_01_selector78 = 78;
        route_01_selector79 = 79;
        route_01_selector80 = 80;
        route_01_selector81 = 81;
        route_01_selector82 = 82;
        route_01_selector83 = 83;
        route_01_selector84 = 84;
        route_01_selector85 = 85;
        route_01_selector86 = 86;
        route_01_selector87 = 87;
        route_01_selector88 = 88;
        route_01_selector89 = 89;
        route_01_selector90 = 90;
        route_01_selector91 = 91;
        route_01_selector92 = 92;
        route_01_selector93 = 93;
        route_01_selector94 = 94;
        route_01_selector95 = 95;
        route_01_selector96 = 96;
        route_01_selector97 = 97;
        route_01_selector98 = 98;
        route_01_selector99 = 99;
        route_01_selector100 = 100;
        numberobj_42_value = 0;
        numberobj_42_value_setter(numberobj_42_value);
        expr_44_in1 = 0;
        expr_44_in2 = 1;
        expr_44_out1 = 0;
        numberobj_43_value = 0;
        numberobj_43_value_setter(numberobj_43_value);
        numberobj_44_value = 0;
        numberobj_44_value_setter(numberobj_44_value);
        pack_01_in1 = 0;
        pack_01_in2 = 0;
        expr_45_in1 = 0;
        expr_45_in2 = 1;
        expr_45_out1 = 0;
        numberobj_45_value = 0;
        numberobj_45_value_setter(numberobj_45_value);
        numberobj_46_value = 0;
        numberobj_46_value_setter(numberobj_46_value);
        numberobj_47_value = 0;
        numberobj_47_value_setter(numberobj_47_value);
        numberobj_48_value = 0;
        numberobj_48_value_setter(numberobj_48_value);
        numberobj_49_value = 0;
        numberobj_49_value_setter(numberobj_49_value);
        numberobj_50_value = 0;
        numberobj_50_value_setter(numberobj_50_value);
        numberobj_51_value = 0;
        numberobj_51_value_setter(numberobj_51_value);
        numberobj_52_value = 0;
        numberobj_52_value_setter(numberobj_52_value);
        numberobj_53_value = 0;
        numberobj_53_value_setter(numberobj_53_value);
        numberobj_54_value = 0;
        numberobj_54_value_setter(numberobj_54_value);
        numberobj_55_value = 0;
        numberobj_55_value_setter(numberobj_55_value);
        numberobj_56_value = 0;
        numberobj_56_value_setter(numberobj_56_value);
        numberobj_57_value = 0;
        numberobj_57_value_setter(numberobj_57_value);
        numberobj_58_value = 0;
        numberobj_58_value_setter(numberobj_58_value);
        numberobj_59_value = 0;
        numberobj_59_value_setter(numberobj_59_value);
        numberobj_60_value = 0;
        numberobj_60_value_setter(numberobj_60_value);
        numberobj_61_value = 0;
        numberobj_61_value_setter(numberobj_61_value);
        numberobj_62_value = 0;
        numberobj_62_value_setter(numberobj_62_value);
        numberobj_63_value = 0;
        numberobj_63_value_setter(numberobj_63_value);
        numberobj_64_value = 0;
        numberobj_64_value_setter(numberobj_64_value);
        numberobj_65_value = 0;
        numberobj_65_value_setter(numberobj_65_value);
        numberobj_66_value = 0;
        numberobj_66_value_setter(numberobj_66_value);
        numberobj_67_value = 0;
        numberobj_67_value_setter(numberobj_67_value);
        numberobj_68_value = 0;
        numberobj_68_value_setter(numberobj_68_value);
        numberobj_69_value = 0;
        numberobj_69_value_setter(numberobj_69_value);
        numberobj_70_value = 0;
        numberobj_70_value_setter(numberobj_70_value);
        numberobj_71_value = 0;
        numberobj_71_value_setter(numberobj_71_value);
        numberobj_72_value = 0;
        numberobj_72_value_setter(numberobj_72_value);
        numberobj_73_value = 0;
        numberobj_73_value_setter(numberobj_73_value);
        numberobj_74_value = 0;
        numberobj_74_value_setter(numberobj_74_value);
        numberobj_75_value = 0;
        numberobj_75_value_setter(numberobj_75_value);
        numberobj_76_value = 0;
        numberobj_76_value_setter(numberobj_76_value);
        numberobj_77_value = 0;
        numberobj_77_value_setter(numberobj_77_value);
        numberobj_78_value = 0;
        numberobj_78_value_setter(numberobj_78_value);
        numberobj_79_value = 0;
        numberobj_79_value_setter(numberobj_79_value);
        numberobj_80_value = 0;
        numberobj_80_value_setter(numberobj_80_value);
        numberobj_81_value = 0;
        numberobj_81_value_setter(numberobj_81_value);
        numberobj_82_value = 0;
        numberobj_82_value_setter(numberobj_82_value);
        numberobj_83_value = 0;
        numberobj_83_value_setter(numberobj_83_value);
        numberobj_84_value = 0;
        numberobj_84_value_setter(numberobj_84_value);
        numberobj_85_value = 0;
        numberobj_85_value_setter(numberobj_85_value);
        numberobj_86_value = 0;
        numberobj_86_value_setter(numberobj_86_value);
        numberobj_87_value = 0;
        numberobj_87_value_setter(numberobj_87_value);
        numberobj_88_value = 0;
        numberobj_88_value_setter(numberobj_88_value);
        numberobj_89_value = 0;
        numberobj_89_value_setter(numberobj_89_value);
        numberobj_90_value = 0;
        numberobj_90_value_setter(numberobj_90_value);
        numberobj_91_value = 0;
        numberobj_91_value_setter(numberobj_91_value);
        numberobj_92_value = 0;
        numberobj_92_value_setter(numberobj_92_value);
        numberobj_93_value = 0;
        numberobj_93_value_setter(numberobj_93_value);
        numberobj_94_value = 0;
        numberobj_94_value_setter(numberobj_94_value);
        numberobj_95_value = 0;
        numberobj_95_value_setter(numberobj_95_value);
        numberobj_96_value = 0;
        numberobj_96_value_setter(numberobj_96_value);
        numberobj_97_value = 0;
        numberobj_97_value_setter(numberobj_97_value);
        numberobj_98_value = 0;
        numberobj_98_value_setter(numberobj_98_value);
        numberobj_99_value = 0;
        numberobj_99_value_setter(numberobj_99_value);
        numberobj_100_value = 0;
        numberobj_100_value_setter(numberobj_100_value);
        numberobj_101_value = 0;
        numberobj_101_value_setter(numberobj_101_value);
        numberobj_102_value = 0;
        numberobj_102_value_setter(numberobj_102_value);
        numberobj_103_value = 0;
        numberobj_103_value_setter(numberobj_103_value);
        numberobj_104_value = 0;
        numberobj_104_value_setter(numberobj_104_value);
        numberobj_105_value = 0;
        numberobj_105_value_setter(numberobj_105_value);
        numberobj_106_value = 0;
        numberobj_106_value_setter(numberobj_106_value);
        numberobj_107_value = 0;
        numberobj_107_value_setter(numberobj_107_value);
        numberobj_108_value = 0;
        numberobj_108_value_setter(numberobj_108_value);
        numberobj_109_value = 0;
        numberobj_109_value_setter(numberobj_109_value);
        numberobj_110_value = 0;
        numberobj_110_value_setter(numberobj_110_value);
        numberobj_111_value = 0;
        numberobj_111_value_setter(numberobj_111_value);
        numberobj_112_value = 0;
        numberobj_112_value_setter(numberobj_112_value);
        numberobj_113_value = 0;
        numberobj_113_value_setter(numberobj_113_value);
        numberobj_114_value = 0;
        numberobj_114_value_setter(numberobj_114_value);
        numberobj_115_value = 0;
        numberobj_115_value_setter(numberobj_115_value);
        numberobj_116_value = 0;
        numberobj_116_value_setter(numberobj_116_value);
        numberobj_117_value = 0;
        numberobj_117_value_setter(numberobj_117_value);
        numberobj_118_value = 0;
        numberobj_118_value_setter(numberobj_118_value);
        numberobj_119_value = 0;
        numberobj_119_value_setter(numberobj_119_value);
        numberobj_120_value = 0;
        numberobj_120_value_setter(numberobj_120_value);
        numberobj_121_value = 0;
        numberobj_121_value_setter(numberobj_121_value);
        numberobj_122_value = 0;
        numberobj_122_value_setter(numberobj_122_value);
        numberobj_123_value = 0;
        numberobj_123_value_setter(numberobj_123_value);
        numberobj_124_value = 0;
        numberobj_124_value_setter(numberobj_124_value);
        numberobj_125_value = 0;
        numberobj_125_value_setter(numberobj_125_value);
        numberobj_126_value = 0;
        numberobj_126_value_setter(numberobj_126_value);
        numberobj_127_value = 0;
        numberobj_127_value_setter(numberobj_127_value);
        numberobj_128_value = 0;
        numberobj_128_value_setter(numberobj_128_value);
        numberobj_129_value = 0;
        numberobj_129_value_setter(numberobj_129_value);
        numberobj_130_value = 0;
        numberobj_130_value_setter(numberobj_130_value);
        numberobj_131_value = 0;
        numberobj_131_value_setter(numberobj_131_value);
        numberobj_132_value = 0;
        numberobj_132_value_setter(numberobj_132_value);
        numberobj_133_value = 0;
        numberobj_133_value_setter(numberobj_133_value);
        numberobj_134_value = 0;
        numberobj_134_value_setter(numberobj_134_value);
        numberobj_135_value = 0;
        numberobj_135_value_setter(numberobj_135_value);
        numberobj_136_value = 0;
        numberobj_136_value_setter(numberobj_136_value);
        numberobj_137_value = 0;
        numberobj_137_value_setter(numberobj_137_value);
        numberobj_138_value = 0;
        numberobj_138_value_setter(numberobj_138_value);
        numberobj_139_value = 0;
        numberobj_139_value_setter(numberobj_139_value);
        numberobj_140_value = 0;
        numberobj_140_value_setter(numberobj_140_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        accum_01_value = -1;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        toggle_01_lastValue = 0;
        numberobj_40_currentFormat = 6;
        numberobj_40_lastValue = 0;
        numberobj_41_currentFormat = 6;
        numberobj_41_lastValue = 0;
        numberobj_42_currentFormat = 6;
        numberobj_42_lastValue = 0;
        numberobj_43_currentFormat = 6;
        numberobj_43_lastValue = 0;
        numberobj_44_currentFormat = 6;
        numberobj_44_lastValue = 0;
        numberobj_45_currentFormat = 6;
        numberobj_45_lastValue = 0;
        numberobj_46_currentFormat = 6;
        numberobj_46_lastValue = 0;
        numberobj_47_currentFormat = 6;
        numberobj_47_lastValue = 0;
        numberobj_48_currentFormat = 6;
        numberobj_48_lastValue = 0;
        numberobj_49_currentFormat = 6;
        numberobj_49_lastValue = 0;
        numberobj_50_currentFormat = 6;
        numberobj_50_lastValue = 0;
        numberobj_51_currentFormat = 6;
        numberobj_51_lastValue = 0;
        numberobj_52_currentFormat = 6;
        numberobj_52_lastValue = 0;
        numberobj_53_currentFormat = 6;
        numberobj_53_lastValue = 0;
        numberobj_54_currentFormat = 6;
        numberobj_54_lastValue = 0;
        numberobj_55_currentFormat = 6;
        numberobj_55_lastValue = 0;
        numberobj_56_currentFormat = 6;
        numberobj_56_lastValue = 0;
        numberobj_57_currentFormat = 6;
        numberobj_57_lastValue = 0;
        numberobj_58_currentFormat = 6;
        numberobj_58_lastValue = 0;
        numberobj_59_currentFormat = 6;
        numberobj_59_lastValue = 0;
        numberobj_60_currentFormat = 6;
        numberobj_60_lastValue = 0;
        numberobj_61_currentFormat = 6;
        numberobj_61_lastValue = 0;
        numberobj_62_currentFormat = 6;
        numberobj_62_lastValue = 0;
        numberobj_63_currentFormat = 6;
        numberobj_63_lastValue = 0;
        numberobj_64_currentFormat = 6;
        numberobj_64_lastValue = 0;
        numberobj_65_currentFormat = 6;
        numberobj_65_lastValue = 0;
        numberobj_66_currentFormat = 6;
        numberobj_66_lastValue = 0;
        numberobj_67_currentFormat = 6;
        numberobj_67_lastValue = 0;
        numberobj_68_currentFormat = 6;
        numberobj_68_lastValue = 0;
        numberobj_69_currentFormat = 6;
        numberobj_69_lastValue = 0;
        numberobj_70_currentFormat = 6;
        numberobj_70_lastValue = 0;
        numberobj_71_currentFormat = 6;
        numberobj_71_lastValue = 0;
        numberobj_72_currentFormat = 6;
        numberobj_72_lastValue = 0;
        numberobj_73_currentFormat = 6;
        numberobj_73_lastValue = 0;
        numberobj_74_currentFormat = 6;
        numberobj_74_lastValue = 0;
        numberobj_75_currentFormat = 6;
        numberobj_75_lastValue = 0;
        numberobj_76_currentFormat = 6;
        numberobj_76_lastValue = 0;
        numberobj_77_currentFormat = 6;
        numberobj_77_lastValue = 0;
        numberobj_78_currentFormat = 6;
        numberobj_78_lastValue = 0;
        numberobj_79_currentFormat = 6;
        numberobj_79_lastValue = 0;
        numberobj_80_currentFormat = 6;
        numberobj_80_lastValue = 0;
        numberobj_81_currentFormat = 6;
        numberobj_81_lastValue = 0;
        numberobj_82_currentFormat = 6;
        numberobj_82_lastValue = 0;
        numberobj_83_currentFormat = 6;
        numberobj_83_lastValue = 0;
        numberobj_84_currentFormat = 6;
        numberobj_84_lastValue = 0;
        numberobj_85_currentFormat = 6;
        numberobj_85_lastValue = 0;
        numberobj_86_currentFormat = 6;
        numberobj_86_lastValue = 0;
        numberobj_87_currentFormat = 6;
        numberobj_87_lastValue = 0;
        numberobj_88_currentFormat = 6;
        numberobj_88_lastValue = 0;
        numberobj_89_currentFormat = 6;
        numberobj_89_lastValue = 0;
        numberobj_90_currentFormat = 6;
        numberobj_90_lastValue = 0;
        numberobj_91_currentFormat = 6;
        numberobj_91_lastValue = 0;
        numberobj_92_currentFormat = 6;
        numberobj_92_lastValue = 0;
        numberobj_93_currentFormat = 6;
        numberobj_93_lastValue = 0;
        numberobj_94_currentFormat = 6;
        numberobj_94_lastValue = 0;
        numberobj_95_currentFormat = 6;
        numberobj_95_lastValue = 0;
        numberobj_96_currentFormat = 6;
        numberobj_96_lastValue = 0;
        numberobj_97_currentFormat = 6;
        numberobj_97_lastValue = 0;
        numberobj_98_currentFormat = 6;
        numberobj_98_lastValue = 0;
        numberobj_99_currentFormat = 6;
        numberobj_99_lastValue = 0;
        numberobj_100_currentFormat = 6;
        numberobj_100_lastValue = 0;
        numberobj_101_currentFormat = 6;
        numberobj_101_lastValue = 0;
        numberobj_102_currentFormat = 6;
        numberobj_102_lastValue = 0;
        numberobj_103_currentFormat = 6;
        numberobj_103_lastValue = 0;
        numberobj_104_currentFormat = 6;
        numberobj_104_lastValue = 0;
        numberobj_105_currentFormat = 6;
        numberobj_105_lastValue = 0;
        numberobj_106_currentFormat = 6;
        numberobj_106_lastValue = 0;
        numberobj_107_currentFormat = 6;
        numberobj_107_lastValue = 0;
        numberobj_108_currentFormat = 6;
        numberobj_108_lastValue = 0;
        numberobj_109_currentFormat = 6;
        numberobj_109_lastValue = 0;
        numberobj_110_currentFormat = 6;
        numberobj_110_lastValue = 0;
        numberobj_111_currentFormat = 6;
        numberobj_111_lastValue = 0;
        numberobj_112_currentFormat = 6;
        numberobj_112_lastValue = 0;
        numberobj_113_currentFormat = 6;
        numberobj_113_lastValue = 0;
        numberobj_114_currentFormat = 6;
        numberobj_114_lastValue = 0;
        numberobj_115_currentFormat = 6;
        numberobj_115_lastValue = 0;
        numberobj_116_currentFormat = 6;
        numberobj_116_lastValue = 0;
        numberobj_117_currentFormat = 6;
        numberobj_117_lastValue = 0;
        numberobj_118_currentFormat = 6;
        numberobj_118_lastValue = 0;
        numberobj_119_currentFormat = 6;
        numberobj_119_lastValue = 0;
        numberobj_120_currentFormat = 6;
        numberobj_120_lastValue = 0;
        numberobj_121_currentFormat = 6;
        numberobj_121_lastValue = 0;
        numberobj_122_currentFormat = 6;
        numberobj_122_lastValue = 0;
        numberobj_123_currentFormat = 6;
        numberobj_123_lastValue = 0;
        numberobj_124_currentFormat = 6;
        numberobj_124_lastValue = 0;
        numberobj_125_currentFormat = 6;
        numberobj_125_lastValue = 0;
        numberobj_126_currentFormat = 6;
        numberobj_126_lastValue = 0;
        numberobj_127_currentFormat = 6;
        numberobj_127_lastValue = 0;
        numberobj_128_currentFormat = 6;
        numberobj_128_lastValue = 0;
        numberobj_129_currentFormat = 6;
        numberobj_129_lastValue = 0;
        numberobj_130_currentFormat = 6;
        numberobj_130_lastValue = 0;
        numberobj_131_currentFormat = 6;
        numberobj_131_lastValue = 0;
        numberobj_132_currentFormat = 6;
        numberobj_132_lastValue = 0;
        numberobj_133_currentFormat = 6;
        numberobj_133_lastValue = 0;
        numberobj_134_currentFormat = 6;
        numberobj_134_lastValue = 0;
        numberobj_135_currentFormat = 6;
        numberobj_135_lastValue = 0;
        numberobj_136_currentFormat = 6;
        numberobj_136_lastValue = 0;
        numberobj_137_currentFormat = 6;
        numberobj_137_lastValue = 0;
        numberobj_138_currentFormat = 6;
        numberobj_138_lastValue = 0;
        numberobj_139_currentFormat = 6;
        numberobj_139_lastValue = 0;
        numberobj_140_currentFormat = 6;
        numberobj_140_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number gate_17_onoff;
        number gate_17_out1_number;
        list gate_17_out1_list;
        number gate_17_out2_number;
        list gate_17_out2_list;
        number accum_01_x;
        number accum_01_reset;
        list message_29_set;
        number numberobj_39_value;
        list message_30_set;
        list message_31_set;
        number toggle_01_value_number;
        number receive_21_output_number;
        list receive_21_output_list;
        number select_20_test1;
        number numberobj_40_value;
        list listlookup_01_input;
        list listlookup_01_lookup;
        list message_32_set;
        list message_33_set;
        list message_34_set;
        number pak_02_in1;
        number pak_02_in2;
        number pak_02_in3;
        number pak_02_in4;
        number pak_02_in5;
        number pak_02_in6;
        number pak_02_in7;
        number pak_02_in8;
        number pak_02_in9;
        number pak_02_in10;
        number pak_02_in11;
        number pak_02_in12;
        number pak_02_in13;
        number pak_02_in14;
        number pak_02_in15;
        number pak_02_in16;
        number pak_02_in17;
        number pak_02_in18;
        number pak_02_in19;
        number pak_02_in20;
        number pak_02_in21;
        number pak_02_in22;
        number pak_02_in23;
        number pak_02_in24;
        number pak_02_in25;
        number pak_02_in26;
        number pak_02_in27;
        number pak_02_in28;
        number pak_02_in29;
        number pak_02_in30;
        number pak_02_in31;
        number pak_02_in32;
        number pak_02_in33;
        number pak_02_in34;
        number pak_02_in35;
        number pak_02_in36;
        number pak_02_in37;
        number pak_02_in38;
        number pak_02_in39;
        number pak_02_in40;
        number pak_02_in41;
        number pak_02_in42;
        number pak_02_in43;
        number pak_02_in44;
        number pak_02_in45;
        number pak_02_in46;
        number pak_02_in47;
        number pak_02_in48;
        number pak_02_in49;
        number pak_02_in50;
        number pak_02_in51;
        number pak_02_in52;
        number pak_02_in53;
        number pak_02_in54;
        number pak_02_in55;
        number pak_02_in56;
        number pak_02_in57;
        number pak_02_in58;
        number pak_02_in59;
        number pak_02_in60;
        number pak_02_in61;
        number pak_02_in62;
        number pak_02_in63;
        number pak_02_in64;
        number pak_02_in65;
        number pak_02_in66;
        number pak_02_in67;
        number pak_02_in68;
        number pak_02_in69;
        number pak_02_in70;
        number pak_02_in71;
        number pak_02_in72;
        number pak_02_in73;
        number pak_02_in74;
        number pak_02_in75;
        number pak_02_in76;
        number pak_02_in77;
        number pak_02_in78;
        number pak_02_in79;
        number pak_02_in80;
        number pak_02_in81;
        number pak_02_in82;
        number pak_02_in83;
        number pak_02_in84;
        number pak_02_in85;
        number pak_02_in86;
        number pak_02_in87;
        number pak_02_in88;
        number pak_02_in89;
        number pak_02_in90;
        number pak_02_in91;
        number pak_02_in92;
        number pak_02_in93;
        number pak_02_in94;
        number pak_02_in95;
        number pak_02_in96;
        number pak_02_in97;
        number pak_02_in98;
        number pak_02_in99;
        number pak_02_in100;
        number numberobj_41_value;
        number route_01_selector1;
        number route_01_selector2;
        number route_01_selector3;
        number route_01_selector4;
        number route_01_selector5;
        number route_01_selector6;
        number route_01_selector7;
        number route_01_selector8;
        number route_01_selector9;
        number route_01_selector10;
        number route_01_selector11;
        number route_01_selector12;
        number route_01_selector13;
        number route_01_selector14;
        number route_01_selector15;
        number route_01_selector16;
        number route_01_selector17;
        number route_01_selector18;
        number route_01_selector19;
        number route_01_selector20;
        number route_01_selector21;
        number route_01_selector22;
        number route_01_selector23;
        number route_01_selector24;
        number route_01_selector25;
        number route_01_selector26;
        number route_01_selector27;
        number route_01_selector28;
        number route_01_selector29;
        number route_01_selector30;
        number route_01_selector31;
        number route_01_selector32;
        number route_01_selector33;
        number route_01_selector34;
        number route_01_selector35;
        number route_01_selector36;
        number route_01_selector37;
        number route_01_selector38;
        number route_01_selector39;
        number route_01_selector40;
        number route_01_selector41;
        number route_01_selector42;
        number route_01_selector43;
        number route_01_selector44;
        number route_01_selector45;
        number route_01_selector46;
        number route_01_selector47;
        number route_01_selector48;
        number route_01_selector49;
        number route_01_selector50;
        number route_01_selector51;
        number route_01_selector52;
        number route_01_selector53;
        number route_01_selector54;
        number route_01_selector55;
        number route_01_selector56;
        number route_01_selector57;
        number route_01_selector58;
        number route_01_selector59;
        number route_01_selector60;
        number route_01_selector61;
        number route_01_selector62;
        number route_01_selector63;
        number route_01_selector64;
        number route_01_selector65;
        number route_01_selector66;
        number route_01_selector67;
        number route_01_selector68;
        number route_01_selector69;
        number route_01_selector70;
        number route_01_selector71;
        number route_01_selector72;
        number route_01_selector73;
        number route_01_selector74;
        number route_01_selector75;
        number route_01_selector76;
        number route_01_selector77;
        number route_01_selector78;
        number route_01_selector79;
        number route_01_selector80;
        number route_01_selector81;
        number route_01_selector82;
        number route_01_selector83;
        number route_01_selector84;
        number route_01_selector85;
        number route_01_selector86;
        number route_01_selector87;
        number route_01_selector88;
        number route_01_selector89;
        number route_01_selector90;
        number route_01_selector91;
        number route_01_selector92;
        number route_01_selector93;
        number route_01_selector94;
        number route_01_selector95;
        number route_01_selector96;
        number route_01_selector97;
        number route_01_selector98;
        number route_01_selector99;
        number route_01_selector100;
        list message_35_set;
        list message_36_set;
        number numberobj_42_value;
        number expr_44_in1;
        number expr_44_in2;
        number expr_44_out1;
        number numberobj_43_value;
        list message_37_set;
        number numberobj_44_value;
        number pack_01_in1;
        number pack_01_in2;
        number expr_45_in1;
        number expr_45_in2;
        number expr_45_out1;
        number numberobj_45_value;
        number numberobj_46_value;
        number numberobj_47_value;
        number numberobj_48_value;
        number numberobj_49_value;
        number numberobj_50_value;
        number numberobj_51_value;
        number numberobj_52_value;
        number numberobj_53_value;
        number numberobj_54_value;
        number numberobj_55_value;
        number numberobj_56_value;
        number numberobj_57_value;
        number numberobj_58_value;
        number numberobj_59_value;
        number numberobj_60_value;
        number numberobj_61_value;
        number numberobj_62_value;
        number numberobj_63_value;
        number numberobj_64_value;
        number numberobj_65_value;
        number numberobj_66_value;
        number numberobj_67_value;
        number numberobj_68_value;
        number numberobj_69_value;
        number numberobj_70_value;
        number numberobj_71_value;
        number numberobj_72_value;
        number numberobj_73_value;
        number numberobj_74_value;
        number numberobj_75_value;
        number numberobj_76_value;
        number numberobj_77_value;
        number numberobj_78_value;
        number numberobj_79_value;
        number numberobj_80_value;
        number numberobj_81_value;
        number numberobj_82_value;
        number numberobj_83_value;
        number numberobj_84_value;
        number numberobj_85_value;
        number numberobj_86_value;
        number numberobj_87_value;
        number numberobj_88_value;
        number numberobj_89_value;
        number numberobj_90_value;
        number numberobj_91_value;
        number numberobj_92_value;
        number numberobj_93_value;
        number numberobj_94_value;
        number numberobj_95_value;
        number numberobj_96_value;
        number numberobj_97_value;
        number numberobj_98_value;
        number numberobj_99_value;
        number numberobj_100_value;
        number numberobj_101_value;
        number numberobj_102_value;
        number numberobj_103_value;
        number numberobj_104_value;
        number numberobj_105_value;
        number numberobj_106_value;
        number numberobj_107_value;
        number numberobj_108_value;
        number numberobj_109_value;
        number numberobj_110_value;
        number numberobj_111_value;
        number numberobj_112_value;
        number numberobj_113_value;
        number numberobj_114_value;
        number numberobj_115_value;
        number numberobj_116_value;
        number numberobj_117_value;
        number numberobj_118_value;
        number numberobj_119_value;
        number numberobj_120_value;
        number numberobj_121_value;
        number numberobj_122_value;
        number numberobj_123_value;
        number numberobj_124_value;
        number numberobj_125_value;
        number numberobj_126_value;
        number numberobj_127_value;
        number numberobj_128_value;
        number numberobj_129_value;
        number numberobj_130_value;
        number numberobj_131_value;
        number numberobj_132_value;
        number numberobj_133_value;
        number numberobj_134_value;
        number numberobj_135_value;
        number numberobj_136_value;
        number numberobj_137_value;
        number numberobj_138_value;
        number numberobj_139_value;
        number numberobj_140_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number accum_01_value;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        number toggle_01_lastValue;
        Int numberobj_40_currentFormat;
        number numberobj_40_lastValue;
        Int numberobj_41_currentFormat;
        number numberobj_41_lastValue;
        Int numberobj_42_currentFormat;
        number numberobj_42_lastValue;
        Int numberobj_43_currentFormat;
        number numberobj_43_lastValue;
        Int numberobj_44_currentFormat;
        number numberobj_44_lastValue;
        Int numberobj_45_currentFormat;
        number numberobj_45_lastValue;
        Int numberobj_46_currentFormat;
        number numberobj_46_lastValue;
        Int numberobj_47_currentFormat;
        number numberobj_47_lastValue;
        Int numberobj_48_currentFormat;
        number numberobj_48_lastValue;
        Int numberobj_49_currentFormat;
        number numberobj_49_lastValue;
        Int numberobj_50_currentFormat;
        number numberobj_50_lastValue;
        Int numberobj_51_currentFormat;
        number numberobj_51_lastValue;
        Int numberobj_52_currentFormat;
        number numberobj_52_lastValue;
        Int numberobj_53_currentFormat;
        number numberobj_53_lastValue;
        Int numberobj_54_currentFormat;
        number numberobj_54_lastValue;
        Int numberobj_55_currentFormat;
        number numberobj_55_lastValue;
        Int numberobj_56_currentFormat;
        number numberobj_56_lastValue;
        Int numberobj_57_currentFormat;
        number numberobj_57_lastValue;
        Int numberobj_58_currentFormat;
        number numberobj_58_lastValue;
        Int numberobj_59_currentFormat;
        number numberobj_59_lastValue;
        Int numberobj_60_currentFormat;
        number numberobj_60_lastValue;
        Int numberobj_61_currentFormat;
        number numberobj_61_lastValue;
        Int numberobj_62_currentFormat;
        number numberobj_62_lastValue;
        Int numberobj_63_currentFormat;
        number numberobj_63_lastValue;
        Int numberobj_64_currentFormat;
        number numberobj_64_lastValue;
        Int numberobj_65_currentFormat;
        number numberobj_65_lastValue;
        Int numberobj_66_currentFormat;
        number numberobj_66_lastValue;
        Int numberobj_67_currentFormat;
        number numberobj_67_lastValue;
        Int numberobj_68_currentFormat;
        number numberobj_68_lastValue;
        Int numberobj_69_currentFormat;
        number numberobj_69_lastValue;
        Int numberobj_70_currentFormat;
        number numberobj_70_lastValue;
        Int numberobj_71_currentFormat;
        number numberobj_71_lastValue;
        Int numberobj_72_currentFormat;
        number numberobj_72_lastValue;
        Int numberobj_73_currentFormat;
        number numberobj_73_lastValue;
        Int numberobj_74_currentFormat;
        number numberobj_74_lastValue;
        Int numberobj_75_currentFormat;
        number numberobj_75_lastValue;
        Int numberobj_76_currentFormat;
        number numberobj_76_lastValue;
        Int numberobj_77_currentFormat;
        number numberobj_77_lastValue;
        Int numberobj_78_currentFormat;
        number numberobj_78_lastValue;
        Int numberobj_79_currentFormat;
        number numberobj_79_lastValue;
        Int numberobj_80_currentFormat;
        number numberobj_80_lastValue;
        Int numberobj_81_currentFormat;
        number numberobj_81_lastValue;
        Int numberobj_82_currentFormat;
        number numberobj_82_lastValue;
        Int numberobj_83_currentFormat;
        number numberobj_83_lastValue;
        Int numberobj_84_currentFormat;
        number numberobj_84_lastValue;
        Int numberobj_85_currentFormat;
        number numberobj_85_lastValue;
        Int numberobj_86_currentFormat;
        number numberobj_86_lastValue;
        Int numberobj_87_currentFormat;
        number numberobj_87_lastValue;
        Int numberobj_88_currentFormat;
        number numberobj_88_lastValue;
        Int numberobj_89_currentFormat;
        number numberobj_89_lastValue;
        Int numberobj_90_currentFormat;
        number numberobj_90_lastValue;
        Int numberobj_91_currentFormat;
        number numberobj_91_lastValue;
        Int numberobj_92_currentFormat;
        number numberobj_92_lastValue;
        Int numberobj_93_currentFormat;
        number numberobj_93_lastValue;
        Int numberobj_94_currentFormat;
        number numberobj_94_lastValue;
        Int numberobj_95_currentFormat;
        number numberobj_95_lastValue;
        Int numberobj_96_currentFormat;
        number numberobj_96_lastValue;
        Int numberobj_97_currentFormat;
        number numberobj_97_lastValue;
        Int numberobj_98_currentFormat;
        number numberobj_98_lastValue;
        Int numberobj_99_currentFormat;
        number numberobj_99_lastValue;
        Int numberobj_100_currentFormat;
        number numberobj_100_lastValue;
        Int numberobj_101_currentFormat;
        number numberobj_101_lastValue;
        Int numberobj_102_currentFormat;
        number numberobj_102_lastValue;
        Int numberobj_103_currentFormat;
        number numberobj_103_lastValue;
        Int numberobj_104_currentFormat;
        number numberobj_104_lastValue;
        Int numberobj_105_currentFormat;
        number numberobj_105_lastValue;
        Int numberobj_106_currentFormat;
        number numberobj_106_lastValue;
        Int numberobj_107_currentFormat;
        number numberobj_107_lastValue;
        Int numberobj_108_currentFormat;
        number numberobj_108_lastValue;
        Int numberobj_109_currentFormat;
        number numberobj_109_lastValue;
        Int numberobj_110_currentFormat;
        number numberobj_110_lastValue;
        Int numberobj_111_currentFormat;
        number numberobj_111_lastValue;
        Int numberobj_112_currentFormat;
        number numberobj_112_lastValue;
        Int numberobj_113_currentFormat;
        number numberobj_113_lastValue;
        Int numberobj_114_currentFormat;
        number numberobj_114_lastValue;
        Int numberobj_115_currentFormat;
        number numberobj_115_lastValue;
        Int numberobj_116_currentFormat;
        number numberobj_116_lastValue;
        Int numberobj_117_currentFormat;
        number numberobj_117_lastValue;
        Int numberobj_118_currentFormat;
        number numberobj_118_lastValue;
        Int numberobj_119_currentFormat;
        number numberobj_119_lastValue;
        Int numberobj_120_currentFormat;
        number numberobj_120_lastValue;
        Int numberobj_121_currentFormat;
        number numberobj_121_lastValue;
        Int numberobj_122_currentFormat;
        number numberobj_122_lastValue;
        Int numberobj_123_currentFormat;
        number numberobj_123_lastValue;
        Int numberobj_124_currentFormat;
        number numberobj_124_lastValue;
        Int numberobj_125_currentFormat;
        number numberobj_125_lastValue;
        Int numberobj_126_currentFormat;
        number numberobj_126_lastValue;
        Int numberobj_127_currentFormat;
        number numberobj_127_lastValue;
        Int numberobj_128_currentFormat;
        number numberobj_128_lastValue;
        Int numberobj_129_currentFormat;
        number numberobj_129_lastValue;
        Int numberobj_130_currentFormat;
        number numberobj_130_lastValue;
        Int numberobj_131_currentFormat;
        number numberobj_131_lastValue;
        Int numberobj_132_currentFormat;
        number numberobj_132_lastValue;
        Int numberobj_133_currentFormat;
        number numberobj_133_lastValue;
        Int numberobj_134_currentFormat;
        number numberobj_134_lastValue;
        Int numberobj_135_currentFormat;
        number numberobj_135_lastValue;
        Int numberobj_136_currentFormat;
        number numberobj_136_lastValue;
        Int numberobj_137_currentFormat;
        number numberobj_137_lastValue;
        Int numberobj_138_currentFormat;
        number numberobj_138_lastValue;
        Int numberobj_139_currentFormat;
        number numberobj_139_lastValue;
        Int numberobj_140_currentFormat;
        number numberobj_140_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_119 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_119()
    {
    }
    
    ~RNBOSubpatcher_119()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1935387534, false);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return rand01() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->metro_01_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->metro_01_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1935387534:
            {
            this->metro_01_tick_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("emitter[1]/toggle_obj-159") == objectId)
                this->toggle_02_valin_set(payload);
    
            if (TAG("emitter[1]/number_obj-156") == objectId)
                this->numberobj_141_valin_set(payload);
    
            if (TAG("emitter[1]/number_obj-71") == objectId)
                this->numberobj_142_valin_set(payload);
    
            if (TAG("emitter[1]/number_obj-6") == objectId)
                this->numberobj_143_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("emitter[1]/number_obj-156") == objectId)
                this->numberobj_141_format_set(payload);
    
            if (TAG("emitter[1]/number_obj-71") == objectId)
                this->numberobj_142_format_set(payload);
    
            if (TAG("emitter[1]/number_obj-6") == objectId)
                this->numberobj_143_format_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("emitter[1]/message_obj-70") == objectId)
                this->message_38_listin_number_set(payload);
    
            if (TAG("emitter[1]/message_obj-66") == objectId)
                this->message_39_listin_number_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("emitter[1]/message_obj-70") == objectId)
                this->message_38_listin_list_set(payload);
    
            if (TAG("emitter[1]/message_obj-66") == objectId)
                this->message_39_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("emitter[1]/message_obj-70") == objectId)
                this->message_38_listin_bang_bang();
    
            if (TAG("emitter[1]/message_obj-66") == objectId)
                this->message_39_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("emitter[1]/toggle_obj-159"):
            {
            return "emitter[1]/toggle_obj-159";
            }
        case TAG("emitter[1]/number_obj-156"):
            {
            return "emitter[1]/number_obj-156";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("emitter[1]/number_obj-71"):
            {
            return "emitter[1]/number_obj-71";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("emitter[1]/message_obj-70"):
            {
            return "emitter[1]/message_obj-70";
            }
        case TAG("emitter[1]/message_obj-66"):
            {
            return "emitter[1]/message_obj-66";
            }
        case TAG("emitter[1]/number_obj-6"):
            {
            return "emitter[1]/number_obj-6";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_26_out1_bang_bang() {
        this->toggle_02_value_bang_bang();
    }
    
    void eventinlet_26_out1_number_set(number v) {
        this->toggle_02_value_number_set(v);
    }
    
    void toggle_02_valin_set(number v) {
        this->toggle_02_value_number_set(v);
    }
    
    void metro_01_tick_bang() {
        this->metro_01_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_01_on)) {
            this->metro_01_last = this->currenttime();
    
            {
                this->metro_01_next = this->metro_01_last + this->metro_01_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
            }
        }
    }
    
    void numberobj_141_valin_set(number v) {
        this->numberobj_141_value_set(v);
    }
    
    void numberobj_141_format_set(number v) {
        this->numberobj_141_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_142_valin_set(number v) {
        this->numberobj_142_value_set(v);
    }
    
    void numberobj_142_format_set(number v) {
        this->numberobj_142_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_38_listin_list_set(const list& v) {
        this->message_38_set_set(v);
    }
    
    void message_38_listin_number_set(number v) {
        this->message_38_set_set(v);
    }
    
    void message_38_listin_bang_bang() {
        this->message_38_trigger_bang();
    }
    
    void message_39_listin_list_set(const list& v) {
        this->message_39_set_set(v);
    }
    
    void message_39_listin_number_set(number v) {
        this->message_39_set_set(v);
    }
    
    void message_39_listin_bang_bang() {
        this->message_39_trigger_bang();
    }
    
    void numberobj_143_valin_set(number v) {
        this->numberobj_143_value_set(v);
    }
    
    void numberobj_143_format_set(number v) {
        this->numberobj_143_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_141_init();
        this->random_10_nz_init();
        this->numberobj_142_init();
        this->message_38_init();
        this->message_39_init();
        this->numberobj_143_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        if ((bool)(this->metro_01_on))
            this->metro_01_on_set(1);
    }
    
    void allocateDataRefs() {}
    
    void scale_43_outhigh_set(number v) {
        this->scale_43_outhigh = v;
    }
    
    void scale_42_outlow_set(number v) {
        this->scale_42_outlow = v;
    }
    
    void receive_22_output_number_set(number v) {
        this->receive_22_output_number = v;
        this->scale_43_outhigh_set(v);
        this->scale_42_outlow_set(v);
    }
    
    void scale_43_outlow_set(number v) {
        this->scale_43_outlow = v;
    }
    
    void scale_42_outhigh_set(number v) {
        this->scale_42_outhigh = v;
    }
    
    void receive_23_output_number_set(number v) {
        this->receive_23_output_number = v;
        this->scale_43_outlow_set(v);
        this->scale_42_outhigh_set(v);
    }
    
    void gate_19_onoff_set(number v) {
        this->gate_19_onoff = v;
    }
    
    void gate_18_onoff_set(number v) {
        this->gate_18_onoff = v;
    }
    
    void scale_43_power_set(number v) {
        this->scale_43_power = v;
    }
    
    void numberobj_142_output_set(number v) {
        this->scale_43_power_set(v);
    }
    
    void numberobj_142_value_set(number v) {
        this->numberobj_142_value_setter(v);
        v = this->numberobj_142_value;
        number localvalue = v;
    
        if (this->numberobj_142_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("emitter[1]/number_obj-71"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_142_output_set(localvalue);
    }
    
    void scale_44_out_set(const list& v) {
        this->scale_44_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_142_value_set(converted);
        }
    }
    
    void scale_44_input_set(const list& v) {
        this->scale_44_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_44_inlow,
                this->scale_44_inhigh,
                this->scale_44_outlow,
                this->scale_44_outhigh,
                this->scale_44_power
            ));
        }
    
        this->scale_44_out_set(tmp);
    }
    
    void gate_19_out1_number_set(number v) {
        this->gate_19_out1_number = v;
    
        {
            list converted = {v};
            this->scale_44_input_set(converted);
        }
    }
    
    void scale_42_power_set(number v) {
        this->scale_42_power = v;
    }
    
    void numberobj_143_output_set(number v) {
        this->scale_42_power_set(v);
    }
    
    void numberobj_143_value_set(number v) {
        this->numberobj_143_value_setter(v);
        v = this->numberobj_143_value;
        number localvalue = v;
    
        if (this->numberobj_143_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("emitter[1]/number_obj-6"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_143_output_set(localvalue);
    }
    
    void scale_45_out_set(const list& v) {
        this->scale_45_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_143_value_set(converted);
        }
    }
    
    void scale_45_input_set(const list& v) {
        this->scale_45_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_45_inlow,
                this->scale_45_inhigh,
                this->scale_45_outlow,
                this->scale_45_outhigh,
                this->scale_45_power
            ));
        }
    
        this->scale_45_out_set(tmp);
    }
    
    void gate_19_out2_number_set(number v) {
        this->gate_19_out2_number = v;
    
        {
            list converted = {v};
            this->scale_45_input_set(converted);
        }
    }
    
    void gate_19_input_number_set(number v) {
        if (this->gate_19_onoff == 1)
            this->gate_19_out1_number_set(v);
        else if (this->gate_19_onoff == 2)
            this->gate_19_out2_number_set(v);
    }
    
    void metro_01_interval_set(number v) {
        this->metro_01_interval_setter(v);
        v = this->metro_01_interval;
    }
    
    void scale_43_out_set(const list& v) {
        this->scale_43_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_01_interval_set(converted);
        }
    }
    
    void scale_43_input_set(const list& v) {
        this->scale_43_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_43_inlow,
                this->scale_43_inhigh,
                this->scale_43_outlow,
                this->scale_43_outhigh,
                this->scale_43_power
            ));
        }
    
        this->scale_43_out_set(tmp);
    }
    
    void gate_18_out1_number_set(number v) {
        this->gate_18_out1_number = v;
    
        {
            list converted = {v};
            this->scale_43_input_set(converted);
        }
    }
    
    void scale_42_out_set(const list& v) {
        this->scale_42_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_01_interval_set(converted);
        }
    }
    
    void scale_42_input_set(const list& v) {
        this->scale_42_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_42_inlow,
                this->scale_42_inhigh,
                this->scale_42_outlow,
                this->scale_42_outhigh,
                this->scale_42_power
            ));
        }
    
        this->scale_42_out_set(tmp);
    }
    
    void gate_18_out2_number_set(number v) {
        this->gate_18_out2_number = v;
    
        {
            list converted = {v};
            this->scale_42_input_set(converted);
        }
    }
    
    void gate_18_input_number_set(number v) {
        if (this->gate_18_onoff == 1)
            this->gate_18_out1_number_set(v);
        else if (this->gate_18_onoff == 2)
            this->gate_18_out2_number_set(v);
    }
    
    void message_39_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_19_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_19_onoff_set(converted);
        }
    
        {
            if (v->length > 1)
                this->gate_18_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_18_onoff_set(converted);
        }
    }
    
    void message_39_trigger_bang() {
        this->message_39_out_set(this->message_39_set);
    }
    
    void select_22_match1_bang() {
        this->message_39_trigger_bang();
    }
    
    void select_22_nomatch_number_set(number ) {}
    
    void select_22_input_number_set(number v) {
        if (v == this->select_22_test1)
            this->select_22_match1_bang();
        else
            this->select_22_nomatch_number_set(v);
    }
    
    void expr_47_out1_set(number v) {
        this->expr_47_out1 = v;
        this->select_22_input_number_set(this->expr_47_out1);
    }
    
    void expr_47_in1_set(number in1) {
        this->expr_47_in1 = in1;
        this->expr_47_out1_set(this->expr_47_in1 >= this->expr_47_in2);//#map:emitter[1]/>=_obj-80:1
    }
    
    void message_38_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_19_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_19_onoff_set(converted);
        }
    
        {
            if (v->length > 1)
                this->gate_18_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_18_onoff_set(converted);
        }
    }
    
    void message_38_trigger_bang() {
        this->message_38_out_set(this->message_38_set);
    }
    
    void select_21_match1_bang() {
        this->message_38_trigger_bang();
    }
    
    void select_21_nomatch_number_set(number ) {}
    
    void select_21_input_number_set(number v) {
        if (v == this->select_21_test1)
            this->select_21_match1_bang();
        else
            this->select_21_nomatch_number_set(v);
    }
    
    void expr_46_out1_set(number v) {
        this->expr_46_out1 = v;
        this->select_21_input_number_set(this->expr_46_out1);
    }
    
    void expr_46_in1_set(number in1) {
        this->expr_46_in1 = in1;
        this->expr_46_out1_set(this->expr_46_in1 <= this->expr_46_in2);//#map:emitter[1]/<=_obj-82:1
    }
    
    void trigger_20_out2_set(number v) {
        this->expr_47_in1_set(v);
        this->expr_46_in1_set(v);
    }
    
    void trigger_20_out1_set(number v) {
        this->gate_19_input_number_set(v);
    }
    
    void trigger_20_input_number_set(number v) {
        this->trigger_20_out2_set(trunc(v));
        this->trigger_20_out1_set(trunc(v));
    }
    
    void receive_24_output_number_set(number v) {
        this->receive_24_output_number = v;
        this->trigger_20_input_number_set(v);
    }
    
    void metro_01_on_set(number v) {
        this->metro_01_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_02_output_set(number v) {
        this->metro_01_on_set(v);
    }
    
    void toggle_02_value_number_set(number v) {
        this->toggle_02_value_number_setter(v);
        v = this->toggle_02_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("emitter[1]/toggle_obj-159"), v, this->_currentTime);
        this->toggle_02_output_set(v);
    }
    
    void eventinlet_26_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_02_value_number_set(converted);
        }
    }
    
    void toggle_02_value_bang_bang() {
        number val = (this->toggle_02_value_number == 1 ? 0 : 1);
        this->toggle_02_value_number_set(val);
    }
    
    void numberobj_141_output_set(number v) {
        this->gate_18_input_number_set(v);
    }
    
    void numberobj_141_value_set(number v) {
        this->numberobj_141_value_setter(v);
        v = this->numberobj_141_value;
        number localvalue = v;
    
        if (this->numberobj_141_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("emitter[1]/number_obj-156"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_141_output_set(localvalue);
    }
    
    void random_10_result_set(number v) {
        this->numberobj_141_value_set(v);
    }
    
    void random_10_trigger_bang() {
        {
            this->random_10_result_set(this->random(0, this->random_10_limit));
        }
    }
    
    void eventoutlet_16_in1_bang_bang() {
        ;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_26_out1_bang_bang();
    }
    
    void metro_01_tickout_bang() {
        this->random_10_trigger_bang();
        this->eventoutlet_16_in1_bang_bang();
    }
    
    void message_38_set_set(const list& v) {
        this->message_38_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("emitter[1]/message_obj-70"), v, this->_currentTime);
    }
    
    void message_39_set_set(const list& v) {
        this->message_39_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("emitter[1]/message_obj-66"), v, this->_currentTime);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_02_value_number_setter(number v) {
        this->toggle_02_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_01_interval_setter(number v) {
        this->metro_01_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_141_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_141_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_141_value = localvalue;
    }
    
    void random_10_limit_setter(number v) {
        if (v >= 0)
            this->random_10_limit = v;
    }
    
    void numberobj_142_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_142_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_142_value = localvalue;
    }
    
    void numberobj_143_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_143_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_143_value = localvalue;
    }
    
    void toggle_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_02_value_number;
    }
    
    void toggle_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_02_value_number_set(preset["value"]);
    }
    
    void metro_01_onTransportChanged(number ) {}
    
    void metro_01_onBeatTimeChanged(number ) {}
    
    void numberobj_141_init() {
        this->numberobj_141_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter[1]/number_obj-156"), 1, this->_currentTime);
    }
    
    void numberobj_141_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_141_value;
    }
    
    void numberobj_141_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_141_value_set(preset["value"]);
    }
    
    void random_10_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_10_nz_state
        );
    }
    
    void random_10_nz_init() {
        this->random_10_nz_reset();
    }
    
    void random_10_nz_seed(number v) {
        xoshiro_reset(v, this->random_10_nz_state);
    }
    
    number random_10_nz_next() {
        return xoshiro_next(this->random_10_nz_state);
    }
    
    void numberobj_142_init() {
        this->numberobj_142_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter[1]/number_obj-71"), 1, this->_currentTime);
    }
    
    void numberobj_142_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_142_value;
    }
    
    void numberobj_142_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_142_value_set(preset["value"]);
    }
    
    void message_38_init() {
        this->message_38_set_set({1});
    }
    
    void message_39_init() {
        this->message_39_set_set({2});
    }
    
    void numberobj_143_init() {
        this->numberobj_143_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter[1]/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_143_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_143_value;
    }
    
    void numberobj_143_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_143_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        toggle_02_value_number = 0;
        toggle_02_value_number_setter(toggle_02_value_number);
        metro_01_on = 0;
        metro_01_interval = 500;
        metro_01_interval_setter(metro_01_interval);
        scale_42_inlow = 0;
        scale_42_inhigh = 999;
        scale_42_outlow = 0;
        scale_42_outhigh = 1;
        scale_42_power = 1;
        numberobj_141_value = 0;
        numberobj_141_value_setter(numberobj_141_value);
        random_10_limit = 1000;
        random_10_limit_setter(random_10_limit);
        random_10_seed = 0;
        gate_18_onoff = 0;
        gate_18_out1_number = 0;
        gate_18_out2_number = 0;
        receive_22_output_number = 0;
        scale_43_inlow = 999;
        scale_43_inhigh = 0;
        scale_43_outlow = 0;
        scale_43_outhigh = 1;
        scale_43_power = 1;
        receive_23_output_number = 0;
        gate_19_onoff = 0;
        gate_19_out1_number = 0;
        gate_19_out2_number = 0;
        receive_24_output_number = 0;
        select_21_test1 = 1;
        scale_44_inlow = -100;
        scale_44_inhigh = 0;
        scale_44_outlow = 0.1;
        scale_44_outhigh = 1;
        scale_44_power = 1;
        expr_46_in1 = 0;
        expr_46_in2 = 0;
        expr_46_out1 = 0;
        numberobj_142_value = 0;
        numberobj_142_value_setter(numberobj_142_value);
        select_22_test1 = 1;
        expr_47_in1 = 0;
        expr_47_in2 = 1;
        expr_47_out1 = 0;
        numberobj_143_value = 0;
        numberobj_143_value_setter(numberobj_143_value);
        scale_45_inlow = 1;
        scale_45_inhigh = 100;
        scale_45_outlow = 1;
        scale_45_outhigh = 0.1;
        scale_45_power = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        toggle_02_lastValue = 0;
        metro_01_last = -1;
        metro_01_next = -1;
        numberobj_141_currentFormat = 6;
        numberobj_141_lastValue = 0;
        numberobj_142_currentFormat = 6;
        numberobj_142_lastValue = 0;
        numberobj_143_currentFormat = 6;
        numberobj_143_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number toggle_02_value_number;
        number metro_01_on;
        number metro_01_interval;
        list scale_42_input;
        number scale_42_inlow;
        number scale_42_inhigh;
        number scale_42_outlow;
        number scale_42_outhigh;
        number scale_42_power;
        list scale_42_out;
        number numberobj_141_value;
        number random_10_limit;
        number random_10_seed;
        number gate_18_onoff;
        number gate_18_out1_number;
        list gate_18_out1_list;
        number gate_18_out2_number;
        list gate_18_out2_list;
        number receive_22_output_number;
        list receive_22_output_list;
        list scale_43_input;
        number scale_43_inlow;
        number scale_43_inhigh;
        number scale_43_outlow;
        number scale_43_outhigh;
        number scale_43_power;
        list scale_43_out;
        number receive_23_output_number;
        list receive_23_output_list;
        number gate_19_onoff;
        number gate_19_out1_number;
        list gate_19_out1_list;
        number gate_19_out2_number;
        list gate_19_out2_list;
        number receive_24_output_number;
        list receive_24_output_list;
        number select_21_test1;
        list scale_44_input;
        number scale_44_inlow;
        number scale_44_inhigh;
        number scale_44_outlow;
        number scale_44_outhigh;
        number scale_44_power;
        list scale_44_out;
        number expr_46_in1;
        number expr_46_in2;
        number expr_46_out1;
        number numberobj_142_value;
        number select_22_test1;
        list message_38_set;
        number expr_47_in1;
        number expr_47_in2;
        number expr_47_out1;
        list message_39_set;
        number numberobj_143_value;
        list scale_45_input;
        number scale_45_inlow;
        number scale_45_inhigh;
        number scale_45_outlow;
        number scale_45_outhigh;
        number scale_45_power;
        list scale_45_out;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number toggle_02_lastValue;
        MillisecondTime metro_01_last;
        MillisecondTime metro_01_next;
        Int numberobj_141_currentFormat;
        number numberobj_141_lastValue;
        UInt random_10_nz_state[4] = { };
        Int numberobj_142_currentFormat;
        number numberobj_142_lastValue;
        Int numberobj_143_currentFormat;
        number numberobj_143_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_120 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_120()
    {
    }
    
    ~RNBOSubpatcher_120()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1935387534, false);
    }
    
    number wrap(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high)
            return low;
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
    
        if (x >= lo && x < hi)
            return x;
    
        if (range <= 0.000000001)
            return lo;
    
        long numWraps = (long)(trunc((x - lo) / range));
        numWraps = numWraps - ((x < lo ? 1 : 0));
        number result = x - range * numWraps;
    
        if (result >= hi)
            return result - range;
        else
            return result;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->metro_02_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->metro_02_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1935387534:
            {
            this->metro_02_tick_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatelive/message_obj-14") == objectId)
                this->message_40_listin_number_set(payload);
    
            if (TAG("activatelive/message_obj-16") == objectId)
                this->message_41_listin_number_set(payload);
    
            if (TAG("activatelive/message_obj-34") == objectId)
                this->message_42_listin_number_set(payload);
    
            if (TAG("activatelive/message_obj-49") == objectId)
                this->message_43_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("activatelive/toggle_obj-35") == objectId)
                this->toggle_03_valin_set(payload);
    
            if (TAG("activatelive/number_obj-21") == objectId)
                this->numberobj_144_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("activatelive/number_obj-21") == objectId)
                this->numberobj_144_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatelive/message_obj-14") == objectId)
                this->message_40_listin_list_set(payload);
    
            if (TAG("activatelive/message_obj-16") == objectId)
                this->message_41_listin_list_set(payload);
    
            if (TAG("activatelive/message_obj-34") == objectId)
                this->message_42_listin_list_set(payload);
    
            if (TAG("activatelive/message_obj-49") == objectId)
                this->message_43_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatelive/message_obj-14") == objectId)
                this->message_40_listin_bang_bang();
    
            if (TAG("activatelive/message_obj-16") == objectId)
                this->message_41_listin_bang_bang();
    
            if (TAG("activatelive/message_obj-34") == objectId)
                this->message_42_listin_bang_bang();
    
            if (TAG("activatelive/message_obj-49") == objectId)
                this->message_43_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("activatelive/button_obj-6") == objectId)
                this->button_07_bangin_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("activatelive/message_obj-14"):
            {
            return "activatelive/message_obj-14";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("activatelive/toggle_obj-35"):
            {
            return "activatelive/toggle_obj-35";
            }
        case TAG("activatelive/number_obj-21"):
            {
            return "activatelive/number_obj-21";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("activatelive/message_obj-16"):
            {
            return "activatelive/message_obj-16";
            }
        case TAG("activatelive/message_obj-34"):
            {
            return "activatelive/message_obj-34";
            }
        case TAG("activatelive/message_obj-49"):
            {
            return "activatelive/message_obj-49";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("activatelive/button_obj-6"):
            {
            return "activatelive/button_obj-6";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_27_out1_bang_bang() {
        this->toggle_03_value_bang_bang();
    }
    
    void eventinlet_27_out1_number_set(number v) {
        this->toggle_03_value_number_set(v);
    }
    
    void message_40_listin_list_set(const list& v) {
        this->message_40_set_set(v);
    }
    
    void message_40_listin_number_set(number v) {
        this->message_40_set_set(v);
    }
    
    void message_40_listin_bang_bang() {
        this->message_40_trigger_bang();
    }
    
    void toggle_03_valin_set(number v) {
        this->toggle_03_value_number_set(v);
    }
    
    void metro_02_tick_bang() {
        this->metro_02_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_02_on)) {
            this->metro_02_last = this->currenttime();
    
            {
                this->metro_02_next = this->metro_02_last + this->metro_02_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
            }
        }
    }
    
    void numberobj_144_valin_set(number v) {
        this->numberobj_144_value_set(v);
    }
    
    void numberobj_144_format_set(number v) {
        this->numberobj_144_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_41_listin_list_set(const list& v) {
        this->message_41_set_set(v);
    }
    
    void message_41_listin_number_set(number v) {
        this->message_41_set_set(v);
    }
    
    void message_41_listin_bang_bang() {
        this->message_41_trigger_bang();
    }
    
    void message_42_listin_list_set(const list& v) {
        this->message_42_set_set(v);
    }
    
    void message_42_listin_number_set(number v) {
        this->message_42_set_set(v);
    }
    
    void message_42_listin_bang_bang() {
        this->message_42_trigger_bang();
    }
    
    void message_43_listin_list_set(const list& v) {
        this->message_43_set_set(v);
    }
    
    void message_43_listin_number_set(number v) {
        this->message_43_set_set(v);
    }
    
    void message_43_listin_bang_bang() {
        this->message_43_trigger_bang();
    }
    
    void button_07_bangin_bang() {
        this->button_07_bangval_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_40_init();
        this->numberobj_144_init();
        this->message_41_init();
        this->message_42_init();
        this->message_43_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        if ((bool)(this->metro_02_on))
            this->metro_02_on_set(1);
    }
    
    void allocateDataRefs() {}
    
    void metro_02_on_set(number v) {
        this->metro_02_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_03_output_set(number v) {
        this->metro_02_on_set(v);
    }
    
    void toggle_03_value_number_set(number v) {
        this->toggle_03_value_number_setter(v);
        v = this->toggle_03_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("activatelive/toggle_obj-35"), v, this->_currentTime);
        this->toggle_03_output_set(v);
    }
    
    void eventinlet_27_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_03_value_number_set(converted);
        }
    }
    
    void toggle_03_value_bang_bang() {
        number val = (this->toggle_03_value_number == 1 ? 0 : 1);
        this->toggle_03_value_number_set(val);
    }
    
    void message_40_set_set(const list& v) {
        this->message_40_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatelive/message_obj-14"), v, this->_currentTime);
    }
    
    void send_01_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_27_source_golive_bang_bang();
    }
    
    void button_07_output_bang() {
        this->send_01_input_bang_bang();
    }
    
    void button_07_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("activatelive/button_obj-6"), this->_currentTime);;
        this->button_07_output_bang();
    }
    
    void trigger_21_out3_bang() {
        this->button_07_bangval_bang();
    }
    
    void message_42_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_03_value_number_set(converted);
        }
    }
    
    void message_42_trigger_bang() {
        this->message_42_out_set(this->message_42_set);
    }
    
    void trigger_21_out2_bang() {
        this->message_42_trigger_bang();
    }
    
    void eventoutlet_18_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_27_out2_list_set((list)v);
    }
    
    void message_43_out_set(const list& v) {
        this->eventoutlet_18_in1_list_set(v);
    }
    
    void message_43_trigger_bang() {
        this->message_43_out_set(this->message_43_set);
    }
    
    void trigger_21_out1_bang() {
        this->message_43_trigger_bang();
    }
    
    void trigger_21_input_bang_bang() {
        this->trigger_21_out3_bang();
        this->trigger_21_out2_bang();
        this->trigger_21_out1_bang();
    }
    
    void select_23_match1_bang() {
        this->trigger_21_input_bang_bang();
    }
    
    void select_23_nomatch_number_set(number ) {}
    
    void select_23_input_number_set(number v) {
        if (v == this->select_23_test1)
            this->select_23_match1_bang();
        else
            this->select_23_nomatch_number_set(v);
    }
    
    void message_41_set_set(const list& v) {
        this->message_41_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatelive/message_obj-16"), v, this->_currentTime);
    }
    
    void eventoutlet_17_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_27_out1_list_set((list)v);
    }
    
    void message_41_out_set(const list& v) {
        this->eventoutlet_17_in1_list_set(v);
    }
    
    void message_41_trigger_bang() {
        this->message_41_out_set(this->message_41_set);
    }
    
    void pack_02_out_set(const list& v) {
        this->message_41_set_set(v);
        this->message_41_trigger_bang();
    }
    
    void pack_02_in1_set(number v) {
        this->pack_02_in1 = v;
        list array = list(0, 0);
        array[0] = trunc(this->pack_02_in1);
        array[1] = this->pack_02_in2;
        this->pack_02_out_set(array);
    }
    
    void numberobj_144_output_set(number v) {
        this->select_23_input_number_set(v);
        this->pack_02_in1_set(v);
    }
    
    void numberobj_144_value_set(number v) {
        this->numberobj_144_value_setter(v);
        v = this->numberobj_144_value;
        number localvalue = v;
    
        if (this->numberobj_144_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("activatelive/number_obj-21"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_144_output_set(localvalue);
    }
    
    void accum_02_out1_set(number v) {
        this->numberobj_144_value_set(v);
    }
    
    void accum_02_x_set(number x) {
        this->accum_02_x = x;
        auto reset = this->accum_02_reset;
    
        {
            {
                this->accum_02_value = ((bool)(reset) ? 1 : this->wrap(this->accum_02_value + x, 1, 101));
    
                {
                    this->accum_02_out1_set(this->accum_02_value);
                    return;
                }
            }
        }
    }
    
    void accum_02_reset_set(number v) {
        this->accum_02_reset = v;
    }
    
    void message_40_out_set(const list& v) {
        {
            if (v->length > 1)
                this->accum_02_reset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->accum_02_x_set(converted);
        }
    }
    
    void message_40_trigger_bang() {
        this->message_40_out_set(this->message_40_set);
    }
    
    void metro_02_tickout_bang() {
        this->message_40_trigger_bang();
    }
    
    void message_42_set_set(const list& v) {
        this->message_42_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatelive/message_obj-34"), v, this->_currentTime);
    }
    
    void message_43_set_set(const list& v) {
        this->message_43_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatelive/message_obj-49"), v, this->_currentTime);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_03_value_number_setter(number v) {
        this->toggle_03_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_02_interval_setter(number v) {
        this->metro_02_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_144_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_144_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_144_value = localvalue;
    }
    
    void message_40_init() {
        this->message_40_set_set({1});
    }
    
    void toggle_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_03_value_number;
    }
    
    void toggle_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_03_value_number_set(preset["value"]);
    }
    
    void metro_02_onTransportChanged(number ) {}
    
    void metro_02_onBeatTimeChanged(number ) {}
    
    void numberobj_144_init() {
        this->numberobj_144_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("activatelive/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_144_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_144_value;
    }
    
    void numberobj_144_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_144_value_set(preset["value"]);
    }
    
    void message_41_init() {
        this->message_41_set_set({100, 1});
    }
    
    void message_42_init() {
        this->message_42_set_set({0});
    }
    
    void message_43_init() {
        this->message_43_set_set({1});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        accum_02_x = 0;
        accum_02_reset = 0;
        toggle_03_value_number = 0;
        toggle_03_value_number_setter(toggle_03_value_number);
        metro_02_on = 0;
        metro_02_interval = 1;
        metro_02_interval_setter(metro_02_interval);
        numberobj_144_value = 0;
        numberobj_144_value_setter(numberobj_144_value);
        pack_02_in1 = 0;
        pack_02_in2 = 1;
        select_23_test1 = 100;
        send_01_input_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        accum_02_value = 1;
        toggle_03_lastValue = 0;
        metro_02_last = -1;
        metro_02_next = -1;
        numberobj_144_currentFormat = 6;
        numberobj_144_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_40_set;
        number accum_02_x;
        number accum_02_reset;
        number toggle_03_value_number;
        number metro_02_on;
        number metro_02_interval;
        number numberobj_144_value;
        list message_41_set;
        number pack_02_in1;
        number pack_02_in2;
        list message_42_set;
        number select_23_test1;
        list message_43_set;
        number send_01_input_number;
        list send_01_input_list;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number accum_02_value;
        number toggle_03_lastValue;
        MillisecondTime metro_02_last;
        MillisecondTime metro_02_next;
        Int numberobj_144_currentFormat;
        number numberobj_144_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_121 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_121()
    {
    }
    
    ~RNBOSubpatcher_121()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1935387534, false);
    }
    
    number wrap(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high)
            return low;
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
    
        if (x >= lo && x < hi)
            return x;
    
        if (range <= 0.000000001)
            return lo;
    
        long numWraps = (long)(trunc((x - lo) / range));
        numWraps = numWraps - ((x < lo ? 1 : 0));
        number result = x - range * numWraps;
    
        if (result >= hi)
            return result - range;
        else
            return result;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->metro_03_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->metro_03_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1935387534:
            {
            this->metro_03_tick_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatefixed/message_obj-14") == objectId)
                this->message_44_listin_number_set(payload);
    
            if (TAG("activatefixed/message_obj-16") == objectId)
                this->message_45_listin_number_set(payload);
    
            if (TAG("activatefixed/message_obj-34") == objectId)
                this->message_46_listin_number_set(payload);
    
            if (TAG("activatefixed/message_obj-49") == objectId)
                this->message_47_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("activatefixed/toggle_obj-35") == objectId)
                this->toggle_04_valin_set(payload);
    
            if (TAG("activatefixed/number_obj-21") == objectId)
                this->numberobj_145_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("activatefixed/number_obj-21") == objectId)
                this->numberobj_145_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatefixed/message_obj-14") == objectId)
                this->message_44_listin_list_set(payload);
    
            if (TAG("activatefixed/message_obj-16") == objectId)
                this->message_45_listin_list_set(payload);
    
            if (TAG("activatefixed/message_obj-34") == objectId)
                this->message_46_listin_list_set(payload);
    
            if (TAG("activatefixed/message_obj-49") == objectId)
                this->message_47_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("activatefixed/message_obj-14") == objectId)
                this->message_44_listin_bang_bang();
    
            if (TAG("activatefixed/message_obj-16") == objectId)
                this->message_45_listin_bang_bang();
    
            if (TAG("activatefixed/message_obj-34") == objectId)
                this->message_46_listin_bang_bang();
    
            if (TAG("activatefixed/message_obj-49") == objectId)
                this->message_47_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("activatefixed/button_obj-6") == objectId)
                this->button_08_bangin_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("activatefixed/message_obj-14"):
            {
            return "activatefixed/message_obj-14";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("activatefixed/toggle_obj-35"):
            {
            return "activatefixed/toggle_obj-35";
            }
        case TAG("activatefixed/number_obj-21"):
            {
            return "activatefixed/number_obj-21";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("activatefixed/message_obj-16"):
            {
            return "activatefixed/message_obj-16";
            }
        case TAG("activatefixed/message_obj-34"):
            {
            return "activatefixed/message_obj-34";
            }
        case TAG("activatefixed/message_obj-49"):
            {
            return "activatefixed/message_obj-49";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("activatefixed/button_obj-6"):
            {
            return "activatefixed/button_obj-6";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void message_44_listin_list_set(const list& v) {
        this->message_44_set_set(v);
    }
    
    void message_44_listin_number_set(number v) {
        this->message_44_set_set(v);
    }
    
    void message_44_listin_bang_bang() {
        this->message_44_trigger_bang();
    }
    
    void toggle_04_valin_set(number v) {
        this->toggle_04_value_number_set(v);
    }
    
    void metro_03_tick_bang() {
        this->metro_03_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_03_on)) {
            this->metro_03_last = this->currenttime();
    
            {
                this->metro_03_next = this->metro_03_last + this->metro_03_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_03_interval + this->_currentTime);;
            }
        }
    }
    
    void numberobj_145_valin_set(number v) {
        this->numberobj_145_value_set(v);
    }
    
    void numberobj_145_format_set(number v) {
        this->numberobj_145_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_45_listin_list_set(const list& v) {
        this->message_45_set_set(v);
    }
    
    void message_45_listin_number_set(number v) {
        this->message_45_set_set(v);
    }
    
    void message_45_listin_bang_bang() {
        this->message_45_trigger_bang();
    }
    
    void eventinlet_28_out1_bang_bang() {
        this->toggle_04_value_bang_bang();
    }
    
    void eventinlet_28_out1_number_set(number v) {
        this->toggle_04_value_number_set(v);
    }
    
    void message_46_listin_list_set(const list& v) {
        this->message_46_set_set(v);
    }
    
    void message_46_listin_number_set(number v) {
        this->message_46_set_set(v);
    }
    
    void message_46_listin_bang_bang() {
        this->message_46_trigger_bang();
    }
    
    void message_47_listin_list_set(const list& v) {
        this->message_47_set_set(v);
    }
    
    void message_47_listin_number_set(number v) {
        this->message_47_set_set(v);
    }
    
    void message_47_listin_bang_bang() {
        this->message_47_trigger_bang();
    }
    
    void button_08_bangin_bang() {
        this->button_08_bangval_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_44_init();
        this->numberobj_145_init();
        this->message_45_init();
        this->message_46_init();
        this->message_47_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        if ((bool)(this->metro_03_on))
            this->metro_03_on_set(1);
    }
    
    void allocateDataRefs() {}
    
    void metro_03_on_set(number v) {
        this->metro_03_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_04_output_set(number v) {
        this->metro_03_on_set(v);
    }
    
    void toggle_04_value_number_set(number v) {
        this->toggle_04_value_number_setter(v);
        v = this->toggle_04_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("activatefixed/toggle_obj-35"), v, this->_currentTime);
        this->toggle_04_output_set(v);
    }
    
    void eventinlet_28_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_04_value_number_set(converted);
        }
    }
    
    void message_44_set_set(const list& v) {
        this->message_44_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatefixed/message_obj-14"), v, this->_currentTime);
    }
    
    void send_02_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_28_source_gofixed_bang_bang();
    }
    
    void button_08_output_bang() {
        this->send_02_input_bang_bang();
    }
    
    void button_08_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("activatefixed/button_obj-6"), this->_currentTime);;
        this->button_08_output_bang();
    }
    
    void trigger_22_out3_bang() {
        this->button_08_bangval_bang();
    }
    
    void message_46_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_04_value_number_set(converted);
        }
    }
    
    void message_46_trigger_bang() {
        this->message_46_out_set(this->message_46_set);
    }
    
    void trigger_22_out2_bang() {
        this->message_46_trigger_bang();
    }
    
    void eventoutlet_20_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_28_out2_list_set((list)v);
    }
    
    void message_47_out_set(const list& v) {
        this->eventoutlet_20_in1_list_set(v);
    }
    
    void message_47_trigger_bang() {
        this->message_47_out_set(this->message_47_set);
    }
    
    void trigger_22_out1_bang() {
        this->message_47_trigger_bang();
    }
    
    void trigger_22_input_bang_bang() {
        this->trigger_22_out3_bang();
        this->trigger_22_out2_bang();
        this->trigger_22_out1_bang();
    }
    
    void select_24_match1_bang() {
        this->trigger_22_input_bang_bang();
    }
    
    void select_24_nomatch_number_set(number ) {}
    
    void select_24_input_number_set(number v) {
        if (v == this->select_24_test1)
            this->select_24_match1_bang();
        else
            this->select_24_nomatch_number_set(v);
    }
    
    void message_45_set_set(const list& v) {
        this->message_45_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatefixed/message_obj-16"), v, this->_currentTime);
    }
    
    void eventoutlet_19_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_28_out1_list_set((list)v);
    }
    
    void message_45_out_set(const list& v) {
        this->eventoutlet_19_in1_list_set(v);
    }
    
    void message_45_trigger_bang() {
        this->message_45_out_set(this->message_45_set);
    }
    
    void pack_03_out_set(const list& v) {
        this->message_45_set_set(v);
        this->message_45_trigger_bang();
    }
    
    void pack_03_in1_set(number v) {
        this->pack_03_in1 = v;
        list array = list(0, 0);
        array[0] = trunc(this->pack_03_in1);
        array[1] = this->pack_03_in2;
        this->pack_03_out_set(array);
    }
    
    void numberobj_145_output_set(number v) {
        this->select_24_input_number_set(v);
        this->pack_03_in1_set(v);
    }
    
    void numberobj_145_value_set(number v) {
        this->numberobj_145_value_setter(v);
        v = this->numberobj_145_value;
        number localvalue = v;
    
        if (this->numberobj_145_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("activatefixed/number_obj-21"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_145_output_set(localvalue);
    }
    
    void accum_03_out1_set(number v) {
        this->numberobj_145_value_set(v);
    }
    
    void accum_03_x_set(number x) {
        this->accum_03_x = x;
        auto reset = this->accum_03_reset;
    
        {
            {
                this->accum_03_value = ((bool)(reset) ? 1 : this->wrap(this->accum_03_value + x, 1, 101));
    
                {
                    this->accum_03_out1_set(this->accum_03_value);
                    return;
                }
            }
        }
    }
    
    void accum_03_reset_set(number v) {
        this->accum_03_reset = v;
    }
    
    void message_44_out_set(const list& v) {
        {
            if (v->length > 1)
                this->accum_03_reset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->accum_03_x_set(converted);
        }
    }
    
    void message_44_trigger_bang() {
        this->message_44_out_set(this->message_44_set);
    }
    
    void metro_03_tickout_bang() {
        this->message_44_trigger_bang();
    }
    
    void toggle_04_value_bang_bang() {
        number val = (this->toggle_04_value_number == 1 ? 0 : 1);
        this->toggle_04_value_number_set(val);
    }
    
    void message_46_set_set(const list& v) {
        this->message_46_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatefixed/message_obj-34"), v, this->_currentTime);
    }
    
    void message_47_set_set(const list& v) {
        this->message_47_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("activatefixed/message_obj-49"), v, this->_currentTime);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_04_value_number_setter(number v) {
        this->toggle_04_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_03_interval_setter(number v) {
        this->metro_03_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_145_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_145_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_145_value = localvalue;
    }
    
    void message_44_init() {
        this->message_44_set_set({1});
    }
    
    void toggle_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_04_value_number;
    }
    
    void toggle_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_04_value_number_set(preset["value"]);
    }
    
    void metro_03_onTransportChanged(number ) {}
    
    void metro_03_onBeatTimeChanged(number ) {}
    
    void numberobj_145_init() {
        this->numberobj_145_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("activatefixed/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_145_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_145_value;
    }
    
    void numberobj_145_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_145_value_set(preset["value"]);
    }
    
    void message_45_init() {
        this->message_45_set_set({100, 1});
    }
    
    void message_46_init() {
        this->message_46_set_set({0});
    }
    
    void message_47_init() {
        this->message_47_set_set({1});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        accum_03_x = 0;
        accum_03_reset = 0;
        toggle_04_value_number = 0;
        toggle_04_value_number_setter(toggle_04_value_number);
        metro_03_on = 0;
        metro_03_interval = 1;
        metro_03_interval_setter(metro_03_interval);
        numberobj_145_value = 0;
        numberobj_145_value_setter(numberobj_145_value);
        pack_03_in1 = 0;
        pack_03_in2 = 1;
        select_24_test1 = 100;
        send_02_input_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        accum_03_value = 1;
        toggle_04_lastValue = 0;
        metro_03_last = -1;
        metro_03_next = -1;
        numberobj_145_currentFormat = 6;
        numberobj_145_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_44_set;
        number accum_03_x;
        number accum_03_reset;
        number toggle_04_value_number;
        number metro_03_on;
        number metro_03_interval;
        number numberobj_145_value;
        list message_45_set;
        number pack_03_in1;
        number pack_03_in2;
        list message_46_set;
        number select_24_test1;
        list message_47_set;
        number send_02_input_number;
        list send_02_input_list;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number accum_03_value;
        number toggle_04_lastValue;
        MillisecondTime metro_03_last;
        MillisecondTime metro_03_next;
        Int numberobj_145_currentFormat;
        number numberobj_145_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_122 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_109 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_105 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_109;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_105()
                        {
                        }
                        
                        ~RNBOSubpatcher_105()
                        {
                        }
                        
                        virtual RNBOSubpatcher_109* getPatcher() const {
                            return static_cast<RNBOSubpatcher_109 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_30_out1_bang_bang() {
                            this->scale_48_input_bang();
                            this->scale_46_input_bang();
                        }
                        
                        void eventinlet_30_out1_list_set(const list& v) {
                            this->scale_48_input_set(v);
                            this->scale_46_input_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_11_nz_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_47_outhigh_set(number v) {
                            this->scale_47_outhigh = v;
                        }
                        
                        void scale_48_out_set(const list& v) {
                            this->scale_48_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_47_outhigh_set(converted);
                            }
                        }
                        
                        void scale_48_input_set(const list& v) {
                            this->scale_48_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_48_inlow,
                                    this->scale_48_inhigh,
                                    this->scale_48_outlow,
                                    this->scale_48_outhigh,
                                    this->scale_48_power
                                ));
                            }
                        
                            this->scale_48_out_set(tmp);
                        }
                        
                        void scale_47_outlow_set(number v) {
                            this->scale_47_outlow = v;
                        }
                        
                        void scale_46_out_set(const list& v) {
                            this->scale_46_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_47_outlow_set(converted);
                            }
                        }
                        
                        void scale_46_input_set(const list& v) {
                            this->scale_46_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_46_inlow,
                                    this->scale_46_inhigh,
                                    this->scale_46_outlow,
                                    this->scale_46_outhigh,
                                    this->scale_46_power
                                ));
                            }
                        
                            this->scale_46_out_set(tmp);
                        }
                        
                        void eventinlet_30_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->scale_48_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_46_input_set(converted);
                            }
                        }
                        
                        void eventoutlet_21_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_12_out1_list_set((list)v);
                        }
                        
                        void scale_47_out_set(const list& v) {
                            this->scale_47_out = jsCreateListCopy(v);
                            this->eventoutlet_21_in1_list_set(v);
                        }
                        
                        void scale_47_input_set(const list& v) {
                            this->scale_47_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_47_inlow,
                                    this->scale_47_inhigh,
                                    this->scale_47_outlow,
                                    this->scale_47_outhigh,
                                    this->scale_47_power
                                ));
                            }
                        
                            this->scale_47_out_set(tmp);
                        }
                        
                        void random_11_result_set(number v) {
                            {
                                list converted = {v};
                                this->scale_47_input_set(converted);
                            }
                        }
                        
                        void random_11_trigger_bang() {
                            {
                                this->random_11_result_set(this->random(0, this->random_11_limit));
                            }
                        }
                        
                        void eventinlet_29_out1_bang_bang() {
                            this->random_11_trigger_bang();
                        }
                        
                        void eventinlet_29_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_11_trigger_bang();
                        }
                        
                        void eventinlet_29_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_11_trigger_bang();
                        }
                        
                        void scale_48_input_bang() {
                            list v = this->scale_48_input;
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_48_inlow,
                                    this->scale_48_inhigh,
                                    this->scale_48_outlow,
                                    this->scale_48_outhigh,
                                    this->scale_48_power
                                ));
                            }
                        
                            this->scale_48_out_set(tmp);
                        }
                        
                        void scale_46_input_bang() {
                            list v = this->scale_46_input;
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_46_inlow,
                                    this->scale_46_inhigh,
                                    this->scale_46_outlow,
                                    this->scale_46_outhigh,
                                    this->scale_46_power
                                ));
                            }
                        
                            this->scale_46_out_set(tmp);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_11_limit_setter(number v) {
                            if (v >= 0)
                                this->random_11_limit = v;
                        }
                        
                        void random_11_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_11_nz_state
                            );
                        }
                        
                        void random_11_nz_init() {
                            this->random_11_nz_reset();
                        }
                        
                        void random_11_nz_seed(number v) {
                            xoshiro_reset(v, this->random_11_nz_state);
                        }
                        
                        number random_11_nz_next() {
                            return xoshiro_next(this->random_11_nz_state);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_11_limit = 10000;
                            random_11_limit_setter(random_11_limit);
                            random_11_seed = 0;
                            scale_46_inlow = 0;
                            scale_46_inhigh = 100;
                            scale_46_outlow = 1000;
                            scale_46_outhigh = 200;
                            scale_46_power = 1;
                            scale_47_inlow = 0;
                            scale_47_inhigh = 9999;
                            scale_47_outlow = 200;
                            scale_47_outhigh = 14000;
                            scale_47_power = 1;
                            scale_48_inlow = 0;
                            scale_48_inhigh = 100;
                            scale_48_outlow = 1000;
                            scale_48_outhigh = 14000;
                            scale_48_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_11_limit;
                            number random_11_seed;
                            list scale_46_input;
                            number scale_46_inlow;
                            number scale_46_inhigh;
                            number scale_46_outlow;
                            number scale_46_outhigh;
                            number scale_46_power;
                            list scale_46_out;
                            list scale_47_input;
                            number scale_47_inlow;
                            number scale_47_inhigh;
                            number scale_47_outlow;
                            number scale_47_outhigh;
                            number scale_47_power;
                            list scale_47_out;
                            list scale_48_input;
                            number scale_48_inlow;
                            number scale_48_inhigh;
                            number scale_48_outlow;
                            number scale_48_outhigh;
                            number scale_48_power;
                            list scale_48_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_11_nz_state[4] = { };
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_106 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_109;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_106()
                        {
                        }
                        
                        ~RNBOSubpatcher_106()
                        {
                        }
                        
                        virtual RNBOSubpatcher_109* getPatcher() const {
                            return static_cast<RNBOSubpatcher_109 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-7") == objectId)
                                    this->numberobj_146_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-2") == objectId)
                                    this->numberobj_147_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-15") == objectId)
                                    this->numberobj_148_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-7") == objectId)
                                    this->numberobj_146_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-2") == objectId)
                                    this->numberobj_147_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/number_obj-15") == objectId)
                                    this->numberobj_148_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_48_listin_number_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_49_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_48_listin_list_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_49_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-30") == objectId)
                                    this->message_48_listin_bang_bang();
                        
                                if (TAG("fixedgrain/rand-filter/filtgain/message_obj-34") == objectId)
                                    this->message_49_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("fixedgrain/rand-filter/filtgain/number_obj-7"):
                                {
                                return "fixedgrain/rand-filter/filtgain/number_obj-7";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("fixedgrain/rand-filter/filtgain/number_obj-2"):
                                {
                                return "fixedgrain/rand-filter/filtgain/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("fixedgrain/rand-filter/filtgain/message_obj-30"):
                                {
                                return "fixedgrain/rand-filter/filtgain/message_obj-30";
                                }
                            case TAG("fixedgrain/rand-filter/filtgain/message_obj-34"):
                                {
                                return "fixedgrain/rand-filter/filtgain/message_obj-34";
                                }
                            case TAG("fixedgrain/rand-filter/filtgain/number_obj-15"):
                                {
                                return "fixedgrain/rand-filter/filtgain/number_obj-15";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void numberobj_146_valin_set(number v) {
                            this->numberobj_146_value_set(v);
                        }
                        
                        void numberobj_146_format_set(number v) {
                            this->numberobj_146_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_147_valin_set(number v) {
                            this->numberobj_147_value_set(v);
                        }
                        
                        void numberobj_147_format_set(number v) {
                            this->numberobj_147_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_48_listin_list_set(const list& v) {
                            this->message_48_set_set(v);
                        }
                        
                        void message_48_listin_number_set(number v) {
                            this->message_48_set_set(v);
                        }
                        
                        void message_48_listin_bang_bang() {
                            this->message_48_trigger_bang();
                        }
                        
                        void message_49_listin_list_set(const list& v) {
                            this->message_49_set_set(v);
                        }
                        
                        void message_49_listin_number_set(number v) {
                            this->message_49_set_set(v);
                        }
                        
                        void message_49_listin_bang_bang() {
                            this->message_49_trigger_bang();
                        }
                        
                        void numberobj_148_valin_set(number v) {
                            this->numberobj_148_value_set(v);
                        }
                        
                        void numberobj_148_format_set(number v) {
                            this->numberobj_148_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_32_out1_bang_bang() {
                            this->numberobj_148_value_bang();
                        }
                        
                        void eventinlet_32_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_148_value_set(converted);
                            }
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_12_nz_init();
                            this->numberobj_146_init();
                            this->numberobj_147_init();
                            this->message_48_init();
                            this->message_49_init();
                            this->numberobj_148_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_50_outhigh_set(number v) {
                            this->scale_50_outhigh = v;
                        }
                        
                        void scale_54_out_set(const list& v) {
                            this->scale_54_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_50_outhigh_set(converted);
                            }
                        }
                        
                        void scale_54_input_set(const list& v) {
                            this->scale_54_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_54_inlow,
                                    this->scale_54_inhigh,
                                    this->scale_54_outlow,
                                    this->scale_54_outhigh,
                                    this->scale_54_power
                                ));
                            }
                        
                            this->scale_54_out_set(tmp);
                        }
                        
                        void scale_50_outlow_set(number v) {
                            this->scale_50_outlow = v;
                        }
                        
                        void scale_53_out_set(const list& v) {
                            this->scale_53_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_50_outlow_set(converted);
                            }
                        }
                        
                        void scale_53_input_set(const list& v) {
                            this->scale_53_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_53_inlow,
                                    this->scale_53_inhigh,
                                    this->scale_53_outlow,
                                    this->scale_53_outhigh,
                                    this->scale_53_power
                                ));
                            }
                        
                            this->scale_53_out_set(tmp);
                        }
                        
                        void scale_49_outhigh_set(number v) {
                            this->scale_49_outhigh = v;
                        }
                        
                        void scale_52_out_set(const list& v) {
                            this->scale_52_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_49_outhigh_set(converted);
                            }
                        }
                        
                        void scale_52_input_set(const list& v) {
                            this->scale_52_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_52_inlow,
                                    this->scale_52_inhigh,
                                    this->scale_52_outlow,
                                    this->scale_52_outhigh,
                                    this->scale_52_power
                                ));
                            }
                        
                            this->scale_52_out_set(tmp);
                        }
                        
                        void scale_49_outlow_set(number v) {
                            this->scale_49_outlow = v;
                        }
                        
                        void scale_51_out_set(const list& v) {
                            this->scale_51_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_49_outlow_set(converted);
                            }
                        }
                        
                        void scale_51_input_set(const list& v) {
                            this->scale_51_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_51_inlow,
                                    this->scale_51_inhigh,
                                    this->scale_51_outlow,
                                    this->scale_51_outhigh,
                                    this->scale_51_power
                                ));
                            }
                        
                            this->scale_51_out_set(tmp);
                        }
                        
                        void numberobj_148_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_54_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_53_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_52_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_51_input_set(converted);
                            }
                        }
                        
                        void numberobj_148_value_set(number v) {
                            this->numberobj_148_value_setter(v);
                            v = this->numberobj_148_value;
                            number localvalue = v;
                        
                            if (this->numberobj_148_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_148_output_set(localvalue);
                        }
                        
                        void eventinlet_32_out1_number_set(number v) {
                            this->numberobj_148_value_set(v);
                        }
                        
                        void gate_20_onoff_set(number v) {
                            this->gate_20_onoff = v;
                        }
                        
                        void eventoutlet_22_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_13_out1_number_set(v);
                        }
                        
                        void numberobj_146_output_set(number v) {
                            this->eventoutlet_22_in1_number_set(v);
                        }
                        
                        void numberobj_146_value_set(number v) {
                            this->numberobj_146_value_setter(v);
                            v = this->numberobj_146_value;
                            number localvalue = v;
                        
                            if (this->numberobj_146_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-7"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_146_output_set(localvalue);
                        }
                        
                        void scale_49_out_set(const list& v) {
                            this->scale_49_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_146_value_set(converted);
                            }
                        }
                        
                        void scale_49_input_set(const list& v) {
                            this->scale_49_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_49_inlow,
                                    this->scale_49_inhigh,
                                    this->scale_49_outlow,
                                    this->scale_49_outhigh,
                                    this->scale_49_power
                                ));
                            }
                        
                            this->scale_49_out_set(tmp);
                        }
                        
                        void gate_20_out1_number_set(number v) {
                            this->gate_20_out1_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_49_input_set(converted);
                            }
                        }
                        
                        void scale_50_out_set(const list& v) {
                            this->scale_50_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_146_value_set(converted);
                            }
                        }
                        
                        void scale_50_input_set(const list& v) {
                            this->scale_50_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_50_inlow,
                                    this->scale_50_inhigh,
                                    this->scale_50_outlow,
                                    this->scale_50_outhigh,
                                    this->scale_50_power
                                ));
                            }
                        
                            this->scale_50_out_set(tmp);
                        }
                        
                        void gate_20_out2_number_set(number v) {
                            this->gate_20_out2_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_50_input_set(converted);
                            }
                        }
                        
                        void gate_20_input_number_set(number v) {
                            if (this->gate_20_onoff == 1)
                                this->gate_20_out1_number_set(v);
                            else if (this->gate_20_onoff == 2)
                                this->gate_20_out2_number_set(v);
                        }
                        
                        void message_49_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_20_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_20_onoff_set(converted);
                            }
                        }
                        
                        void message_49_trigger_bang() {
                            this->message_49_out_set(this->message_49_set);
                        }
                        
                        void select_26_match1_bang() {
                            this->message_49_trigger_bang();
                        }
                        
                        void select_26_nomatch_number_set(number ) {}
                        
                        void select_26_input_number_set(number v) {
                            if (v == this->select_26_test1)
                                this->select_26_match1_bang();
                            else
                                this->select_26_nomatch_number_set(v);
                        }
                        
                        void expr_49_out1_set(number v) {
                            this->expr_49_out1 = v;
                            this->select_26_input_number_set(this->expr_49_out1);
                        }
                        
                        void expr_49_in1_set(number in1) {
                            this->expr_49_in1 = in1;
                            this->expr_49_out1_set(this->expr_49_in1 >= this->expr_49_in2);//#map:fixedgrain/rand-filter/filtgain/>=_obj-4:1
                        }
                        
                        void message_48_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_20_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_20_onoff_set(converted);
                            }
                        }
                        
                        void message_48_trigger_bang() {
                            this->message_48_out_set(this->message_48_set);
                        }
                        
                        void select_25_match1_bang() {
                            this->message_48_trigger_bang();
                        }
                        
                        void select_25_nomatch_number_set(number ) {}
                        
                        void select_25_input_number_set(number v) {
                            if (v == this->select_25_test1)
                                this->select_25_match1_bang();
                            else
                                this->select_25_nomatch_number_set(v);
                        }
                        
                        void expr_48_out1_set(number v) {
                            this->expr_48_out1 = v;
                            this->select_25_input_number_set(this->expr_48_out1);
                        }
                        
                        void expr_48_in1_set(number in1) {
                            this->expr_48_in1 = in1;
                            this->expr_48_out1_set(this->expr_48_in1 < this->expr_48_in2);//#map:fixedgrain/rand-filter/filtgain/<_obj-13:1
                        }
                        
                        void numberobj_147_output_set(number v) {
                            this->expr_49_in1_set(v);
                            this->expr_48_in1_set(v);
                        }
                        
                        void numberobj_147_value_set(number v) {
                            this->numberobj_147_value_setter(v);
                            v = this->numberobj_147_value;
                            number localvalue = v;
                        
                            if (this->numberobj_147_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_147_output_set(localvalue);
                        }
                        
                        void trigger_23_out2_set(number v) {
                            this->numberobj_147_value_set(v);
                        }
                        
                        void trigger_23_out1_set(number v) {
                            this->gate_20_input_number_set(v);
                        }
                        
                        void trigger_23_input_number_set(number v) {
                            this->trigger_23_out2_set(v);
                            this->trigger_23_out1_set(v);
                        }
                        
                        void random_12_result_set(number v) {
                            this->trigger_23_input_number_set(v);
                        }
                        
                        void random_12_trigger_bang() {
                            {
                                this->random_12_result_set(this->random(0, this->random_12_limit));
                            }
                        }
                        
                        void eventinlet_31_out1_bang_bang() {
                            this->random_12_trigger_bang();
                        }
                        
                        void eventinlet_31_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_12_trigger_bang();
                        }
                        
                        void eventinlet_31_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_12_trigger_bang();
                        }
                        
                        void message_48_set_set(const list& v) {
                            this->message_48_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-filter/filtgain/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_49_set_set(const list& v) {
                            this->message_49_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-filter/filtgain/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_148_value_bang() {
                            number v = this->numberobj_148_value;
                            number localvalue = v;
                        
                            if (this->numberobj_148_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_148_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_12_limit_setter(number v) {
                            if (v >= 0)
                                this->random_12_limit = v;
                        }
                        
                        void numberobj_146_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_146_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_146_value = localvalue;
                        }
                        
                        void numberobj_147_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_147_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_147_value = localvalue;
                        }
                        
                        void numberobj_148_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_148_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_148_value = localvalue;
                        }
                        
                        void random_12_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_12_nz_state
                            );
                        }
                        
                        void random_12_nz_init() {
                            this->random_12_nz_reset();
                        }
                        
                        void random_12_nz_seed(number v) {
                            xoshiro_reset(v, this->random_12_nz_state);
                        }
                        
                        number random_12_nz_next() {
                            return xoshiro_next(this->random_12_nz_state);
                        }
                        
                        void numberobj_146_init() {
                            this->numberobj_146_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-7"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_146_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_146_value;
                        }
                        
                        void numberobj_146_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_146_value_set(preset["value"]);
                        }
                        
                        void numberobj_147_init() {
                            this->numberobj_147_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_147_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_147_value;
                        }
                        
                        void numberobj_147_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_147_value_set(preset["value"]);
                        }
                        
                        void message_48_init() {
                            this->message_48_set_set({1});
                        }
                        
                        void message_49_init() {
                            this->message_49_set_set({2});
                        }
                        
                        void numberobj_148_init() {
                            this->numberobj_148_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filtgain/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_148_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_148_value;
                        }
                        
                        void numberobj_148_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_148_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_12_limit = 1000;
                            random_12_limit_setter(random_12_limit);
                            random_12_seed = 0;
                            numberobj_146_value = 0;
                            numberobj_146_value_setter(numberobj_146_value);
                            scale_49_inlow = 0;
                            scale_49_inhigh = 499;
                            scale_49_outlow = 1;
                            scale_49_outhigh = 1;
                            scale_49_power = 1;
                            numberobj_147_value = 0;
                            numberobj_147_value_setter(numberobj_147_value);
                            gate_20_onoff = 0;
                            gate_20_out1_number = 0;
                            gate_20_out2_number = 0;
                            select_25_test1 = 1;
                            expr_48_in1 = 0;
                            expr_48_in2 = 500;
                            expr_48_out1 = 0;
                            select_26_test1 = 1;
                            expr_49_in1 = 0;
                            expr_49_in2 = 500;
                            expr_49_out1 = 0;
                            scale_50_inlow = 500;
                            scale_50_inhigh = 999;
                            scale_50_outlow = 1;
                            scale_50_outhigh = 1;
                            scale_50_power = 1;
                            scale_51_inlow = 0;
                            scale_51_inhigh = 100;
                            scale_51_outlow = 1;
                            scale_51_outhigh = 0.1;
                            scale_51_power = 1;
                            scale_52_inlow = 0;
                            scale_52_inhigh = 100;
                            scale_52_outlow = 1;
                            scale_52_outhigh = 0.4;
                            scale_52_power = 1;
                            numberobj_148_value = 0;
                            numberobj_148_value_setter(numberobj_148_value);
                            scale_53_inlow = 0;
                            scale_53_inhigh = 100;
                            scale_53_outlow = 1;
                            scale_53_outhigh = 2;
                            scale_53_power = 1;
                            scale_54_inlow = 0;
                            scale_54_inhigh = 100;
                            scale_54_outlow = 1;
                            scale_54_outhigh = 3;
                            scale_54_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_146_currentFormat = 6;
                            numberobj_146_lastValue = 0;
                            numberobj_147_currentFormat = 6;
                            numberobj_147_lastValue = 0;
                            numberobj_148_currentFormat = 6;
                            numberobj_148_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_12_limit;
                            number random_12_seed;
                            number numberobj_146_value;
                            list scale_49_input;
                            number scale_49_inlow;
                            number scale_49_inhigh;
                            number scale_49_outlow;
                            number scale_49_outhigh;
                            number scale_49_power;
                            list scale_49_out;
                            number numberobj_147_value;
                            list message_48_set;
                            number gate_20_onoff;
                            number gate_20_out1_number;
                            list gate_20_out1_list;
                            number gate_20_out2_number;
                            list gate_20_out2_list;
                            number select_25_test1;
                            number expr_48_in1;
                            number expr_48_in2;
                            number expr_48_out1;
                            list message_49_set;
                            number select_26_test1;
                            number expr_49_in1;
                            number expr_49_in2;
                            number expr_49_out1;
                            list scale_50_input;
                            number scale_50_inlow;
                            number scale_50_inhigh;
                            number scale_50_outlow;
                            number scale_50_outhigh;
                            number scale_50_power;
                            list scale_50_out;
                            list scale_51_input;
                            number scale_51_inlow;
                            number scale_51_inhigh;
                            number scale_51_outlow;
                            number scale_51_outhigh;
                            number scale_51_power;
                            list scale_51_out;
                            list scale_52_input;
                            number scale_52_inlow;
                            number scale_52_inhigh;
                            number scale_52_outlow;
                            number scale_52_outhigh;
                            number scale_52_power;
                            list scale_52_out;
                            number numberobj_148_value;
                            list scale_53_input;
                            number scale_53_inlow;
                            number scale_53_inhigh;
                            number scale_53_outlow;
                            number scale_53_outhigh;
                            number scale_53_power;
                            list scale_53_out;
                            list scale_54_input;
                            number scale_54_inlow;
                            number scale_54_inhigh;
                            number scale_54_outlow;
                            number scale_54_outhigh;
                            number scale_54_power;
                            list scale_54_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_12_nz_state[4] = { };
                            Int numberobj_146_currentFormat;
                            number numberobj_146_lastValue;
                            Int numberobj_147_currentFormat;
                            number numberobj_147_lastValue;
                            Int numberobj_148_currentFormat;
                            number numberobj_148_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_107 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_109;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_107()
                        {
                        }
                        
                        ~RNBOSubpatcher_107()
                        {
                        }
                        
                        virtual RNBOSubpatcher_109* getPatcher() const {
                            return static_cast<RNBOSubpatcher_109 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return rand01() * range + low;
                        }
                        
                        inline number safediv(number num, number denom) {
                            return (denom == 0.0 ? 0.0 : num / denom);
                        }
                        
                        number safepow(number base, number exponent) {
                            return fixnan(rnbo_pow(base, exponent));
                        }
                        
                        number scale(
                            number x,
                            number lowin,
                            number hiin,
                            number lowout,
                            number highout,
                            number pow
                        ) {
                            auto inscale = this->safediv(1., hiin - lowin);
                            number outdiff = highout - lowout;
                            number value = (x - lowin) * inscale;
                        
                            if (pow != 1) {
                                if (value > 0)
                                    value = this->safepow(value, pow);
                                else
                                    value = -this->safepow(-value, pow);
                            }
                        
                            value = value * outdiff + lowout;
                            return value;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-7") == objectId)
                                    this->numberobj_149_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-2") == objectId)
                                    this->numberobj_150_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-15") == objectId)
                                    this->numberobj_151_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-7") == objectId)
                                    this->numberobj_149_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-2") == objectId)
                                    this->numberobj_150_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/number_obj-15") == objectId)
                                    this->numberobj_151_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_50_listin_number_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_51_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_50_listin_list_set(payload);
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_51_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-30") == objectId)
                                    this->message_50_listin_bang_bang();
                        
                                if (TAG("fixedgrain/rand-filter/filterslope/message_obj-34") == objectId)
                                    this->message_51_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("fixedgrain/rand-filter/filterslope/number_obj-7"):
                                {
                                return "fixedgrain/rand-filter/filterslope/number_obj-7";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("fixedgrain/rand-filter/filterslope/number_obj-2"):
                                {
                                return "fixedgrain/rand-filter/filterslope/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("fixedgrain/rand-filter/filterslope/message_obj-30"):
                                {
                                return "fixedgrain/rand-filter/filterslope/message_obj-30";
                                }
                            case TAG("fixedgrain/rand-filter/filterslope/message_obj-34"):
                                {
                                return "fixedgrain/rand-filter/filterslope/message_obj-34";
                                }
                            case TAG("fixedgrain/rand-filter/filterslope/number_obj-15"):
                                {
                                return "fixedgrain/rand-filter/filterslope/number_obj-15";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void numberobj_149_valin_set(number v) {
                            this->numberobj_149_value_set(v);
                        }
                        
                        void numberobj_149_format_set(number v) {
                            this->numberobj_149_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_150_valin_set(number v) {
                            this->numberobj_150_value_set(v);
                        }
                        
                        void numberobj_150_format_set(number v) {
                            this->numberobj_150_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_50_listin_list_set(const list& v) {
                            this->message_50_set_set(v);
                        }
                        
                        void message_50_listin_number_set(number v) {
                            this->message_50_set_set(v);
                        }
                        
                        void message_50_listin_bang_bang() {
                            this->message_50_trigger_bang();
                        }
                        
                        void message_51_listin_list_set(const list& v) {
                            this->message_51_set_set(v);
                        }
                        
                        void message_51_listin_number_set(number v) {
                            this->message_51_set_set(v);
                        }
                        
                        void message_51_listin_bang_bang() {
                            this->message_51_trigger_bang();
                        }
                        
                        void numberobj_151_valin_set(number v) {
                            this->numberobj_151_value_set(v);
                        }
                        
                        void numberobj_151_format_set(number v) {
                            this->numberobj_151_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_34_out1_bang_bang() {
                            this->numberobj_151_value_bang();
                        }
                        
                        void eventinlet_34_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_151_value_set(converted);
                            }
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->random_13_nz_init();
                            this->numberobj_149_init();
                            this->numberobj_150_init();
                            this->message_50_init();
                            this->message_51_init();
                            this->numberobj_151_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void scale_56_outhigh_set(number v) {
                            this->scale_56_outhigh = v;
                        }
                        
                        void scale_60_out_set(const list& v) {
                            this->scale_60_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_56_outhigh_set(converted);
                            }
                        }
                        
                        void scale_60_input_set(const list& v) {
                            this->scale_60_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_60_inlow,
                                    this->scale_60_inhigh,
                                    this->scale_60_outlow,
                                    this->scale_60_outhigh,
                                    this->scale_60_power
                                ));
                            }
                        
                            this->scale_60_out_set(tmp);
                        }
                        
                        void scale_56_outlow_set(number v) {
                            this->scale_56_outlow = v;
                        }
                        
                        void scale_59_out_set(const list& v) {
                            this->scale_59_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_56_outlow_set(converted);
                            }
                        }
                        
                        void scale_59_input_set(const list& v) {
                            this->scale_59_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_59_inlow,
                                    this->scale_59_inhigh,
                                    this->scale_59_outlow,
                                    this->scale_59_outhigh,
                                    this->scale_59_power
                                ));
                            }
                        
                            this->scale_59_out_set(tmp);
                        }
                        
                        void scale_55_outhigh_set(number v) {
                            this->scale_55_outhigh = v;
                        }
                        
                        void scale_58_out_set(const list& v) {
                            this->scale_58_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_55_outhigh_set(converted);
                            }
                        }
                        
                        void scale_58_input_set(const list& v) {
                            this->scale_58_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_58_inlow,
                                    this->scale_58_inhigh,
                                    this->scale_58_outlow,
                                    this->scale_58_outhigh,
                                    this->scale_58_power
                                ));
                            }
                        
                            this->scale_58_out_set(tmp);
                        }
                        
                        void scale_55_outlow_set(number v) {
                            this->scale_55_outlow = v;
                        }
                        
                        void scale_57_out_set(const list& v) {
                            this->scale_57_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->scale_55_outlow_set(converted);
                            }
                        }
                        
                        void scale_57_input_set(const list& v) {
                            this->scale_57_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_57_inlow,
                                    this->scale_57_inhigh,
                                    this->scale_57_outlow,
                                    this->scale_57_outhigh,
                                    this->scale_57_power
                                ));
                            }
                        
                            this->scale_57_out_set(tmp);
                        }
                        
                        void numberobj_151_output_set(number v) {
                            {
                                list converted = {v};
                                this->scale_60_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_59_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_58_input_set(converted);
                            }
                        
                            {
                                list converted = {v};
                                this->scale_57_input_set(converted);
                            }
                        }
                        
                        void numberobj_151_value_set(number v) {
                            this->numberobj_151_value_setter(v);
                            v = this->numberobj_151_value;
                            number localvalue = v;
                        
                            if (this->numberobj_151_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_151_output_set(localvalue);
                        }
                        
                        void eventinlet_34_out1_number_set(number v) {
                            this->numberobj_151_value_set(v);
                        }
                        
                        void gate_21_onoff_set(number v) {
                            this->gate_21_onoff = v;
                        }
                        
                        void eventoutlet_23_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_14_out1_number_set(v);
                        }
                        
                        void numberobj_149_output_set(number v) {
                            this->eventoutlet_23_in1_number_set(v);
                        }
                        
                        void numberobj_149_value_set(number v) {
                            this->numberobj_149_value_setter(v);
                            v = this->numberobj_149_value;
                            number localvalue = v;
                        
                            if (this->numberobj_149_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-7"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_149_output_set(localvalue);
                        }
                        
                        void scale_55_out_set(const list& v) {
                            this->scale_55_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_149_value_set(converted);
                            }
                        }
                        
                        void scale_55_input_set(const list& v) {
                            this->scale_55_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_55_inlow,
                                    this->scale_55_inhigh,
                                    this->scale_55_outlow,
                                    this->scale_55_outhigh,
                                    this->scale_55_power
                                ));
                            }
                        
                            this->scale_55_out_set(tmp);
                        }
                        
                        void gate_21_out1_number_set(number v) {
                            this->gate_21_out1_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_55_input_set(converted);
                            }
                        }
                        
                        void scale_56_out_set(const list& v) {
                            this->scale_56_out = jsCreateListCopy(v);
                        
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_149_value_set(converted);
                            }
                        }
                        
                        void scale_56_input_set(const list& v) {
                            this->scale_56_input = jsCreateListCopy(v);
                            list tmp = {};
                        
                            for (Index i = 0; i < v->length; i++) {
                                tmp->push(this->scale(
                                    v[(Index)i],
                                    this->scale_56_inlow,
                                    this->scale_56_inhigh,
                                    this->scale_56_outlow,
                                    this->scale_56_outhigh,
                                    this->scale_56_power
                                ));
                            }
                        
                            this->scale_56_out_set(tmp);
                        }
                        
                        void gate_21_out2_number_set(number v) {
                            this->gate_21_out2_number = v;
                        
                            {
                                list converted = {v};
                                this->scale_56_input_set(converted);
                            }
                        }
                        
                        void gate_21_input_number_set(number v) {
                            if (this->gate_21_onoff == 1)
                                this->gate_21_out1_number_set(v);
                            else if (this->gate_21_onoff == 2)
                                this->gate_21_out2_number_set(v);
                        }
                        
                        void message_51_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_21_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_21_onoff_set(converted);
                            }
                        }
                        
                        void message_51_trigger_bang() {
                            this->message_51_out_set(this->message_51_set);
                        }
                        
                        void select_28_match1_bang() {
                            this->message_51_trigger_bang();
                        }
                        
                        void select_28_nomatch_number_set(number ) {}
                        
                        void select_28_input_number_set(number v) {
                            if (v == this->select_28_test1)
                                this->select_28_match1_bang();
                            else
                                this->select_28_nomatch_number_set(v);
                        }
                        
                        void expr_51_out1_set(number v) {
                            this->expr_51_out1 = v;
                            this->select_28_input_number_set(this->expr_51_out1);
                        }
                        
                        void expr_51_in1_set(number in1) {
                            this->expr_51_in1 = in1;
                            this->expr_51_out1_set(this->expr_51_in1 >= this->expr_51_in2);//#map:fixedgrain/rand-filter/filterslope/>=_obj-4:1
                        }
                        
                        void message_50_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_21_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_21_onoff_set(converted);
                            }
                        }
                        
                        void message_50_trigger_bang() {
                            this->message_50_out_set(this->message_50_set);
                        }
                        
                        void select_27_match1_bang() {
                            this->message_50_trigger_bang();
                        }
                        
                        void select_27_nomatch_number_set(number ) {}
                        
                        void select_27_input_number_set(number v) {
                            if (v == this->select_27_test1)
                                this->select_27_match1_bang();
                            else
                                this->select_27_nomatch_number_set(v);
                        }
                        
                        void expr_50_out1_set(number v) {
                            this->expr_50_out1 = v;
                            this->select_27_input_number_set(this->expr_50_out1);
                        }
                        
                        void expr_50_in1_set(number in1) {
                            this->expr_50_in1 = in1;
                            this->expr_50_out1_set(this->expr_50_in1 < this->expr_50_in2);//#map:fixedgrain/rand-filter/filterslope/<_obj-13:1
                        }
                        
                        void numberobj_150_output_set(number v) {
                            this->expr_51_in1_set(v);
                            this->expr_50_in1_set(v);
                        }
                        
                        void numberobj_150_value_set(number v) {
                            this->numberobj_150_value_setter(v);
                            v = this->numberobj_150_value;
                            number localvalue = v;
                        
                            if (this->numberobj_150_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_150_output_set(localvalue);
                        }
                        
                        void trigger_24_out2_set(number v) {
                            this->numberobj_150_value_set(v);
                        }
                        
                        void trigger_24_out1_set(number v) {
                            this->gate_21_input_number_set(v);
                        }
                        
                        void trigger_24_input_number_set(number v) {
                            this->trigger_24_out2_set(v);
                            this->trigger_24_out1_set(v);
                        }
                        
                        void random_13_result_set(number v) {
                            this->trigger_24_input_number_set(v);
                        }
                        
                        void random_13_trigger_bang() {
                            {
                                this->random_13_result_set(this->random(0, this->random_13_limit));
                            }
                        }
                        
                        void eventinlet_33_out1_bang_bang() {
                            this->random_13_trigger_bang();
                        }
                        
                        void eventinlet_33_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->random_13_trigger_bang();
                        }
                        
                        void eventinlet_33_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->random_13_trigger_bang();
                        }
                        
                        void message_50_set_set(const list& v) {
                            this->message_50_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-filter/filterslope/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_51_set_set(const list& v) {
                            this->message_51_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-filter/filterslope/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_151_value_bang() {
                            number v = this->numberobj_151_value;
                            number localvalue = v;
                        
                            if (this->numberobj_151_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_151_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void random_13_limit_setter(number v) {
                            if (v >= 0)
                                this->random_13_limit = v;
                        }
                        
                        void numberobj_149_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_149_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_149_value = localvalue;
                        }
                        
                        void numberobj_150_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_150_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_150_value = localvalue;
                        }
                        
                        void numberobj_151_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_151_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_151_value = localvalue;
                        }
                        
                        void random_13_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_13_nz_state
                            );
                        }
                        
                        void random_13_nz_init() {
                            this->random_13_nz_reset();
                        }
                        
                        void random_13_nz_seed(number v) {
                            xoshiro_reset(v, this->random_13_nz_state);
                        }
                        
                        number random_13_nz_next() {
                            return xoshiro_next(this->random_13_nz_state);
                        }
                        
                        void numberobj_149_init() {
                            this->numberobj_149_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-7"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_149_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_149_value;
                        }
                        
                        void numberobj_149_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_149_value_set(preset["value"]);
                        }
                        
                        void numberobj_150_init() {
                            this->numberobj_150_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_150_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_150_value;
                        }
                        
                        void numberobj_150_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_150_value_set(preset["value"]);
                        }
                        
                        void message_50_init() {
                            this->message_50_set_set({1});
                        }
                        
                        void message_51_init() {
                            this->message_51_set_set({2});
                        }
                        
                        void numberobj_151_init() {
                            this->numberobj_151_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-filter/filterslope/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_151_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_151_value;
                        }
                        
                        void numberobj_151_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_151_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            random_13_limit = 1000;
                            random_13_limit_setter(random_13_limit);
                            random_13_seed = 0;
                            numberobj_149_value = 0;
                            numberobj_149_value_setter(numberobj_149_value);
                            scale_55_inlow = 0;
                            scale_55_inhigh = 499;
                            scale_55_outlow = 1;
                            scale_55_outhigh = 1;
                            scale_55_power = 1;
                            numberobj_150_value = 0;
                            numberobj_150_value_setter(numberobj_150_value);
                            gate_21_onoff = 0;
                            gate_21_out1_number = 0;
                            gate_21_out2_number = 0;
                            select_27_test1 = 1;
                            expr_50_in1 = 0;
                            expr_50_in2 = 500;
                            expr_50_out1 = 0;
                            select_28_test1 = 1;
                            expr_51_in1 = 0;
                            expr_51_in2 = 500;
                            expr_51_out1 = 0;
                            scale_56_inlow = 500;
                            scale_56_inhigh = 999;
                            scale_56_outlow = 1;
                            scale_56_outhigh = 1;
                            scale_56_power = 1;
                            scale_57_inlow = 0;
                            scale_57_inhigh = 100;
                            scale_57_outlow = 1;
                            scale_57_outhigh = 0.1;
                            scale_57_power = 1;
                            scale_58_inlow = 0;
                            scale_58_inhigh = 100;
                            scale_58_outlow = 1;
                            scale_58_outhigh = 0.5;
                            scale_58_power = 1;
                            numberobj_151_value = 0;
                            numberobj_151_value_setter(numberobj_151_value);
                            scale_59_inlow = 0;
                            scale_59_inhigh = 100;
                            scale_59_outlow = 1;
                            scale_59_outhigh = 2;
                            scale_59_power = 1;
                            scale_60_inlow = 0;
                            scale_60_inhigh = 100;
                            scale_60_outlow = 1;
                            scale_60_outhigh = 3;
                            scale_60_power = 1;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_149_currentFormat = 6;
                            numberobj_149_lastValue = 0;
                            numberobj_150_currentFormat = 6;
                            numberobj_150_lastValue = 0;
                            numberobj_151_currentFormat = 6;
                            numberobj_151_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number random_13_limit;
                            number random_13_seed;
                            number numberobj_149_value;
                            list scale_55_input;
                            number scale_55_inlow;
                            number scale_55_inhigh;
                            number scale_55_outlow;
                            number scale_55_outhigh;
                            number scale_55_power;
                            list scale_55_out;
                            number numberobj_150_value;
                            list message_50_set;
                            number gate_21_onoff;
                            number gate_21_out1_number;
                            list gate_21_out1_list;
                            number gate_21_out2_number;
                            list gate_21_out2_list;
                            number select_27_test1;
                            number expr_50_in1;
                            number expr_50_in2;
                            number expr_50_out1;
                            list message_51_set;
                            number select_28_test1;
                            number expr_51_in1;
                            number expr_51_in2;
                            number expr_51_out1;
                            list scale_56_input;
                            number scale_56_inlow;
                            number scale_56_inhigh;
                            number scale_56_outlow;
                            number scale_56_outhigh;
                            number scale_56_power;
                            list scale_56_out;
                            list scale_57_input;
                            number scale_57_inlow;
                            number scale_57_inhigh;
                            number scale_57_outlow;
                            number scale_57_outhigh;
                            number scale_57_power;
                            list scale_57_out;
                            list scale_58_input;
                            number scale_58_inlow;
                            number scale_58_inhigh;
                            number scale_58_outlow;
                            number scale_58_outhigh;
                            number scale_58_power;
                            list scale_58_out;
                            number numberobj_151_value;
                            list scale_59_input;
                            number scale_59_inlow;
                            number scale_59_inhigh;
                            number scale_59_outlow;
                            number scale_59_outhigh;
                            number scale_59_power;
                            list scale_59_out;
                            list scale_60_input;
                            number scale_60_inlow;
                            number scale_60_inhigh;
                            number scale_60_outlow;
                            number scale_60_outhigh;
                            number scale_60_power;
                            list scale_60_out;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            UInt random_13_nz_state[4] = { };
                            Int numberobj_149_currentFormat;
                            number numberobj_149_lastValue;
                            Int numberobj_150_currentFormat;
                            number numberobj_150_lastValue;
                            Int numberobj_151_currentFormat;
                            number numberobj_151_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_109()
            {
            }
            
            ~RNBOSubpatcher_109()
            {
                delete this->p_12;
                delete this->p_13;
                delete this->p_14;
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1396722025, false);
                getEngine()->flushClockEvents(this, 2098551528, false);
                getEngine()->flushClockEvents(this, -1494586265, false);
                getEngine()->flushClockEvents(this, -708766484, false);
                getEngine()->flushClockEvents(this, -1410595987, false);
                getEngine()->flushClockEvents(this, -2112425490, false);
                getEngine()->flushClockEvents(this, -6936981, false);
                getEngine()->flushClockEvents(this, 694892522, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->p_12_perform(n);
                this->numbertilde_10_perform(this->zeroBuffer, this->signals[0], n);
                this->p_13_perform(n);
                this->numbertilde_13_perform(this->zeroBuffer, this->signals[1], n);
                this->p_14_perform(n);
                this->numbertilde_16_perform(this->zeroBuffer, this->signals[2], n);
            
                this->filtercoeff_02_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    n
                );
            
                this->biquad_tilde_02_perform(
                    in1,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out1,
                    n
                );
            
                this->numbertilde_11_perform(this->signals[3], this->dummyBuffer, n);
                this->numbertilde_12_perform(this->signals[4], this->dummyBuffer, n);
                this->numbertilde_14_perform(this->signals[5], this->dummyBuffer, n);
                this->numbertilde_15_perform(this->signals[6], this->dummyBuffer, n);
                this->numbertilde_17_perform(this->signals[7], this->dummyBuffer, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->numbertilde_10_dspsetup(forceDSPSetup);
                this->numbertilde_13_dspsetup(forceDSPSetup);
                this->numbertilde_16_dspsetup(forceDSPSetup);
                this->filtercoeff_02_dspsetup(forceDSPSetup);
                this->biquad_tilde_02_dspsetup(forceDSPSetup);
                this->numbertilde_11_dspsetup(forceDSPSetup);
                this->numbertilde_12_dspsetup(forceDSPSetup);
                this->numbertilde_14_dspsetup(forceDSPSetup);
                this->numbertilde_15_dspsetup(forceDSPSetup);
                this->numbertilde_17_dspsetup(forceDSPSetup);
                this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
                this->p_12->setVoiceIndex(index);
                this->p_13->setVoiceIndex(index);
                this->p_14->setVoiceIndex(index);
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
                this->p_12->setNoteNumber(noteNumber);
                this->p_13->setNoteNumber(noteNumber);
                this->p_14->setNoteNumber(noteNumber);
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_12 = new RNBOSubpatcher_105();
                this->p_12->setEngineAndPatcher(this->getEngine(), this);
                this->p_12->initialize();
                this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
                this->p_13 = new RNBOSubpatcher_106();
                this->p_13->setEngineAndPatcher(this->getEngine(), this);
                this->p_13->initialize();
                this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
                this->p_14 = new RNBOSubpatcher_107();
                this->p_14->setEngineAndPatcher(this->getEngine(), this);
                this->p_14->initialize();
                this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "filterfrequency"));
                this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "filtgain"));
                this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "filterslope"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        this->p_12->setParameterValue(index, v, time);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        this->p_13->setParameterValue(index, v, time);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        this->p_14->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterValue(index);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterValue(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterName(index);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterName(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->getParameterId(index);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->getParameterId(index);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_12->getNumParameters())
                            this->p_12->getParameterInfo(index, info);
            
                        index -= this->p_12->getNumParameters();
            
                        if (index < this->p_13->getNumParameters())
                            this->p_13->getParameterInfo(index, info);
            
                        index -= this->p_13->getNumParameters();
            
                        if (index < this->p_14->getNumParameters())
                            this->p_14->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_12)
                    return 0;
            
                if (subpatcher == this->p_13)
                    return 0 + this->p_12->getNumParameters();
            
                if (subpatcher == this->p_14)
                    return 0 + this->p_12->getNumParameters() + this->p_13->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_12->getNumParameters())
                        return this->p_12->constrainParameterValue(index, value);
            
                    index -= this->p_12->getNumParameters();
            
                    if (index < this->p_13->getNumParameters())
                        return this->p_13->constrainParameterValue(index, value);
            
                    index -= this->p_13->getNumParameters();
            
                    if (index < this->p_14->getNumParameters())
                        return this->p_14->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1396722025:
                    {
                    this->numbertilde_10_value_set(value);
                    break;
                    }
                case 2098551528:
                    {
                    this->numbertilde_13_value_set(value);
                    break;
                    }
                case -1494586265:
                    {
                    this->numbertilde_16_value_set(value);
                    break;
                    }
                case -708766484:
                    {
                    this->numbertilde_11_value_set(value);
                    break;
                    }
                case -1410595987:
                    {
                    this->numbertilde_12_value_set(value);
                    break;
                    }
                case -2112425490:
                    {
                    this->numbertilde_14_value_set(value);
                    break;
                    }
                case -6936981:
                    {
                    this->numbertilde_15_value_set(value);
                    break;
                    }
                case 694892522:
                    {
                    this->numbertilde_17_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("fixedgrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_10_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_11_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_12_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_13_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_14_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_15_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_16_sig_number_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_17_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("fixedgrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_10_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_11_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_12_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_13_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_14_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_15_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_16_mode_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_17_mode_set(payload);
            
                    break;
                    }
                }
            
                this->p_12->processNumMessage(tag, objectId, time, payload);
                this->p_13->processNumMessage(tag, objectId, time, payload);
                this->p_14->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("fixedgrain/rand-filter/number~_obj-21") == objectId)
                        this->numbertilde_10_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-14") == objectId)
                        this->numbertilde_11_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-7") == objectId)
                        this->numbertilde_12_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-22") == objectId)
                        this->numbertilde_13_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-59") == objectId)
                        this->numbertilde_14_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-15") == objectId)
                        this->numbertilde_15_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-23") == objectId)
                        this->numbertilde_16_sig_list_set(payload);
            
                    if (TAG("fixedgrain/rand-filter/number~_obj-16") == objectId)
                        this->numbertilde_17_sig_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_12->processListMessage(tag, objectId, time, payload);
                this->p_13->processListMessage(tag, objectId, time, payload);
                this->p_14->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_12->processBangMessage(tag, objectId, time);
                this->p_13->processBangMessage(tag, objectId, time);
                this->p_14->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-21"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-21";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-14"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-14";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-7"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-7";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-22"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-22";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-59"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-59";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-15"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-15";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-23"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-23";
                    }
                case TAG("fixedgrain/rand-filter/number~_obj-16"):
                    {
                    return "fixedgrain/rand-filter/number~_obj-16";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                }
            
                auto subpatchResult_0 = this->p_12->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_13->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_14->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_12->processDataViewUpdate(index, time);
                this->p_13->processDataViewUpdate(index, time);
                this->p_14->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_35_out1_number_set(number v) {
                this->p_14_in1_number_set(v);
                this->p_13_in1_number_set(v);
                this->p_12_in1_number_set(v);
            }
            
            void eventinlet_35_out1_list_set(const list& v) {
                this->p_14_in1_list_set(v);
                this->p_13_in1_list_set(v);
                this->p_12_in1_list_set(v);
            }
            
            void numbertilde_10_sig_number_set(number v) {
                this->numbertilde_10_outValue = v;
            }
            
            void numbertilde_10_sig_list_set(const list& v) {
                this->numbertilde_10_outValue = v[0];
            }
            
            void numbertilde_10_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_10_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_10_currentMode = 1;
                }
            }
            
            void numbertilde_11_sig_number_set(number v) {
                this->numbertilde_11_outValue = v;
            }
            
            void numbertilde_11_sig_list_set(const list& v) {
                this->numbertilde_11_outValue = v[0];
            }
            
            void numbertilde_11_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_11_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_11_currentMode = 1;
                }
            }
            
            void numbertilde_12_sig_number_set(number v) {
                this->numbertilde_12_outValue = v;
            }
            
            void numbertilde_12_sig_list_set(const list& v) {
                this->numbertilde_12_outValue = v[0];
            }
            
            void numbertilde_12_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_12_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_12_currentMode = 1;
                }
            }
            
            void numbertilde_13_sig_number_set(number v) {
                this->numbertilde_13_outValue = v;
            }
            
            void numbertilde_13_sig_list_set(const list& v) {
                this->numbertilde_13_outValue = v[0];
            }
            
            void numbertilde_13_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_13_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_13_currentMode = 1;
                }
            }
            
            void numbertilde_14_sig_number_set(number v) {
                this->numbertilde_14_outValue = v;
            }
            
            void numbertilde_14_sig_list_set(const list& v) {
                this->numbertilde_14_outValue = v[0];
            }
            
            void numbertilde_14_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_14_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_14_currentMode = 1;
                }
            }
            
            void numbertilde_15_sig_number_set(number v) {
                this->numbertilde_15_outValue = v;
            }
            
            void numbertilde_15_sig_list_set(const list& v) {
                this->numbertilde_15_outValue = v[0];
            }
            
            void numbertilde_15_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_15_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_15_currentMode = 1;
                }
            }
            
            void numbertilde_16_sig_number_set(number v) {
                this->numbertilde_16_outValue = v;
            }
            
            void numbertilde_16_sig_list_set(const list& v) {
                this->numbertilde_16_outValue = v[0];
            }
            
            void numbertilde_16_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_16_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_16_currentMode = 1;
                }
            }
            
            void numbertilde_17_sig_number_set(number v) {
                this->numbertilde_17_outValue = v;
            }
            
            void numbertilde_17_sig_list_set(const list& v) {
                this->numbertilde_17_outValue = v[0];
            }
            
            void numbertilde_17_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_17_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_17_currentMode = 1;
                }
            }
            
            void numbertilde_10_value_set(number ) {}
            
            void numbertilde_13_value_set(number ) {}
            
            void numbertilde_16_value_set(number ) {}
            
            void numbertilde_11_value_set(number ) {}
            
            void numbertilde_12_value_set(number ) {}
            
            void numbertilde_14_value_set(number ) {}
            
            void numbertilde_15_value_set(number ) {}
            
            void numbertilde_17_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->numbertilde_10_init();
                this->numbertilde_11_init();
                this->numbertilde_12_init();
                this->numbertilde_13_init();
                this->numbertilde_14_init();
                this->numbertilde_15_init();
                this->numbertilde_16_init();
                this->numbertilde_17_init();
                this->p_12->initializeObjects();
                this->p_13->initializeObjects();
                this->p_14->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_12->startup();
                this->p_13->startup();
                this->p_14->startup();
            }
            
            void allocateDataRefs() {
                this->p_12->allocateDataRefs();
                this->p_13->allocateDataRefs();
                this->p_14->allocateDataRefs();
            }
            
            void p_14_in2_number_set(number v) {
                this->p_14->updateTime(this->_currentTime);
                this->p_14->eventinlet_34_out1_number_set(v);
            }
            
            void p_13_in2_number_set(number v) {
                this->p_13->updateTime(this->_currentTime);
                this->p_13->eventinlet_32_out1_number_set(v);
            }
            
            void p_12_in2_number_set(number v) {
                this->p_12->updateTime(this->_currentTime);
                this->p_12->eventinlet_30_out1_number_set(v);
            }
            
            void receive_25_output_number_set(number v) {
                this->receive_25_output_number = v;
                this->p_14_in2_number_set(v);
                this->p_13_in2_number_set(v);
                this->p_12_in2_number_set(v);
            }
            
            void numbertilde_16_input_number_set(number v) {
                this->numbertilde_16_input_number = v;
                this->numbertilde_16_outValue = v;
            
                if (this->numbertilde_16_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("fixedgrain/rand-filter/number~_obj-23"),
                        {this->numbertilde_16_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_14_out1_number_set(number v) {
                this->numbertilde_16_input_number_set(v);
            }
            
            void p_14_in1_bang_bang() {
                this->p_14->updateTime(this->_currentTime);
                this->p_14->eventinlet_33_out1_bang_bang();
            }
            
            void numbertilde_13_input_number_set(number v) {
                this->numbertilde_13_input_number = v;
                this->numbertilde_13_outValue = v;
            
                if (this->numbertilde_13_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("fixedgrain/rand-filter/number~_obj-22"),
                        {this->numbertilde_13_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_13_out1_number_set(number v) {
                this->numbertilde_13_input_number_set(v);
            }
            
            void p_13_in1_bang_bang() {
                this->p_13->updateTime(this->_currentTime);
                this->p_13->eventinlet_31_out1_bang_bang();
            }
            
            void numbertilde_10_input_number_set(number v) {
                this->numbertilde_10_input_number = v;
                this->numbertilde_10_outValue = v;
            
                if (this->numbertilde_10_currentMode == 0) {
                    this->getEngine()->sendNumMessage(
                        TAG("assign"),
                        TAG("fixedgrain/rand-filter/number~_obj-21"),
                        {this->numbertilde_10_outValue},
                        this->_currentTime
                    );
                }
            }
            
            void p_12_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numbertilde_10_input_number_set(converted);
                }
            }
            
            void p_12_in1_bang_bang() {
                this->p_12->updateTime(this->_currentTime);
                this->p_12->eventinlet_29_out1_bang_bang();
            }
            
            void eventinlet_35_out1_bang_bang() {
                this->p_14_in1_bang_bang();
                this->p_13_in1_bang_bang();
                this->p_12_in1_bang_bang();
            }
            
            void p_14_in1_number_set(number v) {
                this->p_14->updateTime(this->_currentTime);
                this->p_14->eventinlet_33_out1_number_set(v);
            }
            
            void p_13_in1_number_set(number v) {
                this->p_13->updateTime(this->_currentTime);
                this->p_13->eventinlet_31_out1_number_set(v);
            }
            
            void p_12_in1_number_set(number v) {
                this->p_12->updateTime(this->_currentTime);
                this->p_12->eventinlet_29_out1_number_set(v);
            }
            
            void p_14_in1_list_set(const list& v) {
                this->p_14->updateTime(this->_currentTime);
                this->p_14->eventinlet_33_out1_list_set(v);
            }
            
            void p_13_in1_list_set(const list& v) {
                this->p_13->updateTime(this->_currentTime);
                this->p_13->eventinlet_31_out1_list_set(v);
            }
            
            void p_12_in1_list_set(const list& v) {
                this->p_12->updateTime(this->_currentTime);
                this->p_12->eventinlet_29_out1_list_set(v);
            }
            
            void p_12_perform(Index n) {
                // subpatcher: filterfrequency
                this->p_12->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_10_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_10_currentIntervalInSamples = this->numbertilde_10_currentIntervalInSamples;
                auto __numbertilde_10_lastValue = this->numbertilde_10_lastValue;
                auto __numbertilde_10_currentInterval = this->numbertilde_10_currentInterval;
                auto __numbertilde_10_rampInSamples = this->numbertilde_10_rampInSamples;
                auto __numbertilde_10_outValue = this->numbertilde_10_outValue;
                auto __numbertilde_10_currentMode = this->numbertilde_10_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_10_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_10_smooth_next(
                            __numbertilde_10_outValue,
                            __numbertilde_10_rampInSamples,
                            __numbertilde_10_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_10_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_10_lastValue && __numbertilde_10_currentInterval <= 0) {
                    __numbertilde_10_currentInterval = __numbertilde_10_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1396722025,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_10_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-21"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_10_currentInterval = __numbertilde_10_currentInterval;
                this->numbertilde_10_lastValue = __numbertilde_10_lastValue;
            }
            
            void p_13_perform(Index n) {
                // subpatcher: filtgain
                this->p_13->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_13_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_13_currentIntervalInSamples = this->numbertilde_13_currentIntervalInSamples;
                auto __numbertilde_13_lastValue = this->numbertilde_13_lastValue;
                auto __numbertilde_13_currentInterval = this->numbertilde_13_currentInterval;
                auto __numbertilde_13_rampInSamples = this->numbertilde_13_rampInSamples;
                auto __numbertilde_13_outValue = this->numbertilde_13_outValue;
                auto __numbertilde_13_currentMode = this->numbertilde_13_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_13_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_13_smooth_next(
                            __numbertilde_13_outValue,
                            __numbertilde_13_rampInSamples,
                            __numbertilde_13_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_13_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_13_lastValue && __numbertilde_13_currentInterval <= 0) {
                    __numbertilde_13_currentInterval = __numbertilde_13_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        2098551528,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_13_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-22"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_13_currentInterval = __numbertilde_13_currentInterval;
                this->numbertilde_13_lastValue = __numbertilde_13_lastValue;
            }
            
            void p_14_perform(Index n) {
                // subpatcher: filterslope
                this->p_14->process(nullptr, 0, nullptr, 0, n);
            }
            
            void numbertilde_16_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_16_currentIntervalInSamples = this->numbertilde_16_currentIntervalInSamples;
                auto __numbertilde_16_lastValue = this->numbertilde_16_lastValue;
                auto __numbertilde_16_currentInterval = this->numbertilde_16_currentInterval;
                auto __numbertilde_16_rampInSamples = this->numbertilde_16_rampInSamples;
                auto __numbertilde_16_outValue = this->numbertilde_16_outValue;
                auto __numbertilde_16_currentMode = this->numbertilde_16_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_16_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_16_smooth_next(
                            __numbertilde_16_outValue,
                            __numbertilde_16_rampInSamples,
                            __numbertilde_16_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_16_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_16_lastValue && __numbertilde_16_currentInterval <= 0) {
                    __numbertilde_16_currentInterval = __numbertilde_16_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_16_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-23"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_16_currentInterval = __numbertilde_16_currentInterval;
                this->numbertilde_16_lastValue = __numbertilde_16_lastValue;
            }
            
            void filtercoeff_02_perform(
                const Sample * frequency,
                const Sample * gain,
                const Sample * q,
                SampleValue * a0,
                SampleValue * a1,
                SampleValue * a2,
                SampleValue * b1,
                SampleValue * b2,
                Index n
            ) {
                auto __filtercoeff_02_activeResamp = this->filtercoeff_02_activeResamp;
                auto __filtercoeff_02_resamp_counter = this->filtercoeff_02_resamp_counter;
                auto __filtercoeff_02_K_EPSILON = this->filtercoeff_02_K_EPSILON;
            
                for (Index i = 0; i < n; i++) {
                    number local_q = q[(Index)i];
                    number local_gain = gain[(Index)i];
            
                    if (local_gain < 0)
                        local_gain = 0;
            
                    number local_frequency = frequency[(Index)i];
            
                    if (local_q < __filtercoeff_02_K_EPSILON)
                        local_q = __filtercoeff_02_K_EPSILON;
            
                    local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
                    __filtercoeff_02_resamp_counter--;
            
                    if (__filtercoeff_02_resamp_counter <= 0) {
                        __filtercoeff_02_resamp_counter = __filtercoeff_02_activeResamp;
                        this->filtercoeff_02_updateTerms(local_frequency, local_gain, local_q);
                    }
            
                    a0[(Index)i] = this->filtercoeff_02_la0;
                    a1[(Index)i] = this->filtercoeff_02_la1;
                    a2[(Index)i] = this->filtercoeff_02_la2;
                    b1[(Index)i] = this->filtercoeff_02_lb1;
                    b2[(Index)i] = this->filtercoeff_02_lb2;
                }
            
                this->filtercoeff_02_resamp_counter = __filtercoeff_02_resamp_counter;
            }
            
            void biquad_tilde_02_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_02_y2 = this->biquad_tilde_02_y2;
                auto __biquad_tilde_02_y1 = this->biquad_tilde_02_y1;
                auto __biquad_tilde_02_x2 = this->biquad_tilde_02_x2;
                auto __biquad_tilde_02_x1 = this->biquad_tilde_02_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_02_x1 * a1[(Index)i] + __biquad_tilde_02_x2 * a2[(Index)i] - (__biquad_tilde_02_y1 * b1[(Index)i] + __biquad_tilde_02_y2 * b2[(Index)i]);
                    __biquad_tilde_02_x2 = __biquad_tilde_02_x1;
                    __biquad_tilde_02_x1 = x[(Index)i];
                    __biquad_tilde_02_y2 = __biquad_tilde_02_y1;
                    __biquad_tilde_02_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_02_x1 = __biquad_tilde_02_x1;
                this->biquad_tilde_02_x2 = __biquad_tilde_02_x2;
                this->biquad_tilde_02_y1 = __biquad_tilde_02_y1;
                this->biquad_tilde_02_y2 = __biquad_tilde_02_y2;
            }
            
            void numbertilde_11_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_11_currentIntervalInSamples = this->numbertilde_11_currentIntervalInSamples;
                auto __numbertilde_11_lastValue = this->numbertilde_11_lastValue;
                auto __numbertilde_11_currentInterval = this->numbertilde_11_currentInterval;
                auto __numbertilde_11_rampInSamples = this->numbertilde_11_rampInSamples;
                auto __numbertilde_11_outValue = this->numbertilde_11_outValue;
                auto __numbertilde_11_currentMode = this->numbertilde_11_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_11_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_11_smooth_next(
                            __numbertilde_11_outValue,
                            __numbertilde_11_rampInSamples,
                            __numbertilde_11_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_11_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_11_lastValue && __numbertilde_11_currentInterval <= 0) {
                    __numbertilde_11_currentInterval = __numbertilde_11_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -708766484,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_11_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-14"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_11_currentInterval = __numbertilde_11_currentInterval;
                this->numbertilde_11_lastValue = __numbertilde_11_lastValue;
            }
            
            void numbertilde_12_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_12_currentIntervalInSamples = this->numbertilde_12_currentIntervalInSamples;
                auto __numbertilde_12_lastValue = this->numbertilde_12_lastValue;
                auto __numbertilde_12_currentInterval = this->numbertilde_12_currentInterval;
                auto __numbertilde_12_rampInSamples = this->numbertilde_12_rampInSamples;
                auto __numbertilde_12_outValue = this->numbertilde_12_outValue;
                auto __numbertilde_12_currentMode = this->numbertilde_12_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_12_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_12_smooth_next(
                            __numbertilde_12_outValue,
                            __numbertilde_12_rampInSamples,
                            __numbertilde_12_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_12_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_12_lastValue && __numbertilde_12_currentInterval <= 0) {
                    __numbertilde_12_currentInterval = __numbertilde_12_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1410595987,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_12_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-7"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_12_currentInterval = __numbertilde_12_currentInterval;
                this->numbertilde_12_lastValue = __numbertilde_12_lastValue;
            }
            
            void numbertilde_14_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_14_currentIntervalInSamples = this->numbertilde_14_currentIntervalInSamples;
                auto __numbertilde_14_lastValue = this->numbertilde_14_lastValue;
                auto __numbertilde_14_currentInterval = this->numbertilde_14_currentInterval;
                auto __numbertilde_14_rampInSamples = this->numbertilde_14_rampInSamples;
                auto __numbertilde_14_outValue = this->numbertilde_14_outValue;
                auto __numbertilde_14_currentMode = this->numbertilde_14_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_14_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_14_smooth_next(
                            __numbertilde_14_outValue,
                            __numbertilde_14_rampInSamples,
                            __numbertilde_14_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_14_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_14_lastValue && __numbertilde_14_currentInterval <= 0) {
                    __numbertilde_14_currentInterval = __numbertilde_14_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -2112425490,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_14_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-59"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_14_currentInterval = __numbertilde_14_currentInterval;
                this->numbertilde_14_lastValue = __numbertilde_14_lastValue;
            }
            
            void numbertilde_15_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_15_currentIntervalInSamples = this->numbertilde_15_currentIntervalInSamples;
                auto __numbertilde_15_lastValue = this->numbertilde_15_lastValue;
                auto __numbertilde_15_currentInterval = this->numbertilde_15_currentInterval;
                auto __numbertilde_15_rampInSamples = this->numbertilde_15_rampInSamples;
                auto __numbertilde_15_outValue = this->numbertilde_15_outValue;
                auto __numbertilde_15_currentMode = this->numbertilde_15_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_15_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_15_smooth_next(
                            __numbertilde_15_outValue,
                            __numbertilde_15_rampInSamples,
                            __numbertilde_15_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_15_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_15_lastValue && __numbertilde_15_currentInterval <= 0) {
                    __numbertilde_15_currentInterval = __numbertilde_15_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -6936981,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_15_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-15"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_15_currentInterval = __numbertilde_15_currentInterval;
                this->numbertilde_15_lastValue = __numbertilde_15_lastValue;
            }
            
            void numbertilde_17_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_17_currentIntervalInSamples = this->numbertilde_17_currentIntervalInSamples;
                auto __numbertilde_17_lastValue = this->numbertilde_17_lastValue;
                auto __numbertilde_17_currentInterval = this->numbertilde_17_currentInterval;
                auto __numbertilde_17_rampInSamples = this->numbertilde_17_rampInSamples;
                auto __numbertilde_17_outValue = this->numbertilde_17_outValue;
                auto __numbertilde_17_currentMode = this->numbertilde_17_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_17_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_17_smooth_next(
                            __numbertilde_17_outValue,
                            __numbertilde_17_rampInSamples,
                            __numbertilde_17_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_17_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_17_lastValue && __numbertilde_17_currentInterval <= 0) {
                    __numbertilde_17_currentInterval = __numbertilde_17_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        694892522,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_17_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-filter/number~_obj-16"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_17_currentInterval = __numbertilde_17_currentInterval;
                this->numbertilde_17_lastValue = __numbertilde_17_lastValue;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void biquad_tilde_02_reset() {
                this->biquad_tilde_02_x1 = 0;
                this->biquad_tilde_02_x2 = 0;
                this->biquad_tilde_02_y1 = 0;
                this->biquad_tilde_02_y2 = 0;
            }
            
            void biquad_tilde_02_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_02_reset();
                this->biquad_tilde_02_setupDone = true;
            }
            
            number numbertilde_10_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_10_smooth_d_prev);
                this->numbertilde_10_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_10_smooth_d_dspsetup() {
                this->numbertilde_10_smooth_d_reset();
            }
            
            void numbertilde_10_smooth_d_reset() {
                this->numbertilde_10_smooth_d_prev = 0;
            }
            
            number numbertilde_10_smooth_next(number x, number up, number down) {
                if (this->numbertilde_10_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_10_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_10_smooth_index = _up;
                        this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _up;
                    } else if (x < this->numbertilde_10_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_10_smooth_index = _down;
                        this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_10_smooth_index > 0) {
                    this->numbertilde_10_smooth_prev += this->numbertilde_10_smooth_increment;
                    this->numbertilde_10_smooth_index -= 1;
                } else {
                    this->numbertilde_10_smooth_prev = x;
                }
            
                return this->numbertilde_10_smooth_prev;
            }
            
            void numbertilde_10_smooth_reset() {
                this->numbertilde_10_smooth_prev = 0;
                this->numbertilde_10_smooth_index = 0;
                this->numbertilde_10_smooth_increment = 0;
                this->numbertilde_10_smooth_d_reset();
            }
            
            void numbertilde_10_init() {
                this->numbertilde_10_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-21"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_10_dspsetup(bool force) {
                if ((bool)(this->numbertilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_10_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_10_currentInterval = this->numbertilde_10_currentIntervalInSamples;
                this->numbertilde_10_rampInSamples = this->mstosamps(this->numbertilde_10_ramp);
                this->numbertilde_10_setupDone = true;
                this->numbertilde_10_smooth_d_dspsetup();
            }
            
            number numbertilde_11_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_11_smooth_d_prev);
                this->numbertilde_11_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_11_smooth_d_dspsetup() {
                this->numbertilde_11_smooth_d_reset();
            }
            
            void numbertilde_11_smooth_d_reset() {
                this->numbertilde_11_smooth_d_prev = 0;
            }
            
            number numbertilde_11_smooth_next(number x, number up, number down) {
                if (this->numbertilde_11_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_11_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_11_smooth_index = _up;
                        this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _up;
                    } else if (x < this->numbertilde_11_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_11_smooth_index = _down;
                        this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_11_smooth_index > 0) {
                    this->numbertilde_11_smooth_prev += this->numbertilde_11_smooth_increment;
                    this->numbertilde_11_smooth_index -= 1;
                } else {
                    this->numbertilde_11_smooth_prev = x;
                }
            
                return this->numbertilde_11_smooth_prev;
            }
            
            void numbertilde_11_smooth_reset() {
                this->numbertilde_11_smooth_prev = 0;
                this->numbertilde_11_smooth_index = 0;
                this->numbertilde_11_smooth_increment = 0;
                this->numbertilde_11_smooth_d_reset();
            }
            
            void numbertilde_11_init() {
                this->numbertilde_11_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-14"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_11_dspsetup(bool force) {
                if ((bool)(this->numbertilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_11_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_11_currentInterval = this->numbertilde_11_currentIntervalInSamples;
                this->numbertilde_11_rampInSamples = this->mstosamps(this->numbertilde_11_ramp);
                this->numbertilde_11_setupDone = true;
                this->numbertilde_11_smooth_d_dspsetup();
            }
            
            array<number, 5> filtercoeff_02_localop_next(number frequency, number q, number gain, number type) {
                number omega = frequency * this->filtercoeff_02_localop_twopi_over_sr;
                this->filtercoeff_02_localop_cs = rnbo_cos(omega);
                this->filtercoeff_02_localop_sn = rnbo_sin(omega);
                this->filtercoeff_02_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
                this->filtercoeff_02_localop_one_over_q = (number)1 / q;
                this->filtercoeff_02_localop_alpha = this->filtercoeff_02_localop_sn * 0.5 * this->filtercoeff_02_localop_one_over_q;
            
                switch ((int)type) {
                case 5:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_02_localop_beta = this->safesqrt(
                        (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
                    );
            
                    this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_02_localop_beta = this->safesqrt(
                        (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
                    );
            
                    this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
                    this->filtercoeff_02_localop_one_over_a = (this->filtercoeff_02_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_02_localop_A);
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a);
                    break;
                    }
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                    {
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    break;
                    }
                default:
                    {
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
                    break;
                    }
                }
            
                switch ((int)type) {
                case 0:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 1:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 2:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 7:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 3:
                    {
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 8:
                    {
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = 1.0;
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_02_localop_la0 = (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 5:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1 - (this->filtercoeff_02_localop_A + 1) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = 2. * (this->filtercoeff_02_localop_A - 1. - (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 9:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 10:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 11:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 13:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 12:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 *= this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 *= this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0g;
                    break;
                    }
                case 14:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la2 = gain;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 15:
                    {
                    this->filtercoeff_02_localop_la0 = 1;
                    this->filtercoeff_02_localop_la1 = 0;
                    this->filtercoeff_02_localop_la2 = 0;
                    this->filtercoeff_02_localop_lb1 = 0;
                    this->filtercoeff_02_localop_lb2 = 0;
                    }
                default:
                    {
                    break;
                    }
                }
            
                return {
                    this->filtercoeff_02_localop_la0,
                    this->filtercoeff_02_localop_la1,
                    this->filtercoeff_02_localop_la2,
                    this->filtercoeff_02_localop_lb1,
                    this->filtercoeff_02_localop_lb2
                };
            }
            
            void filtercoeff_02_localop_dspsetup() {
                this->filtercoeff_02_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
            }
            
            void filtercoeff_02_localop_reset() {
                this->filtercoeff_02_localop_internal = true;
                this->filtercoeff_02_localop_twopi_over_sr = 0;
                this->filtercoeff_02_localop_cs = 0;
                this->filtercoeff_02_localop_sn = 0;
                this->filtercoeff_02_localop_one_over_gain = 0;
                this->filtercoeff_02_localop_one_over_q = 0;
                this->filtercoeff_02_localop_alpha = 0;
                this->filtercoeff_02_localop_beta = 0;
                this->filtercoeff_02_localop_b0 = 0;
                this->filtercoeff_02_localop_b0g = 0;
                this->filtercoeff_02_localop_A = 0;
                this->filtercoeff_02_localop_one_over_a = 0;
                this->filtercoeff_02_localop_la0 = 0;
                this->filtercoeff_02_localop_la1 = 0;
                this->filtercoeff_02_localop_la2 = 0;
                this->filtercoeff_02_localop_lb1 = 0;
                this->filtercoeff_02_localop_lb2 = 0;
            }
            
            void filtercoeff_02_updateTerms(number local_frequency, number local_gain, number local_q) {
                if ((bool)(this->filtercoeff_02_force_update) || local_frequency != this->filtercoeff_02_last_frequency || local_q != this->filtercoeff_02_last_q || local_gain != this->filtercoeff_02_last_gain || this->filtercoeff_02_type != this->filtercoeff_02_last_type) {
                    array<number, 5> tmp = this->filtercoeff_02_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_02_type);
                    this->filtercoeff_02_la0 = tmp[0];
                    this->filtercoeff_02_la1 = tmp[1];
                    this->filtercoeff_02_la2 = tmp[2];
                    this->filtercoeff_02_lb1 = tmp[3];
                    this->filtercoeff_02_lb2 = tmp[4];
                    this->filtercoeff_02_last_frequency = local_frequency;
                    this->filtercoeff_02_last_q = local_q;
                    this->filtercoeff_02_last_gain = local_gain;
                    this->filtercoeff_02_last_type = this->filtercoeff_02_type;
                    this->filtercoeff_02_force_update = false;
                }
            }
            
            void filtercoeff_02_dspsetup(bool force) {
                if ((bool)(this->filtercoeff_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->filtercoeff_02_activeResamp = this->vectorsize();
                }
            
                this->filtercoeff_02_resamp_counter = 0;
                this->filtercoeff_02_la0 = 0.;
                this->filtercoeff_02_la1 = 0.;
                this->filtercoeff_02_la2 = 0.;
                this->filtercoeff_02_lb1 = 0.;
                this->filtercoeff_02_lb2 = 0.;
                this->filtercoeff_02_last_frequency = -1.;
                this->filtercoeff_02_last_q = -1.;
                this->filtercoeff_02_last_gain = -1.;
                this->filtercoeff_02_last_type = this->filtercoeff_02_type;
                this->filtercoeff_02_force_update = true;
                this->filtercoeff_02_setupDone = true;
                this->filtercoeff_02_localop_dspsetup();
            }
            
            number numbertilde_12_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_12_smooth_d_prev);
                this->numbertilde_12_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_12_smooth_d_dspsetup() {
                this->numbertilde_12_smooth_d_reset();
            }
            
            void numbertilde_12_smooth_d_reset() {
                this->numbertilde_12_smooth_d_prev = 0;
            }
            
            number numbertilde_12_smooth_next(number x, number up, number down) {
                if (this->numbertilde_12_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_12_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_12_smooth_index = _up;
                        this->numbertilde_12_smooth_increment = (x - this->numbertilde_12_smooth_prev) / _up;
                    } else if (x < this->numbertilde_12_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_12_smooth_index = _down;
                        this->numbertilde_12_smooth_increment = (x - this->numbertilde_12_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_12_smooth_index > 0) {
                    this->numbertilde_12_smooth_prev += this->numbertilde_12_smooth_increment;
                    this->numbertilde_12_smooth_index -= 1;
                } else {
                    this->numbertilde_12_smooth_prev = x;
                }
            
                return this->numbertilde_12_smooth_prev;
            }
            
            void numbertilde_12_smooth_reset() {
                this->numbertilde_12_smooth_prev = 0;
                this->numbertilde_12_smooth_index = 0;
                this->numbertilde_12_smooth_increment = 0;
                this->numbertilde_12_smooth_d_reset();
            }
            
            void numbertilde_12_init() {
                this->numbertilde_12_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-7"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_12_dspsetup(bool force) {
                if ((bool)(this->numbertilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_12_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_12_currentInterval = this->numbertilde_12_currentIntervalInSamples;
                this->numbertilde_12_rampInSamples = this->mstosamps(this->numbertilde_12_ramp);
                this->numbertilde_12_setupDone = true;
                this->numbertilde_12_smooth_d_dspsetup();
            }
            
            number numbertilde_13_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_13_smooth_d_prev);
                this->numbertilde_13_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_13_smooth_d_dspsetup() {
                this->numbertilde_13_smooth_d_reset();
            }
            
            void numbertilde_13_smooth_d_reset() {
                this->numbertilde_13_smooth_d_prev = 0;
            }
            
            number numbertilde_13_smooth_next(number x, number up, number down) {
                if (this->numbertilde_13_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_13_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_13_smooth_index = _up;
                        this->numbertilde_13_smooth_increment = (x - this->numbertilde_13_smooth_prev) / _up;
                    } else if (x < this->numbertilde_13_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_13_smooth_index = _down;
                        this->numbertilde_13_smooth_increment = (x - this->numbertilde_13_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_13_smooth_index > 0) {
                    this->numbertilde_13_smooth_prev += this->numbertilde_13_smooth_increment;
                    this->numbertilde_13_smooth_index -= 1;
                } else {
                    this->numbertilde_13_smooth_prev = x;
                }
            
                return this->numbertilde_13_smooth_prev;
            }
            
            void numbertilde_13_smooth_reset() {
                this->numbertilde_13_smooth_prev = 0;
                this->numbertilde_13_smooth_index = 0;
                this->numbertilde_13_smooth_increment = 0;
                this->numbertilde_13_smooth_d_reset();
            }
            
            void numbertilde_13_init() {
                this->numbertilde_13_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-22"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_13_dspsetup(bool force) {
                if ((bool)(this->numbertilde_13_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_13_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_13_currentInterval = this->numbertilde_13_currentIntervalInSamples;
                this->numbertilde_13_rampInSamples = this->mstosamps(this->numbertilde_13_ramp);
                this->numbertilde_13_setupDone = true;
                this->numbertilde_13_smooth_d_dspsetup();
            }
            
            number numbertilde_14_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_14_smooth_d_prev);
                this->numbertilde_14_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_14_smooth_d_dspsetup() {
                this->numbertilde_14_smooth_d_reset();
            }
            
            void numbertilde_14_smooth_d_reset() {
                this->numbertilde_14_smooth_d_prev = 0;
            }
            
            number numbertilde_14_smooth_next(number x, number up, number down) {
                if (this->numbertilde_14_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_14_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_14_smooth_index = _up;
                        this->numbertilde_14_smooth_increment = (x - this->numbertilde_14_smooth_prev) / _up;
                    } else if (x < this->numbertilde_14_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_14_smooth_index = _down;
                        this->numbertilde_14_smooth_increment = (x - this->numbertilde_14_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_14_smooth_index > 0) {
                    this->numbertilde_14_smooth_prev += this->numbertilde_14_smooth_increment;
                    this->numbertilde_14_smooth_index -= 1;
                } else {
                    this->numbertilde_14_smooth_prev = x;
                }
            
                return this->numbertilde_14_smooth_prev;
            }
            
            void numbertilde_14_smooth_reset() {
                this->numbertilde_14_smooth_prev = 0;
                this->numbertilde_14_smooth_index = 0;
                this->numbertilde_14_smooth_increment = 0;
                this->numbertilde_14_smooth_d_reset();
            }
            
            void numbertilde_14_init() {
                this->numbertilde_14_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-59"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_14_dspsetup(bool force) {
                if ((bool)(this->numbertilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_14_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_14_currentInterval = this->numbertilde_14_currentIntervalInSamples;
                this->numbertilde_14_rampInSamples = this->mstosamps(this->numbertilde_14_ramp);
                this->numbertilde_14_setupDone = true;
                this->numbertilde_14_smooth_d_dspsetup();
            }
            
            number numbertilde_15_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_15_smooth_d_prev);
                this->numbertilde_15_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_15_smooth_d_dspsetup() {
                this->numbertilde_15_smooth_d_reset();
            }
            
            void numbertilde_15_smooth_d_reset() {
                this->numbertilde_15_smooth_d_prev = 0;
            }
            
            number numbertilde_15_smooth_next(number x, number up, number down) {
                if (this->numbertilde_15_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_15_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_15_smooth_index = _up;
                        this->numbertilde_15_smooth_increment = (x - this->numbertilde_15_smooth_prev) / _up;
                    } else if (x < this->numbertilde_15_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_15_smooth_index = _down;
                        this->numbertilde_15_smooth_increment = (x - this->numbertilde_15_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_15_smooth_index > 0) {
                    this->numbertilde_15_smooth_prev += this->numbertilde_15_smooth_increment;
                    this->numbertilde_15_smooth_index -= 1;
                } else {
                    this->numbertilde_15_smooth_prev = x;
                }
            
                return this->numbertilde_15_smooth_prev;
            }
            
            void numbertilde_15_smooth_reset() {
                this->numbertilde_15_smooth_prev = 0;
                this->numbertilde_15_smooth_index = 0;
                this->numbertilde_15_smooth_increment = 0;
                this->numbertilde_15_smooth_d_reset();
            }
            
            void numbertilde_15_init() {
                this->numbertilde_15_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_15_dspsetup(bool force) {
                if ((bool)(this->numbertilde_15_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_15_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_15_currentInterval = this->numbertilde_15_currentIntervalInSamples;
                this->numbertilde_15_rampInSamples = this->mstosamps(this->numbertilde_15_ramp);
                this->numbertilde_15_setupDone = true;
                this->numbertilde_15_smooth_d_dspsetup();
            }
            
            number numbertilde_16_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_16_smooth_d_prev);
                this->numbertilde_16_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_16_smooth_d_dspsetup() {
                this->numbertilde_16_smooth_d_reset();
            }
            
            void numbertilde_16_smooth_d_reset() {
                this->numbertilde_16_smooth_d_prev = 0;
            }
            
            number numbertilde_16_smooth_next(number x, number up, number down) {
                if (this->numbertilde_16_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_16_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_16_smooth_index = _up;
                        this->numbertilde_16_smooth_increment = (x - this->numbertilde_16_smooth_prev) / _up;
                    } else if (x < this->numbertilde_16_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_16_smooth_index = _down;
                        this->numbertilde_16_smooth_increment = (x - this->numbertilde_16_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_16_smooth_index > 0) {
                    this->numbertilde_16_smooth_prev += this->numbertilde_16_smooth_increment;
                    this->numbertilde_16_smooth_index -= 1;
                } else {
                    this->numbertilde_16_smooth_prev = x;
                }
            
                return this->numbertilde_16_smooth_prev;
            }
            
            void numbertilde_16_smooth_reset() {
                this->numbertilde_16_smooth_prev = 0;
                this->numbertilde_16_smooth_index = 0;
                this->numbertilde_16_smooth_increment = 0;
                this->numbertilde_16_smooth_d_reset();
            }
            
            void numbertilde_16_init() {
                this->numbertilde_16_currentMode = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-23"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_16_dspsetup(bool force) {
                if ((bool)(this->numbertilde_16_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_16_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_16_currentInterval = this->numbertilde_16_currentIntervalInSamples;
                this->numbertilde_16_rampInSamples = this->mstosamps(this->numbertilde_16_ramp);
                this->numbertilde_16_setupDone = true;
                this->numbertilde_16_smooth_d_dspsetup();
            }
            
            number numbertilde_17_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_17_smooth_d_prev);
                this->numbertilde_17_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_17_smooth_d_dspsetup() {
                this->numbertilde_17_smooth_d_reset();
            }
            
            void numbertilde_17_smooth_d_reset() {
                this->numbertilde_17_smooth_d_prev = 0;
            }
            
            number numbertilde_17_smooth_next(number x, number up, number down) {
                if (this->numbertilde_17_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_17_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_17_smooth_index = _up;
                        this->numbertilde_17_smooth_increment = (x - this->numbertilde_17_smooth_prev) / _up;
                    } else if (x < this->numbertilde_17_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_17_smooth_index = _down;
                        this->numbertilde_17_smooth_increment = (x - this->numbertilde_17_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_17_smooth_index > 0) {
                    this->numbertilde_17_smooth_prev += this->numbertilde_17_smooth_increment;
                    this->numbertilde_17_smooth_index -= 1;
                } else {
                    this->numbertilde_17_smooth_prev = x;
                }
            
                return this->numbertilde_17_smooth_prev;
            }
            
            void numbertilde_17_smooth_reset() {
                this->numbertilde_17_smooth_prev = 0;
                this->numbertilde_17_smooth_index = 0;
                this->numbertilde_17_smooth_increment = 0;
                this->numbertilde_17_smooth_d_reset();
            }
            
            void numbertilde_17_init() {
                this->numbertilde_17_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-filter/number~_obj-16"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_17_dspsetup(bool force) {
                if ((bool)(this->numbertilde_17_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_17_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_17_currentInterval = this->numbertilde_17_currentIntervalInSamples;
                this->numbertilde_17_rampInSamples = this->mstosamps(this->numbertilde_17_ramp);
                this->numbertilde_17_setupDone = true;
                this->numbertilde_17_smooth_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                biquad_tilde_02_x = 0;
                biquad_tilde_02_a0 = 0;
                biquad_tilde_02_a1 = 0;
                biquad_tilde_02_a2 = 0;
                biquad_tilde_02_b1 = 0;
                biquad_tilde_02_b2 = 0;
                p_12_target = 0;
                numbertilde_10_input_number = 0;
                numbertilde_10_ramp = 0;
                numbertilde_11_input_number = 0;
                numbertilde_11_ramp = 0;
                filtercoeff_02_frequency = 1000;
                filtercoeff_02_gain = 1;
                filtercoeff_02_q = 1;
                filtercoeff_02_type = 4;
                receive_25_output_number = 0;
                numbertilde_12_input_number = 0;
                numbertilde_12_ramp = 0;
                p_13_target = 0;
                numbertilde_13_input_number = 0;
                numbertilde_13_ramp = 0;
                numbertilde_14_input_number = 0;
                numbertilde_14_ramp = 0;
                numbertilde_15_input_number = 0;
                numbertilde_15_ramp = 0;
                p_14_target = 0;
                numbertilde_16_input_number = 0;
                numbertilde_16_ramp = 0;
                numbertilde_17_input_number = 0;
                numbertilde_17_ramp = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                biquad_tilde_02_x1 = 0;
                biquad_tilde_02_x2 = 0;
                biquad_tilde_02_y1 = 0;
                biquad_tilde_02_y2 = 0;
                biquad_tilde_02_setupDone = false;
                numbertilde_10_currentInterval = 0;
                numbertilde_10_currentIntervalInSamples = 0;
                numbertilde_10_lastValue = 0;
                numbertilde_10_outValue = 0;
                numbertilde_10_rampInSamples = 0;
                numbertilde_10_currentMode = 0;
                numbertilde_10_smooth_d_prev = 0;
                numbertilde_10_smooth_prev = 0;
                numbertilde_10_smooth_index = 0;
                numbertilde_10_smooth_increment = 0;
                numbertilde_10_setupDone = false;
                numbertilde_11_currentInterval = 0;
                numbertilde_11_currentIntervalInSamples = 0;
                numbertilde_11_lastValue = 0;
                numbertilde_11_outValue = 0;
                numbertilde_11_rampInSamples = 0;
                numbertilde_11_currentMode = 0;
                numbertilde_11_smooth_d_prev = 0;
                numbertilde_11_smooth_prev = 0;
                numbertilde_11_smooth_index = 0;
                numbertilde_11_smooth_increment = 0;
                numbertilde_11_setupDone = false;
                filtercoeff_02_K_EPSILON = 1e-9;
                filtercoeff_02_localop_internal = true;
                filtercoeff_02_setupDone = false;
                numbertilde_12_currentInterval = 0;
                numbertilde_12_currentIntervalInSamples = 0;
                numbertilde_12_lastValue = 0;
                numbertilde_12_outValue = 0;
                numbertilde_12_rampInSamples = 0;
                numbertilde_12_currentMode = 0;
                numbertilde_12_smooth_d_prev = 0;
                numbertilde_12_smooth_prev = 0;
                numbertilde_12_smooth_index = 0;
                numbertilde_12_smooth_increment = 0;
                numbertilde_12_setupDone = false;
                numbertilde_13_currentInterval = 0;
                numbertilde_13_currentIntervalInSamples = 0;
                numbertilde_13_lastValue = 0;
                numbertilde_13_outValue = 0;
                numbertilde_13_rampInSamples = 0;
                numbertilde_13_currentMode = 0;
                numbertilde_13_smooth_d_prev = 0;
                numbertilde_13_smooth_prev = 0;
                numbertilde_13_smooth_index = 0;
                numbertilde_13_smooth_increment = 0;
                numbertilde_13_setupDone = false;
                numbertilde_14_currentInterval = 0;
                numbertilde_14_currentIntervalInSamples = 0;
                numbertilde_14_lastValue = 0;
                numbertilde_14_outValue = 0;
                numbertilde_14_rampInSamples = 0;
                numbertilde_14_currentMode = 0;
                numbertilde_14_smooth_d_prev = 0;
                numbertilde_14_smooth_prev = 0;
                numbertilde_14_smooth_index = 0;
                numbertilde_14_smooth_increment = 0;
                numbertilde_14_setupDone = false;
                numbertilde_15_currentInterval = 0;
                numbertilde_15_currentIntervalInSamples = 0;
                numbertilde_15_lastValue = 0;
                numbertilde_15_outValue = 0;
                numbertilde_15_rampInSamples = 0;
                numbertilde_15_currentMode = 0;
                numbertilde_15_smooth_d_prev = 0;
                numbertilde_15_smooth_prev = 0;
                numbertilde_15_smooth_index = 0;
                numbertilde_15_smooth_increment = 0;
                numbertilde_15_setupDone = false;
                numbertilde_16_currentInterval = 0;
                numbertilde_16_currentIntervalInSamples = 0;
                numbertilde_16_lastValue = 0;
                numbertilde_16_outValue = 0;
                numbertilde_16_rampInSamples = 0;
                numbertilde_16_currentMode = 0;
                numbertilde_16_smooth_d_prev = 0;
                numbertilde_16_smooth_prev = 0;
                numbertilde_16_smooth_index = 0;
                numbertilde_16_smooth_increment = 0;
                numbertilde_16_setupDone = false;
                numbertilde_17_currentInterval = 0;
                numbertilde_17_currentIntervalInSamples = 0;
                numbertilde_17_lastValue = 0;
                numbertilde_17_outValue = 0;
                numbertilde_17_rampInSamples = 0;
                numbertilde_17_currentMode = 0;
                numbertilde_17_smooth_d_prev = 0;
                numbertilde_17_smooth_prev = 0;
                numbertilde_17_smooth_index = 0;
                numbertilde_17_smooth_increment = 0;
                numbertilde_17_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number biquad_tilde_02_x;
                number biquad_tilde_02_a0;
                number biquad_tilde_02_a1;
                number biquad_tilde_02_a2;
                number biquad_tilde_02_b1;
                number biquad_tilde_02_b2;
                number p_12_target;
                number numbertilde_10_input_number;
                number numbertilde_10_ramp;
                number numbertilde_11_input_number;
                number numbertilde_11_ramp;
                number filtercoeff_02_frequency;
                number filtercoeff_02_gain;
                number filtercoeff_02_q;
                Int filtercoeff_02_type;
                number receive_25_output_number;
                list receive_25_output_list;
                number numbertilde_12_input_number;
                number numbertilde_12_ramp;
                number p_13_target;
                number numbertilde_13_input_number;
                number numbertilde_13_ramp;
                number numbertilde_14_input_number;
                number numbertilde_14_ramp;
                number numbertilde_15_input_number;
                number numbertilde_15_ramp;
                number p_14_target;
                number numbertilde_16_input_number;
                number numbertilde_16_ramp;
                number numbertilde_17_input_number;
                number numbertilde_17_ramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number biquad_tilde_02_x1;
                number biquad_tilde_02_x2;
                number biquad_tilde_02_y1;
                number biquad_tilde_02_y2;
                bool biquad_tilde_02_setupDone;
                SampleIndex numbertilde_10_currentInterval;
                SampleIndex numbertilde_10_currentIntervalInSamples;
                number numbertilde_10_lastValue;
                number numbertilde_10_outValue;
                number numbertilde_10_rampInSamples;
                Int numbertilde_10_currentMode;
                number numbertilde_10_smooth_d_prev;
                number numbertilde_10_smooth_prev;
                number numbertilde_10_smooth_index;
                number numbertilde_10_smooth_increment;
                bool numbertilde_10_setupDone;
                SampleIndex numbertilde_11_currentInterval;
                SampleIndex numbertilde_11_currentIntervalInSamples;
                number numbertilde_11_lastValue;
                number numbertilde_11_outValue;
                number numbertilde_11_rampInSamples;
                Int numbertilde_11_currentMode;
                number numbertilde_11_smooth_d_prev;
                number numbertilde_11_smooth_prev;
                number numbertilde_11_smooth_index;
                number numbertilde_11_smooth_increment;
                bool numbertilde_11_setupDone;
                number filtercoeff_02_resamp_counter;
                number filtercoeff_02_activeResamp;
                number filtercoeff_02_K_EPSILON;
                number filtercoeff_02_la0;
                number filtercoeff_02_la1;
                number filtercoeff_02_la2;
                number filtercoeff_02_lb1;
                number filtercoeff_02_lb2;
                number filtercoeff_02_last_frequency;
                number filtercoeff_02_last_q;
                number filtercoeff_02_last_gain;
                Int filtercoeff_02_last_type;
                bool filtercoeff_02_force_update;
                bool filtercoeff_02_localop_internal;
                number filtercoeff_02_localop_twopi_over_sr;
                number filtercoeff_02_localop_cs;
                number filtercoeff_02_localop_sn;
                number filtercoeff_02_localop_one_over_gain;
                number filtercoeff_02_localop_one_over_q;
                number filtercoeff_02_localop_alpha;
                number filtercoeff_02_localop_beta;
                number filtercoeff_02_localop_b0;
                number filtercoeff_02_localop_b0g;
                number filtercoeff_02_localop_A;
                number filtercoeff_02_localop_one_over_a;
                number filtercoeff_02_localop_la0;
                number filtercoeff_02_localop_la1;
                number filtercoeff_02_localop_la2;
                number filtercoeff_02_localop_lb1;
                number filtercoeff_02_localop_lb2;
                bool filtercoeff_02_setupDone;
                SampleIndex numbertilde_12_currentInterval;
                SampleIndex numbertilde_12_currentIntervalInSamples;
                number numbertilde_12_lastValue;
                number numbertilde_12_outValue;
                number numbertilde_12_rampInSamples;
                Int numbertilde_12_currentMode;
                number numbertilde_12_smooth_d_prev;
                number numbertilde_12_smooth_prev;
                number numbertilde_12_smooth_index;
                number numbertilde_12_smooth_increment;
                bool numbertilde_12_setupDone;
                SampleIndex numbertilde_13_currentInterval;
                SampleIndex numbertilde_13_currentIntervalInSamples;
                number numbertilde_13_lastValue;
                number numbertilde_13_outValue;
                number numbertilde_13_rampInSamples;
                Int numbertilde_13_currentMode;
                number numbertilde_13_smooth_d_prev;
                number numbertilde_13_smooth_prev;
                number numbertilde_13_smooth_index;
                number numbertilde_13_smooth_increment;
                bool numbertilde_13_setupDone;
                SampleIndex numbertilde_14_currentInterval;
                SampleIndex numbertilde_14_currentIntervalInSamples;
                number numbertilde_14_lastValue;
                number numbertilde_14_outValue;
                number numbertilde_14_rampInSamples;
                Int numbertilde_14_currentMode;
                number numbertilde_14_smooth_d_prev;
                number numbertilde_14_smooth_prev;
                number numbertilde_14_smooth_index;
                number numbertilde_14_smooth_increment;
                bool numbertilde_14_setupDone;
                SampleIndex numbertilde_15_currentInterval;
                SampleIndex numbertilde_15_currentIntervalInSamples;
                number numbertilde_15_lastValue;
                number numbertilde_15_outValue;
                number numbertilde_15_rampInSamples;
                Int numbertilde_15_currentMode;
                number numbertilde_15_smooth_d_prev;
                number numbertilde_15_smooth_prev;
                number numbertilde_15_smooth_index;
                number numbertilde_15_smooth_increment;
                bool numbertilde_15_setupDone;
                SampleIndex numbertilde_16_currentInterval;
                SampleIndex numbertilde_16_currentIntervalInSamples;
                number numbertilde_16_lastValue;
                number numbertilde_16_outValue;
                number numbertilde_16_rampInSamples;
                Int numbertilde_16_currentMode;
                number numbertilde_16_smooth_d_prev;
                number numbertilde_16_smooth_prev;
                number numbertilde_16_smooth_index;
                number numbertilde_16_smooth_increment;
                bool numbertilde_16_setupDone;
                SampleIndex numbertilde_17_currentInterval;
                SampleIndex numbertilde_17_currentIntervalInSamples;
                number numbertilde_17_lastValue;
                number numbertilde_17_outValue;
                number numbertilde_17_rampInSamples;
                Int numbertilde_17_currentMode;
                number numbertilde_17_smooth_d_prev;
                number numbertilde_17_smooth_prev;
                number numbertilde_17_smooth_index;
                number numbertilde_17_smooth_increment;
                bool numbertilde_17_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_105* p_12;
                RNBOSubpatcher_106* p_13;
                RNBOSubpatcher_107* p_14;
            
    };
    
    class RNBOSubpatcher_110 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_108 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_110;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_108()
                        {
                        }
                        
                        ~RNBOSubpatcher_108()
                        {
                        }
                        
                        virtual RNBOSubpatcher_110* getPatcher() const {
                            return static_cast<RNBOSubpatcher_110 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        void setVoiceIndex(Index index)  {
                            this->_voiceIndex = index;
                        }
                        
                        void setNoteNumber(Int noteNumber)  {
                            this->_noteNumber = noteNumber;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("fixedgrain/rand-placement/width/number_obj-13") == objectId)
                                    this->numberobj_152_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-2") == objectId)
                                    this->numberobj_153_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-8") == objectId)
                                    this->numberobj_154_valin_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-9") == objectId)
                                    this->numberobj_155_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("fixedgrain/rand-placement/width/number_obj-13") == objectId)
                                    this->numberobj_152_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-2") == objectId)
                                    this->numberobj_153_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-8") == objectId)
                                    this->numberobj_154_format_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/number_obj-9") == objectId)
                                    this->numberobj_155_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_52_listin_number_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_53_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_52_listin_list_set(payload);
                        
                                if (TAG("fixedgrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_53_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("fixedgrain/rand-placement/width/message_obj-78") == objectId)
                                    this->message_52_listin_bang_bang();
                        
                                if (TAG("fixedgrain/rand-placement/width/message_obj-80") == objectId)
                                    this->message_53_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("fixedgrain/rand-placement/width/number_obj-13"):
                                {
                                return "fixedgrain/rand-placement/width/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("fixedgrain/rand-placement/width/number_obj-2"):
                                {
                                return "fixedgrain/rand-placement/width/number_obj-2";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("fixedgrain/rand-placement/width/message_obj-78"):
                                {
                                return "fixedgrain/rand-placement/width/message_obj-78";
                                }
                            case TAG("fixedgrain/rand-placement/width/number_obj-8"):
                                {
                                return "fixedgrain/rand-placement/width/number_obj-8";
                                }
                            case TAG("fixedgrain/rand-placement/width/number_obj-9"):
                                {
                                return "fixedgrain/rand-placement/width/number_obj-9";
                                }
                            case TAG("fixedgrain/rand-placement/width/message_obj-80"):
                                {
                                return "fixedgrain/rand-placement/width/message_obj-80";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_36_out1_bang_bang() {
                            this->numberobj_154_value_bang();
                            this->trigger_25_input_bang_bang();
                        }
                        
                        void eventinlet_36_out1_number_set(number v) {
                            this->numberobj_154_value_set(v);
                            this->trigger_25_input_number_set(v);
                        }
                        
                        void numberobj_152_valin_set(number v) {
                            this->numberobj_152_value_set(v);
                        }
                        
                        void numberobj_152_format_set(number v) {
                            this->numberobj_152_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_153_valin_set(number v) {
                            this->numberobj_153_value_set(v);
                        }
                        
                        void numberobj_153_format_set(number v) {
                            this->numberobj_153_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_52_listin_list_set(const list& v) {
                            this->message_52_set_set(v);
                        }
                        
                        void message_52_listin_number_set(number v) {
                            this->message_52_set_set(v);
                        }
                        
                        void message_52_listin_bang_bang() {
                            this->message_52_trigger_bang();
                        }
                        
                        void numberobj_154_valin_set(number v) {
                            this->numberobj_154_value_set(v);
                        }
                        
                        void numberobj_154_format_set(number v) {
                            this->numberobj_154_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_155_valin_set(number v) {
                            this->numberobj_155_value_set(v);
                        }
                        
                        void numberobj_155_format_set(number v) {
                            this->numberobj_155_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_53_listin_list_set(const list& v) {
                            this->message_53_set_set(v);
                        }
                        
                        void message_53_listin_number_set(number v) {
                            this->message_53_set_set(v);
                        }
                        
                        void message_53_listin_bang_bang() {
                            this->message_53_trigger_bang();
                        }
                        
                        void eventinlet_37_out1_bang_bang() {
                            this->expr_53_in3_bang();
                        }
                        
                        void eventinlet_37_out1_number_set(number v) {
                            this->expr_53_in3_set(v);
                        }
                        
                        void eventinlet_38_out1_bang_bang() {
                            this->expr_56_in2_bang();
                        }
                        
                        void eventinlet_38_out1_number_set(number v) {
                            this->expr_56_in2_set(v);
                        }
                        
                        void eventinlet_39_out1_bang_bang() {
                            this->expr_52_in2_bang();
                        }
                        
                        void eventinlet_39_out1_number_set(number v) {
                            this->expr_52_in2_set(v);
                        }
                        
                        void eventinlet_40_out1_bang_bang() {
                            this->expr_55_in3_bang();
                        }
                        
                        void eventinlet_40_out1_number_set(number v) {
                            this->expr_55_in3_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_152_init();
                            this->numberobj_153_init();
                            this->message_52_init();
                            this->numberobj_154_init();
                            this->numberobj_155_init();
                            this->message_53_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void expr_52_in2_set(number v) {
                            this->expr_52_in2 = v;
                        }
                        
                        void eventinlet_39_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_52_in2_set(converted);
                            }
                        }
                        
                        void expr_55_in3_set(number v) {
                            this->expr_55_in3 = v;
                        }
                        
                        void eventinlet_40_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_55_in3_set(converted);
                            }
                        }
                        
                        void expr_56_in2_set(number v) {
                            this->expr_56_in2 = v;
                        }
                        
                        void eventinlet_38_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_56_in2_set(converted);
                            }
                        }
                        
                        void expr_53_in3_set(number v) {
                            this->expr_53_in3 = v;
                        }
                        
                        void eventinlet_37_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->expr_53_in3_set(converted);
                            }
                        }
                        
                        void numberobj_154_output_set(number ) {}
                        
                        void numberobj_154_value_set(number v) {
                            this->numberobj_154_value_setter(v);
                            v = this->numberobj_154_value;
                            number localvalue = v;
                        
                            if (this->numberobj_154_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-placement/width/number_obj-8"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_154_output_set(localvalue);
                        }
                        
                        void gate_22_onoff_set(number v) {
                            this->gate_22_onoff = v;
                        }
                        
                        void eventoutlet_24_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_15_out1_number_set(v);
                        }
                        
                        void numberobj_152_output_set(number v) {
                            this->eventoutlet_24_in1_number_set(v);
                        }
                        
                        void numberobj_152_value_set(number v) {
                            this->numberobj_152_value_setter(v);
                            v = this->numberobj_152_value;
                            number localvalue = v;
                        
                            if (this->numberobj_152_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-placement/width/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_152_output_set(localvalue);
                        }
                        
                        void expr_52_out1_set(number v) {
                            this->expr_52_out1 = v;
                            this->numberobj_152_value_set(this->expr_52_out1);
                        }
                        
                        void expr_52_in1_set(number in1) {
                            this->expr_52_in1 = in1;
                        
                            this->expr_52_out1_set(
                                (this->expr_52_in1 > this->expr_52_in3 ? this->expr_52_in3 : (this->expr_52_in1 < this->expr_52_in2 ? this->expr_52_in2 : this->expr_52_in1))
                            );//#map:fixedgrain/rand-placement/width/clip_obj-10:1
                        }
                        
                        void numberobj_153_output_set(number v) {
                            this->expr_52_in1_set(v);
                        }
                        
                        void numberobj_153_value_set(number v) {
                            this->numberobj_153_value_setter(v);
                            v = this->numberobj_153_value;
                            number localvalue = v;
                        
                            if (this->numberobj_153_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-placement/width/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_153_output_set(localvalue);
                        }
                        
                        void expr_53_out1_set(number v) {
                            this->expr_53_out1 = v;
                            this->numberobj_153_value_set(this->expr_53_out1);
                        }
                        
                        void expr_53_in1_set(number in1) {
                            this->expr_53_in1 = in1;
                        
                            this->expr_53_out1_set(
                                (this->expr_53_in1 > this->expr_53_in3 ? this->expr_53_in3 : (this->expr_53_in1 < this->expr_53_in2 ? this->expr_53_in2 : this->expr_53_in1))
                            );//#map:fixedgrain/rand-placement/width/clip_obj-74:1
                        }
                        
                        void gate_22_out1_number_set(number v) {
                            this->gate_22_out1_number = v;
                            this->expr_53_in1_set(v);
                        }
                        
                        void expr_55_out1_set(number v) {
                            this->expr_55_out1 = v;
                            this->numberobj_152_value_set(this->expr_55_out1);
                        }
                        
                        void expr_55_in1_set(number in1) {
                            this->expr_55_in1 = in1;
                        
                            this->expr_55_out1_set(
                                (this->expr_55_in1 > this->expr_55_in3 ? this->expr_55_in3 : (this->expr_55_in1 < this->expr_55_in2 ? this->expr_55_in2 : this->expr_55_in1))
                            );//#map:fixedgrain/rand-placement/width/clip_obj-11:1
                        }
                        
                        void numberobj_155_output_set(number v) {
                            this->expr_55_in1_set(v);
                        }
                        
                        void numberobj_155_value_set(number v) {
                            this->numberobj_155_value_setter(v);
                            v = this->numberobj_155_value;
                            number localvalue = v;
                        
                            if (this->numberobj_155_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-placement/width/number_obj-9"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_155_output_set(localvalue);
                        }
                        
                        void expr_56_out1_set(number v) {
                            this->expr_56_out1 = v;
                            this->numberobj_155_value_set(this->expr_56_out1);
                        }
                        
                        void expr_56_in1_set(number in1) {
                            this->expr_56_in1 = in1;
                        
                            this->expr_56_out1_set(
                                (this->expr_56_in1 > this->expr_56_in3 ? this->expr_56_in3 : (this->expr_56_in1 < this->expr_56_in2 ? this->expr_56_in2 : this->expr_56_in1))
                            );//#map:fixedgrain/rand-placement/width/clip_obj-75:1
                        }
                        
                        void gate_22_out2_number_set(number v) {
                            this->gate_22_out2_number = v;
                            this->expr_56_in1_set(v);
                        }
                        
                        void gate_22_input_number_set(number v) {
                            if (this->gate_22_onoff == 1)
                                this->gate_22_out1_number_set(v);
                            else if (this->gate_22_onoff == 2)
                                this->gate_22_out2_number_set(v);
                        }
                        
                        void message_53_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_22_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_22_onoff_set(converted);
                            }
                        }
                        
                        void message_53_trigger_bang() {
                            this->message_53_out_set(this->message_53_set);
                        }
                        
                        void select_30_match1_bang() {
                            this->message_53_trigger_bang();
                        }
                        
                        void select_30_nomatch_number_set(number ) {}
                        
                        void select_30_input_number_set(number v) {
                            if (v == this->select_30_test1)
                                this->select_30_match1_bang();
                            else
                                this->select_30_nomatch_number_set(v);
                        }
                        
                        void expr_57_out1_set(number v) {
                            this->expr_57_out1 = v;
                            this->select_30_input_number_set(this->expr_57_out1);
                        }
                        
                        void expr_57_in1_set(number in1) {
                            this->expr_57_in1 = in1;
                            this->expr_57_out1_set(this->expr_57_in1 >= this->expr_57_in2);//#map:fixedgrain/rand-placement/width/>=_obj-61:1
                        }
                        
                        void trigger_25_out3_set(number v) {
                            this->expr_57_in1_set(v);
                        }
                        
                        void message_52_out_set(const list& v) {
                            {
                                if (v->length > 1)
                                    this->gate_22_input_number_set(v[1]);
                        
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->gate_22_onoff_set(converted);
                            }
                        }
                        
                        void message_52_trigger_bang() {
                            this->message_52_out_set(this->message_52_set);
                        }
                        
                        void select_29_match1_bang() {
                            this->message_52_trigger_bang();
                        }
                        
                        void select_29_nomatch_number_set(number ) {}
                        
                        void select_29_input_number_set(number v) {
                            if (v == this->select_29_test1)
                                this->select_29_match1_bang();
                            else
                                this->select_29_nomatch_number_set(v);
                        }
                        
                        void expr_54_out1_set(number v) {
                            this->expr_54_out1 = v;
                            this->select_29_input_number_set(this->expr_54_out1);
                        }
                        
                        void expr_54_in1_set(number in1) {
                            this->expr_54_in1 = in1;
                            this->expr_54_out1_set(this->expr_54_in1 <= this->expr_54_in2);//#map:fixedgrain/rand-placement/width/<=_obj-62:1
                        }
                        
                        void trigger_25_out2_set(number v) {
                            this->expr_54_in1_set(v);
                        }
                        
                        void trigger_25_out1_set(number v) {
                            this->gate_22_input_number_set(v);
                        }
                        
                        void trigger_25_input_list_set(const list& v) {
                            this->trigger_25_out3_set((v->length > 0 ? v[0] : 0));
                            this->trigger_25_out2_set((v->length > 0 ? v[0] : 0));
                            this->trigger_25_out1_set((v->length > 0 ? v[0] : 0));
                        }
                        
                        void eventinlet_36_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_154_value_set(converted);
                            }
                        
                            this->trigger_25_input_list_set(v);
                        }
                        
                        void numberobj_154_value_bang() {
                            number v = this->numberobj_154_value;
                            number localvalue = v;
                        
                            if (this->numberobj_154_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("fixedgrain/rand-placement/width/number_obj-8"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_154_output_set(localvalue);
                        }
                        
                        void trigger_25_input_bang_bang() {
                            this->trigger_25_out3_set(0);
                            this->trigger_25_out2_set(0);
                            this->trigger_25_out1_set(0);
                        }
                        
                        void trigger_25_input_number_set(number v) {
                            this->trigger_25_out3_set(v);
                            this->trigger_25_out2_set(v);
                            this->trigger_25_out1_set(v);
                        }
                        
                        void message_52_set_set(const list& v) {
                            this->message_52_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-placement/width/message_obj-78"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_53_set_set(const list& v) {
                            this->message_53_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("fixedgrain/rand-placement/width/message_obj-80"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void expr_53_in3_bang() {}
                        
                        void expr_56_in2_bang() {}
                        
                        void expr_52_in2_bang() {}
                        
                        void expr_55_in3_bang() {}
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_152_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_152_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_152_value = localvalue;
                        }
                        
                        void numberobj_153_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_153_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_153_value = localvalue;
                        }
                        
                        void numberobj_154_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_154_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_154_value = localvalue;
                        }
                        
                        void numberobj_155_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_155_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_155_value = localvalue;
                        }
                        
                        void numberobj_152_init() {
                            this->numberobj_152_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-placement/width/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_152_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_152_value;
                        }
                        
                        void numberobj_152_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_152_value_set(preset["value"]);
                        }
                        
                        void numberobj_153_init() {
                            this->numberobj_153_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-placement/width/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_153_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_153_value;
                        }
                        
                        void numberobj_153_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_153_value_set(preset["value"]);
                        }
                        
                        void message_52_init() {
                            this->message_52_set_set({1});
                        }
                        
                        void numberobj_154_init() {
                            this->numberobj_154_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-placement/width/number_obj-8"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_154_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_154_value;
                        }
                        
                        void numberobj_154_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_154_value_set(preset["value"]);
                        }
                        
                        void numberobj_155_init() {
                            this->numberobj_155_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("fixedgrain/rand-placement/width/number_obj-9"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_155_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_155_value;
                        }
                        
                        void numberobj_155_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_155_value_set(preset["value"]);
                        }
                        
                        void message_53_init() {
                            this->message_53_set_set({2});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_152_value = 0;
                            numberobj_152_value_setter(numberobj_152_value);
                            expr_52_in1 = 0;
                            expr_52_in2 = 0;
                            expr_52_in3 = 1;
                            expr_52_out1 = 0;
                            numberobj_153_value = 0;
                            numberobj_153_value_setter(numberobj_153_value);
                            expr_53_in1 = 0;
                            expr_53_in2 = 0;
                            expr_53_in3 = 0.5;
                            expr_53_out1 = 0;
                            gate_22_onoff = 0;
                            gate_22_out1_number = 0;
                            gate_22_out2_number = 0;
                            select_29_test1 = 1;
                            expr_54_in1 = 0;
                            expr_54_in2 = 0.5;
                            expr_54_out1 = 0;
                            numberobj_154_value = 0;
                            numberobj_154_value_setter(numberobj_154_value);
                            expr_55_in1 = 0;
                            expr_55_in2 = 0;
                            expr_55_in3 = 1;
                            expr_55_out1 = 0;
                            numberobj_155_value = 0;
                            numberobj_155_value_setter(numberobj_155_value);
                            expr_56_in1 = 0;
                            expr_56_in2 = 0.5;
                            expr_56_in3 = 1;
                            expr_56_out1 = 0;
                            select_30_test1 = 1;
                            expr_57_in1 = 0;
                            expr_57_in2 = 0.51;
                            expr_57_out1 = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_152_currentFormat = 6;
                            numberobj_152_lastValue = 0;
                            numberobj_153_currentFormat = 6;
                            numberobj_153_lastValue = 0;
                            numberobj_154_currentFormat = 6;
                            numberobj_154_lastValue = 0;
                            numberobj_155_currentFormat = 6;
                            numberobj_155_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_152_value;
                            number expr_52_in1;
                            number expr_52_in2;
                            number expr_52_in3;
                            number expr_52_out1;
                            number numberobj_153_value;
                            number expr_53_in1;
                            number expr_53_in2;
                            number expr_53_in3;
                            number expr_53_out1;
                            number gate_22_onoff;
                            number gate_22_out1_number;
                            list gate_22_out1_list;
                            number gate_22_out2_number;
                            list gate_22_out2_list;
                            list message_52_set;
                            number select_29_test1;
                            number expr_54_in1;
                            number expr_54_in2;
                            number expr_54_out1;
                            number numberobj_154_value;
                            number expr_55_in1;
                            number expr_55_in2;
                            number expr_55_in3;
                            number expr_55_out1;
                            number numberobj_155_value;
                            number expr_56_in1;
                            number expr_56_in2;
                            number expr_56_in3;
                            number expr_56_out1;
                            list message_53_set;
                            number select_30_test1;
                            number expr_57_in1;
                            number expr_57_in2;
                            number expr_57_out1;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_152_currentFormat;
                            number numberobj_152_lastValue;
                            Int numberobj_153_currentFormat;
                            number numberobj_153_lastValue;
                            Int numberobj_154_currentFormat;
                            number numberobj_154_lastValue;
                            Int numberobj_155_currentFormat;
                            number numberobj_155_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_110()
            {
            }
            
            ~RNBOSubpatcher_110()
            {
                delete this->p_15;
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->linetilde_03_perform(this->signals[0], n);
                this->pan_tilde_02_perform(this->signals[0], in1, out1, out2, n);
                this->p_15_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
                this->p_15->setVoiceIndex(index);
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
                this->p_15->setNoteNumber(noteNumber);
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_15 = new RNBOSubpatcher_108();
                this->p_15->setEngineAndPatcher(this->getEngine(), this);
                this->p_15->initialize();
                this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "width"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        this->p_15->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_15->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_15->getNumParameters())
                            this->p_15->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_15)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_15->getNumParameters())
                        return this->p_15->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_03_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-placement/message_obj-9") == objectId)
                        this->message_54_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-6") == objectId)
                        this->message_55_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-70") == objectId)
                        this->message_56_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-66") == objectId)
                        this->message_57_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-placement/number_obj-71") == objectId)
                        this->numberobj_156_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/number_obj-22") == objectId)
                        this->numberobj_157_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-placement/number_obj-71") == objectId)
                        this->numberobj_156_format_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/number_obj-22") == objectId)
                        this->numberobj_157_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_15->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-placement/message_obj-9") == objectId)
                        this->message_54_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-6") == objectId)
                        this->message_55_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-70") == objectId)
                        this->message_56_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-placement/message_obj-66") == objectId)
                        this->message_57_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_15->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-placement/message_obj-9") == objectId)
                        this->message_54_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-placement/message_obj-6") == objectId)
                        this->message_55_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-placement/message_obj-70") == objectId)
                        this->message_56_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-placement/message_obj-66") == objectId)
                        this->message_57_listin_bang_bang();
            
                    break;
                    }
                }
            
                this->p_15->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-placement/message_obj-9"):
                    {
                    return "fixedgrain/rand-placement/message_obj-9";
                    }
                case TAG("fixedgrain/rand-placement/message_obj-6"):
                    {
                    return "fixedgrain/rand-placement/message_obj-6";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-placement/number_obj-71"):
                    {
                    return "fixedgrain/rand-placement/number_obj-71";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-placement/message_obj-70"):
                    {
                    return "fixedgrain/rand-placement/message_obj-70";
                    }
                case TAG("fixedgrain/rand-placement/message_obj-66"):
                    {
                    return "fixedgrain/rand-placement/message_obj-66";
                    }
                case TAG("fixedgrain/rand-placement/number_obj-22"):
                    {
                    return "fixedgrain/rand-placement/number_obj-22";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_15->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_15->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_54_listin_list_set(const list& v) {
                this->message_54_set_set(v);
            }
            
            void message_54_listin_number_set(number v) {
                this->message_54_set_set(v);
            }
            
            void message_54_listin_bang_bang() {
                this->message_54_trigger_bang();
            }
            
            void message_55_listin_list_set(const list& v) {
                this->message_55_set_set(v);
            }
            
            void message_55_listin_number_set(number v) {
                this->message_55_set_set(v);
            }
            
            void message_55_listin_bang_bang() {
                this->message_55_trigger_bang();
            }
            
            void eventinlet_41_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_14_trigger_bang();
            }
            
            void eventinlet_41_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_14_trigger_bang();
            }
            
            void numberobj_156_valin_set(number v) {
                this->numberobj_156_value_set(v);
            }
            
            void numberobj_156_format_set(number v) {
                this->numberobj_156_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_56_listin_list_set(const list& v) {
                this->message_56_set_set(v);
            }
            
            void message_56_listin_number_set(number v) {
                this->message_56_set_set(v);
            }
            
            void message_56_listin_bang_bang() {
                this->message_56_trigger_bang();
            }
            
            void message_57_listin_list_set(const list& v) {
                this->message_57_set_set(v);
            }
            
            void message_57_listin_number_set(number v) {
                this->message_57_set_set(v);
            }
            
            void message_57_listin_bang_bang() {
                this->message_57_trigger_bang();
            }
            
            void numberobj_157_valin_set(number v) {
                this->numberobj_157_value_set(v);
            }
            
            void numberobj_157_format_set(number v) {
                this->numberobj_157_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_03_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->random_14_nz_init();
                this->message_54_init();
                this->message_55_init();
                this->numberobj_156_init();
                this->message_56_init();
                this->message_57_init();
                this->numberobj_157_init();
                this->p_15->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_15->startup();
            }
            
            void allocateDataRefs() {
                this->p_15->allocateDataRefs();
            }
            
            void scale_62_outhigh_set(number v) {
                this->scale_62_outhigh = v;
            }
            
            void scale_61_outlow_set(number v) {
                this->scale_61_outlow = v;
            }
            
            void p_15_in4_list_set(const list& v) {
                this->p_15->updateTime(this->_currentTime);
                this->p_15->eventinlet_39_out1_list_set(v);
            }
            
            void scale_63_out_set(const list& v) {
                this->scale_63_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_62_outhigh_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_61_outlow_set(converted);
                }
            
                this->p_15_in4_list_set(v);
            }
            
            void scale_63_input_set(const list& v) {
                this->scale_63_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_63_inlow,
                        this->scale_63_inhigh,
                        this->scale_63_outlow,
                        this->scale_63_outhigh,
                        this->scale_63_power
                    ));
                }
            
                this->scale_63_out_set(tmp);
            }
            
            void receive_26_output_number_set(number v) {
                this->receive_26_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_63_input_set(converted);
                }
            }
            
            void scale_62_outlow_set(number v) {
                this->scale_62_outlow = v;
            }
            
            void scale_61_outhigh_set(number v) {
                this->scale_61_outhigh = v;
            }
            
            void p_15_in5_list_set(const list& v) {
                this->p_15->updateTime(this->_currentTime);
                this->p_15->eventinlet_40_out1_list_set(v);
            }
            
            void scale_64_out_set(const list& v) {
                this->scale_64_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_62_outlow_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_61_outhigh_set(converted);
                }
            
                this->p_15_in5_list_set(v);
            }
            
            void scale_64_input_set(const list& v) {
                this->scale_64_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_64_inlow,
                        this->scale_64_inhigh,
                        this->scale_64_outlow,
                        this->scale_64_outhigh,
                        this->scale_64_power
                    ));
                }
            
                this->scale_64_out_set(tmp);
            }
            
            void receive_27_output_number_set(number v) {
                this->receive_27_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_64_input_set(converted);
                }
            }
            
            void p_15_in3_list_set(const list& v) {
                this->p_15->updateTime(this->_currentTime);
                this->p_15->eventinlet_38_out1_list_set(v);
            }
            
            void scale_66_out_set(const list& v) {
                this->scale_66_out = jsCreateListCopy(v);
                this->p_15_in3_list_set(v);
            }
            
            void scale_66_input_set(const list& v) {
                this->scale_66_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_66_inlow,
                        this->scale_66_inhigh,
                        this->scale_66_outlow,
                        this->scale_66_outhigh,
                        this->scale_66_power
                    ));
                }
            
                this->scale_66_out_set(tmp);
            }
            
            void p_15_in2_list_set(const list& v) {
                this->p_15->updateTime(this->_currentTime);
                this->p_15->eventinlet_37_out1_list_set(v);
            }
            
            void scale_65_out_set(const list& v) {
                this->scale_65_out = jsCreateListCopy(v);
                this->p_15_in2_list_set(v);
            }
            
            void scale_65_input_set(const list& v) {
                this->scale_65_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_65_inlow,
                        this->scale_65_inhigh,
                        this->scale_65_outlow,
                        this->scale_65_outhigh,
                        this->scale_65_power
                    ));
                }
            
                this->scale_65_out_set(tmp);
            }
            
            void receive_28_output_number_set(number v) {
                this->receive_28_output_number = v;
            
                {
                    list converted = {v};
                    this->scale_66_input_set(converted);
                }
            
                {
                    list converted = {v};
                    this->scale_65_input_set(converted);
                }
            }
            
            void gate_24_onoff_set(number v) {
                this->gate_24_onoff = v;
            }
            
            void scale_62_power_set(number v) {
                this->scale_62_power = v;
            }
            
            void numberobj_156_output_set(number v) {
                this->scale_62_power_set(v);
            }
            
            void numberobj_156_value_set(number v) {
                this->numberobj_156_value_setter(v);
                v = this->numberobj_156_value;
                number localvalue = v;
            
                if (this->numberobj_156_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-placement/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_156_output_set(localvalue);
            }
            
            void scale_67_out_set(const list& v) {
                this->scale_67_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_156_value_set(converted);
                }
            }
            
            void scale_67_input_set(const list& v) {
                this->scale_67_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_67_inlow,
                        this->scale_67_inhigh,
                        this->scale_67_outlow,
                        this->scale_67_outhigh,
                        this->scale_67_power
                    ));
                }
            
                this->scale_67_out_set(tmp);
            }
            
            void gate_24_out1_number_set(number v) {
                this->gate_24_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_67_input_set(converted);
                }
            }
            
            void scale_61_power_set(number v) {
                this->scale_61_power = v;
            }
            
            void numberobj_157_output_set(number v) {
                this->scale_61_power_set(v);
            }
            
            void numberobj_157_value_set(number v) {
                this->numberobj_157_value_setter(v);
                v = this->numberobj_157_value;
                number localvalue = v;
            
                if (this->numberobj_157_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-placement/number_obj-22"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_157_output_set(localvalue);
            }
            
            void scale_68_out_set(const list& v) {
                this->scale_68_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_157_value_set(converted);
                }
            }
            
            void scale_68_input_set(const list& v) {
                this->scale_68_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_68_inlow,
                        this->scale_68_inhigh,
                        this->scale_68_outlow,
                        this->scale_68_outhigh,
                        this->scale_68_power
                    ));
                }
            
                this->scale_68_out_set(tmp);
            }
            
            void gate_24_out2_number_set(number v) {
                this->gate_24_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_68_input_set(converted);
                }
            }
            
            void gate_24_input_number_set(number v) {
                if (this->gate_24_onoff == 1)
                    this->gate_24_out1_number_set(v);
                else if (this->gate_24_onoff == 2)
                    this->gate_24_out2_number_set(v);
            }
            
            void message_57_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_24_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_24_onoff_set(converted);
                }
            }
            
            void message_57_trigger_bang() {
                this->message_57_out_set(this->message_57_set);
            }
            
            void gate_23_onoff_set(number v) {
                this->gate_23_onoff = v;
            }
            
            void linetilde_03_time_set(number v) {
                this->linetilde_03_time = v;
            }
            
            void linetilde_03_segments_set(const list& v) {
                this->linetilde_03_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_03_time == 0) {
                        this->linetilde_03_activeRamps->length = 0;
                        this->linetilde_03_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_03_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_03_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_03_activeRamps->push(lastRampValue);
                            this->linetilde_03_activeRamps->push(0);
                            this->linetilde_03_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_03_keepramp)) {
                                    this->linetilde_03_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_03_activeRamps->push(destinationValue);
                            this->linetilde_03_activeRamps->push(inc);
                            this->linetilde_03_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void p_15_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_03_segments_set(converted);
                }
            }
            
            void p_15_in1_list_set(const list& v) {
                this->p_15->updateTime(this->_currentTime);
                this->p_15->eventinlet_36_out1_list_set(v);
            }
            
            void scale_62_out_set(const list& v) {
                this->scale_62_out = jsCreateListCopy(v);
                this->p_15_in1_list_set(v);
            }
            
            void scale_62_input_set(const list& v) {
                this->scale_62_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_62_inlow,
                        this->scale_62_inhigh,
                        this->scale_62_outlow,
                        this->scale_62_outhigh,
                        this->scale_62_power
                    ));
                }
            
                this->scale_62_out_set(tmp);
            }
            
            void gate_23_out1_number_set(number v) {
                this->gate_23_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_62_input_set(converted);
                }
            }
            
            void scale_61_out_set(const list& v) {
                this->scale_61_out = jsCreateListCopy(v);
                this->p_15_in1_list_set(v);
            }
            
            void scale_61_input_set(const list& v) {
                this->scale_61_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_61_inlow,
                        this->scale_61_inhigh,
                        this->scale_61_outlow,
                        this->scale_61_outhigh,
                        this->scale_61_power
                    ));
                }
            
                this->scale_61_out_set(tmp);
            }
            
            void gate_23_out2_number_set(number v) {
                this->gate_23_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_61_input_set(converted);
                }
            }
            
            void gate_23_input_number_set(number v) {
                if (this->gate_23_onoff == 1)
                    this->gate_23_out1_number_set(v);
                else if (this->gate_23_onoff == 2)
                    this->gate_23_out2_number_set(v);
            }
            
            void message_55_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_23_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_23_onoff_set(converted);
                }
            }
            
            void message_55_trigger_bang() {
                this->message_55_out_set(this->message_55_set);
            }
            
            void select_32_match1_bang() {
                this->message_57_trigger_bang();
                this->message_55_trigger_bang();
            }
            
            void select_32_nomatch_number_set(number ) {}
            
            void select_32_input_number_set(number v) {
                if (v == this->select_32_test1)
                    this->select_32_match1_bang();
                else
                    this->select_32_nomatch_number_set(v);
            }
            
            void expr_59_out1_set(number v) {
                this->expr_59_out1 = v;
                this->select_32_input_number_set(this->expr_59_out1);
            }
            
            void expr_59_in1_set(number in1) {
                this->expr_59_in1 = in1;
                this->expr_59_out1_set(this->expr_59_in1 >= this->expr_59_in2);//#map:fixedgrain/rand-placement/>=_obj-80:1
            }
            
            void message_56_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_24_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_24_onoff_set(converted);
                }
            }
            
            void message_56_trigger_bang() {
                this->message_56_out_set(this->message_56_set);
            }
            
            void message_54_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_23_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_23_onoff_set(converted);
                }
            }
            
            void message_54_trigger_bang() {
                this->message_54_out_set(this->message_54_set);
            }
            
            void select_31_match1_bang() {
                this->message_56_trigger_bang();
                this->message_54_trigger_bang();
            }
            
            void select_31_nomatch_number_set(number ) {}
            
            void select_31_input_number_set(number v) {
                if (v == this->select_31_test1)
                    this->select_31_match1_bang();
                else
                    this->select_31_nomatch_number_set(v);
            }
            
            void expr_58_out1_set(number v) {
                this->expr_58_out1 = v;
                this->select_31_input_number_set(this->expr_58_out1);
            }
            
            void expr_58_in1_set(number in1) {
                this->expr_58_in1 = in1;
                this->expr_58_out1_set(this->expr_58_in1 <= this->expr_58_in2);//#map:fixedgrain/rand-placement/<=_obj-2:1
            }
            
            void trigger_26_out2_set(number v) {
                this->expr_59_in1_set(v);
                this->expr_58_in1_set(v);
            }
            
            void trigger_26_out1_set(number v) {
                this->gate_24_input_number_set(v);
            }
            
            void trigger_26_input_number_set(number v) {
                this->trigger_26_out2_set(trunc(v));
                this->trigger_26_out1_set(trunc(v));
            }
            
            void receive_29_output_number_set(number v) {
                this->receive_29_output_number = v;
                this->trigger_26_input_number_set(v);
            }
            
            void random_14_result_set(number v) {
                this->gate_23_input_number_set(v);
            }
            
            void random_14_trigger_bang() {
                {
                    this->random_14_result_set(this->random(0, this->random_14_limit));
                }
            }
            
            void eventinlet_41_out1_bang_bang() {
                this->random_14_trigger_bang();
            }
            
            void message_54_set_set(const list& v) {
                this->message_54_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-placement/message_obj-9"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_55_set_set(const list& v) {
                this->message_55_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-placement/message_obj-6"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_56_set_set(const list& v) {
                this->message_56_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-placement/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_57_set_set(const list& v) {
                this->message_57_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-placement/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void linetilde_03_perform(SampleValue * out, Index n) {
                auto __linetilde_03_time = this->linetilde_03_time;
                auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
                auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_03_activeRamps->length)) {
                    while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_03_activeRamps[0];
                        number inc = this->linetilde_03_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_03_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_03_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                                    __linetilde_03_time = 0;
                                }
                            }
                        }
            
                        __linetilde_03_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_03_currentValue;
                    i++;
                }
            
                this->linetilde_03_currentValue = __linetilde_03_currentValue;
                this->linetilde_03_time = __linetilde_03_time;
            }
            
            void pan_tilde_02_perform(
                const Sample * pos,
                const SampleValue * in0,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out2[(Index)i] = this->pan_tilde_02_func_next(pos[(Index)i], 1) * in0[(Index)i];
                    out1[(Index)i] = this->pan_tilde_02_func_next(pos[(Index)i], 0) * in0[(Index)i];
                }
            }
            
            void p_15_perform(Index n) {
                // subpatcher: width
                this->p_15->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_14_limit_setter(number v) {
                if (v >= 0)
                    this->random_14_limit = v;
            }
            
            void numberobj_156_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_156_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_156_value = localvalue;
            }
            
            void numberobj_157_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_157_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_157_value = localvalue;
            }
            
            number pan_tilde_02_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            {
                                {
                                    if (pos <= -1 || pos >= 2)
                                        return 0;
                                }
                            }
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                {
                                    return this->safesqrt(1.0 - rnbo_abs(pos));
                                }
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void pan_tilde_02_func_reset() {}
            
            void random_14_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_14_nz_state
                );
            }
            
            void random_14_nz_init() {
                this->random_14_nz_reset();
            }
            
            void random_14_nz_seed(number v) {
                xoshiro_reset(v, this->random_14_nz_state);
            }
            
            number random_14_nz_next() {
                return xoshiro_next(this->random_14_nz_state);
            }
            
            void message_54_init() {
                this->message_54_set_set({1});
            }
            
            void message_55_init() {
                this->message_55_set_set({2});
            }
            
            void numberobj_156_init() {
                this->numberobj_156_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-placement/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_156_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_156_value;
            }
            
            void numberobj_156_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_156_value_set(preset["value"]);
            }
            
            void message_56_init() {
                this->message_56_set_set({1});
            }
            
            void message_57_init() {
                this->message_57_set_set({2});
            }
            
            void numberobj_157_init() {
                this->numberobj_157_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-placement/number_obj-22"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_157_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_157_value;
            }
            
            void numberobj_157_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_157_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                pan_tilde_02_spread = 0.5;
                pan_tilde_02_pos = 0;
                gate_23_onoff = 0;
                gate_23_out1_number = 0;
                gate_23_out2_number = 0;
                linetilde_03_time = 0;
                linetilde_03_keepramp = 0;
                p_15_target = 0;
                scale_61_inlow = 0;
                scale_61_inhigh = 200;
                scale_61_outlow = 0;
                scale_61_outhigh = 1;
                scale_61_power = 1;
                random_14_limit = 201;
                random_14_limit_setter(random_14_limit);
                random_14_seed = 0;
                scale_62_inlow = 200;
                scale_62_inhigh = 0;
                scale_62_outlow = 1;
                scale_62_outhigh = 0;
                scale_62_power = 1;
                scale_63_inlow = -100;
                scale_63_inhigh = 100;
                scale_63_outlow = 0;
                scale_63_outhigh = 1;
                scale_63_power = 1;
                receive_26_output_number = 0;
                scale_64_inlow = -100;
                scale_64_inhigh = 100;
                scale_64_outlow = 0;
                scale_64_outhigh = 1;
                scale_64_power = 1;
                receive_27_output_number = 0;
                scale_65_inlow = 0;
                scale_65_inhigh = 100;
                scale_65_outlow = 0.5;
                scale_65_outhigh = 0;
                scale_65_power = 1;
                receive_28_output_number = 0;
                scale_66_inlow = 0;
                scale_66_inhigh = 100;
                scale_66_outlow = 0.5;
                scale_66_outhigh = 1;
                scale_66_power = 1;
                scale_67_inlow = -100;
                scale_67_inhigh = 0;
                scale_67_outlow = 0.1;
                scale_67_outhigh = 1;
                scale_67_power = 1;
                gate_24_onoff = 0;
                gate_24_out1_number = 0;
                gate_24_out2_number = 0;
                receive_29_output_number = 0;
                select_31_test1 = 1;
                expr_58_in1 = 0;
                expr_58_in2 = 0;
                expr_58_out1 = 0;
                numberobj_156_value = 0;
                numberobj_156_value_setter(numberobj_156_value);
                select_32_test1 = 1;
                expr_59_in1 = 0;
                expr_59_in2 = 1;
                expr_59_out1 = 0;
                numberobj_157_value = 0;
                numberobj_157_value_setter(numberobj_157_value);
                scale_68_inlow = 1;
                scale_68_inhigh = 100;
                scale_68_outlow = 1;
                scale_68_outhigh = 0.1;
                scale_68_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_03_currentValue = 0;
                numberobj_156_currentFormat = 6;
                numberobj_156_lastValue = 0;
                numberobj_157_currentFormat = 6;
                numberobj_157_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number pan_tilde_02_spread;
                number pan_tilde_02_pos;
                number gate_23_onoff;
                number gate_23_out1_number;
                list gate_23_out1_list;
                number gate_23_out2_number;
                list gate_23_out2_list;
                list linetilde_03_segments;
                number linetilde_03_time;
                number linetilde_03_keepramp;
                number p_15_target;
                list scale_61_input;
                number scale_61_inlow;
                number scale_61_inhigh;
                number scale_61_outlow;
                number scale_61_outhigh;
                number scale_61_power;
                list scale_61_out;
                number random_14_limit;
                number random_14_seed;
                list message_54_set;
                list message_55_set;
                list scale_62_input;
                number scale_62_inlow;
                number scale_62_inhigh;
                number scale_62_outlow;
                number scale_62_outhigh;
                number scale_62_power;
                list scale_62_out;
                list scale_63_input;
                number scale_63_inlow;
                number scale_63_inhigh;
                number scale_63_outlow;
                number scale_63_outhigh;
                number scale_63_power;
                list scale_63_out;
                number receive_26_output_number;
                list receive_26_output_list;
                list scale_64_input;
                number scale_64_inlow;
                number scale_64_inhigh;
                number scale_64_outlow;
                number scale_64_outhigh;
                number scale_64_power;
                list scale_64_out;
                number receive_27_output_number;
                list receive_27_output_list;
                list scale_65_input;
                number scale_65_inlow;
                number scale_65_inhigh;
                number scale_65_outlow;
                number scale_65_outhigh;
                number scale_65_power;
                list scale_65_out;
                number receive_28_output_number;
                list receive_28_output_list;
                list scale_66_input;
                number scale_66_inlow;
                number scale_66_inhigh;
                number scale_66_outlow;
                number scale_66_outhigh;
                number scale_66_power;
                list scale_66_out;
                list scale_67_input;
                number scale_67_inlow;
                number scale_67_inhigh;
                number scale_67_outlow;
                number scale_67_outhigh;
                number scale_67_power;
                list scale_67_out;
                number gate_24_onoff;
                number gate_24_out1_number;
                list gate_24_out1_list;
                number gate_24_out2_number;
                list gate_24_out2_list;
                number receive_29_output_number;
                list receive_29_output_list;
                number select_31_test1;
                number expr_58_in1;
                number expr_58_in2;
                number expr_58_out1;
                number numberobj_156_value;
                number select_32_test1;
                list message_56_set;
                number expr_59_in1;
                number expr_59_in2;
                number expr_59_out1;
                list message_57_set;
                number numberobj_157_value;
                list scale_68_input;
                number scale_68_inlow;
                number scale_68_inhigh;
                number scale_68_outlow;
                number scale_68_outhigh;
                number scale_68_power;
                list scale_68_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_03_activeRamps;
                number linetilde_03_currentValue;
                UInt random_14_nz_state[4] = { };
                Int numberobj_156_currentFormat;
                number numberobj_156_lastValue;
                Int numberobj_157_currentFormat;
                number numberobj_157_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_108* p_15;
            
    };
    
    class RNBOSubpatcher_111 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_111()
            {
            }
            
            ~RNBOSubpatcher_111()
            {
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
                getEngine()->flushClockEvents(this, -1494586265, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->linetilde_04_perform(this->signals[0], n);
                this->numbertilde_18_perform(this->signals[0], this->dummyBuffer, n);
                this->signalforwarder_01_perform(this->signals[0], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->numbertilde_18_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_04_target_bang();
                    break;
                    }
                case -1494586265:
                    {
                    this->numbertilde_18_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("fixedgrain/rand-envelope/number~_obj-26") == objectId)
                        this->numbertilde_18_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("fixedgrain/rand-envelope/number~_obj-26") == objectId)
                        this->numbertilde_18_mode_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-envelope/message_obj-11") == objectId)
                        this->message_58_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-envelope/number_obj-17") == objectId)
                        this->numberobj_158_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-19") == objectId)
                        this->numberobj_159_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-45") == objectId)
                        this->numberobj_160_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-24") == objectId)
                        this->numberobj_161_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-33") == objectId)
                        this->numberobj_162_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-envelope/number_obj-17") == objectId)
                        this->numberobj_158_format_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-19") == objectId)
                        this->numberobj_159_format_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-45") == objectId)
                        this->numberobj_160_format_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-24") == objectId)
                        this->numberobj_161_format_set(payload);
            
                    if (TAG("fixedgrain/rand-envelope/number_obj-33") == objectId)
                        this->numberobj_162_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("fixedgrain/rand-envelope/number~_obj-26") == objectId)
                        this->numbertilde_18_sig_list_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-envelope/message_obj-11") == objectId)
                        this->message_58_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("fixedgrain/rand-envelope/button_obj-50") == objectId)
                        this->button_09_bangin_bang();
            
                    if (TAG("fixedgrain/rand-envelope/button_obj-15") == objectId)
                        this->button_10_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-envelope/message_obj-11") == objectId)
                        this->message_58_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("fixedgrain/rand-envelope/button_obj-50"):
                    {
                    return "fixedgrain/rand-envelope/button_obj-50";
                    }
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("fixedgrain/rand-envelope/number~_obj-26"):
                    {
                    return "fixedgrain/rand-envelope/number~_obj-26";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-envelope/message_obj-11"):
                    {
                    return "fixedgrain/rand-envelope/message_obj-11";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-envelope/number_obj-17"):
                    {
                    return "fixedgrain/rand-envelope/number_obj-17";
                    }
                case TAG("fixedgrain/rand-envelope/number_obj-19"):
                    {
                    return "fixedgrain/rand-envelope/number_obj-19";
                    }
                case TAG("fixedgrain/rand-envelope/button_obj-15"):
                    {
                    return "fixedgrain/rand-envelope/button_obj-15";
                    }
                case TAG("fixedgrain/rand-envelope/number_obj-45"):
                    {
                    return "fixedgrain/rand-envelope/number_obj-45";
                    }
                case TAG("fixedgrain/rand-envelope/number_obj-24"):
                    {
                    return "fixedgrain/rand-envelope/number_obj-24";
                    }
                case TAG("fixedgrain/rand-envelope/number_obj-33"):
                    {
                    return "fixedgrain/rand-envelope/number_obj-33";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_42_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->message_58_trigger_bang();
            }
            
            void eventinlet_42_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->message_58_trigger_bang();
            }
            
            void button_09_bangin_bang() {
                this->button_09_bangval_bang();
            }
            
            void numbertilde_18_sig_number_set(number v) {
                this->numbertilde_18_outValue = v;
            }
            
            void numbertilde_18_sig_list_set(const list& v) {
                this->numbertilde_18_outValue = v[0];
            }
            
            void numbertilde_18_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_18_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_18_currentMode = 1;
                }
            }
            
            void message_58_listin_list_set(const list& v) {
                this->message_58_set_set(v);
            }
            
            void message_58_listin_number_set(number v) {
                this->message_58_set_set(v);
            }
            
            void message_58_listin_bang_bang() {
                this->message_58_trigger_bang();
            }
            
            void numberobj_158_valin_set(number v) {
                this->numberobj_158_value_set(v);
            }
            
            void numberobj_158_format_set(number v) {
                this->numberobj_158_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_159_valin_set(number v) {
                this->numberobj_159_value_set(v);
            }
            
            void numberobj_159_format_set(number v) {
                this->numberobj_159_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_43_out1_bang_bang() {
                this->numberobj_159_value_bang();
            }
            
            void eventinlet_43_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_159_value_set(converted);
                }
            }
            
            void button_10_bangin_bang() {
                this->button_10_bangval_bang();
            }
            
            void numberobj_160_valin_set(number v) {
                this->numberobj_160_value_set(v);
            }
            
            void numberobj_160_format_set(number v) {
                this->numberobj_160_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_161_valin_set(number v) {
                this->numberobj_161_value_set(v);
            }
            
            void numberobj_161_format_set(number v) {
                this->numberobj_161_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_162_valin_set(number v) {
                this->numberobj_162_value_set(v);
            }
            
            void numberobj_162_format_set(number v) {
                this->numberobj_162_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_04_target_bang() {
                this->eventoutlet_25_in1_bang_bang();
                this->button_10_bangval_bang();
            }
            
            void numbertilde_18_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->numbertilde_18_init();
                this->message_58_init();
                this->numberobj_158_init();
                this->numberobj_159_init();
                this->numberobj_160_init();
                this->numberobj_161_init();
                this->numberobj_162_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_61_in2_set(number v) {
                this->expr_61_in2 = v;
            }
            
            void message_58_set_set(const list& v) {
                this->message_58_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-envelope/message_obj-11"),
                    v,
                    this->_currentTime
                );
            }
            
            void pak_03_out_set(const list& v) {
                this->message_58_set_set(v);
            }
            
            void pak_03_in6_set(number v) {
                this->pak_03_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_03_in1;
                array[1] = this->pak_03_in2;
                array[2] = this->pak_03_in3;
                array[3] = this->pak_03_in4;
                array[4] = this->pak_03_in5;
                array[5] = this->pak_03_in6;
                array[6] = this->pak_03_in7;
                array[7] = this->pak_03_in8;
                this->pak_03_out_set(array);
            }
            
            void numberobj_160_output_set(number v) {
                this->pak_03_in6_set(v);
            }
            
            void numberobj_160_value_set(number v) {
                this->numberobj_160_value_setter(v);
                v = this->numberobj_160_value;
                number localvalue = v;
            
                if (this->numberobj_160_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-45"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_160_output_set(localvalue);
            }
            
            void expr_61_out1_set(number v) {
                this->expr_61_out1 = v;
                this->numberobj_160_value_set(this->expr_61_out1);
            }
            
            void expr_61_in1_set(number in1) {
                this->expr_61_in1 = in1;
                this->expr_61_out1_set(rnbo_abs(this->expr_61_in1 - this->expr_61_in2));//#map:fixedgrain/rand-envelope/absdiff_obj-40:1
            }
            
            void expr_62_out1_set(number v) {
                this->expr_62_out1 = v;
                this->expr_61_in1_set(this->expr_62_out1);
            }
            
            void expr_62_in1_set(number in1) {
                this->expr_62_in1 = in1;
                this->expr_62_out1_set(this->expr_62_in1 * this->expr_62_in2);//#map:fixedgrain/rand-envelope/*_obj-2:1
            }
            
            void pak_03_in8_set(number v) {
                this->pak_03_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_03_in1;
                array[1] = this->pak_03_in2;
                array[2] = this->pak_03_in3;
                array[3] = this->pak_03_in4;
                array[4] = this->pak_03_in5;
                array[5] = this->pak_03_in6;
                array[6] = this->pak_03_in7;
                array[7] = this->pak_03_in8;
                this->pak_03_out_set(array);
            }
            
            void pak_03_in4_set(number v) {
                this->pak_03_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_03_in1;
                array[1] = this->pak_03_in2;
                array[2] = this->pak_03_in3;
                array[3] = this->pak_03_in4;
                array[4] = this->pak_03_in5;
                array[5] = this->pak_03_in6;
                array[6] = this->pak_03_in7;
                array[7] = this->pak_03_in8;
                this->pak_03_out_set(array);
            }
            
            void numberobj_158_output_set(number v) {
                this->expr_62_in1_set(v);
                this->pak_03_in8_set(v);
                this->pak_03_in4_set(v);
            }
            
            void numberobj_158_value_set(number v) {
                this->numberobj_158_value_setter(v);
                v = this->numberobj_158_value;
                number localvalue = v;
            
                if (this->numberobj_158_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_158_output_set(localvalue);
            }
            
            void expr_60_out1_set(number v) {
                this->expr_60_out1 = v;
                this->numberobj_158_value_set(this->expr_60_out1);
            }
            
            void expr_60_in1_set(number in1) {
                this->expr_60_in1 = in1;
            
                this->expr_60_out1_set(
                    (this->expr_60_in2 == 0 ? 0 : (this->expr_60_in2 == 0. ? 0. : this->expr_60_in1 / this->expr_60_in2))
                );//#map:fixedgrain/rand-envelope//_obj-21:1
            }
            
            void numberobj_159_output_set(number v) {
                this->expr_61_in2_set(v);
                this->expr_60_in1_set(v);
            }
            
            void numberobj_159_value_set(number v) {
                this->numberobj_159_value_setter(v);
                v = this->numberobj_159_value;
                number localvalue = v;
            
                if (this->numberobj_159_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_159_output_set(localvalue);
            }
            
            void eventinlet_43_out1_number_set(number v) {
                this->numberobj_159_value_set(v);
            }
            
            void expr_60_in2_set(number v) {
                this->expr_60_in2 = v;
            }
            
            void numberobj_161_output_set(number v) {
                this->expr_60_in2_set(v);
            }
            
            void numberobj_161_value_set(number v) {
                this->numberobj_161_value_setter(v);
                v = this->numberobj_161_value;
                number localvalue = v;
            
                if (this->numberobj_161_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-24"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_161_output_set(localvalue);
            }
            
            void scale_69_out_set(const list& v) {
                this->scale_69_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_161_value_set(converted);
                }
            }
            
            void scale_69_input_set(const list& v) {
                this->scale_69_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_69_inlow,
                        this->scale_69_inhigh,
                        this->scale_69_outlow,
                        this->scale_69_outhigh,
                        this->scale_69_power
                    ));
                }
            
                this->scale_69_out_set(tmp);
            }
            
            void numberobj_162_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_69_input_set(converted);
                }
            }
            
            void numberobj_162_value_set(number v) {
                this->numberobj_162_value_setter(v);
                v = this->numberobj_162_value;
                number localvalue = v;
            
                if (this->numberobj_162_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-33"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_162_output_set(localvalue);
            }
            
            void receive_30_output_number_set(number v) {
                this->receive_30_output_number = v;
                this->numberobj_162_value_set(v);
            }
            
            void linetilde_04_time_set(number v) {
                this->linetilde_04_time = v;
            }
            
            void linetilde_04_segments_set(const list& v) {
                this->linetilde_04_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_04_time == 0) {
                        this->linetilde_04_activeRamps->length = 0;
                        this->linetilde_04_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_04_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_04_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_04_activeRamps->push(lastRampValue);
                            this->linetilde_04_activeRamps->push(0);
                            this->linetilde_04_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_04_keepramp)) {
                                    this->linetilde_04_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_04_activeRamps->push(destinationValue);
                            this->linetilde_04_activeRamps->push(inc);
                            this->linetilde_04_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void message_58_out_set(const list& v) {
                this->linetilde_04_segments_set(v);
            }
            
            void message_58_trigger_bang() {
                this->message_58_out_set(this->message_58_set);
            }
            
            void eventinlet_42_out1_bang_bang() {
                this->message_58_trigger_bang();
            }
            
            void button_09_output_bang() {
                this->message_58_trigger_bang();
            }
            
            void button_09_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("fixedgrain/rand-envelope/button_obj-50"),
                    this->_currentTime
                );;
            
                this->button_09_output_bang();
            }
            
            void numberobj_159_value_bang() {
                number v = this->numberobj_159_value;
                number localvalue = v;
            
                if (this->numberobj_159_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-envelope/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_159_output_set(localvalue);
            }
            
            void button_10_output_bang() {}
            
            void button_10_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("fixedgrain/rand-envelope/button_obj-15"),
                    this->_currentTime
                );;
            
                this->button_10_output_bang();
            }
            
            void eventoutlet_25_in1_bang_bang() {
                ;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_18_out2_bang_bang();
            }
            
            void linetilde_04_perform(SampleValue * out, Index n) {
                auto __linetilde_04_time = this->linetilde_04_time;
                auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
                auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_04_activeRamps->length)) {
                    while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_04_activeRamps[0];
                        number inc = this->linetilde_04_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_04_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_04_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                                    __linetilde_04_time = 0;
                                }
                            }
                        }
            
                        __linetilde_04_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_04_currentValue;
                    i++;
                }
            
                this->linetilde_04_currentValue = __linetilde_04_currentValue;
                this->linetilde_04_time = __linetilde_04_time;
            }
            
            void numbertilde_18_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_18_currentIntervalInSamples = this->numbertilde_18_currentIntervalInSamples;
                auto __numbertilde_18_lastValue = this->numbertilde_18_lastValue;
                auto __numbertilde_18_currentInterval = this->numbertilde_18_currentInterval;
                auto __numbertilde_18_rampInSamples = this->numbertilde_18_rampInSamples;
                auto __numbertilde_18_outValue = this->numbertilde_18_outValue;
                auto __numbertilde_18_currentMode = this->numbertilde_18_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_18_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_18_smooth_next(
                            __numbertilde_18_outValue,
                            __numbertilde_18_rampInSamples,
                            __numbertilde_18_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_18_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_18_lastValue && __numbertilde_18_currentInterval <= 0) {
                    __numbertilde_18_currentInterval = __numbertilde_18_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_18_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("fixedgrain/rand-envelope/number~_obj-26"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_18_currentInterval = __numbertilde_18_currentInterval;
                this->numbertilde_18_lastValue = __numbertilde_18_lastValue;
            }
            
            void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_158_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_158_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_158_value = localvalue;
            }
            
            void numberobj_159_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_159_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_159_value = localvalue;
            }
            
            void numberobj_160_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_160_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_160_value = localvalue;
            }
            
            void numberobj_161_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_161_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_161_value = localvalue;
            }
            
            void numberobj_162_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_162_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_162_value = localvalue;
            }
            
            number numbertilde_18_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_18_smooth_d_prev);
                this->numbertilde_18_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_18_smooth_d_dspsetup() {
                this->numbertilde_18_smooth_d_reset();
            }
            
            void numbertilde_18_smooth_d_reset() {
                this->numbertilde_18_smooth_d_prev = 0;
            }
            
            number numbertilde_18_smooth_next(number x, number up, number down) {
                if (this->numbertilde_18_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_18_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_18_smooth_index = _up;
                        this->numbertilde_18_smooth_increment = (x - this->numbertilde_18_smooth_prev) / _up;
                    } else if (x < this->numbertilde_18_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_18_smooth_index = _down;
                        this->numbertilde_18_smooth_increment = (x - this->numbertilde_18_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_18_smooth_index > 0) {
                    this->numbertilde_18_smooth_prev += this->numbertilde_18_smooth_increment;
                    this->numbertilde_18_smooth_index -= 1;
                } else {
                    this->numbertilde_18_smooth_prev = x;
                }
            
                return this->numbertilde_18_smooth_prev;
            }
            
            void numbertilde_18_smooth_reset() {
                this->numbertilde_18_smooth_prev = 0;
                this->numbertilde_18_smooth_index = 0;
                this->numbertilde_18_smooth_increment = 0;
                this->numbertilde_18_smooth_d_reset();
            }
            
            void numbertilde_18_init() {
                this->numbertilde_18_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number~_obj-26"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_18_dspsetup(bool force) {
                if ((bool)(this->numbertilde_18_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_18_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_18_currentInterval = this->numbertilde_18_currentIntervalInSamples;
                this->numbertilde_18_rampInSamples = this->mstosamps(this->numbertilde_18_ramp);
                this->numbertilde_18_setupDone = true;
                this->numbertilde_18_smooth_d_dspsetup();
            }
            
            void message_58_init() {
                this->message_58_set_set({0, 0, 1, 41.283849, 1, 288.986942, 0, 41.283849});
            }
            
            void numberobj_158_init() {
                this->numberobj_158_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number_obj-17"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_158_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_158_value;
            }
            
            void numberobj_158_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_158_value_set(preset["value"]);
            }
            
            void numberobj_159_init() {
                this->numberobj_159_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number_obj-19"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_159_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_159_value;
            }
            
            void numberobj_159_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_159_value_set(preset["value"]);
            }
            
            void numberobj_160_init() {
                this->numberobj_160_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number_obj-45"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_160_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_160_value;
            }
            
            void numberobj_160_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_160_value_set(preset["value"]);
            }
            
            void numberobj_161_init() {
                this->numberobj_161_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number_obj-24"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_161_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_161_value;
            }
            
            void numberobj_161_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_161_value_set(preset["value"]);
            }
            
            void numberobj_162_init() {
                this->numberobj_162_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-envelope/number_obj-33"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_162_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_162_value;
            }
            
            void numberobj_162_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_162_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numbertilde_18_input_number = 0;
                numbertilde_18_ramp = 0;
                linetilde_04_time = 0;
                linetilde_04_keepramp = 0;
                numberobj_158_value = 0;
                numberobj_158_value_setter(numberobj_158_value);
                expr_60_in1 = 0;
                expr_60_in2 = 10;
                expr_60_out1 = 0;
                numberobj_159_value = 0;
                numberobj_159_value_setter(numberobj_159_value);
                pak_03_in1 = 0;
                pak_03_in2 = 0;
                pak_03_in3 = 1;
                pak_03_in4 = 0;
                pak_03_in5 = 1;
                pak_03_in6 = 0;
                pak_03_in7 = 0;
                pak_03_in8 = 0;
                numberobj_160_value = 0;
                numberobj_160_value_setter(numberobj_160_value);
                expr_61_in1 = 0;
                expr_61_in2 = 0;
                expr_61_out1 = 0;
                expr_62_in1 = 0;
                expr_62_in2 = 2;
                expr_62_out1 = 0;
                numberobj_161_value = 0;
                numberobj_161_value_setter(numberobj_161_value);
                numberobj_162_value = 0;
                numberobj_162_value_setter(numberobj_162_value);
                scale_69_inlow = -100;
                scale_69_inhigh = 100;
                scale_69_outlow = 16;
                scale_69_outhigh = 2;
                scale_69_power = 1;
                receive_30_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numbertilde_18_currentInterval = 0;
                numbertilde_18_currentIntervalInSamples = 0;
                numbertilde_18_lastValue = 0;
                numbertilde_18_outValue = 0;
                numbertilde_18_rampInSamples = 0;
                numbertilde_18_currentMode = 0;
                numbertilde_18_smooth_d_prev = 0;
                numbertilde_18_smooth_prev = 0;
                numbertilde_18_smooth_index = 0;
                numbertilde_18_smooth_increment = 0;
                numbertilde_18_setupDone = false;
                linetilde_04_currentValue = 0;
                numberobj_158_currentFormat = 6;
                numberobj_158_lastValue = 0;
                numberobj_159_currentFormat = 6;
                numberobj_159_lastValue = 0;
                numberobj_160_currentFormat = 6;
                numberobj_160_lastValue = 0;
                numberobj_161_currentFormat = 6;
                numberobj_161_lastValue = 0;
                numberobj_162_currentFormat = 6;
                numberobj_162_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numbertilde_18_input_number;
                number numbertilde_18_ramp;
                list linetilde_04_segments;
                number linetilde_04_time;
                number linetilde_04_keepramp;
                list message_58_set;
                number numberobj_158_value;
                number expr_60_in1;
                number expr_60_in2;
                number expr_60_out1;
                number numberobj_159_value;
                number pak_03_in1;
                number pak_03_in2;
                number pak_03_in3;
                number pak_03_in4;
                number pak_03_in5;
                number pak_03_in6;
                number pak_03_in7;
                number pak_03_in8;
                number numberobj_160_value;
                number expr_61_in1;
                number expr_61_in2;
                number expr_61_out1;
                number expr_62_in1;
                number expr_62_in2;
                number expr_62_out1;
                number numberobj_161_value;
                number numberobj_162_value;
                list scale_69_input;
                number scale_69_inlow;
                number scale_69_inhigh;
                number scale_69_outlow;
                number scale_69_outhigh;
                number scale_69_power;
                list scale_69_out;
                number receive_30_output_number;
                list receive_30_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                SampleIndex numbertilde_18_currentInterval;
                SampleIndex numbertilde_18_currentIntervalInSamples;
                number numbertilde_18_lastValue;
                number numbertilde_18_outValue;
                number numbertilde_18_rampInSamples;
                Int numbertilde_18_currentMode;
                number numbertilde_18_smooth_d_prev;
                number numbertilde_18_smooth_prev;
                number numbertilde_18_smooth_index;
                number numbertilde_18_smooth_increment;
                bool numbertilde_18_setupDone;
                list linetilde_04_activeRamps;
                number linetilde_04_currentValue;
                Int numberobj_158_currentFormat;
                number numberobj_158_lastValue;
                Int numberobj_159_currentFormat;
                number numberobj_159_lastValue;
                Int numberobj_160_currentFormat;
                number numberobj_160_lastValue;
                Int numberobj_161_currentFormat;
                number numberobj_161_lastValue;
                Int numberobj_162_currentFormat;
                number numberobj_162_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_112 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_112()
            {
            }
            
            ~RNBOSubpatcher_112()
            {
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-53") == objectId)
                        this->numberobj_163_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-31") == objectId)
                        this->numberobj_164_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-74") == objectId)
                        this->numberobj_165_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-55") == objectId)
                        this->numberobj_166_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-15") == objectId)
                        this->numberobj_167_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-123") == objectId)
                        this->numberobj_168_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-68") == objectId)
                        this->numberobj_169_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-64") == objectId)
                        this->numberobj_170_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-21") == objectId)
                        this->numberobj_171_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-13") == objectId)
                        this->numberobj_172_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-40") == objectId)
                        this->numberobj_173_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-44") == objectId)
                        this->numberobj_174_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-43") == objectId)
                        this->numberobj_175_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-78") == objectId)
                        this->numberobj_176_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-27") == objectId)
                        this->numberobj_177_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-71") == objectId)
                        this->numberobj_178_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-18") == objectId)
                        this->numberobj_179_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-53") == objectId)
                        this->numberobj_163_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-31") == objectId)
                        this->numberobj_164_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-74") == objectId)
                        this->numberobj_165_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-55") == objectId)
                        this->numberobj_166_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-15") == objectId)
                        this->numberobj_167_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-123") == objectId)
                        this->numberobj_168_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-68") == objectId)
                        this->numberobj_169_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-64") == objectId)
                        this->numberobj_170_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-21") == objectId)
                        this->numberobj_171_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-13") == objectId)
                        this->numberobj_172_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-40") == objectId)
                        this->numberobj_173_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-44") == objectId)
                        this->numberobj_174_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-43") == objectId)
                        this->numberobj_175_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-78") == objectId)
                        this->numberobj_176_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-27") == objectId)
                        this->numberobj_177_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-71") == objectId)
                        this->numberobj_178_format_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/number_obj-18") == objectId)
                        this->numberobj_179_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_59_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_60_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_61_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_62_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_59_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_60_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_61_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_62_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/button_obj-63") == objectId)
                        this->button_11_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-48") == objectId)
                        this->message_59_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-50") == objectId)
                        this->message_60_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-70") == objectId)
                        this->message_61_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-lengthanddelay/message_obj-66") == objectId)
                        this->message_62_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/button_obj-63"):
                    {
                    return "fixedgrain/rand-lengthanddelay/button_obj-63";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-53"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-53";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-31"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-31";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-74"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-74";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-55"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-55";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-15"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-15";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-123"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-123";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-68"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-68";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-64"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-64";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-21"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-21";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-13"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-13";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-40"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-40";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-44"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-44";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-43"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-43";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-78"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-78";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/message_obj-48"):
                    {
                    return "fixedgrain/rand-lengthanddelay/message_obj-48";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/message_obj-50"):
                    {
                    return "fixedgrain/rand-lengthanddelay/message_obj-50";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-27"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-27";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-71"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-71";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/message_obj-70"):
                    {
                    return "fixedgrain/rand-lengthanddelay/message_obj-70";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/message_obj-66"):
                    {
                    return "fixedgrain/rand-lengthanddelay/message_obj-66";
                    }
                case TAG("fixedgrain/rand-lengthanddelay/number_obj-18"):
                    {
                    return "fixedgrain/rand-lengthanddelay/number_obj-18";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_44_out1_number_set(number v) {
                this->trigger_27_input_number_set(v);
            }
            
            void eventinlet_44_out1_list_set(const list& v) {
                this->trigger_27_input_list_set(v);
            }
            
            void button_11_bangin_bang() {
                this->button_11_bangval_bang();
            }
            
            void numberobj_163_valin_set(number v) {
                this->numberobj_163_value_set(v);
            }
            
            void numberobj_163_format_set(number v) {
                this->numberobj_163_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_164_valin_set(number v) {
                this->numberobj_164_value_set(v);
            }
            
            void numberobj_164_format_set(number v) {
                this->numberobj_164_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_165_valin_set(number v) {
                this->numberobj_165_value_set(v);
            }
            
            void numberobj_165_format_set(number v) {
                this->numberobj_165_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_166_valin_set(number v) {
                this->numberobj_166_value_set(v);
            }
            
            void numberobj_166_format_set(number v) {
                this->numberobj_166_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_167_valin_set(number v) {
                this->numberobj_167_value_set(v);
            }
            
            void numberobj_167_format_set(number v) {
                this->numberobj_167_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_168_valin_set(number v) {
                this->numberobj_168_value_set(v);
            }
            
            void numberobj_168_format_set(number v) {
                this->numberobj_168_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_169_valin_set(number v) {
                this->numberobj_169_value_set(v);
            }
            
            void numberobj_169_format_set(number v) {
                this->numberobj_169_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_170_valin_set(number v) {
                this->numberobj_170_value_set(v);
            }
            
            void numberobj_170_format_set(number v) {
                this->numberobj_170_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_171_valin_set(number v) {
                this->numberobj_171_value_set(v);
            }
            
            void numberobj_171_format_set(number v) {
                this->numberobj_171_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_172_valin_set(number v) {
                this->numberobj_172_value_set(v);
            }
            
            void numberobj_172_format_set(number v) {
                this->numberobj_172_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_173_valin_set(number v) {
                this->numberobj_173_value_set(v);
            }
            
            void numberobj_173_format_set(number v) {
                this->numberobj_173_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_174_valin_set(number v) {
                this->numberobj_174_value_set(v);
            }
            
            void numberobj_174_format_set(number v) {
                this->numberobj_174_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_175_valin_set(number v) {
                this->numberobj_175_value_set(v);
            }
            
            void numberobj_175_format_set(number v) {
                this->numberobj_175_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_176_valin_set(number v) {
                this->numberobj_176_value_set(v);
            }
            
            void numberobj_176_format_set(number v) {
                this->numberobj_176_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_59_listin_list_set(const list& v) {
                this->message_59_set_set(v);
            }
            
            void message_59_listin_number_set(number v) {
                this->message_59_set_set(v);
            }
            
            void message_59_listin_bang_bang() {
                this->message_59_trigger_bang();
            }
            
            void message_60_listin_list_set(const list& v) {
                this->message_60_set_set(v);
            }
            
            void message_60_listin_number_set(number v) {
                this->message_60_set_set(v);
            }
            
            void message_60_listin_bang_bang() {
                this->message_60_trigger_bang();
            }
            
            void numberobj_177_valin_set(number v) {
                this->numberobj_177_value_set(v);
            }
            
            void numberobj_177_format_set(number v) {
                this->numberobj_177_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_178_valin_set(number v) {
                this->numberobj_178_value_set(v);
            }
            
            void numberobj_178_format_set(number v) {
                this->numberobj_178_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_61_listin_list_set(const list& v) {
                this->message_61_set_set(v);
            }
            
            void message_61_listin_number_set(number v) {
                this->message_61_set_set(v);
            }
            
            void message_61_listin_bang_bang() {
                this->message_61_trigger_bang();
            }
            
            void message_62_listin_list_set(const list& v) {
                this->message_62_set_set(v);
            }
            
            void message_62_listin_number_set(number v) {
                this->message_62_set_set(v);
            }
            
            void message_62_listin_bang_bang() {
                this->message_62_trigger_bang();
            }
            
            void numberobj_179_valin_set(number v) {
                this->numberobj_179_value_set(v);
            }
            
            void numberobj_179_format_set(number v) {
                this->numberobj_179_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_45_out1_bang_bang() {
                this->expr_72_in1_bang();
                this->expr_67_in2_bang();
            }
            
            void eventinlet_45_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->expr_72_in3_set(v[2]);
            
                    if (v->length > 1)
                        this->expr_72_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_72_in1_set(converted);
                }
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_67_in2_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_163_init();
                this->numberobj_164_init();
                this->numberobj_165_init();
                this->random_15_nz_init();
                this->random_16_nz_init();
                this->numberobj_166_init();
                this->numberobj_167_init();
                this->numberobj_168_init();
                this->numberobj_169_init();
                this->numberobj_170_init();
                this->numberobj_171_init();
                this->numberobj_172_init();
                this->numberobj_173_init();
                this->numberobj_174_init();
                this->numberobj_175_init();
                this->numberobj_176_init();
                this->message_59_init();
                this->message_60_init();
                this->numberobj_177_init();
                this->numberobj_178_init();
                this->message_61_init();
                this->message_62_init();
                this->numberobj_179_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_70_in2_set(number v) {
                this->expr_70_in2 = v;
            }
            
            void scale_73_outhigh_set(number v) {
                this->scale_73_outhigh = v;
            }
            
            void scale_73_inhigh_set(number v) {
                this->scale_73_inhigh = v;
            }
            
            void scale_71_outlow_set(number v) {
                this->scale_71_outlow = v;
            }
            
            void scale_71_inlow_set(number v) {
                this->scale_71_inlow = v;
            }
            
            void expr_64_in2_set(number v) {
                this->expr_64_in2 = v;
            }
            
            void numberobj_174_output_set(number v) {
                this->expr_70_in2_set(v);
                this->scale_73_outhigh_set(v);
                this->scale_73_inhigh_set(v);
                this->scale_71_outlow_set(v);
                this->scale_71_inlow_set(v);
                this->expr_64_in2_set(v);
            }
            
            void numberobj_174_value_set(number v) {
                this->numberobj_174_value_setter(v);
                v = this->numberobj_174_value;
                number localvalue = v;
            
                if (this->numberobj_174_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_174_output_set(localvalue);
            }
            
            void receive_33_output_number_set(number v) {
                this->receive_33_output_number = v;
                this->numberobj_174_value_set(v);
            }
            
            void eventoutlet_28_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_19_out3_number_set(v);
            }
            
            void expr_71_out1_set(number v) {
                this->expr_71_out1 = v;
                this->eventoutlet_28_in1_number_set(this->expr_71_out1);
            }
            
            void expr_71_in1_set(number in1) {
                this->expr_71_in1 = in1;
            
                this->expr_71_out1_set(
                    (this->expr_71_in2 == 0 ? 0 : (this->expr_71_in2 == 0. ? 0. : this->expr_71_in1 / this->expr_71_in2))
                );//#map:fixedgrain/rand-lengthanddelay//_obj-33:1
            }
            
            void random_16_limit_set(number v) {
                this->random_16_limit_setter(v);
                v = this->random_16_limit;
            }
            
            void numberobj_173_output_set(number v) {
                this->expr_71_in1_set(v);
                this->random_16_limit_set(v);
            }
            
            void numberobj_173_value_set(number v) {
                this->numberobj_173_value_setter(v);
                v = this->numberobj_173_value;
                number localvalue = v;
            
                if (this->numberobj_173_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-40"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_173_output_set(localvalue);
            }
            
            void expr_70_out1_set(number v) {
                this->expr_70_out1 = v;
                this->numberobj_173_value_set(this->expr_70_out1);
            }
            
            void expr_70_in1_set(number in1) {
                this->expr_70_in1 = in1;
                this->expr_70_out1_set(this->expr_70_in1 - this->expr_70_in2);//#map:fixedgrain/rand-lengthanddelay/-_obj-39:1
            }
            
            void scale_73_outlow_set(number v) {
                this->scale_73_outlow = v;
            }
            
            void scale_73_inlow_set(number v) {
                this->scale_73_inlow = v;
            }
            
            void scale_71_outhigh_set(number v) {
                this->scale_71_outhigh = v;
            }
            
            void scale_71_inhigh_set(number v) {
                this->scale_71_inhigh = v;
            }
            
            void numberobj_175_output_set(number v) {
                this->expr_70_in1_set(v);
                this->scale_73_outlow_set(v);
                this->scale_73_inlow_set(v);
                this->scale_71_outhigh_set(v);
                this->scale_71_inhigh_set(v);
            }
            
            void numberobj_175_value_set(number v) {
                this->numberobj_175_value_setter(v);
                v = this->numberobj_175_value;
                number localvalue = v;
            
                if (this->numberobj_175_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-43"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_175_output_set(localvalue);
            }
            
            void receive_34_output_number_set(number v) {
                this->receive_34_output_number = v;
                this->numberobj_175_value_set(v);
            }
            
            void gate_28_onoff_set(number v) {
                this->gate_28_onoff = v;
            }
            
            void gate_26_onoff_set(number v) {
                this->gate_26_onoff = v;
            }
            
            void scale_73_power_set(number v) {
                this->scale_73_power = v;
            }
            
            void numberobj_178_output_set(number v) {
                this->scale_73_power_set(v);
            }
            
            void numberobj_178_value_set(number v) {
                this->numberobj_178_value_setter(v);
                v = this->numberobj_178_value;
                number localvalue = v;
            
                if (this->numberobj_178_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_178_output_set(localvalue);
            }
            
            void scale_76_out_set(const list& v) {
                this->scale_76_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_178_value_set(converted);
                }
            }
            
            void scale_76_input_set(const list& v) {
                this->scale_76_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_76_inlow,
                        this->scale_76_inhigh,
                        this->scale_76_outlow,
                        this->scale_76_outhigh,
                        this->scale_76_power
                    ));
                }
            
                this->scale_76_out_set(tmp);
            }
            
            void gate_28_out1_number_set(number v) {
                this->gate_28_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_76_input_set(converted);
                }
            }
            
            void scale_71_power_set(number v) {
                this->scale_71_power = v;
            }
            
            void numberobj_179_output_set(number v) {
                this->scale_71_power_set(v);
            }
            
            void numberobj_179_value_set(number v) {
                this->numberobj_179_value_setter(v);
                v = this->numberobj_179_value;
                number localvalue = v;
            
                if (this->numberobj_179_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_179_output_set(localvalue);
            }
            
            void scale_77_out_set(const list& v) {
                this->scale_77_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_179_value_set(converted);
                }
            }
            
            void scale_77_input_set(const list& v) {
                this->scale_77_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_77_inlow,
                        this->scale_77_inhigh,
                        this->scale_77_outlow,
                        this->scale_77_outhigh,
                        this->scale_77_power
                    ));
                }
            
                this->scale_77_out_set(tmp);
            }
            
            void gate_28_out2_number_set(number v) {
                this->gate_28_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_77_input_set(converted);
                }
            }
            
            void gate_28_input_number_set(number v) {
                if (this->gate_28_onoff == 1)
                    this->gate_28_out1_number_set(v);
                else if (this->gate_28_onoff == 2)
                    this->gate_28_out2_number_set(v);
            }
            
            void expr_65_in2_set(number v) {
                this->expr_65_in2 = v;
            }
            
            void numberobj_168_output_set(number v) {
                this->expr_65_in2_set(v);
            }
            
            void numberobj_168_value_set(number v) {
                this->numberobj_168_value_setter(v);
                v = this->numberobj_168_value;
                number localvalue = v;
            
                if (this->numberobj_168_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-123"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_168_output_set(localvalue);
            }
            
            void expr_67_out1_set(number v) {
                this->expr_67_out1 = v;
                this->numberobj_168_value_set(this->expr_67_out1);
            }
            
            void expr_67_in1_set(number in1) {
                this->expr_67_in1 = in1;
                this->expr_67_out1_set(this->expr_67_in1 * this->expr_67_in2);//#map:fixedgrain/rand-lengthanddelay/*_obj-121:1
            }
            
            void numberobj_169_output_set(number v) {
                this->expr_67_in1_set(v);
            }
            
            void numberobj_169_value_set(number v) {
                this->numberobj_169_value_setter(v);
                v = this->numberobj_169_value;
                number localvalue = v;
            
                if (this->numberobj_169_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-68"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_169_output_set(localvalue);
            }
            
            void scale_73_out_set(const list& v) {
                this->scale_73_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_169_value_set(converted);
                }
            }
            
            void scale_73_input_set(const list& v) {
                this->scale_73_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_73_inlow,
                        this->scale_73_inhigh,
                        this->scale_73_outlow,
                        this->scale_73_outhigh,
                        this->scale_73_power
                    ));
                }
            
                this->scale_73_out_set(tmp);
            }
            
            void gate_26_out1_number_set(number v) {
                this->gate_26_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_73_input_set(converted);
                }
            }
            
            void scale_71_out_set(const list& v) {
                this->scale_71_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_169_value_set(converted);
                }
            }
            
            void scale_71_input_set(const list& v) {
                this->scale_71_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_71_inlow,
                        this->scale_71_inhigh,
                        this->scale_71_outlow,
                        this->scale_71_outhigh,
                        this->scale_71_power
                    ));
                }
            
                this->scale_71_out_set(tmp);
            }
            
            void gate_26_out2_number_set(number v) {
                this->gate_26_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_71_input_set(converted);
                }
            }
            
            void gate_26_input_number_set(number v) {
                if (this->gate_26_onoff == 1)
                    this->gate_26_out1_number_set(v);
                else if (this->gate_26_onoff == 2)
                    this->gate_26_out2_number_set(v);
            }
            
            void message_62_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_28_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_28_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_26_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_26_onoff_set(converted);
                }
            }
            
            void message_62_trigger_bang() {
                this->message_62_out_set(this->message_62_set);
            }
            
            void select_36_match1_bang() {
                this->message_62_trigger_bang();
            }
            
            void select_36_nomatch_number_set(number ) {}
            
            void select_36_input_number_set(number v) {
                if (v == this->select_36_test1)
                    this->select_36_match1_bang();
                else
                    this->select_36_nomatch_number_set(v);
            }
            
            void expr_76_out1_set(number v) {
                this->expr_76_out1 = v;
                this->select_36_input_number_set(this->expr_76_out1);
            }
            
            void expr_76_in1_set(number in1) {
                this->expr_76_in1 = in1;
                this->expr_76_out1_set(this->expr_76_in1 >= this->expr_76_in2);//#map:fixedgrain/rand-lengthanddelay/>=_obj-80:1
            }
            
            void message_61_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_28_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_28_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_26_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_26_onoff_set(converted);
                }
            }
            
            void message_61_trigger_bang() {
                this->message_61_out_set(this->message_61_set);
            }
            
            void select_35_match1_bang() {
                this->message_61_trigger_bang();
            }
            
            void select_35_nomatch_number_set(number ) {}
            
            void select_35_input_number_set(number v) {
                if (v == this->select_35_test1)
                    this->select_35_match1_bang();
                else
                    this->select_35_nomatch_number_set(v);
            }
            
            void expr_75_out1_set(number v) {
                this->expr_75_out1 = v;
                this->select_35_input_number_set(this->expr_75_out1);
            }
            
            void expr_75_in1_set(number in1) {
                this->expr_75_in1 = in1;
                this->expr_75_out1_set(this->expr_75_in1 <= this->expr_75_in2);//#map:fixedgrain/rand-lengthanddelay/<=_obj-82:1
            }
            
            void trigger_32_out2_set(number v) {
                this->expr_76_in1_set(v);
                this->expr_75_in1_set(v);
            }
            
            void trigger_32_out1_set(number v) {
                this->gate_28_input_number_set(v);
            }
            
            void trigger_32_input_number_set(number v) {
                this->trigger_32_out2_set(trunc(v));
                this->trigger_32_out1_set(trunc(v));
            }
            
            void receive_37_output_number_set(number v) {
                this->receive_37_output_number = v;
                this->trigger_32_input_number_set(v);
            }
            
            void expr_71_in2_set(number v) {
                this->expr_71_in2 = v;
                this->expr_71_in1_set(this->expr_71_in1);
            }
            
            void expr_72_out1_set(number v) {
                this->expr_72_out1 = v;
                this->expr_71_in2_set(this->expr_72_out1);
            }
            
            void expr_72_in1_set(number in1) {
                this->expr_72_in1 = in1;
            
                this->expr_72_out1_set(
                    (this->expr_72_in1 > this->expr_72_in3 ? this->expr_72_in3 : (this->expr_72_in1 < this->expr_72_in2 ? this->expr_72_in2 : this->expr_72_in1))
                );//#map:fixedgrain/rand-lengthanddelay/clip_obj-65:1
            }
            
            void expr_67_in2_set(number v) {
                this->expr_67_in2 = v;
            }
            
            void eventinlet_45_out1_number_set(number v) {
                this->expr_72_in1_set(v);
                this->expr_67_in2_set(v);
            }
            
            void scale_72_outhigh_set(number v) {
                this->scale_72_outhigh = v;
            }
            
            void expr_68_in2_set(number v) {
                this->expr_68_in2 = v;
            }
            
            void scale_72_inhigh_set(number v) {
                this->scale_72_inhigh = v;
            }
            
            void scale_70_outlow_set(number v) {
                this->scale_70_outlow = v;
            }
            
            void scale_70_inlow_set(number v) {
                this->scale_70_inlow = v;
            }
            
            void expr_63_in2_set(number v) {
                this->expr_63_in2 = v;
            }
            
            void expr_66_out1_set(number v) {
                this->expr_66_out1 = v;
                this->scale_72_outhigh_set(this->expr_66_out1);
                this->expr_68_in2_set(this->expr_66_out1);
                this->scale_72_inhigh_set(this->expr_66_out1);
                this->scale_70_outlow_set(this->expr_66_out1);
                this->scale_70_inlow_set(this->expr_66_out1);
                this->expr_63_in2_set(this->expr_66_out1);
            }
            
            void expr_66_in1_set(number in1) {
                this->expr_66_in1 = in1;
                this->expr_66_out1_set(this->expr_66_in1 * this->expr_66_in2);//#map:fixedgrain/rand-lengthanddelay/*_obj-5:1
            }
            
            void numberobj_167_output_set(number v) {
                this->expr_66_in1_set(v);
            }
            
            void numberobj_167_value_set(number v) {
                this->numberobj_167_value_setter(v);
                v = this->numberobj_167_value;
                number localvalue = v;
            
                if (this->numberobj_167_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_167_output_set(localvalue);
            }
            
            void receive_31_output_number_set(number v) {
                this->receive_31_output_number = v;
                this->numberobj_167_value_set(v);
            }
            
            void scale_72_outlow_set(number v) {
                this->scale_72_outlow = v;
            }
            
            void random_15_limit_set(number v) {
                this->random_15_limit_setter(v);
                v = this->random_15_limit;
            }
            
            void numberobj_171_output_set(number v) {
                this->random_15_limit_set(v);
            }
            
            void numberobj_171_value_set(number v) {
                this->numberobj_171_value_setter(v);
                v = this->numberobj_171_value;
                number localvalue = v;
            
                if (this->numberobj_171_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-21"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_171_output_set(localvalue);
            }
            
            void expr_68_out1_set(number v) {
                this->expr_68_out1 = v;
                this->numberobj_171_value_set(this->expr_68_out1);
            }
            
            void expr_68_in1_set(number in1) {
                this->expr_68_in1 = in1;
                this->expr_68_out1_set(this->expr_68_in1 - this->expr_68_in2);//#map:fixedgrain/rand-lengthanddelay/-_obj-22:1
            }
            
            void scale_72_inlow_set(number v) {
                this->scale_72_inlow = v;
            }
            
            void scale_70_outhigh_set(number v) {
                this->scale_70_outhigh = v;
            }
            
            void scale_70_inhigh_set(number v) {
                this->scale_70_inhigh = v;
            }
            
            void expr_69_out1_set(number v) {
                this->expr_69_out1 = v;
                this->scale_72_outlow_set(this->expr_69_out1);
                this->expr_68_in1_set(this->expr_69_out1);
                this->scale_72_inlow_set(this->expr_69_out1);
                this->scale_70_outhigh_set(this->expr_69_out1);
                this->scale_70_inhigh_set(this->expr_69_out1);
            }
            
            void expr_69_in1_set(number in1) {
                this->expr_69_in1 = in1;
                this->expr_69_out1_set(this->expr_69_in1 * this->expr_69_in2);//#map:fixedgrain/rand-lengthanddelay/*_obj-3:1
            }
            
            void numberobj_172_output_set(number v) {
                this->expr_69_in1_set(v);
            }
            
            void numberobj_172_value_set(number v) {
                this->numberobj_172_value_setter(v);
                v = this->numberobj_172_value;
                number localvalue = v;
            
                if (this->numberobj_172_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-13"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_172_output_set(localvalue);
            }
            
            void receive_32_output_number_set(number v) {
                this->receive_32_output_number = v;
                this->numberobj_172_value_set(v);
            }
            
            void gate_27_onoff_set(number v) {
                this->gate_27_onoff = v;
            }
            
            void gate_25_onoff_set(number v) {
                this->gate_25_onoff = v;
            }
            
            void scale_72_power_set(number v) {
                this->scale_72_power = v;
            }
            
            void numberobj_176_output_set(number v) {
                this->scale_72_power_set(v);
            }
            
            void numberobj_176_value_set(number v) {
                this->numberobj_176_value_setter(v);
                v = this->numberobj_176_value;
                number localvalue = v;
            
                if (this->numberobj_176_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-78"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_176_output_set(localvalue);
            }
            
            void scale_74_out_set(const list& v) {
                this->scale_74_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_176_value_set(converted);
                }
            }
            
            void scale_74_input_set(const list& v) {
                this->scale_74_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_74_inlow,
                        this->scale_74_inhigh,
                        this->scale_74_outlow,
                        this->scale_74_outhigh,
                        this->scale_74_power
                    ));
                }
            
                this->scale_74_out_set(tmp);
            }
            
            void gate_27_out1_number_set(number v) {
                this->gate_27_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_74_input_set(converted);
                }
            }
            
            void scale_70_power_set(number v) {
                this->scale_70_power = v;
            }
            
            void numberobj_177_output_set(number v) {
                this->scale_70_power_set(v);
            }
            
            void numberobj_177_value_set(number v) {
                this->numberobj_177_value_setter(v);
                v = this->numberobj_177_value;
                number localvalue = v;
            
                if (this->numberobj_177_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-27"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_177_output_set(localvalue);
            }
            
            void scale_75_out_set(const list& v) {
                this->scale_75_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_177_value_set(converted);
                }
            }
            
            void scale_75_input_set(const list& v) {
                this->scale_75_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_75_inlow,
                        this->scale_75_inhigh,
                        this->scale_75_outlow,
                        this->scale_75_outhigh,
                        this->scale_75_power
                    ));
                }
            
                this->scale_75_out_set(tmp);
            }
            
            void gate_27_out2_number_set(number v) {
                this->gate_27_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_75_input_set(converted);
                }
            }
            
            void gate_27_input_number_set(number v) {
                if (this->gate_27_onoff == 1)
                    this->gate_27_out1_number_set(v);
                else if (this->gate_27_onoff == 2)
                    this->gate_27_out2_number_set(v);
            }
            
            void numberobj_170_output_set(number v) {
                this->gate_26_input_number_set(v);
            }
            
            void numberobj_170_value_set(number v) {
                this->numberobj_170_value_setter(v);
                v = this->numberobj_170_value;
                number localvalue = v;
            
                if (this->numberobj_170_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-64"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_170_output_set(localvalue);
            }
            
            void expr_64_out1_set(number v) {
                this->expr_64_out1 = v;
                this->numberobj_170_value_set(this->expr_64_out1);
            }
            
            void expr_64_in1_set(number in1) {
                this->expr_64_in1 = in1;
                this->expr_64_out1_set(this->expr_64_in1 + this->expr_64_in2);//#map:fixedgrain/rand-lengthanddelay/+_obj-47:1
            }
            
            void random_16_result_set(number v) {
                this->expr_64_in1_set(v);
            }
            
            void random_16_trigger_bang() {
                {
                    this->random_16_result_set(this->random(0, this->random_16_limit));
                }
            }
            
            void trigger_28_out3_bang() {
                this->random_16_trigger_bang();
            }
            
            void eventoutlet_27_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_19_out2_number_set(v);
            }
            
            void numberobj_166_output_set(number v) {
                this->eventoutlet_27_in1_number_set(v);
            }
            
            void numberobj_166_value_set(number v) {
                this->numberobj_166_value_setter(v);
                v = this->numberobj_166_value;
                number localvalue = v;
            
                if (this->numberobj_166_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_166_output_set(localvalue);
            }
            
            void wrap_05_out1_set(number v) {
                this->numberobj_166_value_set(v);
            }
            
            void wrap_05_x_set(number x) {
                this->wrap_05_x = x;
                auto high = this->wrap_05_high;
                auto low = this->wrap_05_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_05_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_05_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_05_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_05_out1_set(result - range);
                    return;
                } else {
                    this->wrap_05_out1_set(result);
                    return;
                }
            }
            
            void expr_65_out1_set(number v) {
                this->expr_65_out1 = v;
                this->wrap_05_x_set(this->expr_65_out1);
            }
            
            void expr_65_in1_set(number in1) {
                this->expr_65_in1 = in1;
                this->expr_65_out1_set(this->expr_65_in1 + this->expr_65_in2);//#map:fixedgrain/rand-lengthanddelay/+_obj-46:1
            }
            
            void trigger_28_out2_set(number v) {
                this->expr_65_in1_set(v);
            }
            
            void eventoutlet_26_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_19_out1_number_set(v);
            }
            
            void numberobj_163_output_set(number v) {
                this->eventoutlet_26_in1_number_set(v);
            }
            
            void numberobj_163_value_set(number v) {
                this->numberobj_163_value_setter(v);
                v = this->numberobj_163_value;
                number localvalue = v;
            
                if (this->numberobj_163_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-53"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_163_output_set(localvalue);
            }
            
            void trigger_28_out1_set(number v) {
                this->numberobj_163_value_set(v);
            }
            
            void trigger_28_input_number_set(number v) {
                this->trigger_28_out3_bang();
                this->trigger_28_out2_set(v);
                this->trigger_28_out1_set(v);
            }
            
            void wrap_04_out1_set(number v) {
                this->trigger_28_input_number_set(v);
            }
            
            void wrap_04_x_set(number x) {
                this->wrap_04_x = x;
                auto high = this->wrap_04_high;
                auto low = this->wrap_04_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_04_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_04_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_04_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_04_out1_set(result - range);
                    return;
                } else {
                    this->wrap_04_out1_set(result);
                    return;
                }
            }
            
            void numberobj_164_output_set(number v) {
                this->wrap_04_x_set(v);
            }
            
            void numberobj_164_value_set(number v) {
                this->numberobj_164_value_setter(v);
                v = this->numberobj_164_value;
                number localvalue = v;
            
                if (this->numberobj_164_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-31"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_164_output_set(localvalue);
            }
            
            void scale_72_out_set(const list& v) {
                this->scale_72_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_164_value_set(converted);
                }
            }
            
            void scale_72_input_set(const list& v) {
                this->scale_72_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_72_inlow,
                        this->scale_72_inhigh,
                        this->scale_72_outlow,
                        this->scale_72_outhigh,
                        this->scale_72_power
                    ));
                }
            
                this->scale_72_out_set(tmp);
            }
            
            void gate_25_out1_number_set(number v) {
                this->gate_25_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_72_input_set(converted);
                }
            }
            
            void scale_70_out_set(const list& v) {
                this->scale_70_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_164_value_set(converted);
                }
            }
            
            void scale_70_input_set(const list& v) {
                this->scale_70_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_70_inlow,
                        this->scale_70_inhigh,
                        this->scale_70_outlow,
                        this->scale_70_outhigh,
                        this->scale_70_power
                    ));
                }
            
                this->scale_70_out_set(tmp);
            }
            
            void gate_25_out2_number_set(number v) {
                this->gate_25_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_70_input_set(converted);
                }
            }
            
            void gate_25_input_number_set(number v) {
                if (this->gate_25_onoff == 1)
                    this->gate_25_out1_number_set(v);
                else if (this->gate_25_onoff == 2)
                    this->gate_25_out2_number_set(v);
            }
            
            void message_60_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_27_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_27_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_25_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_25_onoff_set(converted);
                }
            }
            
            void message_60_trigger_bang() {
                this->message_60_out_set(this->message_60_set);
            }
            
            void select_34_match1_bang() {
                this->message_60_trigger_bang();
            }
            
            void select_34_nomatch_number_set(number ) {}
            
            void select_34_input_number_set(number v) {
                if (v == this->select_34_test1)
                    this->select_34_match1_bang();
                else
                    this->select_34_nomatch_number_set(v);
            }
            
            void expr_74_out1_set(number v) {
                this->expr_74_out1 = v;
                this->select_34_input_number_set(this->expr_74_out1);
            }
            
            void expr_74_in1_set(number in1) {
                this->expr_74_in1 = in1;
                this->expr_74_out1_set(this->expr_74_in1 >= this->expr_74_in2);//#map:fixedgrain/rand-lengthanddelay/>=_obj-20:1
            }
            
            void message_59_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_27_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_27_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_25_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_25_onoff_set(converted);
                }
            }
            
            void message_59_trigger_bang() {
                this->message_59_out_set(this->message_59_set);
            }
            
            void select_33_match1_bang() {
                this->message_59_trigger_bang();
            }
            
            void select_33_nomatch_number_set(number ) {}
            
            void select_33_input_number_set(number v) {
                if (v == this->select_33_test1)
                    this->select_33_match1_bang();
                else
                    this->select_33_nomatch_number_set(v);
            }
            
            void expr_73_out1_set(number v) {
                this->expr_73_out1 = v;
                this->select_33_input_number_set(this->expr_73_out1);
            }
            
            void expr_73_in1_set(number in1) {
                this->expr_73_in1 = in1;
                this->expr_73_out1_set(this->expr_73_in1 <= this->expr_73_in2);//#map:fixedgrain/rand-lengthanddelay/<=_obj-14:1
            }
            
            void trigger_31_out2_set(number v) {
                this->expr_74_in1_set(v);
                this->expr_73_in1_set(v);
            }
            
            void trigger_31_out1_set(number v) {
                this->gate_27_input_number_set(v);
            }
            
            void trigger_31_input_number_set(number v) {
                this->trigger_31_out2_set(trunc(v));
                this->trigger_31_out1_set(trunc(v));
            }
            
            void receive_36_output_number_set(number v) {
                this->receive_36_output_number = v;
                this->trigger_31_input_number_set(v);
            }
            
            void expr_69_in2_set(number v) {
                this->expr_69_in2 = v;
            }
            
            void wrap_05_high_set(number v) {
                this->wrap_05_high = v;
            }
            
            void expr_66_in2_set(number v) {
                this->expr_66_in2 = v;
            }
            
            void wrap_04_high_set(number v) {
                this->wrap_04_high = v;
            }
            
            void receive_35_output_number_set(number v) {
                this->receive_35_output_number = v;
                this->expr_69_in2_set(v);
                this->wrap_05_high_set(v);
                this->expr_66_in2_set(v);
                this->wrap_04_high_set(v);
            }
            
            void numberobj_172_value_bang() {
                number v = this->numberobj_172_value;
                number localvalue = v;
            
                if (this->numberobj_172_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-13"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_172_output_set(localvalue);
            }
            
            void trigger_29_out2_bang() {
                this->numberobj_172_value_bang();
            }
            
            void numberobj_167_value_bang() {
                number v = this->numberobj_167_value;
                number localvalue = v;
            
                if (this->numberobj_167_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_167_output_set(localvalue);
            }
            
            void trigger_29_out1_bang() {
                this->numberobj_167_value_bang();
            }
            
            void trigger_29_input_bang_bang() {
                this->trigger_29_out2_bang();
                this->trigger_29_out1_bang();
            }
            
            void trigger_27_out3_bang() {
                this->trigger_29_input_bang_bang();
            }
            
            void numberobj_174_value_bang() {
                number v = this->numberobj_174_value;
                number localvalue = v;
            
                if (this->numberobj_174_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_174_output_set(localvalue);
            }
            
            void trigger_30_out2_bang() {
                this->numberobj_174_value_bang();
            }
            
            void numberobj_175_value_bang() {
                number v = this->numberobj_175_value;
                number localvalue = v;
            
                if (this->numberobj_175_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-43"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_175_output_set(localvalue);
            }
            
            void trigger_30_out1_bang() {
                this->numberobj_175_value_bang();
            }
            
            void trigger_30_input_bang_bang() {
                this->trigger_30_out2_bang();
                this->trigger_30_out1_bang();
            }
            
            void trigger_27_out2_bang() {
                this->trigger_30_input_bang_bang();
            }
            
            void numberobj_165_output_set(number v) {
                this->gate_25_input_number_set(v);
            }
            
            void numberobj_165_value_set(number v) {
                this->numberobj_165_value_setter(v);
                v = this->numberobj_165_value;
                number localvalue = v;
            
                if (this->numberobj_165_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-74"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_165_output_set(localvalue);
            }
            
            void expr_63_out1_set(number v) {
                this->expr_63_out1 = v;
                this->numberobj_165_value_set(this->expr_63_out1);
            }
            
            void expr_63_in1_set(number in1) {
                this->expr_63_in1 = in1;
                this->expr_63_out1_set(this->expr_63_in1 + this->expr_63_in2);//#map:fixedgrain/rand-lengthanddelay/+_obj-79:1
            }
            
            void random_15_result_set(number v) {
                this->expr_63_in1_set(v);
            }
            
            void random_15_trigger_bang() {
                {
                    this->random_15_result_set(this->random(0, this->random_15_limit));
                }
            }
            
            void trigger_27_out1_bang() {
                this->random_15_trigger_bang();
            }
            
            void trigger_27_input_bang_bang() {
                this->trigger_27_out3_bang();
                this->trigger_27_out2_bang();
                this->trigger_27_out1_bang();
            }
            
            void eventinlet_44_out1_bang_bang() {
                this->trigger_27_input_bang_bang();
            }
            
            void trigger_27_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_27_out3_bang();
                this->trigger_27_out2_bang();
                this->trigger_27_out1_bang();
            }
            
            void trigger_27_input_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->trigger_27_out3_bang();
                this->trigger_27_out2_bang();
                this->trigger_27_out1_bang();
            }
            
            void button_11_output_bang() {
                this->trigger_27_input_bang_bang();
            }
            
            void button_11_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("fixedgrain/rand-lengthanddelay/button_obj-63"),
                    this->_currentTime
                );;
            
                this->button_11_output_bang();
            }
            
            void message_59_set_set(const list& v) {
                this->message_59_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-lengthanddelay/message_obj-48"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_60_set_set(const list& v) {
                this->message_60_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-lengthanddelay/message_obj-50"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_61_set_set(const list& v) {
                this->message_61_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-lengthanddelay/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_62_set_set(const list& v) {
                this->message_62_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-lengthanddelay/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_72_in1_bang() {
                this->expr_72_out1_set(
                    (this->expr_72_in1 > this->expr_72_in3 ? this->expr_72_in3 : (this->expr_72_in1 < this->expr_72_in2 ? this->expr_72_in2 : this->expr_72_in1))
                );//#map:fixedgrain/rand-lengthanddelay/clip_obj-65:1
            }
            
            void expr_67_in2_bang() {}
            
            void expr_72_in2_set(number v) {
                this->expr_72_in2 = v;
            }
            
            void expr_72_in3_set(number v) {
                this->expr_72_in3 = v;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_163_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_163_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_163_value = localvalue;
            }
            
            void numberobj_164_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_164_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_164_value = localvalue;
            }
            
            void numberobj_165_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_165_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_165_value = localvalue;
            }
            
            void random_15_limit_setter(number v) {
                if (v >= 0)
                    this->random_15_limit = v;
            }
            
            void random_16_limit_setter(number v) {
                if (v >= 0)
                    this->random_16_limit = v;
            }
            
            void numberobj_166_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_166_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_166_value = localvalue;
            }
            
            void numberobj_167_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_167_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_167_value = localvalue;
            }
            
            void numberobj_168_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_168_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_168_value = localvalue;
            }
            
            void numberobj_169_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_169_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_169_value = localvalue;
            }
            
            void numberobj_170_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_170_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_170_value = localvalue;
            }
            
            void numberobj_171_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_171_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_171_value = localvalue;
            }
            
            void numberobj_172_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_172_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_172_value = localvalue;
            }
            
            void numberobj_173_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_173_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_173_value = localvalue;
            }
            
            void numberobj_174_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_174_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_174_value = localvalue;
            }
            
            void numberobj_175_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_175_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_175_value = localvalue;
            }
            
            void numberobj_176_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_176_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_176_value = localvalue;
            }
            
            void numberobj_177_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_177_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_177_value = localvalue;
            }
            
            void numberobj_178_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_178_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_178_value = localvalue;
            }
            
            void numberobj_179_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_179_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_179_value = localvalue;
            }
            
            void numberobj_163_init() {
                this->numberobj_163_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-53"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_163_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_163_value;
            }
            
            void numberobj_163_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_163_value_set(preset["value"]);
            }
            
            void numberobj_164_init() {
                this->numberobj_164_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-31"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_164_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_164_value;
            }
            
            void numberobj_164_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_164_value_set(preset["value"]);
            }
            
            void numberobj_165_init() {
                this->numberobj_165_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-74"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_165_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_165_value;
            }
            
            void numberobj_165_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_165_value_set(preset["value"]);
            }
            
            void random_15_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_15_nz_state
                );
            }
            
            void random_15_nz_init() {
                this->random_15_nz_reset();
            }
            
            void random_15_nz_seed(number v) {
                xoshiro_reset(v, this->random_15_nz_state);
            }
            
            number random_15_nz_next() {
                return xoshiro_next(this->random_15_nz_state);
            }
            
            void random_16_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_16_nz_state
                );
            }
            
            void random_16_nz_init() {
                this->random_16_nz_reset();
            }
            
            void random_16_nz_seed(number v) {
                xoshiro_reset(v, this->random_16_nz_state);
            }
            
            number random_16_nz_next() {
                return xoshiro_next(this->random_16_nz_state);
            }
            
            void numberobj_166_init() {
                this->numberobj_166_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-55"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_166_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_166_value;
            }
            
            void numberobj_166_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_166_value_set(preset["value"]);
            }
            
            void numberobj_167_init() {
                this->numberobj_167_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_167_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_167_value;
            }
            
            void numberobj_167_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_167_value_set(preset["value"]);
            }
            
            void numberobj_168_init() {
                this->numberobj_168_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-123"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_168_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_168_value;
            }
            
            void numberobj_168_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_168_value_set(preset["value"]);
            }
            
            void numberobj_169_init() {
                this->numberobj_169_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-68"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_169_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_169_value;
            }
            
            void numberobj_169_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_169_value_set(preset["value"]);
            }
            
            void numberobj_170_init() {
                this->numberobj_170_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-64"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_170_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_170_value;
            }
            
            void numberobj_170_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_170_value_set(preset["value"]);
            }
            
            void numberobj_171_init() {
                this->numberobj_171_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-21"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_171_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_171_value;
            }
            
            void numberobj_171_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_171_value_set(preset["value"]);
            }
            
            void numberobj_172_init() {
                this->numberobj_172_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-13"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_172_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_172_value;
            }
            
            void numberobj_172_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_172_value_set(preset["value"]);
            }
            
            void numberobj_173_init() {
                this->numberobj_173_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-40"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_173_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_173_value;
            }
            
            void numberobj_173_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_173_value_set(preset["value"]);
            }
            
            void numberobj_174_init() {
                this->numberobj_174_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-44"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_174_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_174_value;
            }
            
            void numberobj_174_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_174_value_set(preset["value"]);
            }
            
            void numberobj_175_init() {
                this->numberobj_175_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-43"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_175_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_175_value;
            }
            
            void numberobj_175_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_175_value_set(preset["value"]);
            }
            
            void numberobj_176_init() {
                this->numberobj_176_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-78"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_176_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_176_value;
            }
            
            void numberobj_176_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_176_value_set(preset["value"]);
            }
            
            void message_59_init() {
                this->message_59_set_set({1});
            }
            
            void message_60_init() {
                this->message_60_set_set({2});
            }
            
            void numberobj_177_init() {
                this->numberobj_177_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-27"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_177_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_177_value;
            }
            
            void numberobj_177_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_177_value_set(preset["value"]);
            }
            
            void numberobj_178_init() {
                this->numberobj_178_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_178_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_178_value;
            }
            
            void numberobj_178_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_178_value_set(preset["value"]);
            }
            
            void message_61_init() {
                this->message_61_set_set({1});
            }
            
            void message_62_init() {
                this->message_62_set_set({2});
            }
            
            void numberobj_179_init() {
                this->numberobj_179_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-lengthanddelay/number_obj-18"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_179_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_179_value;
            }
            
            void numberobj_179_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_179_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_25_onoff = 0;
                gate_25_out1_number = 0;
                gate_25_out2_number = 0;
                wrap_04_x = 0;
                wrap_04_low = 0;
                wrap_04_high = 21000;
                numberobj_163_value = 0;
                numberobj_163_value_setter(numberobj_163_value);
                numberobj_164_value = 0;
                numberobj_164_value_setter(numberobj_164_value);
                expr_63_in1 = 0;
                expr_63_in2 = 0;
                expr_63_out1 = 0;
                numberobj_165_value = 0;
                numberobj_165_value_setter(numberobj_165_value);
                scale_70_inlow = 0;
                scale_70_inhigh = 1;
                scale_70_outlow = 0;
                scale_70_outhigh = 1;
                scale_70_power = 1;
                random_15_limit = 1;
                random_15_limit_setter(random_15_limit);
                random_15_seed = 0;
                expr_64_in1 = 0;
                expr_64_in2 = 0;
                expr_64_out1 = 0;
                random_16_limit = 1;
                random_16_limit_setter(random_16_limit);
                random_16_seed = 0;
                wrap_05_x = 0;
                wrap_05_low = 0;
                wrap_05_high = 21000;
                numberobj_166_value = 0;
                numberobj_166_value_setter(numberobj_166_value);
                expr_65_in1 = 0;
                expr_65_in2 = 0;
                expr_65_out1 = 0;
                numberobj_167_value = 0;
                numberobj_167_value_setter(numberobj_167_value);
                expr_66_in1 = 0;
                expr_66_in2 = 0;
                expr_66_out1 = 0;
                receive_31_output_number = 0;
                gate_26_onoff = 0;
                gate_26_out1_number = 0;
                gate_26_out2_number = 0;
                numberobj_168_value = 0;
                numberobj_168_value_setter(numberobj_168_value);
                expr_67_in1 = 0;
                expr_67_in2 = 0;
                expr_67_out1 = 0;
                numberobj_169_value = 0;
                numberobj_169_value_setter(numberobj_169_value);
                numberobj_170_value = 0;
                numberobj_170_value_setter(numberobj_170_value);
                scale_71_inlow = 0;
                scale_71_inhigh = 1;
                scale_71_outlow = 0;
                scale_71_outhigh = 1;
                scale_71_power = 1;
                scale_72_inlow = 0;
                scale_72_inhigh = 1;
                scale_72_outlow = 0;
                scale_72_outhigh = 1;
                scale_72_power = 1;
                expr_68_in1 = 0;
                expr_68_in2 = 0;
                expr_68_out1 = 0;
                numberobj_171_value = 0;
                numberobj_171_value_setter(numberobj_171_value);
                numberobj_172_value = 0;
                numberobj_172_value_setter(numberobj_172_value);
                expr_69_in1 = 0;
                expr_69_in2 = 0;
                expr_69_out1 = 0;
                receive_32_output_number = 0;
                scale_73_inlow = 0;
                scale_73_inhigh = 1;
                scale_73_outlow = 0;
                scale_73_outhigh = 1;
                scale_73_power = 1;
                expr_70_in1 = 0;
                expr_70_in2 = 0;
                expr_70_out1 = 0;
                numberobj_173_value = 0;
                numberobj_173_value_setter(numberobj_173_value);
                numberobj_174_value = 0;
                numberobj_174_value_setter(numberobj_174_value);
                receive_33_output_number = 0;
                numberobj_175_value = 0;
                numberobj_175_value_setter(numberobj_175_value);
                expr_71_in1 = 0;
                expr_71_in2 = 0;
                expr_71_out1 = 0;
                receive_34_output_number = 0;
                expr_72_in1 = 0;
                expr_72_in2 = 1;
                expr_72_in3 = 4;
                expr_72_out1 = 0;
                receive_35_output_number = 0;
                gate_27_onoff = 0;
                gate_27_out1_number = 0;
                gate_27_out2_number = 0;
                receive_36_output_number = 0;
                select_33_test1 = 1;
                scale_74_inlow = -100;
                scale_74_inhigh = 0;
                scale_74_outlow = 0.1;
                scale_74_outhigh = 1;
                scale_74_power = 1;
                expr_73_in1 = 0;
                expr_73_in2 = 0;
                expr_73_out1 = 0;
                numberobj_176_value = 0;
                numberobj_176_value_setter(numberobj_176_value);
                select_34_test1 = 1;
                expr_74_in1 = 0;
                expr_74_in2 = 1;
                expr_74_out1 = 0;
                numberobj_177_value = 0;
                numberobj_177_value_setter(numberobj_177_value);
                scale_75_inlow = 1;
                scale_75_inhigh = 100;
                scale_75_outlow = 1;
                scale_75_outhigh = 0.1;
                scale_75_power = 1;
                gate_28_onoff = 0;
                gate_28_out1_number = 0;
                gate_28_out2_number = 0;
                receive_37_output_number = 0;
                select_35_test1 = 1;
                scale_76_inlow = -100;
                scale_76_inhigh = 0;
                scale_76_outlow = 0.1;
                scale_76_outhigh = 1;
                scale_76_power = 1;
                expr_75_in1 = 0;
                expr_75_in2 = 0;
                expr_75_out1 = 0;
                numberobj_178_value = 0;
                numberobj_178_value_setter(numberobj_178_value);
                select_36_test1 = 1;
                expr_76_in1 = 0;
                expr_76_in2 = 1;
                expr_76_out1 = 0;
                numberobj_179_value = 0;
                numberobj_179_value_setter(numberobj_179_value);
                scale_77_inlow = 1;
                scale_77_inhigh = 100;
                scale_77_outlow = 1;
                scale_77_outhigh = 0.1;
                scale_77_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_163_currentFormat = 6;
                numberobj_163_lastValue = 0;
                numberobj_164_currentFormat = 6;
                numberobj_164_lastValue = 0;
                numberobj_165_currentFormat = 6;
                numberobj_165_lastValue = 0;
                numberobj_166_currentFormat = 6;
                numberobj_166_lastValue = 0;
                numberobj_167_currentFormat = 6;
                numberobj_167_lastValue = 0;
                numberobj_168_currentFormat = 6;
                numberobj_168_lastValue = 0;
                numberobj_169_currentFormat = 6;
                numberobj_169_lastValue = 0;
                numberobj_170_currentFormat = 6;
                numberobj_170_lastValue = 0;
                numberobj_171_currentFormat = 6;
                numberobj_171_lastValue = 0;
                numberobj_172_currentFormat = 6;
                numberobj_172_lastValue = 0;
                numberobj_173_currentFormat = 6;
                numberobj_173_lastValue = 0;
                numberobj_174_currentFormat = 6;
                numberobj_174_lastValue = 0;
                numberobj_175_currentFormat = 6;
                numberobj_175_lastValue = 0;
                numberobj_176_currentFormat = 6;
                numberobj_176_lastValue = 0;
                numberobj_177_currentFormat = 6;
                numberobj_177_lastValue = 0;
                numberobj_178_currentFormat = 6;
                numberobj_178_lastValue = 0;
                numberobj_179_currentFormat = 6;
                numberobj_179_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gate_25_onoff;
                number gate_25_out1_number;
                list gate_25_out1_list;
                number gate_25_out2_number;
                list gate_25_out2_list;
                number wrap_04_x;
                number wrap_04_low;
                number wrap_04_high;
                number numberobj_163_value;
                number numberobj_164_value;
                number expr_63_in1;
                number expr_63_in2;
                number expr_63_out1;
                number numberobj_165_value;
                list scale_70_input;
                number scale_70_inlow;
                number scale_70_inhigh;
                number scale_70_outlow;
                number scale_70_outhigh;
                number scale_70_power;
                list scale_70_out;
                number random_15_limit;
                number random_15_seed;
                number expr_64_in1;
                number expr_64_in2;
                number expr_64_out1;
                number random_16_limit;
                number random_16_seed;
                number wrap_05_x;
                number wrap_05_low;
                number wrap_05_high;
                number numberobj_166_value;
                number expr_65_in1;
                number expr_65_in2;
                number expr_65_out1;
                number numberobj_167_value;
                number expr_66_in1;
                number expr_66_in2;
                number expr_66_out1;
                number receive_31_output_number;
                list receive_31_output_list;
                number gate_26_onoff;
                number gate_26_out1_number;
                list gate_26_out1_list;
                number gate_26_out2_number;
                list gate_26_out2_list;
                number numberobj_168_value;
                number expr_67_in1;
                number expr_67_in2;
                number expr_67_out1;
                number numberobj_169_value;
                number numberobj_170_value;
                list scale_71_input;
                number scale_71_inlow;
                number scale_71_inhigh;
                number scale_71_outlow;
                number scale_71_outhigh;
                number scale_71_power;
                list scale_71_out;
                list scale_72_input;
                number scale_72_inlow;
                number scale_72_inhigh;
                number scale_72_outlow;
                number scale_72_outhigh;
                number scale_72_power;
                list scale_72_out;
                number expr_68_in1;
                number expr_68_in2;
                number expr_68_out1;
                number numberobj_171_value;
                number numberobj_172_value;
                number expr_69_in1;
                number expr_69_in2;
                number expr_69_out1;
                number receive_32_output_number;
                list receive_32_output_list;
                list scale_73_input;
                number scale_73_inlow;
                number scale_73_inhigh;
                number scale_73_outlow;
                number scale_73_outhigh;
                number scale_73_power;
                list scale_73_out;
                number expr_70_in1;
                number expr_70_in2;
                number expr_70_out1;
                number numberobj_173_value;
                number numberobj_174_value;
                number receive_33_output_number;
                list receive_33_output_list;
                number numberobj_175_value;
                number expr_71_in1;
                number expr_71_in2;
                number expr_71_out1;
                number receive_34_output_number;
                list receive_34_output_list;
                number expr_72_in1;
                number expr_72_in2;
                number expr_72_in3;
                number expr_72_out1;
                number receive_35_output_number;
                list receive_35_output_list;
                number gate_27_onoff;
                number gate_27_out1_number;
                list gate_27_out1_list;
                number gate_27_out2_number;
                list gate_27_out2_list;
                number receive_36_output_number;
                list receive_36_output_list;
                number select_33_test1;
                list scale_74_input;
                number scale_74_inlow;
                number scale_74_inhigh;
                number scale_74_outlow;
                number scale_74_outhigh;
                number scale_74_power;
                list scale_74_out;
                number expr_73_in1;
                number expr_73_in2;
                number expr_73_out1;
                number numberobj_176_value;
                number select_34_test1;
                list message_59_set;
                number expr_74_in1;
                number expr_74_in2;
                number expr_74_out1;
                list message_60_set;
                number numberobj_177_value;
                list scale_75_input;
                number scale_75_inlow;
                number scale_75_inhigh;
                number scale_75_outlow;
                number scale_75_outhigh;
                number scale_75_power;
                list scale_75_out;
                number gate_28_onoff;
                number gate_28_out1_number;
                list gate_28_out1_list;
                number gate_28_out2_number;
                list gate_28_out2_list;
                number receive_37_output_number;
                list receive_37_output_list;
                number select_35_test1;
                list scale_76_input;
                number scale_76_inlow;
                number scale_76_inhigh;
                number scale_76_outlow;
                number scale_76_outhigh;
                number scale_76_power;
                list scale_76_out;
                number expr_75_in1;
                number expr_75_in2;
                number expr_75_out1;
                number numberobj_178_value;
                number select_36_test1;
                list message_61_set;
                number expr_76_in1;
                number expr_76_in2;
                number expr_76_out1;
                list message_62_set;
                number numberobj_179_value;
                list scale_77_input;
                number scale_77_inlow;
                number scale_77_inhigh;
                number scale_77_outlow;
                number scale_77_outhigh;
                number scale_77_power;
                list scale_77_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_163_currentFormat;
                number numberobj_163_lastValue;
                Int numberobj_164_currentFormat;
                number numberobj_164_lastValue;
                Int numberobj_165_currentFormat;
                number numberobj_165_lastValue;
                UInt random_15_nz_state[4] = { };
                UInt random_16_nz_state[4] = { };
                Int numberobj_166_currentFormat;
                number numberobj_166_lastValue;
                Int numberobj_167_currentFormat;
                number numberobj_167_lastValue;
                Int numberobj_168_currentFormat;
                number numberobj_168_lastValue;
                Int numberobj_169_currentFormat;
                number numberobj_169_lastValue;
                Int numberobj_170_currentFormat;
                number numberobj_170_lastValue;
                Int numberobj_171_currentFormat;
                number numberobj_171_lastValue;
                Int numberobj_172_currentFormat;
                number numberobj_172_lastValue;
                Int numberobj_173_currentFormat;
                number numberobj_173_lastValue;
                Int numberobj_174_currentFormat;
                number numberobj_174_lastValue;
                Int numberobj_175_currentFormat;
                number numberobj_175_lastValue;
                Int numberobj_176_currentFormat;
                number numberobj_176_lastValue;
                Int numberobj_177_currentFormat;
                number numberobj_177_lastValue;
                Int numberobj_178_currentFormat;
                number numberobj_178_lastValue;
                Int numberobj_179_currentFormat;
                number numberobj_179_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_113 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_113()
            {
            }
            
            ~RNBOSubpatcher_113()
            {
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-volume/message_obj-7") == objectId)
                        this->message_63_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-6") == objectId)
                        this->message_64_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-70") == objectId)
                        this->message_65_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-66") == objectId)
                        this->message_66_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-volume/number_obj-71") == objectId)
                        this->numberobj_180_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/number_obj-5") == objectId)
                        this->numberobj_181_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-volume/number_obj-71") == objectId)
                        this->numberobj_180_format_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/number_obj-5") == objectId)
                        this->numberobj_181_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-volume/message_obj-7") == objectId)
                        this->message_63_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-6") == objectId)
                        this->message_64_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-70") == objectId)
                        this->message_65_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-volume/message_obj-66") == objectId)
                        this->message_66_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-volume/message_obj-7") == objectId)
                        this->message_63_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-volume/message_obj-6") == objectId)
                        this->message_64_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-volume/message_obj-70") == objectId)
                        this->message_65_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-volume/message_obj-66") == objectId)
                        this->message_66_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-volume/message_obj-7"):
                    {
                    return "fixedgrain/rand-volume/message_obj-7";
                    }
                case TAG("fixedgrain/rand-volume/message_obj-6"):
                    {
                    return "fixedgrain/rand-volume/message_obj-6";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-volume/number_obj-71"):
                    {
                    return "fixedgrain/rand-volume/number_obj-71";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-volume/message_obj-70"):
                    {
                    return "fixedgrain/rand-volume/message_obj-70";
                    }
                case TAG("fixedgrain/rand-volume/message_obj-66"):
                    {
                    return "fixedgrain/rand-volume/message_obj-66";
                    }
                case TAG("fixedgrain/rand-volume/number_obj-5"):
                    {
                    return "fixedgrain/rand-volume/number_obj-5";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_46_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_17_trigger_bang();
            }
            
            void eventinlet_46_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_17_trigger_bang();
            }
            
            void message_63_listin_list_set(const list& v) {
                this->message_63_set_set(v);
            }
            
            void message_63_listin_number_set(number v) {
                this->message_63_set_set(v);
            }
            
            void message_63_listin_bang_bang() {
                this->message_63_trigger_bang();
            }
            
            void message_64_listin_list_set(const list& v) {
                this->message_64_set_set(v);
            }
            
            void message_64_listin_number_set(number v) {
                this->message_64_set_set(v);
            }
            
            void message_64_listin_bang_bang() {
                this->message_64_trigger_bang();
            }
            
            void numberobj_180_valin_set(number v) {
                this->numberobj_180_value_set(v);
            }
            
            void numberobj_180_format_set(number v) {
                this->numberobj_180_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_65_listin_list_set(const list& v) {
                this->message_65_set_set(v);
            }
            
            void message_65_listin_number_set(number v) {
                this->message_65_set_set(v);
            }
            
            void message_65_listin_bang_bang() {
                this->message_65_trigger_bang();
            }
            
            void message_66_listin_list_set(const list& v) {
                this->message_66_set_set(v);
            }
            
            void message_66_listin_number_set(number v) {
                this->message_66_set_set(v);
            }
            
            void message_66_listin_bang_bang() {
                this->message_66_trigger_bang();
            }
            
            void numberobj_181_valin_set(number v) {
                this->numberobj_181_value_set(v);
            }
            
            void numberobj_181_format_set(number v) {
                this->numberobj_181_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->random_17_nz_init();
                this->message_63_init();
                this->message_64_init();
                this->numberobj_180_init();
                this->message_65_init();
                this->message_66_init();
                this->numberobj_181_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void scale_79_outhigh_set(number v) {
                this->scale_79_outhigh = v;
            }
            
            void scale_78_outlow_set(number v) {
                this->scale_78_outlow = v;
            }
            
            void receive_38_output_number_set(number v) {
                this->receive_38_output_number = v;
                this->scale_79_outhigh_set(v);
                this->scale_78_outlow_set(v);
            }
            
            void scale_79_outlow_set(number v) {
                this->scale_79_outlow = v;
            }
            
            void scale_78_outhigh_set(number v) {
                this->scale_78_outhigh = v;
            }
            
            void receive_39_output_number_set(number v) {
                this->receive_39_output_number = v;
                this->scale_79_outlow_set(v);
                this->scale_78_outhigh_set(v);
            }
            
            void gate_30_onoff_set(number v) {
                this->gate_30_onoff = v;
            }
            
            void scale_79_power_set(number v) {
                this->scale_79_power = v;
            }
            
            void numberobj_180_output_set(number v) {
                this->scale_79_power_set(v);
            }
            
            void numberobj_180_value_set(number v) {
                this->numberobj_180_value_setter(v);
                v = this->numberobj_180_value;
                number localvalue = v;
            
                if (this->numberobj_180_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-volume/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_180_output_set(localvalue);
            }
            
            void scale_80_out_set(const list& v) {
                this->scale_80_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_180_value_set(converted);
                }
            }
            
            void scale_80_input_set(const list& v) {
                this->scale_80_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_80_inlow,
                        this->scale_80_inhigh,
                        this->scale_80_outlow,
                        this->scale_80_outhigh,
                        this->scale_80_power
                    ));
                }
            
                this->scale_80_out_set(tmp);
            }
            
            void gate_30_out1_number_set(number v) {
                this->gate_30_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_80_input_set(converted);
                }
            }
            
            void scale_78_power_set(number v) {
                this->scale_78_power = v;
            }
            
            void numberobj_181_output_set(number v) {
                this->scale_78_power_set(v);
            }
            
            void numberobj_181_value_set(number v) {
                this->numberobj_181_value_setter(v);
                v = this->numberobj_181_value;
                number localvalue = v;
            
                if (this->numberobj_181_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-volume/number_obj-5"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_181_output_set(localvalue);
            }
            
            void scale_81_out_set(const list& v) {
                this->scale_81_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_181_value_set(converted);
                }
            }
            
            void scale_81_input_set(const list& v) {
                this->scale_81_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_81_inlow,
                        this->scale_81_inhigh,
                        this->scale_81_outlow,
                        this->scale_81_outhigh,
                        this->scale_81_power
                    ));
                }
            
                this->scale_81_out_set(tmp);
            }
            
            void gate_30_out2_number_set(number v) {
                this->gate_30_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_81_input_set(converted);
                }
            }
            
            void gate_30_input_number_set(number v) {
                if (this->gate_30_onoff == 1)
                    this->gate_30_out1_number_set(v);
                else if (this->gate_30_onoff == 2)
                    this->gate_30_out2_number_set(v);
            }
            
            void message_66_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_30_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_30_onoff_set(converted);
                }
            }
            
            void message_66_trigger_bang() {
                this->message_66_out_set(this->message_66_set);
            }
            
            void gate_29_onoff_set(number v) {
                this->gate_29_onoff = v;
            }
            
            void eventoutlet_29_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_20_out1_number_set(v);
            }
            
            void expr_77_out1_set(number v) {
                this->expr_77_out1 = v;
                this->eventoutlet_29_in1_number_set(this->expr_77_out1);
            }
            
            void expr_77_in1_set(number in1) {
                this->expr_77_in1 = in1;
                this->expr_77_out1_set(rnbo_pow(10, this->expr_77_in1 * 0.05));//#map:fixedgrain/rand-volume/dbtoa_obj-1:1
            }
            
            void scale_79_out_set(const list& v) {
                this->scale_79_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_77_in1_set(converted);
                }
            }
            
            void scale_79_input_set(const list& v) {
                this->scale_79_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_79_inlow,
                        this->scale_79_inhigh,
                        this->scale_79_outlow,
                        this->scale_79_outhigh,
                        this->scale_79_power
                    ));
                }
            
                this->scale_79_out_set(tmp);
            }
            
            void gate_29_out1_number_set(number v) {
                this->gate_29_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_79_input_set(converted);
                }
            }
            
            void scale_78_out_set(const list& v) {
                this->scale_78_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_77_in1_set(converted);
                }
            }
            
            void scale_78_input_set(const list& v) {
                this->scale_78_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_78_inlow,
                        this->scale_78_inhigh,
                        this->scale_78_outlow,
                        this->scale_78_outhigh,
                        this->scale_78_power
                    ));
                }
            
                this->scale_78_out_set(tmp);
            }
            
            void gate_29_out2_number_set(number v) {
                this->gate_29_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_78_input_set(converted);
                }
            }
            
            void gate_29_input_number_set(number v) {
                if (this->gate_29_onoff == 1)
                    this->gate_29_out1_number_set(v);
                else if (this->gate_29_onoff == 2)
                    this->gate_29_out2_number_set(v);
            }
            
            void message_64_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_29_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_29_onoff_set(converted);
                }
            }
            
            void message_64_trigger_bang() {
                this->message_64_out_set(this->message_64_set);
            }
            
            void select_38_match1_bang() {
                this->message_66_trigger_bang();
                this->message_64_trigger_bang();
            }
            
            void select_38_nomatch_number_set(number ) {}
            
            void select_38_input_number_set(number v) {
                if (v == this->select_38_test1)
                    this->select_38_match1_bang();
                else
                    this->select_38_nomatch_number_set(v);
            }
            
            void expr_79_out1_set(number v) {
                this->expr_79_out1 = v;
                this->select_38_input_number_set(this->expr_79_out1);
            }
            
            void expr_79_in1_set(number in1) {
                this->expr_79_in1 = in1;
                this->expr_79_out1_set(this->expr_79_in1 >= this->expr_79_in2);//#map:fixedgrain/rand-volume/>=_obj-80:1
            }
            
            void message_65_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_30_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_30_onoff_set(converted);
                }
            }
            
            void message_65_trigger_bang() {
                this->message_65_out_set(this->message_65_set);
            }
            
            void message_63_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_29_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_29_onoff_set(converted);
                }
            }
            
            void message_63_trigger_bang() {
                this->message_63_out_set(this->message_63_set);
            }
            
            void select_37_match1_bang() {
                this->message_65_trigger_bang();
                this->message_63_trigger_bang();
            }
            
            void select_37_nomatch_number_set(number ) {}
            
            void select_37_input_number_set(number v) {
                if (v == this->select_37_test1)
                    this->select_37_match1_bang();
                else
                    this->select_37_nomatch_number_set(v);
            }
            
            void expr_78_out1_set(number v) {
                this->expr_78_out1 = v;
                this->select_37_input_number_set(this->expr_78_out1);
            }
            
            void expr_78_in1_set(number in1) {
                this->expr_78_in1 = in1;
                this->expr_78_out1_set(this->expr_78_in1 <= this->expr_78_in2);//#map:fixedgrain/rand-volume/<=_obj-82:1
            }
            
            void trigger_33_out2_set(number v) {
                this->expr_79_in1_set(v);
                this->expr_78_in1_set(v);
            }
            
            void trigger_33_out1_set(number v) {
                this->gate_30_input_number_set(v);
            }
            
            void trigger_33_input_number_set(number v) {
                this->trigger_33_out2_set(v);
                this->trigger_33_out1_set(v);
            }
            
            void receive_40_output_number_set(number v) {
                this->receive_40_output_number = v;
                this->trigger_33_input_number_set(v);
            }
            
            void random_17_result_set(number v) {
                this->gate_29_input_number_set(v);
            }
            
            void random_17_trigger_bang() {
                {
                    this->random_17_result_set(this->random(0, this->random_17_limit));
                }
            }
            
            void eventinlet_46_out1_bang_bang() {
                this->random_17_trigger_bang();
            }
            
            void message_63_set_set(const list& v) {
                this->message_63_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-volume/message_obj-7"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_64_set_set(const list& v) {
                this->message_64_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-volume/message_obj-6"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_65_set_set(const list& v) {
                this->message_65_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-volume/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_66_set_set(const list& v) {
                this->message_66_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-volume/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_17_limit_setter(number v) {
                if (v >= 0)
                    this->random_17_limit = v;
            }
            
            void numberobj_180_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_180_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_180_value = localvalue;
            }
            
            void numberobj_181_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_181_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_181_value = localvalue;
            }
            
            void random_17_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_17_nz_state
                );
            }
            
            void random_17_nz_init() {
                this->random_17_nz_reset();
            }
            
            void random_17_nz_seed(number v) {
                xoshiro_reset(v, this->random_17_nz_state);
            }
            
            number random_17_nz_next() {
                return xoshiro_next(this->random_17_nz_state);
            }
            
            void message_63_init() {
                this->message_63_set_set({1});
            }
            
            void message_64_init() {
                this->message_64_set_set({2});
            }
            
            void numberobj_180_init() {
                this->numberobj_180_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-volume/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_180_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_180_value;
            }
            
            void numberobj_180_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_180_value_set(preset["value"]);
            }
            
            void message_65_init() {
                this->message_65_set_set({1});
            }
            
            void message_66_init() {
                this->message_66_set_set({2});
            }
            
            void numberobj_181_init() {
                this->numberobj_181_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-volume/number_obj-5"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_181_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_181_value;
            }
            
            void numberobj_181_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_181_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                scale_78_inlow = 0;
                scale_78_inhigh = 99;
                scale_78_outlow = -70;
                scale_78_outhigh = 0;
                scale_78_power = 1;
                random_17_limit = 100;
                random_17_limit_setter(random_17_limit);
                random_17_seed = 0;
                expr_77_in1 = 0;
                expr_77_out1 = 0;
                gate_29_onoff = 0;
                gate_29_out1_number = 0;
                gate_29_out2_number = 0;
                scale_79_inlow = 99;
                scale_79_inhigh = 0;
                scale_79_outlow = -70;
                scale_79_outhigh = 0;
                scale_79_power = 1;
                receive_38_output_number = 0;
                receive_39_output_number = 0;
                gate_30_onoff = 0;
                gate_30_out1_number = 0;
                gate_30_out2_number = 0;
                receive_40_output_number = 0;
                select_37_test1 = 1;
                scale_80_inlow = -100;
                scale_80_inhigh = 0;
                scale_80_outlow = 0.1;
                scale_80_outhigh = 1;
                scale_80_power = 1;
                expr_78_in1 = 0;
                expr_78_in2 = 0;
                expr_78_out1 = 0;
                numberobj_180_value = 0;
                numberobj_180_value_setter(numberobj_180_value);
                select_38_test1 = 1;
                expr_79_in1 = 0;
                expr_79_in2 = 1;
                expr_79_out1 = 0;
                numberobj_181_value = 0;
                numberobj_181_value_setter(numberobj_181_value);
                scale_81_inlow = 1;
                scale_81_inhigh = 100;
                scale_81_outlow = 1;
                scale_81_outhigh = 0.1;
                scale_81_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_180_currentFormat = 6;
                numberobj_180_lastValue = 0;
                numberobj_181_currentFormat = 6;
                numberobj_181_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list scale_78_input;
                number scale_78_inlow;
                number scale_78_inhigh;
                number scale_78_outlow;
                number scale_78_outhigh;
                number scale_78_power;
                list scale_78_out;
                number random_17_limit;
                number random_17_seed;
                number expr_77_in1;
                number expr_77_out1;
                number gate_29_onoff;
                number gate_29_out1_number;
                list gate_29_out1_list;
                number gate_29_out2_number;
                list gate_29_out2_list;
                list message_63_set;
                list message_64_set;
                list scale_79_input;
                number scale_79_inlow;
                number scale_79_inhigh;
                number scale_79_outlow;
                number scale_79_outhigh;
                number scale_79_power;
                list scale_79_out;
                number receive_38_output_number;
                list receive_38_output_list;
                number receive_39_output_number;
                list receive_39_output_list;
                number gate_30_onoff;
                number gate_30_out1_number;
                list gate_30_out1_list;
                number gate_30_out2_number;
                list gate_30_out2_list;
                number receive_40_output_number;
                list receive_40_output_list;
                number select_37_test1;
                list scale_80_input;
                number scale_80_inlow;
                number scale_80_inhigh;
                number scale_80_outlow;
                number scale_80_outhigh;
                number scale_80_power;
                list scale_80_out;
                number expr_78_in1;
                number expr_78_in2;
                number expr_78_out1;
                number numberobj_180_value;
                number select_38_test1;
                list message_65_set;
                number expr_79_in1;
                number expr_79_in2;
                number expr_79_out1;
                list message_66_set;
                number numberobj_181_value;
                list scale_81_input;
                number scale_81_inlow;
                number scale_81_inhigh;
                number scale_81_outlow;
                number scale_81_outhigh;
                number scale_81_power;
                list scale_81_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                UInt random_17_nz_state[4] = { };
                Int numberobj_180_currentFormat;
                number numberobj_180_lastValue;
                Int numberobj_181_currentFormat;
                number numberobj_181_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_114 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_114()
            {
            }
            
            ~RNBOSubpatcher_114()
            {
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-40") == objectId)
                        this->numberobj_182_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-38") == objectId)
                        this->numberobj_183_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-15") == objectId)
                        this->numberobj_184_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-17") == objectId)
                        this->numberobj_185_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-71") == objectId)
                        this->numberobj_186_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-16") == objectId)
                        this->numberobj_187_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-40") == objectId)
                        this->numberobj_182_format_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-38") == objectId)
                        this->numberobj_183_format_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-15") == objectId)
                        this->numberobj_184_format_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-17") == objectId)
                        this->numberobj_185_format_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-71") == objectId)
                        this->numberobj_186_format_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/number_obj-16") == objectId)
                        this->numberobj_187_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_67_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_68_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_69_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_70_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_67_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_68_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_69_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_70_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-32") == objectId)
                        this->message_67_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-31") == objectId)
                        this->message_68_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-70") == objectId)
                        this->message_69_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-pitchspeed/message_obj-66") == objectId)
                        this->message_70_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-40"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-40";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-38"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-38";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-pitchspeed/message_obj-32"):
                    {
                    return "fixedgrain/rand-pitchspeed/message_obj-32";
                    }
                case TAG("fixedgrain/rand-pitchspeed/message_obj-31"):
                    {
                    return "fixedgrain/rand-pitchspeed/message_obj-31";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-15"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-15";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-17"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-17";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-71"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-71";
                    }
                case TAG("fixedgrain/rand-pitchspeed/message_obj-70"):
                    {
                    return "fixedgrain/rand-pitchspeed/message_obj-70";
                    }
                case TAG("fixedgrain/rand-pitchspeed/message_obj-66"):
                    {
                    return "fixedgrain/rand-pitchspeed/message_obj-66";
                    }
                case TAG("fixedgrain/rand-pitchspeed/number_obj-16"):
                    {
                    return "fixedgrain/rand-pitchspeed/number_obj-16";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_47_out1_number_set(number v) {
                this->trigger_34_input_number_set(v);
            }
            
            void eventinlet_47_out1_list_set(const list& v) {
                this->trigger_34_input_list_set(v);
            }
            
            void numberobj_182_valin_set(number v) {
                this->numberobj_182_value_set(v);
            }
            
            void numberobj_182_format_set(number v) {
                this->numberobj_182_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_183_valin_set(number v) {
                this->numberobj_183_value_set(v);
            }
            
            void numberobj_183_format_set(number v) {
                this->numberobj_183_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_67_listin_list_set(const list& v) {
                this->message_67_set_set(v);
            }
            
            void message_67_listin_number_set(number v) {
                this->message_67_set_set(v);
            }
            
            void message_67_listin_bang_bang() {
                this->message_67_trigger_bang();
            }
            
            void message_68_listin_list_set(const list& v) {
                this->message_68_set_set(v);
            }
            
            void message_68_listin_number_set(number v) {
                this->message_68_set_set(v);
            }
            
            void message_68_listin_bang_bang() {
                this->message_68_trigger_bang();
            }
            
            void numberobj_184_valin_set(number v) {
                this->numberobj_184_value_set(v);
            }
            
            void numberobj_184_format_set(number v) {
                this->numberobj_184_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_185_valin_set(number v) {
                this->numberobj_185_value_set(v);
            }
            
            void numberobj_185_format_set(number v) {
                this->numberobj_185_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_186_valin_set(number v) {
                this->numberobj_186_value_set(v);
            }
            
            void numberobj_186_format_set(number v) {
                this->numberobj_186_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_69_listin_list_set(const list& v) {
                this->message_69_set_set(v);
            }
            
            void message_69_listin_number_set(number v) {
                this->message_69_set_set(v);
            }
            
            void message_69_listin_bang_bang() {
                this->message_69_trigger_bang();
            }
            
            void message_70_listin_list_set(const list& v) {
                this->message_70_set_set(v);
            }
            
            void message_70_listin_number_set(number v) {
                this->message_70_set_set(v);
            }
            
            void message_70_listin_bang_bang() {
                this->message_70_trigger_bang();
            }
            
            void numberobj_187_valin_set(number v) {
                this->numberobj_187_value_set(v);
            }
            
            void numberobj_187_format_set(number v) {
                this->numberobj_187_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_48_out1_bang_bang() {
                this->gate_32_onoff_bang();
            }
            
            void eventinlet_48_out1_number_set(number v) {
                this->gate_32_onoff_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_182_init();
                this->random_18_nz_init();
                this->numberobj_183_init();
                this->message_67_init();
                this->message_68_init();
                this->numberobj_184_init();
                this->numberobj_185_init();
                this->numberobj_186_init();
                this->message_69_init();
                this->message_70_init();
                this->numberobj_187_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void scale_83_outhigh_set(number v) {
                this->scale_83_outhigh = v;
            }
            
            void expr_82_in2_set(number v) {
                this->expr_82_in2 = v;
            }
            
            void scale_83_inhigh_set(number v) {
                this->scale_83_inhigh = v;
            }
            
            void scale_82_outlow_set(number v) {
                this->scale_82_outlow = v;
            }
            
            void scale_82_inlow_set(number v) {
                this->scale_82_inlow = v;
            }
            
            void expr_80_in2_set(number v) {
                this->expr_80_in2 = v;
            }
            
            void numberobj_184_output_set(number v) {
                this->scale_83_outhigh_set(v);
                this->expr_82_in2_set(v);
                this->scale_83_inhigh_set(v);
                this->scale_82_outlow_set(v);
                this->scale_82_inlow_set(v);
                this->expr_80_in2_set(v);
            }
            
            void numberobj_184_value_set(number v) {
                this->numberobj_184_value_setter(v);
                v = this->numberobj_184_value;
                number localvalue = v;
            
                if (this->numberobj_184_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_184_output_set(localvalue);
            }
            
            void receive_41_output_number_set(number v) {
                this->receive_41_output_number = v;
                this->numberobj_184_value_set(v);
            }
            
            void scale_83_outlow_set(number v) {
                this->scale_83_outlow = v;
            }
            
            void random_18_limit_set(number v) {
                this->random_18_limit_setter(v);
                v = this->random_18_limit;
            }
            
            void expr_82_out1_set(number v) {
                this->expr_82_out1 = v;
                this->random_18_limit_set(this->expr_82_out1);
            }
            
            void expr_82_in1_set(number in1) {
                this->expr_82_in1 = in1;
                this->expr_82_out1_set(this->expr_82_in1 - this->expr_82_in2);//#map:fixedgrain/rand-pitchspeed/-_obj-18:1
            }
            
            void scale_83_inlow_set(number v) {
                this->scale_83_inlow = v;
            }
            
            void scale_82_outhigh_set(number v) {
                this->scale_82_outhigh = v;
            }
            
            void scale_82_inhigh_set(number v) {
                this->scale_82_inhigh = v;
            }
            
            void numberobj_185_output_set(number v) {
                this->scale_83_outlow_set(v);
                this->expr_82_in1_set(v);
                this->scale_83_inlow_set(v);
                this->scale_82_outhigh_set(v);
                this->scale_82_inhigh_set(v);
            }
            
            void numberobj_185_value_set(number v) {
                this->numberobj_185_value_setter(v);
                v = this->numberobj_185_value;
                number localvalue = v;
            
                if (this->numberobj_185_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_185_output_set(localvalue);
            }
            
            void receive_42_output_number_set(number v) {
                this->receive_42_output_number = v;
                this->numberobj_185_value_set(v);
            }
            
            void gate_33_onoff_set(number v) {
                this->gate_33_onoff = v;
            }
            
            void scale_83_power_set(number v) {
                this->scale_83_power = v;
            }
            
            void numberobj_186_output_set(number v) {
                this->scale_83_power_set(v);
            }
            
            void numberobj_186_value_set(number v) {
                this->numberobj_186_value_setter(v);
                v = this->numberobj_186_value;
                number localvalue = v;
            
                if (this->numberobj_186_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_186_output_set(localvalue);
            }
            
            void scale_84_out_set(const list& v) {
                this->scale_84_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_186_value_set(converted);
                }
            }
            
            void scale_84_input_set(const list& v) {
                this->scale_84_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_84_inlow,
                        this->scale_84_inhigh,
                        this->scale_84_outlow,
                        this->scale_84_outhigh,
                        this->scale_84_power
                    ));
                }
            
                this->scale_84_out_set(tmp);
            }
            
            void gate_33_out1_number_set(number v) {
                this->gate_33_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_84_input_set(converted);
                }
            }
            
            void scale_82_power_set(number v) {
                this->scale_82_power = v;
            }
            
            void numberobj_187_output_set(number v) {
                this->scale_82_power_set(v);
            }
            
            void numberobj_187_value_set(number v) {
                this->numberobj_187_value_setter(v);
                v = this->numberobj_187_value;
                number localvalue = v;
            
                if (this->numberobj_187_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-16"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_187_output_set(localvalue);
            }
            
            void scale_85_out_set(const list& v) {
                this->scale_85_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_187_value_set(converted);
                }
            }
            
            void scale_85_input_set(const list& v) {
                this->scale_85_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_85_inlow,
                        this->scale_85_inhigh,
                        this->scale_85_outlow,
                        this->scale_85_outhigh,
                        this->scale_85_power
                    ));
                }
            
                this->scale_85_out_set(tmp);
            }
            
            void gate_33_out2_number_set(number v) {
                this->gate_33_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_85_input_set(converted);
                }
            }
            
            void gate_33_input_number_set(number v) {
                if (this->gate_33_onoff == 1)
                    this->gate_33_out1_number_set(v);
                else if (this->gate_33_onoff == 2)
                    this->gate_33_out2_number_set(v);
            }
            
            void message_70_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_33_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_33_onoff_set(converted);
                }
            }
            
            void message_70_trigger_bang() {
                this->message_70_out_set(this->message_70_set);
            }
            
            void gate_31_onoff_set(number v) {
                this->gate_31_onoff = v;
            }
            
            void eventoutlet_31_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_21_out2_number_set(v);
            }
            
            void expr_83_out1_set(number v) {
                this->expr_83_out1 = v;
                this->eventoutlet_31_in1_number_set(this->expr_83_out1);
            }
            
            void expr_83_in1_set(number in1) {
                this->expr_83_in1 = in1;
                this->expr_83_out1_set(rnbo_abs(this->expr_83_in1));//#map:fixedgrain/rand-pitchspeed/abs_obj-14:1
            }
            
            void eventoutlet_30_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_21_out1_number_set(v);
            }
            
            void numberobj_182_output_set(number v) {
                this->expr_83_in1_set(v);
                this->eventoutlet_30_in1_number_set(v);
            }
            
            void numberobj_182_value_set(number v) {
                this->numberobj_182_value_setter(v);
                v = this->numberobj_182_value;
                number localvalue = v;
            
                if (this->numberobj_182_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-40"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_182_output_set(localvalue);
            }
            
            void gate_32_out1_list_set(const list& v) {
                this->gate_32_out1_list = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_182_value_set(converted);
                }
            }
            
            void numberobj_183_output_set(number v) {
                this->numberobj_182_value_set(v);
            }
            
            void numberobj_183_value_set(number v) {
                this->numberobj_183_value_setter(v);
                v = this->numberobj_183_value;
                number localvalue = v;
            
                if (this->numberobj_183_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-38"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_183_output_set(localvalue);
            }
            
            void expr_81_out1_set(number v) {
                this->expr_81_out1 = v;
                this->numberobj_183_value_set(this->expr_81_out1);
            }
            
            void expr_81_in1_set(number in1) {
                this->expr_81_in1 = in1;
                this->expr_81_out1_set(-this->expr_81_in1);//#map:fixedgrain/rand-pitchspeed/neg_obj-11:1
            }
            
            void gate_32_out2_list_set(const list& v) {
                this->gate_32_out2_list = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_81_in1_set(converted);
                }
            }
            
            void gate_32_input_list_set(const list& v) {
                if (this->gate_32_onoff == 1)
                    this->gate_32_out1_list_set(v);
                else if (this->gate_32_onoff == 2)
                    this->gate_32_out2_list_set(v);
            }
            
            void scale_83_out_set(const list& v) {
                this->scale_83_out = jsCreateListCopy(v);
                this->gate_32_input_list_set(v);
            }
            
            void scale_83_input_set(const list& v) {
                this->scale_83_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_83_inlow,
                        this->scale_83_inhigh,
                        this->scale_83_outlow,
                        this->scale_83_outhigh,
                        this->scale_83_power
                    ));
                }
            
                this->scale_83_out_set(tmp);
            }
            
            void gate_31_out1_number_set(number v) {
                this->gate_31_out1_number = v;
            
                {
                    list converted = {v};
                    this->scale_83_input_set(converted);
                }
            }
            
            void scale_82_out_set(const list& v) {
                this->scale_82_out = jsCreateListCopy(v);
                this->gate_32_input_list_set(v);
            }
            
            void scale_82_input_set(const list& v) {
                this->scale_82_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_82_inlow,
                        this->scale_82_inhigh,
                        this->scale_82_outlow,
                        this->scale_82_outhigh,
                        this->scale_82_power
                    ));
                }
            
                this->scale_82_out_set(tmp);
            }
            
            void gate_31_out2_number_set(number v) {
                this->gate_31_out2_number = v;
            
                {
                    list converted = {v};
                    this->scale_82_input_set(converted);
                }
            }
            
            void gate_31_input_number_set(number v) {
                if (this->gate_31_onoff == 1)
                    this->gate_31_out1_number_set(v);
                else if (this->gate_31_onoff == 2)
                    this->gate_31_out2_number_set(v);
            }
            
            void message_68_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_31_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_31_onoff_set(converted);
                }
            }
            
            void message_68_trigger_bang() {
                this->message_68_out_set(this->message_68_set);
            }
            
            void select_40_match1_bang() {
                this->message_70_trigger_bang();
                this->message_68_trigger_bang();
            }
            
            void select_40_nomatch_number_set(number ) {}
            
            void select_40_input_number_set(number v) {
                if (v == this->select_40_test1)
                    this->select_40_match1_bang();
                else
                    this->select_40_nomatch_number_set(v);
            }
            
            void expr_85_out1_set(number v) {
                this->expr_85_out1 = v;
                this->select_40_input_number_set(this->expr_85_out1);
            }
            
            void expr_85_in1_set(number in1) {
                this->expr_85_in1 = in1;
                this->expr_85_out1_set(this->expr_85_in1 >= this->expr_85_in2);//#map:fixedgrain/rand-pitchspeed/>=_obj-80:1
            }
            
            void message_69_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_33_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_33_onoff_set(converted);
                }
            }
            
            void message_69_trigger_bang() {
                this->message_69_out_set(this->message_69_set);
            }
            
            void message_67_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_31_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_31_onoff_set(converted);
                }
            }
            
            void message_67_trigger_bang() {
                this->message_67_out_set(this->message_67_set);
            }
            
            void select_39_match1_bang() {
                this->message_69_trigger_bang();
                this->message_67_trigger_bang();
            }
            
            void select_39_nomatch_number_set(number ) {}
            
            void select_39_input_number_set(number v) {
                if (v == this->select_39_test1)
                    this->select_39_match1_bang();
                else
                    this->select_39_nomatch_number_set(v);
            }
            
            void expr_84_out1_set(number v) {
                this->expr_84_out1 = v;
                this->select_39_input_number_set(this->expr_84_out1);
            }
            
            void expr_84_in1_set(number in1) {
                this->expr_84_in1 = in1;
                this->expr_84_out1_set(this->expr_84_in1 <= this->expr_84_in2);//#map:fixedgrain/rand-pitchspeed/<=_obj-82:1
            }
            
            void trigger_35_out2_set(number v) {
                this->expr_85_in1_set(v);
                this->expr_84_in1_set(v);
            }
            
            void trigger_35_out1_set(number v) {
                this->gate_33_input_number_set(v);
            }
            
            void trigger_35_input_number_set(number v) {
                this->trigger_35_out2_set(trunc(v));
                this->trigger_35_out1_set(trunc(v));
            }
            
            void receive_43_output_number_set(number v) {
                this->receive_43_output_number = v;
                this->trigger_35_input_number_set(v);
            }
            
            void gate_32_onoff_set(number v) {
                this->gate_32_onoff = v;
            }
            
            void gate_32_out1_number_set(number v) {
                this->gate_32_out1_number = v;
                this->numberobj_182_value_set(v);
            }
            
            void gate_32_out2_number_set(number v) {
                this->gate_32_out2_number = v;
                this->expr_81_in1_set(v);
            }
            
            void gate_32_input_number_set(number v) {
                if (this->gate_32_onoff == 1)
                    this->gate_32_out1_number_set(v);
                else if (this->gate_32_onoff == 2)
                    this->gate_32_out2_number_set(v);
            }
            
            void eventinlet_48_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_32_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_32_onoff_set(converted);
                }
            }
            
            void numberobj_184_value_bang() {
                number v = this->numberobj_184_value;
                number localvalue = v;
            
                if (this->numberobj_184_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_184_output_set(localvalue);
            }
            
            void trigger_34_out3_bang() {
                this->numberobj_184_value_bang();
            }
            
            void numberobj_185_value_bang() {
                number v = this->numberobj_185_value;
                number localvalue = v;
            
                if (this->numberobj_185_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_185_output_set(localvalue);
            }
            
            void trigger_34_out2_bang() {
                this->numberobj_185_value_bang();
            }
            
            void expr_80_out1_set(number v) {
                this->expr_80_out1 = v;
                this->gate_31_input_number_set(this->expr_80_out1);
            }
            
            void expr_80_in1_set(number in1) {
                this->expr_80_in1 = in1;
                this->expr_80_out1_set(this->expr_80_in1 + this->expr_80_in2);//#map:fixedgrain/rand-pitchspeed/+_obj-28:1
            }
            
            void random_18_result_set(number v) {
                this->expr_80_in1_set(v);
            }
            
            void random_18_trigger_bang() {
                {
                    this->random_18_result_set(this->random(0, this->random_18_limit));
                }
            }
            
            void trigger_34_out1_bang() {
                this->random_18_trigger_bang();
            }
            
            void trigger_34_input_bang_bang() {
                this->trigger_34_out3_bang();
                this->trigger_34_out2_bang();
                this->trigger_34_out1_bang();
            }
            
            void eventinlet_47_out1_bang_bang() {
                this->trigger_34_input_bang_bang();
            }
            
            void trigger_34_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_34_out3_bang();
                this->trigger_34_out2_bang();
                this->trigger_34_out1_bang();
            }
            
            void trigger_34_input_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->trigger_34_out3_bang();
                this->trigger_34_out2_bang();
                this->trigger_34_out1_bang();
            }
            
            void message_67_set_set(const list& v) {
                this->message_67_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-pitchspeed/message_obj-32"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_68_set_set(const list& v) {
                this->message_68_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-pitchspeed/message_obj-31"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_69_set_set(const list& v) {
                this->message_69_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-pitchspeed/message_obj-70"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_70_set_set(const list& v) {
                this->message_70_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-pitchspeed/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void gate_32_onoff_bang() {}
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_182_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_182_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_182_value = localvalue;
            }
            
            void random_18_limit_setter(number v) {
                if (v >= 0)
                    this->random_18_limit = v;
            }
            
            void numberobj_183_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_183_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_183_value = localvalue;
            }
            
            void numberobj_184_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_184_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_184_value = localvalue;
            }
            
            void numberobj_185_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_185_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_185_value = localvalue;
            }
            
            void numberobj_186_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_186_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_186_value = localvalue;
            }
            
            void numberobj_187_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_187_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_187_value = localvalue;
            }
            
            void numberobj_182_init() {
                this->numberobj_182_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-40"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_182_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_182_value;
            }
            
            void numberobj_182_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_182_value_set(preset["value"]);
            }
            
            void random_18_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_18_nz_state
                );
            }
            
            void random_18_nz_init() {
                this->random_18_nz_reset();
            }
            
            void random_18_nz_seed(number v) {
                xoshiro_reset(v, this->random_18_nz_state);
            }
            
            number random_18_nz_next() {
                return xoshiro_next(this->random_18_nz_state);
            }
            
            void numberobj_183_init() {
                this->numberobj_183_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-38"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_183_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_183_value;
            }
            
            void numberobj_183_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_183_value_set(preset["value"]);
            }
            
            void message_67_init() {
                this->message_67_set_set({1});
            }
            
            void message_68_init() {
                this->message_68_set_set({2});
            }
            
            void numberobj_184_init() {
                this->numberobj_184_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_184_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_184_value;
            }
            
            void numberobj_184_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_184_value_set(preset["value"]);
            }
            
            void numberobj_185_init() {
                this->numberobj_185_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-17"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_185_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_185_value;
            }
            
            void numberobj_185_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_185_value_set(preset["value"]);
            }
            
            void numberobj_186_init() {
                this->numberobj_186_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-71"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_186_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_186_value;
            }
            
            void numberobj_186_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_186_value_set(preset["value"]);
            }
            
            void message_69_init() {
                this->message_69_set_set({1});
            }
            
            void message_70_init() {
                this->message_70_set_set({2});
            }
            
            void numberobj_187_init() {
                this->numberobj_187_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-pitchspeed/number_obj-16"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_187_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_187_value;
            }
            
            void numberobj_187_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_187_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_31_onoff = 0;
                gate_31_out1_number = 0;
                gate_31_out2_number = 0;
                numberobj_182_value = 0;
                numberobj_182_value_setter(numberobj_182_value);
                gate_32_onoff = 0;
                gate_32_out1_number = 0;
                gate_32_out2_number = 0;
                scale_82_inlow = 0;
                scale_82_inhigh = 1;
                scale_82_outlow = 0;
                scale_82_outhigh = 1;
                scale_82_power = 1;
                expr_80_in1 = 0;
                expr_80_in2 = 0;
                expr_80_out1 = 0;
                random_18_limit = 1;
                random_18_limit_setter(random_18_limit);
                random_18_seed = 0;
                numberobj_183_value = 0;
                numberobj_183_value_setter(numberobj_183_value);
                expr_81_in1 = 0;
                expr_81_out1 = 0;
                scale_83_inlow = 0;
                scale_83_inhigh = 1;
                scale_83_outlow = 0;
                scale_83_outhigh = 1;
                scale_83_power = 1;
                expr_82_in1 = 0;
                expr_82_in2 = 0;
                expr_82_out1 = 0;
                numberobj_184_value = 0;
                numberobj_184_value_setter(numberobj_184_value);
                receive_41_output_number = 0;
                expr_83_in1 = 0;
                expr_83_out1 = 0;
                numberobj_185_value = 0;
                numberobj_185_value_setter(numberobj_185_value);
                receive_42_output_number = 0;
                gate_33_onoff = 0;
                gate_33_out1_number = 0;
                gate_33_out2_number = 0;
                receive_43_output_number = 0;
                select_39_test1 = 1;
                scale_84_inlow = -100;
                scale_84_inhigh = 0;
                scale_84_outlow = 0.1;
                scale_84_outhigh = 1;
                scale_84_power = 1;
                expr_84_in1 = 0;
                expr_84_in2 = 0;
                expr_84_out1 = 0;
                numberobj_186_value = 0;
                numberobj_186_value_setter(numberobj_186_value);
                select_40_test1 = 1;
                expr_85_in1 = 0;
                expr_85_in2 = 1;
                expr_85_out1 = 0;
                numberobj_187_value = 0;
                numberobj_187_value_setter(numberobj_187_value);
                scale_85_inlow = 1;
                scale_85_inhigh = 100;
                scale_85_outlow = 1;
                scale_85_outhigh = 0.1;
                scale_85_power = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_182_currentFormat = 6;
                numberobj_182_lastValue = 0;
                numberobj_183_currentFormat = 6;
                numberobj_183_lastValue = 0;
                numberobj_184_currentFormat = 6;
                numberobj_184_lastValue = 0;
                numberobj_185_currentFormat = 6;
                numberobj_185_lastValue = 0;
                numberobj_186_currentFormat = 6;
                numberobj_186_lastValue = 0;
                numberobj_187_currentFormat = 6;
                numberobj_187_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gate_31_onoff;
                number gate_31_out1_number;
                list gate_31_out1_list;
                number gate_31_out2_number;
                list gate_31_out2_list;
                number numberobj_182_value;
                number gate_32_onoff;
                number gate_32_out1_number;
                list gate_32_out1_list;
                number gate_32_out2_number;
                list gate_32_out2_list;
                list scale_82_input;
                number scale_82_inlow;
                number scale_82_inhigh;
                number scale_82_outlow;
                number scale_82_outhigh;
                number scale_82_power;
                list scale_82_out;
                number expr_80_in1;
                number expr_80_in2;
                number expr_80_out1;
                number random_18_limit;
                number random_18_seed;
                number numberobj_183_value;
                number expr_81_in1;
                number expr_81_out1;
                list message_67_set;
                list message_68_set;
                list scale_83_input;
                number scale_83_inlow;
                number scale_83_inhigh;
                number scale_83_outlow;
                number scale_83_outhigh;
                number scale_83_power;
                list scale_83_out;
                number expr_82_in1;
                number expr_82_in2;
                number expr_82_out1;
                number numberobj_184_value;
                number receive_41_output_number;
                list receive_41_output_list;
                number expr_83_in1;
                number expr_83_out1;
                number numberobj_185_value;
                number receive_42_output_number;
                list receive_42_output_list;
                number gate_33_onoff;
                number gate_33_out1_number;
                list gate_33_out1_list;
                number gate_33_out2_number;
                list gate_33_out2_list;
                number receive_43_output_number;
                list receive_43_output_list;
                number select_39_test1;
                list scale_84_input;
                number scale_84_inlow;
                number scale_84_inhigh;
                number scale_84_outlow;
                number scale_84_outhigh;
                number scale_84_power;
                list scale_84_out;
                number expr_84_in1;
                number expr_84_in2;
                number expr_84_out1;
                number numberobj_186_value;
                number select_40_test1;
                list message_69_set;
                number expr_85_in1;
                number expr_85_in2;
                number expr_85_out1;
                list message_70_set;
                number numberobj_187_value;
                list scale_85_input;
                number scale_85_inlow;
                number scale_85_inhigh;
                number scale_85_outlow;
                number scale_85_outhigh;
                number scale_85_power;
                list scale_85_out;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_182_currentFormat;
                number numberobj_182_lastValue;
                UInt random_18_nz_state[4] = { };
                Int numberobj_183_currentFormat;
                number numberobj_183_lastValue;
                Int numberobj_184_currentFormat;
                number numberobj_184_lastValue;
                Int numberobj_185_currentFormat;
                number numberobj_185_lastValue;
                Int numberobj_186_currentFormat;
                number numberobj_186_lastValue;
                Int numberobj_187_currentFormat;
                number numberobj_187_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_115 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_122;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_115()
            {
            }
            
            ~RNBOSubpatcher_115()
            {
            }
            
            virtual RNBOSubpatcher_122* getPatcher() const {
                return static_cast<RNBOSubpatcher_122 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return rand01() * range + low;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            void setVoiceIndex(Index index)  {
                this->_voiceIndex = index;
            }
            
            void setNoteNumber(Int noteNumber)  {
                this->_noteNumber = noteNumber;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-reverse/message_obj-37") == objectId)
                        this->message_71_listin_number_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/message_obj-39") == objectId)
                        this->message_72_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("fixedgrain/rand-reverse/number_obj-6") == objectId)
                        this->numberobj_188_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/number_obj-33") == objectId)
                        this->numberobj_189_valin_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/number_obj-31") == objectId)
                        this->numberobj_190_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("fixedgrain/rand-reverse/number_obj-6") == objectId)
                        this->numberobj_188_format_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/number_obj-33") == objectId)
                        this->numberobj_189_format_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/number_obj-31") == objectId)
                        this->numberobj_190_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-reverse/message_obj-37") == objectId)
                        this->message_71_listin_list_set(payload);
            
                    if (TAG("fixedgrain/rand-reverse/message_obj-39") == objectId)
                        this->message_72_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("fixedgrain/rand-reverse/message_obj-37") == objectId)
                        this->message_71_listin_bang_bang();
            
                    if (TAG("fixedgrain/rand-reverse/message_obj-39") == objectId)
                        this->message_72_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("fixedgrain/rand-reverse/button_obj-18") == objectId)
                        this->button_12_bangin_bang();
            
                    if (TAG("fixedgrain/rand-reverse/button_obj-20") == objectId)
                        this->button_13_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("fixedgrain/rand-reverse/message_obj-37"):
                    {
                    return "fixedgrain/rand-reverse/message_obj-37";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("fixedgrain/rand-reverse/button_obj-18"):
                    {
                    return "fixedgrain/rand-reverse/button_obj-18";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("fixedgrain/rand-reverse/number_obj-6"):
                    {
                    return "fixedgrain/rand-reverse/number_obj-6";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("fixedgrain/rand-reverse/message_obj-39"):
                    {
                    return "fixedgrain/rand-reverse/message_obj-39";
                    }
                case TAG("fixedgrain/rand-reverse/button_obj-20"):
                    {
                    return "fixedgrain/rand-reverse/button_obj-20";
                    }
                case TAG("fixedgrain/rand-reverse/number_obj-33"):
                    {
                    return "fixedgrain/rand-reverse/number_obj-33";
                    }
                case TAG("fixedgrain/rand-reverse/number_obj-31"):
                    {
                    return "fixedgrain/rand-reverse/number_obj-31";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_71_listin_list_set(const list& v) {
                this->message_71_set_set(v);
            }
            
            void message_71_listin_number_set(number v) {
                this->message_71_set_set(v);
            }
            
            void message_71_listin_bang_bang() {
                this->message_71_trigger_bang();
            }
            
            void button_12_bangin_bang() {
                this->button_12_bangval_bang();
            }
            
            void numberobj_188_valin_set(number v) {
                this->numberobj_188_value_set(v);
            }
            
            void numberobj_188_format_set(number v) {
                this->numberobj_188_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_49_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->random_19_trigger_bang();
            }
            
            void eventinlet_49_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->random_19_trigger_bang();
            }
            
            void message_72_listin_list_set(const list& v) {
                this->message_72_set_set(v);
            }
            
            void message_72_listin_number_set(number v) {
                this->message_72_set_set(v);
            }
            
            void message_72_listin_bang_bang() {
                this->message_72_trigger_bang();
            }
            
            void button_13_bangin_bang() {
                this->button_13_bangval_bang();
            }
            
            void numberobj_189_valin_set(number v) {
                this->numberobj_189_value_set(v);
            }
            
            void numberobj_189_format_set(number v) {
                this->numberobj_189_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_190_valin_set(number v) {
                this->numberobj_190_value_set(v);
            }
            
            void numberobj_190_format_set(number v) {
                this->numberobj_190_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_71_init();
                this->numberobj_188_init();
                this->random_19_nz_init();
                this->message_72_init();
                this->numberobj_189_init();
                this->numberobj_190_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void expr_88_in2_set(number v) {
                this->expr_88_in2 = v;
            }
            
            void expr_87_in2_set(number v) {
                this->expr_87_in2 = v;
            }
            
            void numberobj_189_output_set(number v) {
                this->expr_88_in2_set(v);
                this->expr_87_in2_set(v);
            }
            
            void numberobj_189_value_set(number v) {
                this->numberobj_189_value_setter(v);
                v = this->numberobj_189_value;
                number localvalue = v;
            
                if (this->numberobj_189_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-reverse/number_obj-33"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_189_output_set(localvalue);
            }
            
            void scale_86_out_set(const list& v) {
                this->scale_86_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_189_value_set(converted);
                }
            }
            
            void scale_86_input_set(const list& v) {
                this->scale_86_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_86_inlow,
                        this->scale_86_inhigh,
                        this->scale_86_outlow,
                        this->scale_86_outhigh,
                        this->scale_86_power
                    ));
                }
            
                this->scale_86_out_set(tmp);
            }
            
            void numberobj_190_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_86_input_set(converted);
                }
            }
            
            void numberobj_190_value_set(number v) {
                this->numberobj_190_value_setter(v);
                v = this->numberobj_190_value;
                number localvalue = v;
            
                if (this->numberobj_190_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-reverse/number_obj-31"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_190_output_set(localvalue);
            }
            
            void receive_44_output_number_set(number v) {
                this->receive_44_output_number = v;
                this->numberobj_190_value_set(v);
            }
            
            void eventoutlet_32_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_22_out1_list_set((list)v);
            }
            
            void message_72_out_set(const list& v) {
                this->eventoutlet_32_in1_list_set(v);
            }
            
            void message_72_trigger_bang() {
                this->message_72_out_set(this->message_72_set);
            }
            
            void button_13_output_bang() {
                this->message_72_trigger_bang();
            }
            
            void button_13_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("fixedgrain/rand-reverse/button_obj-20"),
                    this->_currentTime
                );;
            
                this->button_13_output_bang();
            }
            
            void select_42_match1_bang() {
                this->button_13_bangval_bang();
            }
            
            void select_42_nomatch_number_set(number ) {}
            
            void select_42_input_number_set(number v) {
                if (v == this->select_42_test1)
                    this->select_42_match1_bang();
                else
                    this->select_42_nomatch_number_set(v);
            }
            
            void expr_88_out1_set(number v) {
                this->expr_88_out1 = v;
                this->select_42_input_number_set(this->expr_88_out1);
            }
            
            void expr_88_in1_set(number in1) {
                this->expr_88_in1 = in1;
                this->expr_88_out1_set(this->expr_88_in1 >= this->expr_88_in2);//#map:fixedgrain/rand-reverse/>=_obj-10:1
            }
            
            void message_71_out_set(const list& v) {
                this->eventoutlet_32_in1_list_set(v);
            }
            
            void message_71_trigger_bang() {
                this->message_71_out_set(this->message_71_set);
            }
            
            void button_12_output_bang() {
                this->message_71_trigger_bang();
            }
            
            void button_12_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("fixedgrain/rand-reverse/button_obj-18"),
                    this->_currentTime
                );;
            
                this->button_12_output_bang();
            }
            
            void select_41_match1_bang() {
                this->button_12_bangval_bang();
            }
            
            void select_41_nomatch_number_set(number ) {}
            
            void select_41_input_number_set(number v) {
                if (v == this->select_41_test1)
                    this->select_41_match1_bang();
                else
                    this->select_41_nomatch_number_set(v);
            }
            
            void expr_87_out1_set(number v) {
                this->expr_87_out1 = v;
                this->select_41_input_number_set(this->expr_87_out1);
            }
            
            void expr_87_in1_set(number in1) {
                this->expr_87_in1 = in1;
                this->expr_87_out1_set(this->expr_87_in1 <= this->expr_87_in2);//#map:fixedgrain/rand-reverse/<=_obj-7:1
            }
            
            void numberobj_188_output_set(number v) {
                this->expr_88_in1_set(v);
                this->expr_87_in1_set(v);
            }
            
            void numberobj_188_value_set(number v) {
                this->numberobj_188_value_setter(v);
                v = this->numberobj_188_value;
                number localvalue = v;
            
                if (this->numberobj_188_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("fixedgrain/rand-reverse/number_obj-6"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_188_output_set(localvalue);
            }
            
            void expr_86_out1_set(number v) {
                this->expr_86_out1 = v;
                this->numberobj_188_value_set(this->expr_86_out1);
            }
            
            void expr_86_in1_set(number in1) {
                this->expr_86_in1 = in1;
                this->expr_86_out1_set(this->expr_86_in1 - this->expr_86_in2);//#map:fixedgrain/rand-reverse/-_obj-2:1
            }
            
            void random_19_result_set(number v) {
                this->expr_86_in1_set(v);
            }
            
            void random_19_trigger_bang() {
                {
                    this->random_19_result_set(this->random(0, this->random_19_limit));
                }
            }
            
            void eventinlet_49_out1_bang_bang() {
                this->random_19_trigger_bang();
            }
            
            void message_71_set_set(const list& v) {
                this->message_71_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-reverse/message_obj-37"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_72_set_set(const list& v) {
                this->message_72_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("fixedgrain/rand-reverse/message_obj-39"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_188_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_188_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_188_value = localvalue;
            }
            
            void random_19_limit_setter(number v) {
                if (v >= 0)
                    this->random_19_limit = v;
            }
            
            void numberobj_189_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_189_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_189_value = localvalue;
            }
            
            void numberobj_190_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_190_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_190_value = localvalue;
            }
            
            void message_71_init() {
                this->message_71_set_set({2});
            }
            
            void numberobj_188_init() {
                this->numberobj_188_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-reverse/number_obj-6"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_188_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_188_value;
            }
            
            void numberobj_188_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_188_value_set(preset["value"]);
            }
            
            void random_19_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_19_nz_state
                );
            }
            
            void random_19_nz_init() {
                this->random_19_nz_reset();
            }
            
            void random_19_nz_seed(number v) {
                xoshiro_reset(v, this->random_19_nz_state);
            }
            
            number random_19_nz_next() {
                return xoshiro_next(this->random_19_nz_state);
            }
            
            void message_72_init() {
                this->message_72_set_set({1});
            }
            
            void numberobj_189_init() {
                this->numberobj_189_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-reverse/number_obj-33"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_189_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_189_value;
            }
            
            void numberobj_189_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_189_value_set(preset["value"]);
            }
            
            void numberobj_190_init() {
                this->numberobj_190_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("fixedgrain/rand-reverse/number_obj-31"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_190_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_190_value;
            }
            
            void numberobj_190_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_190_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_86_in1 = 0;
                expr_86_in2 = 100;
                expr_86_out1 = 0;
                select_41_test1 = 1;
                expr_87_in1 = 0;
                expr_87_in2 = 0;
                expr_87_out1 = 0;
                numberobj_188_value = 0;
                numberobj_188_value_setter(numberobj_188_value);
                random_19_limit = 201;
                random_19_limit_setter(random_19_limit);
                random_19_seed = 0;
                select_42_test1 = 1;
                expr_88_in1 = 0;
                expr_88_in2 = 1;
                expr_88_out1 = 0;
                numberobj_189_value = 0;
                numberobj_189_value_setter(numberobj_189_value);
                numberobj_190_value = 0;
                numberobj_190_value_setter(numberobj_190_value);
                scale_86_inlow = -100;
                scale_86_inhigh = 100;
                scale_86_outlow = 100;
                scale_86_outhigh = -100;
                scale_86_power = 1;
                receive_44_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_188_currentFormat = 6;
                numberobj_188_lastValue = 0;
                numberobj_189_currentFormat = 6;
                numberobj_189_lastValue = 0;
                numberobj_190_currentFormat = 6;
                numberobj_190_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_71_set;
                number expr_86_in1;
                number expr_86_in2;
                number expr_86_out1;
                number select_41_test1;
                number expr_87_in1;
                number expr_87_in2;
                number expr_87_out1;
                number numberobj_188_value;
                number random_19_limit;
                number random_19_seed;
                list message_72_set;
                number select_42_test1;
                number expr_88_in1;
                number expr_88_in2;
                number expr_88_out1;
                number numberobj_189_value;
                number numberobj_190_value;
                list scale_86_input;
                number scale_86_inlow;
                number scale_86_inhigh;
                number scale_86_outlow;
                number scale_86_outhigh;
                number scale_86_power;
                list scale_86_out;
                number receive_44_output_number;
                list receive_44_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_188_currentFormat;
                number numberobj_188_lastValue;
                UInt random_19_nz_state[4] = { };
                Int numberobj_189_currentFormat;
                number numberobj_189_lastValue;
                Int numberobj_190_currentFormat;
                number numberobj_190_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_122()
    {
    }
    
    ~RNBOSubpatcher_122()
    {
        delete this->p_16;
        delete this->p_17;
        delete this->p_18;
        delete this->p_19;
        delete this->p_20;
        delete this->p_21;
        delete this->p_22;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1357044121, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
    }
    
    number minimum(number x, number y) {
        return (y < x ? y : x);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    
        if (this->getIsMuted())
            return;
    
        this->groove_02_perform(
            this->groove_02_rate_auto,
            this->groove_02_begin,
            this->groove_02_end,
            this->signals[0],
            this->signals[1],
            n
        );
    
        this->dspexpr_05_perform(this->signals[0], this->dspexpr_05_in2, this->signals[2], n);
        this->p_16_perform(this->signals[2], this->signals[0], n);
        this->p_17_perform(this->signals[0], this->signals[2], this->signals[3], n);
        this->numbertilde_19_perform(this->signals[1], this->dummyBuffer, n);
        this->p_18_perform(this->signals[1], n);
        this->dspexpr_06_perform(this->signals[3], this->signals[1], this->signals[0], n);
        this->signaladder_05_perform(this->signals[0], out2, out2, n);
        this->dspexpr_04_perform(this->signals[2], this->signals[1], this->signals[0], n);
        this->signaladder_06_perform(this->signals[0], out1, out1, n);
        this->p_19_perform(n);
        this->p_20_perform(n);
        this->p_21_perform(n);
        this->p_22_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->groove_02_dspsetup(forceDSPSetup);
        this->numbertilde_19_dspsetup(forceDSPSetup);
        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_21->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_22->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    void setVoiceIndex(Index index)  {
        this->_voiceIndex = index;
        this->p_16->setVoiceIndex(index);
        this->p_17->setVoiceIndex(index);
        this->p_18->setVoiceIndex(index);
        this->p_19->setVoiceIndex(index);
        this->p_20->setVoiceIndex(index);
        this->p_21->setVoiceIndex(index);
        this->p_22->setVoiceIndex(index);
    }
    
    void setNoteNumber(Int noteNumber)  {
        this->_noteNumber = noteNumber;
        this->p_16->setNoteNumber(noteNumber);
        this->p_17->setNoteNumber(noteNumber);
        this->p_18->setNoteNumber(noteNumber);
        this->p_19->setNoteNumber(noteNumber);
        this->p_20->setNoteNumber(noteNumber);
        this->p_21->setNoteNumber(noteNumber);
        this->p_22->setNoteNumber(noteNumber);
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_16 = new RNBOSubpatcher_109();
        this->p_16->setEngineAndPatcher(this->getEngine(), this);
        this->p_16->initialize();
        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
        this->p_17 = new RNBOSubpatcher_110();
        this->p_17->setEngineAndPatcher(this->getEngine(), this);
        this->p_17->initialize();
        this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
        this->p_18 = new RNBOSubpatcher_111();
        this->p_18->setEngineAndPatcher(this->getEngine(), this);
        this->p_18->initialize();
        this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
        this->p_19 = new RNBOSubpatcher_112();
        this->p_19->setEngineAndPatcher(this->getEngine(), this);
        this->p_19->initialize();
        this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
        this->p_20 = new RNBOSubpatcher_113();
        this->p_20->setEngineAndPatcher(this->getEngine(), this);
        this->p_20->initialize();
        this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
        this->p_21 = new RNBOSubpatcher_114();
        this->p_21->setEngineAndPatcher(this->getEngine(), this);
        this->p_21->initialize();
        this->p_21->setParameterOffset(this->getParameterOffset(this->p_21));
        this->p_22 = new RNBOSubpatcher_115();
        this->p_22->setEngineAndPatcher(this->getEngine(), this);
        this->p_22->initialize();
        this->p_22->setParameterOffset(this->getParameterOffset(this->p_22));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "rand-filter"));
        this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "rand-placement"));
        this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "rand-envelope"));
        this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "rand-lengthanddelay"));
        this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "rand-volume"));
        this->p_21->getPreset(getSubState(getSubState(preset, "__sps"), "rand-pitchspeed"));
        this->p_22->getPreset(getSubState(getSubState(preset, "__sps"), "rand-reverse"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                this->p_16->setParameterValue(index, v, time);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                this->p_17->setParameterValue(index, v, time);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                this->p_18->setParameterValue(index, v, time);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                this->p_19->setParameterValue(index, v, time);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                this->p_20->setParameterValue(index, v, time);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                this->p_21->setParameterValue(index, v, time);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                this->p_22->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterValue(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterValue(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterValue(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterValue(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterValue(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterValue(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterValue getPolyParameterValue(PatcherInterface** voices, ParameterIndex index)  {
        switch (index) {
        default:
            {
            return voices[0]->getParameterValue(index);
            }
        }
    }
    
    void setPolyParameterValue(
        PatcherInterface** voices,
        ParameterIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        switch (index) {
        default:
            {
            for (Index i = 0; i < 100; i++)
                voices[i]->setParameterValue(index, value, time);
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterName(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterName(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterName(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterName(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterName(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterName(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterId(index);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->getParameterId(index);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->getParameterId(index);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->getParameterId(index);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->getParameterId(index);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->getParameterId(index);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_16->getNumParameters())
                    this->p_16->getParameterInfo(index, info);
    
                index -= this->p_16->getNumParameters();
    
                if (index < this->p_17->getNumParameters())
                    this->p_17->getParameterInfo(index, info);
    
                index -= this->p_17->getNumParameters();
    
                if (index < this->p_18->getNumParameters())
                    this->p_18->getParameterInfo(index, info);
    
                index -= this->p_18->getNumParameters();
    
                if (index < this->p_19->getNumParameters())
                    this->p_19->getParameterInfo(index, info);
    
                index -= this->p_19->getNumParameters();
    
                if (index < this->p_20->getNumParameters())
                    this->p_20->getParameterInfo(index, info);
    
                index -= this->p_20->getNumParameters();
    
                if (index < this->p_21->getNumParameters())
                    this->p_21->getParameterInfo(index, info);
    
                index -= this->p_21->getNumParameters();
    
                if (index < this->p_22->getNumParameters())
                    this->p_22->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        if (this->_voiceIndex == 1)
            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void sendPolyParameter(ParameterIndex index, Index voiceIndex, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset + voiceIndex - 1, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_16)
            return 0;
    
        if (subpatcher == this->p_17)
            return 0 + this->p_16->getNumParameters();
    
        if (subpatcher == this->p_18)
            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters();
    
        if (subpatcher == this->p_19)
            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters();
    
        if (subpatcher == this->p_20)
            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters();
    
        if (subpatcher == this->p_21)
            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters();
    
        if (subpatcher == this->p_22)
            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->constrainParameterValue(index, value);
    
            index -= this->p_16->getNumParameters();
    
            if (index < this->p_17->getNumParameters())
                return this->p_17->constrainParameterValue(index, value);
    
            index -= this->p_17->getNumParameters();
    
            if (index < this->p_18->getNumParameters())
                return this->p_18->constrainParameterValue(index, value);
    
            index -= this->p_18->getNumParameters();
    
            if (index < this->p_19->getNumParameters())
                return this->p_19->constrainParameterValue(index, value);
    
            index -= this->p_19->getNumParameters();
    
            if (index < this->p_20->getNumParameters())
                return this->p_20->constrainParameterValue(index, value);
    
            index -= this->p_20->getNumParameters();
    
            if (index < this->p_21->getNumParameters())
                return this->p_21->constrainParameterValue(index, value);
    
            index -= this->p_21->getNumParameters();
    
            if (index < this->p_22->getNumParameters())
                return this->p_22->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1357044121:
            {
            this->delay_01_out_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_19_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("fixedgrain/number_obj-11") == objectId)
                this->numberobj_191_valin_set(payload);
    
            if (TAG("fixedgrain/number_obj-14") == objectId)
                this->numberobj_192_valin_set(payload);
    
            if (TAG("fixedgrain/number_obj-7") == objectId)
                this->numberobj_193_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("fixedgrain/number_obj-11") == objectId)
                this->numberobj_191_format_set(payload);
    
            if (TAG("fixedgrain/number_obj-14") == objectId)
                this->numberobj_192_format_set(payload);
    
            if (TAG("fixedgrain/number_obj-7") == objectId)
                this->numberobj_193_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("fixedgrain/number~_obj-31") == objectId)
                this->numbertilde_19_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("fixedgrain/number~_obj-31") == objectId)
                this->numbertilde_19_mode_set(payload);
    
            break;
            }
        }
    
        this->p_16->processNumMessage(tag, objectId, time, payload);
        this->p_17->processNumMessage(tag, objectId, time, payload);
        this->p_18->processNumMessage(tag, objectId, time, payload);
        this->p_19->processNumMessage(tag, objectId, time, payload);
        this->p_20->processNumMessage(tag, objectId, time, payload);
        this->p_21->processNumMessage(tag, objectId, time, payload);
        this->p_22->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("fixedgrain/number~_obj-31") == objectId)
                this->numbertilde_19_sig_list_set(payload);
    
            break;
            }
        }
    
        this->p_16->processListMessage(tag, objectId, time, payload);
        this->p_17->processListMessage(tag, objectId, time, payload);
        this->p_18->processListMessage(tag, objectId, time, payload);
        this->p_19->processListMessage(tag, objectId, time, payload);
        this->p_20->processListMessage(tag, objectId, time, payload);
        this->p_21->processListMessage(tag, objectId, time, payload);
        this->p_22->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("fixedgrain/button_obj-18") == objectId)
                this->button_14_bangin_bang();
    
            break;
            }
        }
    
        this->p_16->processBangMessage(tag, objectId, time);
        this->p_17->processBangMessage(tag, objectId, time);
        this->p_18->processBangMessage(tag, objectId, time);
        this->p_19->processBangMessage(tag, objectId, time);
        this->p_20->processBangMessage(tag, objectId, time);
        this->p_21->processBangMessage(tag, objectId, time);
        this->p_22->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("fixedgrain/button_obj-18"):
            {
            return "fixedgrain/button_obj-18";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("fixedgrain/number_obj-11"):
            {
            return "fixedgrain/number_obj-11";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("fixedgrain/number_obj-14"):
            {
            return "fixedgrain/number_obj-14";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("fixedgrain/number~_obj-31"):
            {
            return "fixedgrain/number~_obj-31";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("fixedgrain/number_obj-7"):
            {
            return "fixedgrain/number_obj-7";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        }
    
        auto subpatchResult_0 = this->p_16->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_17->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_18->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_19->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_20->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_21->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_22->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->groove_02_buffer = new Float32Buffer(this->getPatcher()->fixedbuffer);
        }
    
        this->p_16->processDataViewUpdate(index, time);
        this->p_17->processDataViewUpdate(index, time);
        this->p_18->processDataViewUpdate(index, time);
        this->p_19->processDataViewUpdate(index, time);
        this->p_20->processDataViewUpdate(index, time);
        this->p_21->processDataViewUpdate(index, time);
        this->p_22->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->groove_02_buffer = new Float32Buffer(this->getPatcher()->fixedbuffer);
    }
    
    protected:
    
    void eventinlet_50_out1_number_set(number v) {
        this->trigger_36_input_number_set(v);
    }
    
    void eventinlet_50_out1_list_set(const list& v) {
        this->trigger_36_input_list_set(v);
    }
    
    void button_14_bangin_bang() {
        this->button_14_bangval_bang();
    }
    
    void numberobj_191_valin_set(number v) {
        this->numberobj_191_value_set(v);
    }
    
    void numberobj_191_format_set(number v) {
        this->numberobj_191_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void delay_01_out_bang() {
        this->groove_02_stop_bang();
    }
    
    void numberobj_192_valin_set(number v) {
        this->numberobj_192_value_set(v);
    }
    
    void numberobj_192_format_set(number v) {
        this->numberobj_192_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_19_sig_number_set(number v) {
        this->numbertilde_19_outValue = v;
    }
    
    void numbertilde_19_sig_list_set(const list& v) {
        this->numbertilde_19_outValue = v[0];
    }
    
    void numbertilde_19_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_19_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_19_currentMode = 1;
        }
    }
    
    void numberobj_193_valin_set(number v) {
        this->numberobj_193_value_set(v);
    }
    
    void numberobj_193_format_set(number v) {
        this->numberobj_193_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_19_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_191_init();
        this->numberobj_192_init();
        this->numbertilde_19_init();
        this->numberobj_193_init();
        this->p_16->initializeObjects();
        this->p_17->initializeObjects();
        this->p_18->initializeObjects();
        this->p_19->initializeObjects();
        this->p_20->initializeObjects();
        this->p_21->initializeObjects();
        this->p_22->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_16->startup();
        this->p_17->startup();
        this->p_18->startup();
        this->p_19->startup();
        this->p_20->startup();
        this->p_21->startup();
        this->p_22->startup();
    }
    
    void allocateDataRefs() {
        this->p_16->allocateDataRefs();
        this->p_17->allocateDataRefs();
        this->p_18->allocateDataRefs();
        this->p_19->allocateDataRefs();
        this->p_20->allocateDataRefs();
        this->p_21->allocateDataRefs();
        this->p_22->allocateDataRefs();
        this->groove_02_buffer = this->groove_02_buffer->allocateIfNeeded();
    }
    
    void p_19_target_size_min_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_33_output_number_set(v);
    }
    
    void p_18_in2_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_43_out1_number_set(v);
    }
    
    number delay_01_time_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        return v;
    }
    
    void delay_01_time_set(number v) {
        v = this->delay_01_time_constrain(v);
        this->delay_01_time = v;
    }
    
    void p_19_out3_number_set(number v) {
        this->p_18_in2_number_set(v);
        this->delay_01_time_set(v);
    }
    
    void p_19_target_size_max_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_34_output_number_set(v);
    }
    
    void p_19_target_size_prob_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_37_output_number_set(v);
    }
    
    void p_20_target_vol_min_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->receive_38_output_number_set(v);
    }
    
    void p_20_target_vol_max_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->receive_39_output_number_set(v);
    }
    
    void dspexpr_05_in2_set(number v) {
        this->dspexpr_05_in2 = v;
    }
    
    void p_20_out1_number_set(number v) {
        this->dspexpr_05_in2_set(v);
    }
    
    void p_20_target_vol_prob_number_set(number v) {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->receive_40_output_number_set(v);
    }
    
    void p_21_target_pitch_min_number_set(number v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->receive_41_output_number_set(v);
    }
    
    void p_21_target_pitch_max_number_set(number v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->receive_42_output_number_set(v);
    }
    
    void p_19_in2_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->eventinlet_45_out1_number_set(v);
    }
    
    void p_21_out2_number_set(number v) {
        this->p_19_in2_number_set(v);
    }
    
    void groove_02_rate_auto_set(number v) {
        this->groove_02_rate_auto = v;
    }
    
    void numberobj_193_output_set(number v) {
        this->groove_02_rate_auto_set(v);
    }
    
    void numberobj_193_value_set(number v) {
        this->numberobj_193_value_setter(v);
        v = this->numberobj_193_value;
        number localvalue = v;
    
        if (this->numberobj_193_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("fixedgrain/number_obj-7"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_193_output_set(localvalue);
    }
    
    void p_21_out1_number_set(number v) {
        this->numberobj_193_value_set(v);
    }
    
    void p_21_target_pitch_prob_number_set(number v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->receive_43_output_number_set(v);
    }
    
    void p_17_target_pan_min_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->receive_26_output_number_set(v);
    }
    
    void p_17_target_pan_max_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->receive_27_output_number_set(v);
    }
    
    void p_17_target_pan_width_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->receive_28_output_number_set(v);
    }
    
    void p_17_target_pan_prob_number_set(number v) {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->receive_29_output_number_set(v);
    }
    
    void p_19_target_buffermin_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_31_output_number_set(v);
    }
    
    void p_19_target_buffermax_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_32_output_number_set(v);
    }
    
    void groove_02_end_set(number v) {
        this->groove_02_end = v;
    }
    
    void numberobj_192_output_set(number v) {
        this->groove_02_end_set(v);
    }
    
    void numberobj_192_value_set(number v) {
        this->numberobj_192_value_setter(v);
        v = this->numberobj_192_value;
        number localvalue = v;
    
        if (this->numberobj_192_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("fixedgrain/number_obj-14"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_192_output_set(localvalue);
    }
    
    void p_19_out2_number_set(number v) {
        this->numberobj_192_value_set(v);
    }
    
    void groove_02_begin_set(number v) {
        this->groove_02_begin = v;
    }
    
    void numberobj_191_output_set(number v) {
        this->groove_02_begin_set(v);
    }
    
    void numberobj_191_value_set(number v) {
        this->numberobj_191_value_setter(v);
        v = this->numberobj_191_value;
        number localvalue = v;
    
        if (this->numberobj_191_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("fixedgrain/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_191_output_set(localvalue);
    }
    
    void p_19_out1_number_set(number v) {
        this->numberobj_191_value_set(v);
    }
    
    void p_19_target_buffer_prob_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_36_output_number_set(v);
    }
    
    void p_22_target_direction_number_set(number v) {
        this->p_22->updateTime(this->_currentTime);
        this->p_22->receive_44_output_number_set(v);
    }
    
    void p_16_target_filter_number_set(number v) {
        this->p_16->updateTime(this->_currentTime);
        this->p_16->receive_25_output_number_set(v);
    }
    
    void p_18_target_env_number_set(number v) {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->receive_30_output_number_set(v);
    }
    
    void p_19_target_fixedbuffersize_number_set(number v) {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->receive_35_output_number_set(v);
    }
    
    void voice_02_mutestatus_set(number ) {}
    
    void voice_02_mutein_list_set(const list& v) {
        if (v[0] == this->voice() || v[0] == 0) {
            this->voice_02_mutestatus_set(v[1]);
        }
    }
    
    void voice_02_activevoices_set(number ) {}
    
    void p_21_in5_list_set(const list& v) {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->eventinlet_48_out1_list_set(v);
    }
    
    void p_22_out1_list_set(const list& v) {
        this->p_21_in5_list_set(v);
    }
    
    void p_22_in1_bang_bang() {
        this->p_22->updateTime(this->_currentTime);
        this->p_22->eventinlet_49_out1_bang_bang();
    }
    
    void trigger_36_out8_bang() {
        this->p_22_in1_bang_bang();
    }
    
    void p_21_in1_bang_bang() {
        this->p_21->updateTime(this->_currentTime);
        this->p_21->eventinlet_47_out1_bang_bang();
    }
    
    void trigger_36_out7_bang() {
        this->p_21_in1_bang_bang();
    }
    
    void p_20_in1_bang_bang() {
        this->p_20->updateTime(this->_currentTime);
        this->p_20->eventinlet_46_out1_bang_bang();
    }
    
    void trigger_36_out6_bang() {
        this->p_20_in1_bang_bang();
    }
    
    void p_17_in2_bang_bang() {
        this->p_17->updateTime(this->_currentTime);
        this->p_17->eventinlet_41_out1_bang_bang();
    }
    
    void trigger_36_out5_bang() {
        this->p_17_in2_bang_bang();
    }
    
    void p_16_in2_bang_bang() {
        this->p_16->updateTime(this->_currentTime);
        this->p_16->eventinlet_35_out1_bang_bang();
    }
    
    void trigger_36_out4_bang() {
        this->p_16_in2_bang_bang();
    }
    
    void p_19_in1_bang_bang() {
        this->p_19->updateTime(this->_currentTime);
        this->p_19->eventinlet_44_out1_bang_bang();
    }
    
    void trigger_36_out3_bang() {
        this->p_19_in1_bang_bang();
    }
    
    void p_18_in1_bang_bang() {
        this->p_18->updateTime(this->_currentTime);
        this->p_18->eventinlet_42_out1_bang_bang();
    }
    
    void trigger_36_out2_bang() {
        this->p_18_in1_bang_bang();
    }
    
    void delay_01_stop_bang() {
        this->getEngine()->flushClockEvents(this, -1357044121, false);;
    }
    
    void delay_01_input_bang() {
        if ((bool)(!(bool)(this->delay_01_delayall)))
            this->delay_01_stop_bang();
    
        this->getEngine()->scheduleClockEvent(this, -1357044121, this->delay_01_time + this->_currentTime);;
    }
    
    void groove_02_rate_bang_bang() {
        this->groove_02_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
        this->groove_02_incomingChange = 1;
    }
    
    void button_14_output_bang() {
        this->delay_01_input_bang();
        this->groove_02_rate_bang_bang();
    }
    
    void button_14_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("fixedgrain/button_obj-18"), this->_currentTime);;
        this->button_14_output_bang();
    }
    
    void trigger_36_out1_bang() {
        this->button_14_bangval_bang();
    }
    
    void trigger_36_input_bang_bang() {
        this->trigger_36_out8_bang();
        this->trigger_36_out7_bang();
        this->trigger_36_out6_bang();
        this->trigger_36_out5_bang();
        this->trigger_36_out4_bang();
        this->trigger_36_out3_bang();
        this->trigger_36_out2_bang();
        this->trigger_36_out1_bang();
    }
    
    void eventinlet_50_out1_bang_bang() {
        this->trigger_36_input_bang_bang();
    }
    
    void trigger_36_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_36_out8_bang();
        this->trigger_36_out7_bang();
        this->trigger_36_out6_bang();
        this->trigger_36_out5_bang();
        this->trigger_36_out4_bang();
        this->trigger_36_out3_bang();
        this->trigger_36_out2_bang();
        this->trigger_36_out1_bang();
    }
    
    void trigger_36_input_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->trigger_36_out8_bang();
        this->trigger_36_out7_bang();
        this->trigger_36_out6_bang();
        this->trigger_36_out5_bang();
        this->trigger_36_out4_bang();
        this->trigger_36_out3_bang();
        this->trigger_36_out2_bang();
        this->trigger_36_out1_bang();
    }
    
    void groove_02_stop_bang() {
        this->groove_02_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
        this->groove_02_incomingChange = 0;
    }
    
    void midiouthelper_midiout_set(number ) {}
    
    void groove_02_perform(
        number rate_auto,
        number begin,
        number end,
        SampleValue * out1,
        SampleValue * sync,
        Index n
    ) {
        RNBO_UNUSED(out1);
        auto __groove_02_crossfade = this->groove_02_crossfade;
        auto __groove_02_loop = this->groove_02_loop;
        auto __groove_02_playStatus = this->groove_02_playStatus;
        auto __groove_02_readIndex = this->groove_02_readIndex;
        auto __groove_02_incomingChange = this->groove_02_incomingChange;
        auto __groove_02_changeIncomingInSamples = this->groove_02_changeIncomingInSamples;
        auto __groove_02_buffer = this->groove_02_buffer;
        SampleArray<1> out = {out1};
        SampleIndex bufferLength = (SampleIndex)(__groove_02_buffer->getSize());
        Index i = 0;
    
        if (bufferLength > 1) {
            auto effectiveChannels = this->minimum(__groove_02_buffer->getChannels(), 1);
            number srMult = 0.001 * __groove_02_buffer->getSampleRate();
            number srInv = (number)1 / this->samplerate();
            number rateMult = __groove_02_buffer->getSampleRate() * srInv;
    
            for (; i < n; i++) {
                Index channel = 0;
                number offset = 0;
                number loopMin = begin * srMult;
                loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                number loopMax = (end < 0 ? bufferLength : end * srMult);
                loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
    
                if (loopMin >= loopMax) {
                    offset = loopMax;
                    loopMax = bufferLength;
                    loopMin -= offset;
                }
    
                number loopLength = loopMax - loopMin;
                number currentRate = rate_auto * rateMult;
                number currentSync = 0;
    
                if (__groove_02_changeIncomingInSamples > 0) {
                    __groove_02_changeIncomingInSamples--;
    
                    if (__groove_02_changeIncomingInSamples <= 0) {
                        if (__groove_02_incomingChange == 1) {
                            if (currentRate < 0) {
                                __groove_02_readIndex = loopMax - 1;
                            } else {
                                __groove_02_readIndex = loopMin;
                            }
    
                            __groove_02_playStatus = 1;
                        } else if (__groove_02_incomingChange == 0) {
                            __groove_02_playStatus = 0;
                        }
    
                        __groove_02_incomingChange = 2;
                    }
                }
    
                if (loopLength > 0) {
                    if (currentRate != 0) {
                        if (__groove_02_playStatus == 1) {
                            if ((bool)(__groove_02_loop)) {
                                while (__groove_02_readIndex < loopMin) {
                                    __groove_02_readIndex += loopLength;
                                }
    
                                while (__groove_02_readIndex >= loopMax) {
                                    __groove_02_readIndex -= loopLength;
                                }
                            } else if (__groove_02_readIndex >= loopMax || __groove_02_readIndex < loopMin) {
                                __groove_02_playStatus = 0;
                                break;
                            }
    
                            for (; channel < effectiveChannels; channel++) {
                                number outSample = (currentRate == 1 ? this->groove_02_getSample((Index)(channel), trunc(__groove_02_readIndex), offset, bufferLength) : this->groove_02_interpolatedSample(
                                    (Index)(channel),
                                    __groove_02_readIndex,
                                    loopMax,
                                    loopLength,
                                    offset,
                                    bufferLength
                                ));
    
                                if (__groove_02_crossfade > 0) {
                                    out[(Index)channel][(Index)i] = this->groove_02_crossfadedSample(
                                        outSample,
                                        __groove_02_readIndex,
                                        (Index)(channel),
                                        currentRate,
                                        loopMin,
                                        loopMax,
                                        loopLength,
                                        offset,
                                        bufferLength
                                    );
                                } else {
                                    out[(Index)channel][(Index)i] = outSample;
                                }
                            }
    
                            {
                                currentSync = this->groove_02_calcSync(__groove_02_readIndex, offset, loopMin, loopLength, bufferLength, srInv);
                            }
    
                            __groove_02_readIndex += currentRate;
                        }
                    } else {
                        if (__groove_02_playStatus == 1) {
                            currentSync = this->groove_02_calcSync(__groove_02_readIndex, offset, loopMin, loopLength, bufferLength, srInv);
                        }
                    }
                }
    
                {
                    sync[(Index)i] = currentSync;
                }
    
                for (; channel < 1; channel++) {
                    if (__groove_02_playStatus <= 0)
                        sync[(Index)i] = 0;
    
                    out[(Index)channel][(Index)i] = 0;
                }
            }
        }
    
        for (; i < n; i++) {
            if (__groove_02_playStatus <= 0)
                sync[(Index)i] = 0;
    
            for (number channel = 0; channel < 1; channel++) {
                out[(Index)channel][(Index)i] = 0;
            }
        }
    
        this->groove_02_changeIncomingInSamples = __groove_02_changeIncomingInSamples;
        this->groove_02_incomingChange = __groove_02_incomingChange;
        this->groove_02_readIndex = __groove_02_readIndex;
        this->groove_02_playStatus = __groove_02_playStatus;
    }
    
    void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void p_16_perform(const SampleValue * in1, SampleValue * out1, Index n) {
        // subpatcher: rand-filter
        ConstSampleArray<1> ins = {in1};
    
        SampleArray<1> outs = {out1};
        this->p_16->process(ins, 1, outs, 1, n);
    }
    
    void p_17_perform(const SampleValue * in1, SampleValue * out1, SampleValue * out2, Index n) {
        // subpatcher: rand-placement
        ConstSampleArray<1> ins = {in1};
    
        SampleArray<2> outs = {out1, out2};
        this->p_17->process(ins, 1, outs, 2, n);
    }
    
    void numbertilde_19_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_19_currentIntervalInSamples = this->numbertilde_19_currentIntervalInSamples;
        auto __numbertilde_19_lastValue = this->numbertilde_19_lastValue;
        auto __numbertilde_19_currentInterval = this->numbertilde_19_currentInterval;
        auto __numbertilde_19_rampInSamples = this->numbertilde_19_rampInSamples;
        auto __numbertilde_19_outValue = this->numbertilde_19_outValue;
        auto __numbertilde_19_currentMode = this->numbertilde_19_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_19_currentMode == 0) {
                output[(Index)i] = this->numbertilde_19_smooth_next(
                    __numbertilde_19_outValue,
                    __numbertilde_19_rampInSamples,
                    __numbertilde_19_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_19_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_19_lastValue && __numbertilde_19_currentInterval <= 0) {
            __numbertilde_19_currentInterval = __numbertilde_19_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_19_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("fixedgrain/number~_obj-31"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_19_currentInterval = __numbertilde_19_currentInterval;
        this->numbertilde_19_lastValue = __numbertilde_19_lastValue;
    }
    
    void p_18_perform(SampleValue * out1, Index n) {
        // subpatcher: rand-envelope
        SampleArray<1> outs = {out1};
    
        this->p_18->process(nullptr, 0, outs, 1, n);
    }
    
    void dspexpr_06_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void dspexpr_04_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signaladder_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_19_perform(Index n) {
        // subpatcher: rand-lengthanddelay
        this->p_19->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_20_perform(Index n) {
        // subpatcher: rand-volume
        this->p_20->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_21_perform(Index n) {
        // subpatcher: rand-pitchspeed
        this->p_21->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_22_perform(Index n) {
        // subpatcher: rand-reverse
        this->p_22->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void voice_02_muteout_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_29_mute_set(v);
    }
    
    void voice_02_mute_bang_bang() {
        this->voice_02_muteout_set({this->voice(), 1});
    }
    
    void p_18_out2_bang_bang() {
        this->voice_02_mute_bang_bang();
    }
    
    void numberobj_191_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_191_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_191_value = localvalue;
    }
    
    void numberobj_192_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_192_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_192_value = localvalue;
    }
    
    void numberobj_193_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_193_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_193_value = localvalue;
    }
    
    number groove_02_getSample(
        Index channel,
        SampleIndex index,
        SampleIndex offset,
        SampleIndex bufferLength
    ) {
        if (offset > 0) {
            index += offset;
    
            if (index >= bufferLength)
                index -= bufferLength;
        }
    
        return this->groove_02_buffer->getSample(channel, index);
    }
    
    number groove_02_interpolatedSample(
        Index channel,
        number index,
        SampleIndex end,
        SampleIndex length,
        SampleIndex offset,
        SampleIndex bufferLength
    ) {
        SampleIndex index1 = (SampleIndex)(trunc(index));
        number i_x = index - index1;
        number i_1px = 1. + i_x;
        number i_1mx = 1. - i_x;
        number i_2mx = 2. - i_x;
        number i_a = i_1mx * i_2mx;
        number i_b = i_1px * i_x;
        number i_p1 = -.1666667 * i_a * i_x;
        number i_p2 = .5 * i_1px * i_a;
        number i_p3 = .5 * i_b * i_2mx;
        number i_p4 = -.1666667 * i_b * i_1mx;
        SampleIndex index2 = (SampleIndex)(index1 + 1);
    
        if (index2 >= end)
            index2 -= length;
    
        SampleIndex index3 = (SampleIndex)(index1 + 2);
    
        if (index3 >= end)
            index3 -= length;
    
        SampleIndex index4 = (SampleIndex)(index1 + 3);
    
        if (index4 >= end)
            index4 -= length;
    
        return this->groove_02_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_02_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_02_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_02_getSample(channel, index4, offset, bufferLength) * i_p4;
    }
    
    number groove_02_crossfadedSample(
        SampleValue out,
        number readIndex,
        Index channel,
        number rate,
        number loopMin,
        number loopMax,
        number loopLength,
        number offset,
        number bufferLength
    ) {
        auto crossFadeStart1 = this->maximum(loopMin - this->groove_02_crossfadeInSamples, 0);
        auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_02_crossfadeInSamples, bufferLength);
        number crossFadeStart2 = crossFadeStart1 + loopLength;
        auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
        number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
    
        if (crossFadeLength > 0) {
            crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
            number diff = -1;
            number addFactor = 0;
    
            if (readIndex >= crossFadeStart2) {
                diff = readIndex - crossFadeStart2;
                addFactor = -1;
            } else if (readIndex < crossFadeEnd1) {
                diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                addFactor = 1;
            }
    
            if (diff >= 0) {
                number out2ReadIndex = readIndex + loopLength * addFactor;
                number out2 = (rate == 1 ? this->groove_02_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_02_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                number out2Factor = diff / crossFadeLength;
                number out1Factor = 1 - out2Factor;
                return out * out1Factor + out2 * out2Factor;
            }
        }
    
        return out;
    }
    
    number groove_02_calcSync(
        number readIndex,
        number offset,
        number loopMin,
        number loopLength,
        SampleIndex bufferLength,
        number srInv
    ) {
        RNBO_UNUSED(loopLength);
        RNBO_UNUSED(loopMin);
    
        {
            if (offset > 0) {
                readIndex += offset;
    
                if (readIndex >= bufferLength)
                    readIndex -= bufferLength;
            }
    
            {
                {
                    {
                        return readIndex * srInv * 1000;
                    }
                }
            }
        }
    }
    
    void groove_02_dspsetup(bool force) {
        if ((bool)(this->groove_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->groove_02_crossfadeInSamples = this->mstosamps(this->groove_02_crossfade);
        this->groove_02_setupDone = true;
    }
    
    void numberobj_191_init() {
        this->numberobj_191_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("fixedgrain/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_191_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_191_value;
    }
    
    void numberobj_191_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_191_value_set(preset["value"]);
    }
    
    void numberobj_192_init() {
        this->numberobj_192_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("fixedgrain/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_192_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_192_value;
    }
    
    void numberobj_192_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_192_value_set(preset["value"]);
    }
    
    number numbertilde_19_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_19_smooth_d_prev);
        this->numbertilde_19_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_19_smooth_d_dspsetup() {
        this->numbertilde_19_smooth_d_reset();
    }
    
    void numbertilde_19_smooth_d_reset() {
        this->numbertilde_19_smooth_d_prev = 0;
    }
    
    number numbertilde_19_smooth_next(number x, number up, number down) {
        if (this->numbertilde_19_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_19_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_19_smooth_index = _up;
                this->numbertilde_19_smooth_increment = (x - this->numbertilde_19_smooth_prev) / _up;
            } else if (x < this->numbertilde_19_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_19_smooth_index = _down;
                this->numbertilde_19_smooth_increment = (x - this->numbertilde_19_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_19_smooth_index > 0) {
            this->numbertilde_19_smooth_prev += this->numbertilde_19_smooth_increment;
            this->numbertilde_19_smooth_index -= 1;
        } else {
            this->numbertilde_19_smooth_prev = x;
        }
    
        return this->numbertilde_19_smooth_prev;
    }
    
    void numbertilde_19_smooth_reset() {
        this->numbertilde_19_smooth_prev = 0;
        this->numbertilde_19_smooth_index = 0;
        this->numbertilde_19_smooth_increment = 0;
        this->numbertilde_19_smooth_d_reset();
    }
    
    void numbertilde_19_init() {
        this->numbertilde_19_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("fixedgrain/number~_obj-31"), 1, this->_currentTime);
    }
    
    void numbertilde_19_dspsetup(bool force) {
        if ((bool)(this->numbertilde_19_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_19_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_19_currentInterval = this->numbertilde_19_currentIntervalInSamples;
        this->numbertilde_19_rampInSamples = this->mstosamps(this->numbertilde_19_ramp);
        this->numbertilde_19_setupDone = true;
        this->numbertilde_19_smooth_d_dspsetup();
    }
    
    void numberobj_193_init() {
        this->numberobj_193_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("fixedgrain/number_obj-7"), 1, this->_currentTime);
    }
    
    void numberobj_193_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_193_value;
    }
    
    void numberobj_193_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_193_value_set(preset["value"]);
    }
    
    void midiouthelper_sendMidi(number v) {
        this->midiouthelper_midiout_set(v);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        dspexpr_05_in1 = 0;
        dspexpr_05_in2 = 0;
        p_16_target = 0;
        p_17_target = 0;
        groove_02_rate_auto = 1;
        groove_02_begin = 0;
        groove_02_end = -1;
        groove_02_loop = 1;
        groove_02_crossfade = 0;
        numberobj_191_value = 0;
        numberobj_191_value_setter(numberobj_191_value);
        delay_01_time = 500;
        delay_01_delayall = 1;
        dspexpr_06_in1 = 0;
        dspexpr_06_in2 = 0;
        numberobj_192_value = 0;
        numberobj_192_value_setter(numberobj_192_value);
        numbertilde_19_input_number = 0;
        numbertilde_19_ramp = 0;
        numberobj_193_value = 0;
        numberobj_193_value_setter(numberobj_193_value);
        p_18_target = 0;
        p_19_target = 0;
        p_20_target = 0;
        voice_02_mute_number = 0;
        p_21_target = 0;
        p_22_target = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        groove_02_readIndex = 0;
        groove_02_playStatus = 0;
        groove_02_changeIncomingInSamples = 0;
        groove_02_incomingChange = 2;
        groove_02_crossfadeInSamples = 0;
        groove_02_setupDone = false;
        numberobj_191_currentFormat = 6;
        numberobj_191_lastValue = 0;
        numberobj_192_currentFormat = 6;
        numberobj_192_lastValue = 0;
        numbertilde_19_currentInterval = 0;
        numbertilde_19_currentIntervalInSamples = 0;
        numbertilde_19_lastValue = 0;
        numbertilde_19_outValue = 0;
        numbertilde_19_rampInSamples = 0;
        numbertilde_19_currentMode = 0;
        numbertilde_19_smooth_d_prev = 0;
        numbertilde_19_smooth_prev = 0;
        numbertilde_19_smooth_index = 0;
        numbertilde_19_smooth_increment = 0;
        numbertilde_19_setupDone = false;
        numberobj_193_currentFormat = 6;
        numberobj_193_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 0;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        number dspexpr_05_in1;
        number dspexpr_05_in2;
        number p_16_target;
        number p_17_target;
        number groove_02_rate_auto;
        number groove_02_begin;
        number groove_02_end;
        number groove_02_loop;
        number groove_02_crossfade;
        number numberobj_191_value;
        number delay_01_time;
        number delay_01_delayall;
        number dspexpr_06_in1;
        number dspexpr_06_in2;
        number numberobj_192_value;
        number numbertilde_19_input_number;
        number numbertilde_19_ramp;
        number numberobj_193_value;
        number p_18_target;
        number p_19_target;
        number p_20_target;
        number voice_02_mute_number;
        number p_21_target;
        number p_22_target;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Float32BufferRef groove_02_buffer;
        number groove_02_readIndex;
        Index groove_02_playStatus;
        SampleIndex groove_02_changeIncomingInSamples;
        Int groove_02_incomingChange;
        SampleIndex groove_02_crossfadeInSamples;
        bool groove_02_setupDone;
        Int numberobj_191_currentFormat;
        number numberobj_191_lastValue;
        Int numberobj_192_currentFormat;
        number numberobj_192_lastValue;
        SampleIndex numbertilde_19_currentInterval;
        SampleIndex numbertilde_19_currentIntervalInSamples;
        number numbertilde_19_lastValue;
        number numbertilde_19_outValue;
        number numbertilde_19_rampInSamples;
        Int numbertilde_19_currentMode;
        number numbertilde_19_smooth_d_prev;
        number numbertilde_19_smooth_prev;
        number numbertilde_19_smooth_index;
        number numbertilde_19_smooth_increment;
        bool numbertilde_19_setupDone;
        Int numberobj_193_currentFormat;
        number numberobj_193_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_109* p_16;
        RNBOSubpatcher_110* p_17;
        RNBOSubpatcher_111* p_18;
        RNBOSubpatcher_112* p_19;
        RNBOSubpatcher_113* p_20;
        RNBOSubpatcher_114* p_21;
        RNBOSubpatcher_115* p_22;
    
};

class RNBOSubpatcher_123 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_123()
    {
    }
    
    ~RNBOSubpatcher_123()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort/message_obj-75") == objectId)
                this->message_73_listin_number_set(payload);
    
            if (TAG("sort/message_obj-144") == objectId)
                this->message_74_listin_number_set(payload);
    
            if (TAG("sort/message_obj-104") == objectId)
                this->message_75_listin_number_set(payload);
    
            if (TAG("sort/message_obj-146") == objectId)
                this->message_76_listin_number_set(payload);
    
            if (TAG("sort/message_obj-68") == objectId)
                this->message_77_listin_number_set(payload);
    
            if (TAG("sort/message_obj-94") == objectId)
                this->message_78_listin_number_set(payload);
    
            if (TAG("sort/message_obj-6") == objectId)
                this->message_79_listin_number_set(payload);
    
            if (TAG("sort/message_obj-78") == objectId)
                this->message_80_listin_number_set(payload);
    
            if (TAG("sort/message_obj-74") == objectId)
                this->message_81_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("sort/number_obj-5") == objectId)
                this->numberobj_194_valin_set(payload);
    
            if (TAG("sort/toggle_obj-91") == objectId)
                this->toggle_05_valin_set(payload);
    
            if (TAG("sort/number_obj-58") == objectId)
                this->numberobj_195_valin_set(payload);
    
            if (TAG("sort/number_obj-3") == objectId)
                this->numberobj_196_valin_set(payload);
    
            if (TAG("sort/number_obj-7") == objectId)
                this->numberobj_197_valin_set(payload);
    
            if (TAG("sort/number_obj-8") == objectId)
                this->numberobj_198_valin_set(payload);
    
            if (TAG("sort/number_obj-9") == objectId)
                this->numberobj_199_valin_set(payload);
    
            if (TAG("sort/number_obj-10") == objectId)
                this->numberobj_200_valin_set(payload);
    
            if (TAG("sort/number_obj-15") == objectId)
                this->numberobj_201_valin_set(payload);
    
            if (TAG("sort/number_obj-14") == objectId)
                this->numberobj_202_valin_set(payload);
    
            if (TAG("sort/number_obj-13") == objectId)
                this->numberobj_203_valin_set(payload);
    
            if (TAG("sort/number_obj-12") == objectId)
                this->numberobj_204_valin_set(payload);
    
            if (TAG("sort/number_obj-11") == objectId)
                this->numberobj_205_valin_set(payload);
    
            if (TAG("sort/number_obj-25") == objectId)
                this->numberobj_206_valin_set(payload);
    
            if (TAG("sort/number_obj-24") == objectId)
                this->numberobj_207_valin_set(payload);
    
            if (TAG("sort/number_obj-23") == objectId)
                this->numberobj_208_valin_set(payload);
    
            if (TAG("sort/number_obj-22") == objectId)
                this->numberobj_209_valin_set(payload);
    
            if (TAG("sort/number_obj-21") == objectId)
                this->numberobj_210_valin_set(payload);
    
            if (TAG("sort/number_obj-20") == objectId)
                this->numberobj_211_valin_set(payload);
    
            if (TAG("sort/number_obj-19") == objectId)
                this->numberobj_212_valin_set(payload);
    
            if (TAG("sort/number_obj-18") == objectId)
                this->numberobj_213_valin_set(payload);
    
            if (TAG("sort/number_obj-17") == objectId)
                this->numberobj_214_valin_set(payload);
    
            if (TAG("sort/number_obj-16") == objectId)
                this->numberobj_215_valin_set(payload);
    
            if (TAG("sort/number_obj-45") == objectId)
                this->numberobj_216_valin_set(payload);
    
            if (TAG("sort/number_obj-44") == objectId)
                this->numberobj_217_valin_set(payload);
    
            if (TAG("sort/number_obj-43") == objectId)
                this->numberobj_218_valin_set(payload);
    
            if (TAG("sort/number_obj-42") == objectId)
                this->numberobj_219_valin_set(payload);
    
            if (TAG("sort/number_obj-41") == objectId)
                this->numberobj_220_valin_set(payload);
    
            if (TAG("sort/number_obj-40") == objectId)
                this->numberobj_221_valin_set(payload);
    
            if (TAG("sort/number_obj-39") == objectId)
                this->numberobj_222_valin_set(payload);
    
            if (TAG("sort/number_obj-38") == objectId)
                this->numberobj_223_valin_set(payload);
    
            if (TAG("sort/number_obj-37") == objectId)
                this->numberobj_224_valin_set(payload);
    
            if (TAG("sort/number_obj-36") == objectId)
                this->numberobj_225_valin_set(payload);
    
            if (TAG("sort/number_obj-35") == objectId)
                this->numberobj_226_valin_set(payload);
    
            if (TAG("sort/number_obj-34") == objectId)
                this->numberobj_227_valin_set(payload);
    
            if (TAG("sort/number_obj-33") == objectId)
                this->numberobj_228_valin_set(payload);
    
            if (TAG("sort/number_obj-32") == objectId)
                this->numberobj_229_valin_set(payload);
    
            if (TAG("sort/number_obj-31") == objectId)
                this->numberobj_230_valin_set(payload);
    
            if (TAG("sort/number_obj-30") == objectId)
                this->numberobj_231_valin_set(payload);
    
            if (TAG("sort/number_obj-29") == objectId)
                this->numberobj_232_valin_set(payload);
    
            if (TAG("sort/number_obj-28") == objectId)
                this->numberobj_233_valin_set(payload);
    
            if (TAG("sort/number_obj-27") == objectId)
                this->numberobj_234_valin_set(payload);
    
            if (TAG("sort/number_obj-26") == objectId)
                this->numberobj_235_valin_set(payload);
    
            if (TAG("sort/number_obj-55") == objectId)
                this->numberobj_236_valin_set(payload);
    
            if (TAG("sort/number_obj-54") == objectId)
                this->numberobj_237_valin_set(payload);
    
            if (TAG("sort/number_obj-53") == objectId)
                this->numberobj_238_valin_set(payload);
    
            if (TAG("sort/number_obj-52") == objectId)
                this->numberobj_239_valin_set(payload);
    
            if (TAG("sort/number_obj-51") == objectId)
                this->numberobj_240_valin_set(payload);
    
            if (TAG("sort/number_obj-50") == objectId)
                this->numberobj_241_valin_set(payload);
    
            if (TAG("sort/number_obj-49") == objectId)
                this->numberobj_242_valin_set(payload);
    
            if (TAG("sort/number_obj-48") == objectId)
                this->numberobj_243_valin_set(payload);
    
            if (TAG("sort/number_obj-47") == objectId)
                this->numberobj_244_valin_set(payload);
    
            if (TAG("sort/number_obj-46") == objectId)
                this->numberobj_245_valin_set(payload);
    
            if (TAG("sort/number_obj-140") == objectId)
                this->numberobj_246_valin_set(payload);
    
            if (TAG("sort/number_obj-139") == objectId)
                this->numberobj_247_valin_set(payload);
    
            if (TAG("sort/number_obj-138") == objectId)
                this->numberobj_248_valin_set(payload);
    
            if (TAG("sort/number_obj-137") == objectId)
                this->numberobj_249_valin_set(payload);
    
            if (TAG("sort/number_obj-136") == objectId)
                this->numberobj_250_valin_set(payload);
    
            if (TAG("sort/number_obj-135") == objectId)
                this->numberobj_251_valin_set(payload);
    
            if (TAG("sort/number_obj-134") == objectId)
                this->numberobj_252_valin_set(payload);
    
            if (TAG("sort/number_obj-133") == objectId)
                this->numberobj_253_valin_set(payload);
    
            if (TAG("sort/number_obj-132") == objectId)
                this->numberobj_254_valin_set(payload);
    
            if (TAG("sort/number_obj-131") == objectId)
                this->numberobj_255_valin_set(payload);
    
            if (TAG("sort/number_obj-130") == objectId)
                this->numberobj_256_valin_set(payload);
    
            if (TAG("sort/number_obj-129") == objectId)
                this->numberobj_257_valin_set(payload);
    
            if (TAG("sort/number_obj-128") == objectId)
                this->numberobj_258_valin_set(payload);
    
            if (TAG("sort/number_obj-127") == objectId)
                this->numberobj_259_valin_set(payload);
    
            if (TAG("sort/number_obj-126") == objectId)
                this->numberobj_260_valin_set(payload);
    
            if (TAG("sort/number_obj-125") == objectId)
                this->numberobj_261_valin_set(payload);
    
            if (TAG("sort/number_obj-124") == objectId)
                this->numberobj_262_valin_set(payload);
    
            if (TAG("sort/number_obj-123") == objectId)
                this->numberobj_263_valin_set(payload);
    
            if (TAG("sort/number_obj-122") == objectId)
                this->numberobj_264_valin_set(payload);
    
            if (TAG("sort/number_obj-121") == objectId)
                this->numberobj_265_valin_set(payload);
    
            if (TAG("sort/number_obj-120") == objectId)
                this->numberobj_266_valin_set(payload);
    
            if (TAG("sort/number_obj-119") == objectId)
                this->numberobj_267_valin_set(payload);
    
            if (TAG("sort/number_obj-118") == objectId)
                this->numberobj_268_valin_set(payload);
    
            if (TAG("sort/number_obj-117") == objectId)
                this->numberobj_269_valin_set(payload);
    
            if (TAG("sort/number_obj-116") == objectId)
                this->numberobj_270_valin_set(payload);
    
            if (TAG("sort/number_obj-115") == objectId)
                this->numberobj_271_valin_set(payload);
    
            if (TAG("sort/number_obj-114") == objectId)
                this->numberobj_272_valin_set(payload);
    
            if (TAG("sort/number_obj-113") == objectId)
                this->numberobj_273_valin_set(payload);
    
            if (TAG("sort/number_obj-112") == objectId)
                this->numberobj_274_valin_set(payload);
    
            if (TAG("sort/number_obj-111") == objectId)
                this->numberobj_275_valin_set(payload);
    
            if (TAG("sort/number_obj-110") == objectId)
                this->numberobj_276_valin_set(payload);
    
            if (TAG("sort/number_obj-109") == objectId)
                this->numberobj_277_valin_set(payload);
    
            if (TAG("sort/number_obj-106") == objectId)
                this->numberobj_278_valin_set(payload);
    
            if (TAG("sort/number_obj-105") == objectId)
                this->numberobj_279_valin_set(payload);
    
            if (TAG("sort/number_obj-103") == objectId)
                this->numberobj_280_valin_set(payload);
    
            if (TAG("sort/number_obj-101") == objectId)
                this->numberobj_281_valin_set(payload);
    
            if (TAG("sort/number_obj-100") == objectId)
                this->numberobj_282_valin_set(payload);
    
            if (TAG("sort/number_obj-99") == objectId)
                this->numberobj_283_valin_set(payload);
    
            if (TAG("sort/number_obj-98") == objectId)
                this->numberobj_284_valin_set(payload);
    
            if (TAG("sort/number_obj-97") == objectId)
                this->numberobj_285_valin_set(payload);
    
            if (TAG("sort/number_obj-96") == objectId)
                this->numberobj_286_valin_set(payload);
    
            if (TAG("sort/number_obj-95") == objectId)
                this->numberobj_287_valin_set(payload);
    
            if (TAG("sort/number_obj-93") == objectId)
                this->numberobj_288_valin_set(payload);
    
            if (TAG("sort/number_obj-89") == objectId)
                this->numberobj_289_valin_set(payload);
    
            if (TAG("sort/number_obj-87") == objectId)
                this->numberobj_290_valin_set(payload);
    
            if (TAG("sort/number_obj-83") == objectId)
                this->numberobj_291_valin_set(payload);
    
            if (TAG("sort/number_obj-81") == objectId)
                this->numberobj_292_valin_set(payload);
    
            if (TAG("sort/number_obj-80") == objectId)
                this->numberobj_293_valin_set(payload);
    
            if (TAG("sort/number_obj-79") == objectId)
                this->numberobj_294_valin_set(payload);
    
            if (TAG("sort/number_obj-65") == objectId)
                this->numberobj_295_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("sort/number_obj-5") == objectId)
                this->numberobj_194_format_set(payload);
    
            if (TAG("sort/number_obj-58") == objectId)
                this->numberobj_195_format_set(payload);
    
            if (TAG("sort/number_obj-3") == objectId)
                this->numberobj_196_format_set(payload);
    
            if (TAG("sort/number_obj-7") == objectId)
                this->numberobj_197_format_set(payload);
    
            if (TAG("sort/number_obj-8") == objectId)
                this->numberobj_198_format_set(payload);
    
            if (TAG("sort/number_obj-9") == objectId)
                this->numberobj_199_format_set(payload);
    
            if (TAG("sort/number_obj-10") == objectId)
                this->numberobj_200_format_set(payload);
    
            if (TAG("sort/number_obj-15") == objectId)
                this->numberobj_201_format_set(payload);
    
            if (TAG("sort/number_obj-14") == objectId)
                this->numberobj_202_format_set(payload);
    
            if (TAG("sort/number_obj-13") == objectId)
                this->numberobj_203_format_set(payload);
    
            if (TAG("sort/number_obj-12") == objectId)
                this->numberobj_204_format_set(payload);
    
            if (TAG("sort/number_obj-11") == objectId)
                this->numberobj_205_format_set(payload);
    
            if (TAG("sort/number_obj-25") == objectId)
                this->numberobj_206_format_set(payload);
    
            if (TAG("sort/number_obj-24") == objectId)
                this->numberobj_207_format_set(payload);
    
            if (TAG("sort/number_obj-23") == objectId)
                this->numberobj_208_format_set(payload);
    
            if (TAG("sort/number_obj-22") == objectId)
                this->numberobj_209_format_set(payload);
    
            if (TAG("sort/number_obj-21") == objectId)
                this->numberobj_210_format_set(payload);
    
            if (TAG("sort/number_obj-20") == objectId)
                this->numberobj_211_format_set(payload);
    
            if (TAG("sort/number_obj-19") == objectId)
                this->numberobj_212_format_set(payload);
    
            if (TAG("sort/number_obj-18") == objectId)
                this->numberobj_213_format_set(payload);
    
            if (TAG("sort/number_obj-17") == objectId)
                this->numberobj_214_format_set(payload);
    
            if (TAG("sort/number_obj-16") == objectId)
                this->numberobj_215_format_set(payload);
    
            if (TAG("sort/number_obj-45") == objectId)
                this->numberobj_216_format_set(payload);
    
            if (TAG("sort/number_obj-44") == objectId)
                this->numberobj_217_format_set(payload);
    
            if (TAG("sort/number_obj-43") == objectId)
                this->numberobj_218_format_set(payload);
    
            if (TAG("sort/number_obj-42") == objectId)
                this->numberobj_219_format_set(payload);
    
            if (TAG("sort/number_obj-41") == objectId)
                this->numberobj_220_format_set(payload);
    
            if (TAG("sort/number_obj-40") == objectId)
                this->numberobj_221_format_set(payload);
    
            if (TAG("sort/number_obj-39") == objectId)
                this->numberobj_222_format_set(payload);
    
            if (TAG("sort/number_obj-38") == objectId)
                this->numberobj_223_format_set(payload);
    
            if (TAG("sort/number_obj-37") == objectId)
                this->numberobj_224_format_set(payload);
    
            if (TAG("sort/number_obj-36") == objectId)
                this->numberobj_225_format_set(payload);
    
            if (TAG("sort/number_obj-35") == objectId)
                this->numberobj_226_format_set(payload);
    
            if (TAG("sort/number_obj-34") == objectId)
                this->numberobj_227_format_set(payload);
    
            if (TAG("sort/number_obj-33") == objectId)
                this->numberobj_228_format_set(payload);
    
            if (TAG("sort/number_obj-32") == objectId)
                this->numberobj_229_format_set(payload);
    
            if (TAG("sort/number_obj-31") == objectId)
                this->numberobj_230_format_set(payload);
    
            if (TAG("sort/number_obj-30") == objectId)
                this->numberobj_231_format_set(payload);
    
            if (TAG("sort/number_obj-29") == objectId)
                this->numberobj_232_format_set(payload);
    
            if (TAG("sort/number_obj-28") == objectId)
                this->numberobj_233_format_set(payload);
    
            if (TAG("sort/number_obj-27") == objectId)
                this->numberobj_234_format_set(payload);
    
            if (TAG("sort/number_obj-26") == objectId)
                this->numberobj_235_format_set(payload);
    
            if (TAG("sort/number_obj-55") == objectId)
                this->numberobj_236_format_set(payload);
    
            if (TAG("sort/number_obj-54") == objectId)
                this->numberobj_237_format_set(payload);
    
            if (TAG("sort/number_obj-53") == objectId)
                this->numberobj_238_format_set(payload);
    
            if (TAG("sort/number_obj-52") == objectId)
                this->numberobj_239_format_set(payload);
    
            if (TAG("sort/number_obj-51") == objectId)
                this->numberobj_240_format_set(payload);
    
            if (TAG("sort/number_obj-50") == objectId)
                this->numberobj_241_format_set(payload);
    
            if (TAG("sort/number_obj-49") == objectId)
                this->numberobj_242_format_set(payload);
    
            if (TAG("sort/number_obj-48") == objectId)
                this->numberobj_243_format_set(payload);
    
            if (TAG("sort/number_obj-47") == objectId)
                this->numberobj_244_format_set(payload);
    
            if (TAG("sort/number_obj-46") == objectId)
                this->numberobj_245_format_set(payload);
    
            if (TAG("sort/number_obj-140") == objectId)
                this->numberobj_246_format_set(payload);
    
            if (TAG("sort/number_obj-139") == objectId)
                this->numberobj_247_format_set(payload);
    
            if (TAG("sort/number_obj-138") == objectId)
                this->numberobj_248_format_set(payload);
    
            if (TAG("sort/number_obj-137") == objectId)
                this->numberobj_249_format_set(payload);
    
            if (TAG("sort/number_obj-136") == objectId)
                this->numberobj_250_format_set(payload);
    
            if (TAG("sort/number_obj-135") == objectId)
                this->numberobj_251_format_set(payload);
    
            if (TAG("sort/number_obj-134") == objectId)
                this->numberobj_252_format_set(payload);
    
            if (TAG("sort/number_obj-133") == objectId)
                this->numberobj_253_format_set(payload);
    
            if (TAG("sort/number_obj-132") == objectId)
                this->numberobj_254_format_set(payload);
    
            if (TAG("sort/number_obj-131") == objectId)
                this->numberobj_255_format_set(payload);
    
            if (TAG("sort/number_obj-130") == objectId)
                this->numberobj_256_format_set(payload);
    
            if (TAG("sort/number_obj-129") == objectId)
                this->numberobj_257_format_set(payload);
    
            if (TAG("sort/number_obj-128") == objectId)
                this->numberobj_258_format_set(payload);
    
            if (TAG("sort/number_obj-127") == objectId)
                this->numberobj_259_format_set(payload);
    
            if (TAG("sort/number_obj-126") == objectId)
                this->numberobj_260_format_set(payload);
    
            if (TAG("sort/number_obj-125") == objectId)
                this->numberobj_261_format_set(payload);
    
            if (TAG("sort/number_obj-124") == objectId)
                this->numberobj_262_format_set(payload);
    
            if (TAG("sort/number_obj-123") == objectId)
                this->numberobj_263_format_set(payload);
    
            if (TAG("sort/number_obj-122") == objectId)
                this->numberobj_264_format_set(payload);
    
            if (TAG("sort/number_obj-121") == objectId)
                this->numberobj_265_format_set(payload);
    
            if (TAG("sort/number_obj-120") == objectId)
                this->numberobj_266_format_set(payload);
    
            if (TAG("sort/number_obj-119") == objectId)
                this->numberobj_267_format_set(payload);
    
            if (TAG("sort/number_obj-118") == objectId)
                this->numberobj_268_format_set(payload);
    
            if (TAG("sort/number_obj-117") == objectId)
                this->numberobj_269_format_set(payload);
    
            if (TAG("sort/number_obj-116") == objectId)
                this->numberobj_270_format_set(payload);
    
            if (TAG("sort/number_obj-115") == objectId)
                this->numberobj_271_format_set(payload);
    
            if (TAG("sort/number_obj-114") == objectId)
                this->numberobj_272_format_set(payload);
    
            if (TAG("sort/number_obj-113") == objectId)
                this->numberobj_273_format_set(payload);
    
            if (TAG("sort/number_obj-112") == objectId)
                this->numberobj_274_format_set(payload);
    
            if (TAG("sort/number_obj-111") == objectId)
                this->numberobj_275_format_set(payload);
    
            if (TAG("sort/number_obj-110") == objectId)
                this->numberobj_276_format_set(payload);
    
            if (TAG("sort/number_obj-109") == objectId)
                this->numberobj_277_format_set(payload);
    
            if (TAG("sort/number_obj-106") == objectId)
                this->numberobj_278_format_set(payload);
    
            if (TAG("sort/number_obj-105") == objectId)
                this->numberobj_279_format_set(payload);
    
            if (TAG("sort/number_obj-103") == objectId)
                this->numberobj_280_format_set(payload);
    
            if (TAG("sort/number_obj-101") == objectId)
                this->numberobj_281_format_set(payload);
    
            if (TAG("sort/number_obj-100") == objectId)
                this->numberobj_282_format_set(payload);
    
            if (TAG("sort/number_obj-99") == objectId)
                this->numberobj_283_format_set(payload);
    
            if (TAG("sort/number_obj-98") == objectId)
                this->numberobj_284_format_set(payload);
    
            if (TAG("sort/number_obj-97") == objectId)
                this->numberobj_285_format_set(payload);
    
            if (TAG("sort/number_obj-96") == objectId)
                this->numberobj_286_format_set(payload);
    
            if (TAG("sort/number_obj-95") == objectId)
                this->numberobj_287_format_set(payload);
    
            if (TAG("sort/number_obj-93") == objectId)
                this->numberobj_288_format_set(payload);
    
            if (TAG("sort/number_obj-89") == objectId)
                this->numberobj_289_format_set(payload);
    
            if (TAG("sort/number_obj-87") == objectId)
                this->numberobj_290_format_set(payload);
    
            if (TAG("sort/number_obj-83") == objectId)
                this->numberobj_291_format_set(payload);
    
            if (TAG("sort/number_obj-81") == objectId)
                this->numberobj_292_format_set(payload);
    
            if (TAG("sort/number_obj-80") == objectId)
                this->numberobj_293_format_set(payload);
    
            if (TAG("sort/number_obj-79") == objectId)
                this->numberobj_294_format_set(payload);
    
            if (TAG("sort/number_obj-65") == objectId)
                this->numberobj_295_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort/message_obj-75") == objectId)
                this->message_73_listin_list_set(payload);
    
            if (TAG("sort/message_obj-144") == objectId)
                this->message_74_listin_list_set(payload);
    
            if (TAG("sort/message_obj-104") == objectId)
                this->message_75_listin_list_set(payload);
    
            if (TAG("sort/message_obj-146") == objectId)
                this->message_76_listin_list_set(payload);
    
            if (TAG("sort/message_obj-68") == objectId)
                this->message_77_listin_list_set(payload);
    
            if (TAG("sort/message_obj-94") == objectId)
                this->message_78_listin_list_set(payload);
    
            if (TAG("sort/message_obj-6") == objectId)
                this->message_79_listin_list_set(payload);
    
            if (TAG("sort/message_obj-78") == objectId)
                this->message_80_listin_list_set(payload);
    
            if (TAG("sort/message_obj-74") == objectId)
                this->message_81_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("sort/message_obj-75") == objectId)
                this->message_73_listin_bang_bang();
    
            if (TAG("sort/message_obj-144") == objectId)
                this->message_74_listin_bang_bang();
    
            if (TAG("sort/message_obj-104") == objectId)
                this->message_75_listin_bang_bang();
    
            if (TAG("sort/message_obj-146") == objectId)
                this->message_76_listin_bang_bang();
    
            if (TAG("sort/message_obj-68") == objectId)
                this->message_77_listin_bang_bang();
    
            if (TAG("sort/message_obj-94") == objectId)
                this->message_78_listin_bang_bang();
    
            if (TAG("sort/message_obj-6") == objectId)
                this->message_79_listin_bang_bang();
    
            if (TAG("sort/message_obj-78") == objectId)
                this->message_80_listin_bang_bang();
    
            if (TAG("sort/message_obj-74") == objectId)
                this->message_81_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("sort/button_obj-64") == objectId)
                this->button_15_bangin_bang();
    
            if (TAG("sort/button_obj-76") == objectId)
                this->button_16_bangin_bang();
    
            if (TAG("sort/button_obj-71") == objectId)
                this->button_17_bangin_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("sort/message_obj-75"):
            {
            return "sort/message_obj-75";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("sort/button_obj-64"):
            {
            return "sort/button_obj-64";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("sort/number_obj-5"):
            {
            return "sort/number_obj-5";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("sort/message_obj-144"):
            {
            return "sort/message_obj-144";
            }
        case TAG("sort/message_obj-104"):
            {
            return "sort/message_obj-104";
            }
        case TAG("sort/toggle_obj-91"):
            {
            return "sort/toggle_obj-91";
            }
        case TAG("sort/button_obj-76"):
            {
            return "sort/button_obj-76";
            }
        case TAG("sort/number_obj-58"):
            {
            return "sort/number_obj-58";
            }
        case TAG("sort/message_obj-146"):
            {
            return "sort/message_obj-146";
            }
        case TAG("sort/message_obj-68"):
            {
            return "sort/message_obj-68";
            }
        case TAG("sort/message_obj-94"):
            {
            return "sort/message_obj-94";
            }
        case TAG("sort/number_obj-3"):
            {
            return "sort/number_obj-3";
            }
        case TAG("sort/message_obj-6"):
            {
            return "sort/message_obj-6";
            }
        case TAG("sort/message_obj-78"):
            {
            return "sort/message_obj-78";
            }
        case TAG("sort/number_obj-7"):
            {
            return "sort/number_obj-7";
            }
        case TAG("sort/button_obj-71"):
            {
            return "sort/button_obj-71";
            }
        case TAG("sort/number_obj-8"):
            {
            return "sort/number_obj-8";
            }
        case TAG("sort/message_obj-74"):
            {
            return "sort/message_obj-74";
            }
        case TAG("sort/number_obj-9"):
            {
            return "sort/number_obj-9";
            }
        case TAG("sort/number_obj-10"):
            {
            return "sort/number_obj-10";
            }
        case TAG("sort/number_obj-15"):
            {
            return "sort/number_obj-15";
            }
        case TAG("sort/number_obj-14"):
            {
            return "sort/number_obj-14";
            }
        case TAG("sort/number_obj-13"):
            {
            return "sort/number_obj-13";
            }
        case TAG("sort/number_obj-12"):
            {
            return "sort/number_obj-12";
            }
        case TAG("sort/number_obj-11"):
            {
            return "sort/number_obj-11";
            }
        case TAG("sort/number_obj-25"):
            {
            return "sort/number_obj-25";
            }
        case TAG("sort/number_obj-24"):
            {
            return "sort/number_obj-24";
            }
        case TAG("sort/number_obj-23"):
            {
            return "sort/number_obj-23";
            }
        case TAG("sort/number_obj-22"):
            {
            return "sort/number_obj-22";
            }
        case TAG("sort/number_obj-21"):
            {
            return "sort/number_obj-21";
            }
        case TAG("sort/number_obj-20"):
            {
            return "sort/number_obj-20";
            }
        case TAG("sort/number_obj-19"):
            {
            return "sort/number_obj-19";
            }
        case TAG("sort/number_obj-18"):
            {
            return "sort/number_obj-18";
            }
        case TAG("sort/number_obj-17"):
            {
            return "sort/number_obj-17";
            }
        case TAG("sort/number_obj-16"):
            {
            return "sort/number_obj-16";
            }
        case TAG("sort/number_obj-45"):
            {
            return "sort/number_obj-45";
            }
        case TAG("sort/number_obj-44"):
            {
            return "sort/number_obj-44";
            }
        case TAG("sort/number_obj-43"):
            {
            return "sort/number_obj-43";
            }
        case TAG("sort/number_obj-42"):
            {
            return "sort/number_obj-42";
            }
        case TAG("sort/number_obj-41"):
            {
            return "sort/number_obj-41";
            }
        case TAG("sort/number_obj-40"):
            {
            return "sort/number_obj-40";
            }
        case TAG("sort/number_obj-39"):
            {
            return "sort/number_obj-39";
            }
        case TAG("sort/number_obj-38"):
            {
            return "sort/number_obj-38";
            }
        case TAG("sort/number_obj-37"):
            {
            return "sort/number_obj-37";
            }
        case TAG("sort/number_obj-36"):
            {
            return "sort/number_obj-36";
            }
        case TAG("sort/number_obj-35"):
            {
            return "sort/number_obj-35";
            }
        case TAG("sort/number_obj-34"):
            {
            return "sort/number_obj-34";
            }
        case TAG("sort/number_obj-33"):
            {
            return "sort/number_obj-33";
            }
        case TAG("sort/number_obj-32"):
            {
            return "sort/number_obj-32";
            }
        case TAG("sort/number_obj-31"):
            {
            return "sort/number_obj-31";
            }
        case TAG("sort/number_obj-30"):
            {
            return "sort/number_obj-30";
            }
        case TAG("sort/number_obj-29"):
            {
            return "sort/number_obj-29";
            }
        case TAG("sort/number_obj-28"):
            {
            return "sort/number_obj-28";
            }
        case TAG("sort/number_obj-27"):
            {
            return "sort/number_obj-27";
            }
        case TAG("sort/number_obj-26"):
            {
            return "sort/number_obj-26";
            }
        case TAG("sort/number_obj-55"):
            {
            return "sort/number_obj-55";
            }
        case TAG("sort/number_obj-54"):
            {
            return "sort/number_obj-54";
            }
        case TAG("sort/number_obj-53"):
            {
            return "sort/number_obj-53";
            }
        case TAG("sort/number_obj-52"):
            {
            return "sort/number_obj-52";
            }
        case TAG("sort/number_obj-51"):
            {
            return "sort/number_obj-51";
            }
        case TAG("sort/number_obj-50"):
            {
            return "sort/number_obj-50";
            }
        case TAG("sort/number_obj-49"):
            {
            return "sort/number_obj-49";
            }
        case TAG("sort/number_obj-48"):
            {
            return "sort/number_obj-48";
            }
        case TAG("sort/number_obj-47"):
            {
            return "sort/number_obj-47";
            }
        case TAG("sort/number_obj-46"):
            {
            return "sort/number_obj-46";
            }
        case TAG("sort/number_obj-140"):
            {
            return "sort/number_obj-140";
            }
        case TAG("sort/number_obj-139"):
            {
            return "sort/number_obj-139";
            }
        case TAG("sort/number_obj-138"):
            {
            return "sort/number_obj-138";
            }
        case TAG("sort/number_obj-137"):
            {
            return "sort/number_obj-137";
            }
        case TAG("sort/number_obj-136"):
            {
            return "sort/number_obj-136";
            }
        case TAG("sort/number_obj-135"):
            {
            return "sort/number_obj-135";
            }
        case TAG("sort/number_obj-134"):
            {
            return "sort/number_obj-134";
            }
        case TAG("sort/number_obj-133"):
            {
            return "sort/number_obj-133";
            }
        case TAG("sort/number_obj-132"):
            {
            return "sort/number_obj-132";
            }
        case TAG("sort/number_obj-131"):
            {
            return "sort/number_obj-131";
            }
        case TAG("sort/number_obj-130"):
            {
            return "sort/number_obj-130";
            }
        case TAG("sort/number_obj-129"):
            {
            return "sort/number_obj-129";
            }
        case TAG("sort/number_obj-128"):
            {
            return "sort/number_obj-128";
            }
        case TAG("sort/number_obj-127"):
            {
            return "sort/number_obj-127";
            }
        case TAG("sort/number_obj-126"):
            {
            return "sort/number_obj-126";
            }
        case TAG("sort/number_obj-125"):
            {
            return "sort/number_obj-125";
            }
        case TAG("sort/number_obj-124"):
            {
            return "sort/number_obj-124";
            }
        case TAG("sort/number_obj-123"):
            {
            return "sort/number_obj-123";
            }
        case TAG("sort/number_obj-122"):
            {
            return "sort/number_obj-122";
            }
        case TAG("sort/number_obj-121"):
            {
            return "sort/number_obj-121";
            }
        case TAG("sort/number_obj-120"):
            {
            return "sort/number_obj-120";
            }
        case TAG("sort/number_obj-119"):
            {
            return "sort/number_obj-119";
            }
        case TAG("sort/number_obj-118"):
            {
            return "sort/number_obj-118";
            }
        case TAG("sort/number_obj-117"):
            {
            return "sort/number_obj-117";
            }
        case TAG("sort/number_obj-116"):
            {
            return "sort/number_obj-116";
            }
        case TAG("sort/number_obj-115"):
            {
            return "sort/number_obj-115";
            }
        case TAG("sort/number_obj-114"):
            {
            return "sort/number_obj-114";
            }
        case TAG("sort/number_obj-113"):
            {
            return "sort/number_obj-113";
            }
        case TAG("sort/number_obj-112"):
            {
            return "sort/number_obj-112";
            }
        case TAG("sort/number_obj-111"):
            {
            return "sort/number_obj-111";
            }
        case TAG("sort/number_obj-110"):
            {
            return "sort/number_obj-110";
            }
        case TAG("sort/number_obj-109"):
            {
            return "sort/number_obj-109";
            }
        case TAG("sort/number_obj-106"):
            {
            return "sort/number_obj-106";
            }
        case TAG("sort/number_obj-105"):
            {
            return "sort/number_obj-105";
            }
        case TAG("sort/number_obj-103"):
            {
            return "sort/number_obj-103";
            }
        case TAG("sort/number_obj-101"):
            {
            return "sort/number_obj-101";
            }
        case TAG("sort/number_obj-100"):
            {
            return "sort/number_obj-100";
            }
        case TAG("sort/number_obj-99"):
            {
            return "sort/number_obj-99";
            }
        case TAG("sort/number_obj-98"):
            {
            return "sort/number_obj-98";
            }
        case TAG("sort/number_obj-97"):
            {
            return "sort/number_obj-97";
            }
        case TAG("sort/number_obj-96"):
            {
            return "sort/number_obj-96";
            }
        case TAG("sort/number_obj-95"):
            {
            return "sort/number_obj-95";
            }
        case TAG("sort/number_obj-93"):
            {
            return "sort/number_obj-93";
            }
        case TAG("sort/number_obj-89"):
            {
            return "sort/number_obj-89";
            }
        case TAG("sort/number_obj-87"):
            {
            return "sort/number_obj-87";
            }
        case TAG("sort/number_obj-83"):
            {
            return "sort/number_obj-83";
            }
        case TAG("sort/number_obj-81"):
            {
            return "sort/number_obj-81";
            }
        case TAG("sort/number_obj-80"):
            {
            return "sort/number_obj-80";
            }
        case TAG("sort/number_obj-79"):
            {
            return "sort/number_obj-79";
            }
        case TAG("sort/number_obj-65"):
            {
            return "sort/number_obj-65";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void message_73_listin_list_set(const list& v) {
        this->message_73_set_set(v);
    }
    
    void message_73_listin_number_set(number v) {
        this->message_73_set_set(v);
    }
    
    void message_73_listin_bang_bang() {
        this->message_73_trigger_bang();
    }
    
    void button_15_bangin_bang() {
        this->button_15_bangval_bang();
    }
    
    void numberobj_194_valin_set(number v) {
        this->numberobj_194_value_set(v);
    }
    
    void numberobj_194_format_set(number v) {
        this->numberobj_194_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_51_out1_number_set(number v) {
        this->gate_34_input_number_set(v);
    }
    
    void eventinlet_51_out1_list_set(const list& v) {
        this->gate_34_input_list_set(v);
    }
    
    void message_74_listin_list_set(const list& v) {
        this->message_74_set_set(v);
    }
    
    void message_74_listin_number_set(number v) {
        this->message_74_set_set(v);
    }
    
    void message_74_listin_bang_bang() {
        this->message_74_trigger_bang();
    }
    
    void message_75_listin_list_set(const list& v) {
        this->message_75_set_set(v);
    }
    
    void message_75_listin_number_set(number v) {
        this->message_75_set_set(v);
    }
    
    void message_75_listin_bang_bang() {
        this->message_75_trigger_bang();
    }
    
    void toggle_05_valin_set(number v) {
        this->toggle_05_value_number_set(v);
    }
    
    void button_16_bangin_bang() {
        this->button_16_bangval_bang();
    }
    
    void numberobj_195_valin_set(number v) {
        this->numberobj_195_value_set(v);
    }
    
    void numberobj_195_format_set(number v) {
        this->numberobj_195_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_76_listin_list_set(const list& v) {
        this->message_76_set_set(v);
    }
    
    void message_76_listin_number_set(number v) {
        this->message_76_set_set(v);
    }
    
    void message_76_listin_bang_bang() {
        this->message_76_trigger_bang();
    }
    
    void message_77_listin_list_set(const list& v) {
        this->message_77_set_set(v);
    }
    
    void message_77_listin_number_set(number v) {
        this->message_77_set_set(v);
    }
    
    void message_77_listin_bang_bang() {
        this->message_77_trigger_bang();
    }
    
    void message_78_listin_list_set(const list& v) {
        this->message_78_set_set(v);
    }
    
    void message_78_listin_number_set(number v) {
        this->message_78_set_set(v);
    }
    
    void message_78_listin_bang_bang() {
        this->message_78_trigger_bang();
    }
    
    void eventinlet_52_out1_bang_bang() {
        this->route_02_input_bang_bang();
    }
    
    void eventinlet_52_out1_number_set(number v) {
        this->route_02_input_number_set(v);
    }
    
    void numberobj_196_valin_set(number v) {
        this->numberobj_196_value_set(v);
    }
    
    void numberobj_196_format_set(number v) {
        this->numberobj_196_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_79_listin_list_set(const list& v) {
        this->message_79_set_set(v);
    }
    
    void message_79_listin_number_set(number v) {
        this->message_79_set_set(v);
    }
    
    void message_79_listin_bang_bang() {
        this->message_79_trigger_bang();
    }
    
    void message_80_listin_list_set(const list& v) {
        this->message_80_set_set(v);
    }
    
    void message_80_listin_number_set(number v) {
        this->message_80_set_set(v);
    }
    
    void message_80_listin_bang_bang() {
        this->message_80_trigger_bang();
    }
    
    void numberobj_197_valin_set(number v) {
        this->numberobj_197_value_set(v);
    }
    
    void numberobj_197_format_set(number v) {
        this->numberobj_197_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_17_bangin_bang() {
        this->button_17_bangval_bang();
    }
    
    void numberobj_198_valin_set(number v) {
        this->numberobj_198_value_set(v);
    }
    
    void numberobj_198_format_set(number v) {
        this->numberobj_198_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_81_listin_list_set(const list& v) {
        this->message_81_set_set(v);
    }
    
    void message_81_listin_number_set(number v) {
        this->message_81_set_set(v);
    }
    
    void message_81_listin_bang_bang() {
        this->message_81_trigger_bang();
    }
    
    void numberobj_199_valin_set(number v) {
        this->numberobj_199_value_set(v);
    }
    
    void numberobj_199_format_set(number v) {
        this->numberobj_199_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_200_valin_set(number v) {
        this->numberobj_200_value_set(v);
    }
    
    void numberobj_200_format_set(number v) {
        this->numberobj_200_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_201_valin_set(number v) {
        this->numberobj_201_value_set(v);
    }
    
    void numberobj_201_format_set(number v) {
        this->numberobj_201_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_202_valin_set(number v) {
        this->numberobj_202_value_set(v);
    }
    
    void numberobj_202_format_set(number v) {
        this->numberobj_202_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_203_valin_set(number v) {
        this->numberobj_203_value_set(v);
    }
    
    void numberobj_203_format_set(number v) {
        this->numberobj_203_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_204_valin_set(number v) {
        this->numberobj_204_value_set(v);
    }
    
    void numberobj_204_format_set(number v) {
        this->numberobj_204_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_205_valin_set(number v) {
        this->numberobj_205_value_set(v);
    }
    
    void numberobj_205_format_set(number v) {
        this->numberobj_205_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_206_valin_set(number v) {
        this->numberobj_206_value_set(v);
    }
    
    void numberobj_206_format_set(number v) {
        this->numberobj_206_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_207_valin_set(number v) {
        this->numberobj_207_value_set(v);
    }
    
    void numberobj_207_format_set(number v) {
        this->numberobj_207_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_208_valin_set(number v) {
        this->numberobj_208_value_set(v);
    }
    
    void numberobj_208_format_set(number v) {
        this->numberobj_208_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_209_valin_set(number v) {
        this->numberobj_209_value_set(v);
    }
    
    void numberobj_209_format_set(number v) {
        this->numberobj_209_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_210_valin_set(number v) {
        this->numberobj_210_value_set(v);
    }
    
    void numberobj_210_format_set(number v) {
        this->numberobj_210_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_211_valin_set(number v) {
        this->numberobj_211_value_set(v);
    }
    
    void numberobj_211_format_set(number v) {
        this->numberobj_211_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_212_valin_set(number v) {
        this->numberobj_212_value_set(v);
    }
    
    void numberobj_212_format_set(number v) {
        this->numberobj_212_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_213_valin_set(number v) {
        this->numberobj_213_value_set(v);
    }
    
    void numberobj_213_format_set(number v) {
        this->numberobj_213_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_214_valin_set(number v) {
        this->numberobj_214_value_set(v);
    }
    
    void numberobj_214_format_set(number v) {
        this->numberobj_214_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_215_valin_set(number v) {
        this->numberobj_215_value_set(v);
    }
    
    void numberobj_215_format_set(number v) {
        this->numberobj_215_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_216_valin_set(number v) {
        this->numberobj_216_value_set(v);
    }
    
    void numberobj_216_format_set(number v) {
        this->numberobj_216_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_217_valin_set(number v) {
        this->numberobj_217_value_set(v);
    }
    
    void numberobj_217_format_set(number v) {
        this->numberobj_217_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_218_valin_set(number v) {
        this->numberobj_218_value_set(v);
    }
    
    void numberobj_218_format_set(number v) {
        this->numberobj_218_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_219_valin_set(number v) {
        this->numberobj_219_value_set(v);
    }
    
    void numberobj_219_format_set(number v) {
        this->numberobj_219_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_220_valin_set(number v) {
        this->numberobj_220_value_set(v);
    }
    
    void numberobj_220_format_set(number v) {
        this->numberobj_220_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_221_valin_set(number v) {
        this->numberobj_221_value_set(v);
    }
    
    void numberobj_221_format_set(number v) {
        this->numberobj_221_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_222_valin_set(number v) {
        this->numberobj_222_value_set(v);
    }
    
    void numberobj_222_format_set(number v) {
        this->numberobj_222_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_223_valin_set(number v) {
        this->numberobj_223_value_set(v);
    }
    
    void numberobj_223_format_set(number v) {
        this->numberobj_223_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_224_valin_set(number v) {
        this->numberobj_224_value_set(v);
    }
    
    void numberobj_224_format_set(number v) {
        this->numberobj_224_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_225_valin_set(number v) {
        this->numberobj_225_value_set(v);
    }
    
    void numberobj_225_format_set(number v) {
        this->numberobj_225_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_226_valin_set(number v) {
        this->numberobj_226_value_set(v);
    }
    
    void numberobj_226_format_set(number v) {
        this->numberobj_226_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_227_valin_set(number v) {
        this->numberobj_227_value_set(v);
    }
    
    void numberobj_227_format_set(number v) {
        this->numberobj_227_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_228_valin_set(number v) {
        this->numberobj_228_value_set(v);
    }
    
    void numberobj_228_format_set(number v) {
        this->numberobj_228_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_229_valin_set(number v) {
        this->numberobj_229_value_set(v);
    }
    
    void numberobj_229_format_set(number v) {
        this->numberobj_229_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_230_valin_set(number v) {
        this->numberobj_230_value_set(v);
    }
    
    void numberobj_230_format_set(number v) {
        this->numberobj_230_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_231_valin_set(number v) {
        this->numberobj_231_value_set(v);
    }
    
    void numberobj_231_format_set(number v) {
        this->numberobj_231_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_232_valin_set(number v) {
        this->numberobj_232_value_set(v);
    }
    
    void numberobj_232_format_set(number v) {
        this->numberobj_232_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_233_valin_set(number v) {
        this->numberobj_233_value_set(v);
    }
    
    void numberobj_233_format_set(number v) {
        this->numberobj_233_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_234_valin_set(number v) {
        this->numberobj_234_value_set(v);
    }
    
    void numberobj_234_format_set(number v) {
        this->numberobj_234_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_235_valin_set(number v) {
        this->numberobj_235_value_set(v);
    }
    
    void numberobj_235_format_set(number v) {
        this->numberobj_235_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_236_valin_set(number v) {
        this->numberobj_236_value_set(v);
    }
    
    void numberobj_236_format_set(number v) {
        this->numberobj_236_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_237_valin_set(number v) {
        this->numberobj_237_value_set(v);
    }
    
    void numberobj_237_format_set(number v) {
        this->numberobj_237_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_238_valin_set(number v) {
        this->numberobj_238_value_set(v);
    }
    
    void numberobj_238_format_set(number v) {
        this->numberobj_238_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_239_valin_set(number v) {
        this->numberobj_239_value_set(v);
    }
    
    void numberobj_239_format_set(number v) {
        this->numberobj_239_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_240_valin_set(number v) {
        this->numberobj_240_value_set(v);
    }
    
    void numberobj_240_format_set(number v) {
        this->numberobj_240_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_241_valin_set(number v) {
        this->numberobj_241_value_set(v);
    }
    
    void numberobj_241_format_set(number v) {
        this->numberobj_241_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_242_valin_set(number v) {
        this->numberobj_242_value_set(v);
    }
    
    void numberobj_242_format_set(number v) {
        this->numberobj_242_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_243_valin_set(number v) {
        this->numberobj_243_value_set(v);
    }
    
    void numberobj_243_format_set(number v) {
        this->numberobj_243_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_244_valin_set(number v) {
        this->numberobj_244_value_set(v);
    }
    
    void numberobj_244_format_set(number v) {
        this->numberobj_244_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_245_valin_set(number v) {
        this->numberobj_245_value_set(v);
    }
    
    void numberobj_245_format_set(number v) {
        this->numberobj_245_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_246_valin_set(number v) {
        this->numberobj_246_value_set(v);
    }
    
    void numberobj_246_format_set(number v) {
        this->numberobj_246_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_247_valin_set(number v) {
        this->numberobj_247_value_set(v);
    }
    
    void numberobj_247_format_set(number v) {
        this->numberobj_247_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_248_valin_set(number v) {
        this->numberobj_248_value_set(v);
    }
    
    void numberobj_248_format_set(number v) {
        this->numberobj_248_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_249_valin_set(number v) {
        this->numberobj_249_value_set(v);
    }
    
    void numberobj_249_format_set(number v) {
        this->numberobj_249_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_250_valin_set(number v) {
        this->numberobj_250_value_set(v);
    }
    
    void numberobj_250_format_set(number v) {
        this->numberobj_250_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_251_valin_set(number v) {
        this->numberobj_251_value_set(v);
    }
    
    void numberobj_251_format_set(number v) {
        this->numberobj_251_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_252_valin_set(number v) {
        this->numberobj_252_value_set(v);
    }
    
    void numberobj_252_format_set(number v) {
        this->numberobj_252_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_253_valin_set(number v) {
        this->numberobj_253_value_set(v);
    }
    
    void numberobj_253_format_set(number v) {
        this->numberobj_253_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_254_valin_set(number v) {
        this->numberobj_254_value_set(v);
    }
    
    void numberobj_254_format_set(number v) {
        this->numberobj_254_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_255_valin_set(number v) {
        this->numberobj_255_value_set(v);
    }
    
    void numberobj_255_format_set(number v) {
        this->numberobj_255_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_256_valin_set(number v) {
        this->numberobj_256_value_set(v);
    }
    
    void numberobj_256_format_set(number v) {
        this->numberobj_256_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_257_valin_set(number v) {
        this->numberobj_257_value_set(v);
    }
    
    void numberobj_257_format_set(number v) {
        this->numberobj_257_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_258_valin_set(number v) {
        this->numberobj_258_value_set(v);
    }
    
    void numberobj_258_format_set(number v) {
        this->numberobj_258_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_259_valin_set(number v) {
        this->numberobj_259_value_set(v);
    }
    
    void numberobj_259_format_set(number v) {
        this->numberobj_259_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_260_valin_set(number v) {
        this->numberobj_260_value_set(v);
    }
    
    void numberobj_260_format_set(number v) {
        this->numberobj_260_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_261_valin_set(number v) {
        this->numberobj_261_value_set(v);
    }
    
    void numberobj_261_format_set(number v) {
        this->numberobj_261_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_262_valin_set(number v) {
        this->numberobj_262_value_set(v);
    }
    
    void numberobj_262_format_set(number v) {
        this->numberobj_262_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_263_valin_set(number v) {
        this->numberobj_263_value_set(v);
    }
    
    void numberobj_263_format_set(number v) {
        this->numberobj_263_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_264_valin_set(number v) {
        this->numberobj_264_value_set(v);
    }
    
    void numberobj_264_format_set(number v) {
        this->numberobj_264_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_265_valin_set(number v) {
        this->numberobj_265_value_set(v);
    }
    
    void numberobj_265_format_set(number v) {
        this->numberobj_265_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_266_valin_set(number v) {
        this->numberobj_266_value_set(v);
    }
    
    void numberobj_266_format_set(number v) {
        this->numberobj_266_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_267_valin_set(number v) {
        this->numberobj_267_value_set(v);
    }
    
    void numberobj_267_format_set(number v) {
        this->numberobj_267_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_268_valin_set(number v) {
        this->numberobj_268_value_set(v);
    }
    
    void numberobj_268_format_set(number v) {
        this->numberobj_268_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_269_valin_set(number v) {
        this->numberobj_269_value_set(v);
    }
    
    void numberobj_269_format_set(number v) {
        this->numberobj_269_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_270_valin_set(number v) {
        this->numberobj_270_value_set(v);
    }
    
    void numberobj_270_format_set(number v) {
        this->numberobj_270_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_271_valin_set(number v) {
        this->numberobj_271_value_set(v);
    }
    
    void numberobj_271_format_set(number v) {
        this->numberobj_271_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_272_valin_set(number v) {
        this->numberobj_272_value_set(v);
    }
    
    void numberobj_272_format_set(number v) {
        this->numberobj_272_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_273_valin_set(number v) {
        this->numberobj_273_value_set(v);
    }
    
    void numberobj_273_format_set(number v) {
        this->numberobj_273_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_274_valin_set(number v) {
        this->numberobj_274_value_set(v);
    }
    
    void numberobj_274_format_set(number v) {
        this->numberobj_274_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_275_valin_set(number v) {
        this->numberobj_275_value_set(v);
    }
    
    void numberobj_275_format_set(number v) {
        this->numberobj_275_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_276_valin_set(number v) {
        this->numberobj_276_value_set(v);
    }
    
    void numberobj_276_format_set(number v) {
        this->numberobj_276_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_277_valin_set(number v) {
        this->numberobj_277_value_set(v);
    }
    
    void numberobj_277_format_set(number v) {
        this->numberobj_277_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_278_valin_set(number v) {
        this->numberobj_278_value_set(v);
    }
    
    void numberobj_278_format_set(number v) {
        this->numberobj_278_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_279_valin_set(number v) {
        this->numberobj_279_value_set(v);
    }
    
    void numberobj_279_format_set(number v) {
        this->numberobj_279_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_280_valin_set(number v) {
        this->numberobj_280_value_set(v);
    }
    
    void numberobj_280_format_set(number v) {
        this->numberobj_280_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_281_valin_set(number v) {
        this->numberobj_281_value_set(v);
    }
    
    void numberobj_281_format_set(number v) {
        this->numberobj_281_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_282_valin_set(number v) {
        this->numberobj_282_value_set(v);
    }
    
    void numberobj_282_format_set(number v) {
        this->numberobj_282_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_283_valin_set(number v) {
        this->numberobj_283_value_set(v);
    }
    
    void numberobj_283_format_set(number v) {
        this->numberobj_283_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_284_valin_set(number v) {
        this->numberobj_284_value_set(v);
    }
    
    void numberobj_284_format_set(number v) {
        this->numberobj_284_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_285_valin_set(number v) {
        this->numberobj_285_value_set(v);
    }
    
    void numberobj_285_format_set(number v) {
        this->numberobj_285_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_286_valin_set(number v) {
        this->numberobj_286_value_set(v);
    }
    
    void numberobj_286_format_set(number v) {
        this->numberobj_286_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_287_valin_set(number v) {
        this->numberobj_287_value_set(v);
    }
    
    void numberobj_287_format_set(number v) {
        this->numberobj_287_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_288_valin_set(number v) {
        this->numberobj_288_value_set(v);
    }
    
    void numberobj_288_format_set(number v) {
        this->numberobj_288_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_289_valin_set(number v) {
        this->numberobj_289_value_set(v);
    }
    
    void numberobj_289_format_set(number v) {
        this->numberobj_289_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_290_valin_set(number v) {
        this->numberobj_290_value_set(v);
    }
    
    void numberobj_290_format_set(number v) {
        this->numberobj_290_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_291_valin_set(number v) {
        this->numberobj_291_value_set(v);
    }
    
    void numberobj_291_format_set(number v) {
        this->numberobj_291_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_292_valin_set(number v) {
        this->numberobj_292_value_set(v);
    }
    
    void numberobj_292_format_set(number v) {
        this->numberobj_292_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_293_valin_set(number v) {
        this->numberobj_293_value_set(v);
    }
    
    void numberobj_293_format_set(number v) {
        this->numberobj_293_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_294_valin_set(number v) {
        this->numberobj_294_value_set(v);
    }
    
    void numberobj_294_format_set(number v) {
        this->numberobj_294_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_295_valin_set(number v) {
        this->numberobj_295_value_set(v);
    }
    
    void numberobj_295_format_set(number v) {
        this->numberobj_295_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_73_init();
        this->numberobj_194_init();
        this->message_74_init();
        this->message_75_init();
        this->numberobj_195_init();
        this->message_76_init();
        this->message_77_init();
        this->message_78_init();
        this->numberobj_196_init();
        this->message_79_init();
        this->message_80_init();
        this->numberobj_197_init();
        this->numberobj_198_init();
        this->message_81_init();
        this->numberobj_199_init();
        this->numberobj_200_init();
        this->numberobj_201_init();
        this->numberobj_202_init();
        this->numberobj_203_init();
        this->numberobj_204_init();
        this->numberobj_205_init();
        this->numberobj_206_init();
        this->numberobj_207_init();
        this->numberobj_208_init();
        this->numberobj_209_init();
        this->numberobj_210_init();
        this->numberobj_211_init();
        this->numberobj_212_init();
        this->numberobj_213_init();
        this->numberobj_214_init();
        this->numberobj_215_init();
        this->numberobj_216_init();
        this->numberobj_217_init();
        this->numberobj_218_init();
        this->numberobj_219_init();
        this->numberobj_220_init();
        this->numberobj_221_init();
        this->numberobj_222_init();
        this->numberobj_223_init();
        this->numberobj_224_init();
        this->numberobj_225_init();
        this->numberobj_226_init();
        this->numberobj_227_init();
        this->numberobj_228_init();
        this->numberobj_229_init();
        this->numberobj_230_init();
        this->numberobj_231_init();
        this->numberobj_232_init();
        this->numberobj_233_init();
        this->numberobj_234_init();
        this->numberobj_235_init();
        this->numberobj_236_init();
        this->numberobj_237_init();
        this->numberobj_238_init();
        this->numberobj_239_init();
        this->numberobj_240_init();
        this->numberobj_241_init();
        this->numberobj_242_init();
        this->numberobj_243_init();
        this->numberobj_244_init();
        this->numberobj_245_init();
        this->numberobj_246_init();
        this->numberobj_247_init();
        this->numberobj_248_init();
        this->numberobj_249_init();
        this->numberobj_250_init();
        this->numberobj_251_init();
        this->numberobj_252_init();
        this->numberobj_253_init();
        this->numberobj_254_init();
        this->numberobj_255_init();
        this->numberobj_256_init();
        this->numberobj_257_init();
        this->numberobj_258_init();
        this->numberobj_259_init();
        this->numberobj_260_init();
        this->numberobj_261_init();
        this->numberobj_262_init();
        this->numberobj_263_init();
        this->numberobj_264_init();
        this->numberobj_265_init();
        this->numberobj_266_init();
        this->numberobj_267_init();
        this->numberobj_268_init();
        this->numberobj_269_init();
        this->numberobj_270_init();
        this->numberobj_271_init();
        this->numberobj_272_init();
        this->numberobj_273_init();
        this->numberobj_274_init();
        this->numberobj_275_init();
        this->numberobj_276_init();
        this->numberobj_277_init();
        this->numberobj_278_init();
        this->numberobj_279_init();
        this->numberobj_280_init();
        this->numberobj_281_init();
        this->numberobj_282_init();
        this->numberobj_283_init();
        this->numberobj_284_init();
        this->numberobj_285_init();
        this->numberobj_286_init();
        this->numberobj_287_init();
        this->numberobj_288_init();
        this->numberobj_289_init();
        this->numberobj_290_init();
        this->numberobj_291_init();
        this->numberobj_292_init();
        this->numberobj_293_init();
        this->numberobj_294_init();
        this->numberobj_295_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void gate_34_onoff_set(number v) {
        this->gate_34_onoff = v;
    }
    
    void message_76_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_76_out_set(this->message_76_set);
    }
    
    void trigger_37_out2_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_76_trigger_bang();
    }
    
    void listlookup_02_lookup_set(const list& v) {
        this->listlookup_02_lookup = jsCreateListCopy(v);
    }
    
    void message_79_out_set(const list& v) {
        this->listlookup_02_lookup_set(v);
    }
    
    void message_79_trigger_bang() {
        this->message_79_out_set(this->message_79_set);
    }
    
    void trigger_38_out2_bang() {
        this->message_79_trigger_bang();
    }
    
    void message_81_set_set(const list& v) {
        this->message_81_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-74"), v, this->_currentTime);
    }
    
    void pack_04_out_set(const list& v) {
        this->message_81_set_set(v);
    }
    
    void pack_04_in1_set(number v) {
        this->pack_04_in1 = v;
        list array = list(0, 0);
        array[0] = trunc(this->pack_04_in1);
        array[1] = this->pack_04_in2;
        this->pack_04_out_set(array);
    }
    
    void expr_90_out1_set(number v) {
        this->expr_90_out1 = v;
        this->pack_04_in1_set(this->expr_90_out1);
    }
    
    void expr_90_in1_set(number in1) {
        this->expr_90_in1 = in1;
        this->expr_90_out1_set(this->expr_90_in1 + this->expr_90_in2);//#map:sort/+_obj-56:1
    }
    
    void trigger_39_out3_set(number v) {
        this->expr_90_in1_set(v);
    }
    
    void message_80_set_set(const list& v) {
        this->message_80_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-78"), v, this->_currentTime);
    }
    
    void expr_89_out1_set(number v) {
        this->expr_89_out1 = v;
    
        {
            list converted = {this->expr_89_out1};
            this->message_80_set_set(converted);
        }
    }
    
    void expr_89_in1_set(number in1) {
        this->expr_89_in1 = in1;
        this->expr_89_out1_set(this->expr_89_in1 + this->expr_89_in2);//#map:sort/+_obj-62:1
    }
    
    void trigger_39_out2_set(number v) {
        this->expr_89_in1_set(v);
    }
    
    void route_02_nomatch_bang_bang() {}
    
    void message_79_set_set(const list& v) {
        this->message_79_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-6"), v, this->_currentTime);
    }
    
    void pak_04_out_set(const list& v) {
        this->message_79_set_set(v);
    }
    
    void pak_04_in100_set(number v) {
        this->pak_04_in100 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_295_output_set(number v) {
        this->pak_04_in100_set(v);
    }
    
    void numberobj_295_value_bang() {
        number v = this->numberobj_295_value;
        number localvalue = v;
    
        if (this->numberobj_295_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-65"), localvalue, this->_currentTime);
        this->numberobj_295_output_set(localvalue);
    }
    
    void route_02_match100_bang_bang() {
        this->numberobj_295_value_bang();
    }
    
    void numberobj_295_value_set(number v) {
        this->numberobj_295_value_setter(v);
        v = this->numberobj_295_value;
        number localvalue = v;
    
        if (this->numberobj_295_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-65"), localvalue, this->_currentTime);
        this->numberobj_295_output_set(localvalue);
    }
    
    void route_02_match100_number_set(number v) {
        this->numberobj_295_value_set(v);
    }
    
    void route_02_match100_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_295_value_set(converted);
        }
    }
    
    void pak_04_in99_set(number v) {
        this->pak_04_in99 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_294_output_set(number v) {
        this->pak_04_in99_set(v);
    }
    
    void numberobj_294_value_bang() {
        number v = this->numberobj_294_value;
        number localvalue = v;
    
        if (this->numberobj_294_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-79"), localvalue, this->_currentTime);
        this->numberobj_294_output_set(localvalue);
    }
    
    void route_02_match99_bang_bang() {
        this->numberobj_294_value_bang();
    }
    
    void numberobj_294_value_set(number v) {
        this->numberobj_294_value_setter(v);
        v = this->numberobj_294_value;
        number localvalue = v;
    
        if (this->numberobj_294_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-79"), localvalue, this->_currentTime);
        this->numberobj_294_output_set(localvalue);
    }
    
    void route_02_match99_number_set(number v) {
        this->numberobj_294_value_set(v);
    }
    
    void route_02_match99_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_294_value_set(converted);
        }
    }
    
    void pak_04_in98_set(number v) {
        this->pak_04_in98 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_293_output_set(number v) {
        this->pak_04_in98_set(v);
    }
    
    void numberobj_293_value_bang() {
        number v = this->numberobj_293_value;
        number localvalue = v;
    
        if (this->numberobj_293_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-80"), localvalue, this->_currentTime);
        this->numberobj_293_output_set(localvalue);
    }
    
    void route_02_match98_bang_bang() {
        this->numberobj_293_value_bang();
    }
    
    void numberobj_293_value_set(number v) {
        this->numberobj_293_value_setter(v);
        v = this->numberobj_293_value;
        number localvalue = v;
    
        if (this->numberobj_293_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-80"), localvalue, this->_currentTime);
        this->numberobj_293_output_set(localvalue);
    }
    
    void route_02_match98_number_set(number v) {
        this->numberobj_293_value_set(v);
    }
    
    void route_02_match98_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_293_value_set(converted);
        }
    }
    
    void pak_04_in97_set(number v) {
        this->pak_04_in97 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_292_output_set(number v) {
        this->pak_04_in97_set(v);
    }
    
    void numberobj_292_value_bang() {
        number v = this->numberobj_292_value;
        number localvalue = v;
    
        if (this->numberobj_292_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-81"), localvalue, this->_currentTime);
        this->numberobj_292_output_set(localvalue);
    }
    
    void route_02_match97_bang_bang() {
        this->numberobj_292_value_bang();
    }
    
    void numberobj_292_value_set(number v) {
        this->numberobj_292_value_setter(v);
        v = this->numberobj_292_value;
        number localvalue = v;
    
        if (this->numberobj_292_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-81"), localvalue, this->_currentTime);
        this->numberobj_292_output_set(localvalue);
    }
    
    void route_02_match97_number_set(number v) {
        this->numberobj_292_value_set(v);
    }
    
    void route_02_match97_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_292_value_set(converted);
        }
    }
    
    void pak_04_in96_set(number v) {
        this->pak_04_in96 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_291_output_set(number v) {
        this->pak_04_in96_set(v);
    }
    
    void numberobj_291_value_bang() {
        number v = this->numberobj_291_value;
        number localvalue = v;
    
        if (this->numberobj_291_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-83"), localvalue, this->_currentTime);
        this->numberobj_291_output_set(localvalue);
    }
    
    void route_02_match96_bang_bang() {
        this->numberobj_291_value_bang();
    }
    
    void numberobj_291_value_set(number v) {
        this->numberobj_291_value_setter(v);
        v = this->numberobj_291_value;
        number localvalue = v;
    
        if (this->numberobj_291_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-83"), localvalue, this->_currentTime);
        this->numberobj_291_output_set(localvalue);
    }
    
    void route_02_match96_number_set(number v) {
        this->numberobj_291_value_set(v);
    }
    
    void route_02_match96_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_291_value_set(converted);
        }
    }
    
    void pak_04_in95_set(number v) {
        this->pak_04_in95 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_290_output_set(number v) {
        this->pak_04_in95_set(v);
    }
    
    void numberobj_290_value_bang() {
        number v = this->numberobj_290_value;
        number localvalue = v;
    
        if (this->numberobj_290_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-87"), localvalue, this->_currentTime);
        this->numberobj_290_output_set(localvalue);
    }
    
    void route_02_match95_bang_bang() {
        this->numberobj_290_value_bang();
    }
    
    void numberobj_290_value_set(number v) {
        this->numberobj_290_value_setter(v);
        v = this->numberobj_290_value;
        number localvalue = v;
    
        if (this->numberobj_290_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-87"), localvalue, this->_currentTime);
        this->numberobj_290_output_set(localvalue);
    }
    
    void route_02_match95_number_set(number v) {
        this->numberobj_290_value_set(v);
    }
    
    void route_02_match95_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_290_value_set(converted);
        }
    }
    
    void pak_04_in94_set(number v) {
        this->pak_04_in94 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_289_output_set(number v) {
        this->pak_04_in94_set(v);
    }
    
    void numberobj_289_value_bang() {
        number v = this->numberobj_289_value;
        number localvalue = v;
    
        if (this->numberobj_289_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-89"), localvalue, this->_currentTime);
        this->numberobj_289_output_set(localvalue);
    }
    
    void route_02_match94_bang_bang() {
        this->numberobj_289_value_bang();
    }
    
    void numberobj_289_value_set(number v) {
        this->numberobj_289_value_setter(v);
        v = this->numberobj_289_value;
        number localvalue = v;
    
        if (this->numberobj_289_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-89"), localvalue, this->_currentTime);
        this->numberobj_289_output_set(localvalue);
    }
    
    void route_02_match94_number_set(number v) {
        this->numberobj_289_value_set(v);
    }
    
    void route_02_match94_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_289_value_set(converted);
        }
    }
    
    void pak_04_in93_set(number v) {
        this->pak_04_in93 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_288_output_set(number v) {
        this->pak_04_in93_set(v);
    }
    
    void numberobj_288_value_bang() {
        number v = this->numberobj_288_value;
        number localvalue = v;
    
        if (this->numberobj_288_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-93"), localvalue, this->_currentTime);
        this->numberobj_288_output_set(localvalue);
    }
    
    void route_02_match93_bang_bang() {
        this->numberobj_288_value_bang();
    }
    
    void numberobj_288_value_set(number v) {
        this->numberobj_288_value_setter(v);
        v = this->numberobj_288_value;
        number localvalue = v;
    
        if (this->numberobj_288_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-93"), localvalue, this->_currentTime);
        this->numberobj_288_output_set(localvalue);
    }
    
    void route_02_match93_number_set(number v) {
        this->numberobj_288_value_set(v);
    }
    
    void route_02_match93_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_288_value_set(converted);
        }
    }
    
    void pak_04_in92_set(number v) {
        this->pak_04_in92 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_287_output_set(number v) {
        this->pak_04_in92_set(v);
    }
    
    void numberobj_287_value_bang() {
        number v = this->numberobj_287_value;
        number localvalue = v;
    
        if (this->numberobj_287_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-95"), localvalue, this->_currentTime);
        this->numberobj_287_output_set(localvalue);
    }
    
    void route_02_match92_bang_bang() {
        this->numberobj_287_value_bang();
    }
    
    void numberobj_287_value_set(number v) {
        this->numberobj_287_value_setter(v);
        v = this->numberobj_287_value;
        number localvalue = v;
    
        if (this->numberobj_287_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-95"), localvalue, this->_currentTime);
        this->numberobj_287_output_set(localvalue);
    }
    
    void route_02_match92_number_set(number v) {
        this->numberobj_287_value_set(v);
    }
    
    void route_02_match92_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_287_value_set(converted);
        }
    }
    
    void pak_04_in91_set(number v) {
        this->pak_04_in91 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_286_output_set(number v) {
        this->pak_04_in91_set(v);
    }
    
    void numberobj_286_value_bang() {
        number v = this->numberobj_286_value;
        number localvalue = v;
    
        if (this->numberobj_286_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-96"), localvalue, this->_currentTime);
        this->numberobj_286_output_set(localvalue);
    }
    
    void route_02_match91_bang_bang() {
        this->numberobj_286_value_bang();
    }
    
    void numberobj_286_value_set(number v) {
        this->numberobj_286_value_setter(v);
        v = this->numberobj_286_value;
        number localvalue = v;
    
        if (this->numberobj_286_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-96"), localvalue, this->_currentTime);
        this->numberobj_286_output_set(localvalue);
    }
    
    void route_02_match91_number_set(number v) {
        this->numberobj_286_value_set(v);
    }
    
    void route_02_match91_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_286_value_set(converted);
        }
    }
    
    void pak_04_in90_set(number v) {
        this->pak_04_in90 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_285_output_set(number v) {
        this->pak_04_in90_set(v);
    }
    
    void numberobj_285_value_bang() {
        number v = this->numberobj_285_value;
        number localvalue = v;
    
        if (this->numberobj_285_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-97"), localvalue, this->_currentTime);
        this->numberobj_285_output_set(localvalue);
    }
    
    void route_02_match90_bang_bang() {
        this->numberobj_285_value_bang();
    }
    
    void numberobj_285_value_set(number v) {
        this->numberobj_285_value_setter(v);
        v = this->numberobj_285_value;
        number localvalue = v;
    
        if (this->numberobj_285_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-97"), localvalue, this->_currentTime);
        this->numberobj_285_output_set(localvalue);
    }
    
    void route_02_match90_number_set(number v) {
        this->numberobj_285_value_set(v);
    }
    
    void route_02_match90_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_285_value_set(converted);
        }
    }
    
    void pak_04_in89_set(number v) {
        this->pak_04_in89 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_284_output_set(number v) {
        this->pak_04_in89_set(v);
    }
    
    void numberobj_284_value_bang() {
        number v = this->numberobj_284_value;
        number localvalue = v;
    
        if (this->numberobj_284_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-98"), localvalue, this->_currentTime);
        this->numberobj_284_output_set(localvalue);
    }
    
    void route_02_match89_bang_bang() {
        this->numberobj_284_value_bang();
    }
    
    void numberobj_284_value_set(number v) {
        this->numberobj_284_value_setter(v);
        v = this->numberobj_284_value;
        number localvalue = v;
    
        if (this->numberobj_284_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-98"), localvalue, this->_currentTime);
        this->numberobj_284_output_set(localvalue);
    }
    
    void route_02_match89_number_set(number v) {
        this->numberobj_284_value_set(v);
    }
    
    void route_02_match89_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_284_value_set(converted);
        }
    }
    
    void pak_04_in88_set(number v) {
        this->pak_04_in88 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_283_output_set(number v) {
        this->pak_04_in88_set(v);
    }
    
    void numberobj_283_value_bang() {
        number v = this->numberobj_283_value;
        number localvalue = v;
    
        if (this->numberobj_283_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-99"), localvalue, this->_currentTime);
        this->numberobj_283_output_set(localvalue);
    }
    
    void route_02_match88_bang_bang() {
        this->numberobj_283_value_bang();
    }
    
    void numberobj_283_value_set(number v) {
        this->numberobj_283_value_setter(v);
        v = this->numberobj_283_value;
        number localvalue = v;
    
        if (this->numberobj_283_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-99"), localvalue, this->_currentTime);
        this->numberobj_283_output_set(localvalue);
    }
    
    void route_02_match88_number_set(number v) {
        this->numberobj_283_value_set(v);
    }
    
    void route_02_match88_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_283_value_set(converted);
        }
    }
    
    void pak_04_in87_set(number v) {
        this->pak_04_in87 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_282_output_set(number v) {
        this->pak_04_in87_set(v);
    }
    
    void numberobj_282_value_bang() {
        number v = this->numberobj_282_value;
        number localvalue = v;
    
        if (this->numberobj_282_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-100"), localvalue, this->_currentTime);
        this->numberobj_282_output_set(localvalue);
    }
    
    void route_02_match87_bang_bang() {
        this->numberobj_282_value_bang();
    }
    
    void numberobj_282_value_set(number v) {
        this->numberobj_282_value_setter(v);
        v = this->numberobj_282_value;
        number localvalue = v;
    
        if (this->numberobj_282_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-100"), localvalue, this->_currentTime);
        this->numberobj_282_output_set(localvalue);
    }
    
    void route_02_match87_number_set(number v) {
        this->numberobj_282_value_set(v);
    }
    
    void route_02_match87_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_282_value_set(converted);
        }
    }
    
    void pak_04_in86_set(number v) {
        this->pak_04_in86 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_281_output_set(number v) {
        this->pak_04_in86_set(v);
    }
    
    void numberobj_281_value_bang() {
        number v = this->numberobj_281_value;
        number localvalue = v;
    
        if (this->numberobj_281_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-101"), localvalue, this->_currentTime);
        this->numberobj_281_output_set(localvalue);
    }
    
    void route_02_match86_bang_bang() {
        this->numberobj_281_value_bang();
    }
    
    void numberobj_281_value_set(number v) {
        this->numberobj_281_value_setter(v);
        v = this->numberobj_281_value;
        number localvalue = v;
    
        if (this->numberobj_281_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-101"), localvalue, this->_currentTime);
        this->numberobj_281_output_set(localvalue);
    }
    
    void route_02_match86_number_set(number v) {
        this->numberobj_281_value_set(v);
    }
    
    void route_02_match86_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_281_value_set(converted);
        }
    }
    
    void pak_04_in85_set(number v) {
        this->pak_04_in85 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_280_output_set(number v) {
        this->pak_04_in85_set(v);
    }
    
    void numberobj_280_value_bang() {
        number v = this->numberobj_280_value;
        number localvalue = v;
    
        if (this->numberobj_280_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-103"), localvalue, this->_currentTime);
        this->numberobj_280_output_set(localvalue);
    }
    
    void route_02_match85_bang_bang() {
        this->numberobj_280_value_bang();
    }
    
    void numberobj_280_value_set(number v) {
        this->numberobj_280_value_setter(v);
        v = this->numberobj_280_value;
        number localvalue = v;
    
        if (this->numberobj_280_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-103"), localvalue, this->_currentTime);
        this->numberobj_280_output_set(localvalue);
    }
    
    void route_02_match85_number_set(number v) {
        this->numberobj_280_value_set(v);
    }
    
    void route_02_match85_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_280_value_set(converted);
        }
    }
    
    void pak_04_in84_set(number v) {
        this->pak_04_in84 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_279_output_set(number v) {
        this->pak_04_in84_set(v);
    }
    
    void numberobj_279_value_bang() {
        number v = this->numberobj_279_value;
        number localvalue = v;
    
        if (this->numberobj_279_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-105"), localvalue, this->_currentTime);
        this->numberobj_279_output_set(localvalue);
    }
    
    void route_02_match84_bang_bang() {
        this->numberobj_279_value_bang();
    }
    
    void numberobj_279_value_set(number v) {
        this->numberobj_279_value_setter(v);
        v = this->numberobj_279_value;
        number localvalue = v;
    
        if (this->numberobj_279_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-105"), localvalue, this->_currentTime);
        this->numberobj_279_output_set(localvalue);
    }
    
    void route_02_match84_number_set(number v) {
        this->numberobj_279_value_set(v);
    }
    
    void route_02_match84_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_279_value_set(converted);
        }
    }
    
    void pak_04_in83_set(number v) {
        this->pak_04_in83 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_278_output_set(number v) {
        this->pak_04_in83_set(v);
    }
    
    void numberobj_278_value_bang() {
        number v = this->numberobj_278_value;
        number localvalue = v;
    
        if (this->numberobj_278_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-106"), localvalue, this->_currentTime);
        this->numberobj_278_output_set(localvalue);
    }
    
    void route_02_match83_bang_bang() {
        this->numberobj_278_value_bang();
    }
    
    void numberobj_278_value_set(number v) {
        this->numberobj_278_value_setter(v);
        v = this->numberobj_278_value;
        number localvalue = v;
    
        if (this->numberobj_278_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-106"), localvalue, this->_currentTime);
        this->numberobj_278_output_set(localvalue);
    }
    
    void route_02_match83_number_set(number v) {
        this->numberobj_278_value_set(v);
    }
    
    void route_02_match83_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_278_value_set(converted);
        }
    }
    
    void pak_04_in82_set(number v) {
        this->pak_04_in82 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_277_output_set(number v) {
        this->pak_04_in82_set(v);
    }
    
    void numberobj_277_value_bang() {
        number v = this->numberobj_277_value;
        number localvalue = v;
    
        if (this->numberobj_277_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-109"), localvalue, this->_currentTime);
        this->numberobj_277_output_set(localvalue);
    }
    
    void route_02_match82_bang_bang() {
        this->numberobj_277_value_bang();
    }
    
    void numberobj_277_value_set(number v) {
        this->numberobj_277_value_setter(v);
        v = this->numberobj_277_value;
        number localvalue = v;
    
        if (this->numberobj_277_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-109"), localvalue, this->_currentTime);
        this->numberobj_277_output_set(localvalue);
    }
    
    void route_02_match82_number_set(number v) {
        this->numberobj_277_value_set(v);
    }
    
    void route_02_match82_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_277_value_set(converted);
        }
    }
    
    void pak_04_in81_set(number v) {
        this->pak_04_in81 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_276_output_set(number v) {
        this->pak_04_in81_set(v);
    }
    
    void numberobj_276_value_bang() {
        number v = this->numberobj_276_value;
        number localvalue = v;
    
        if (this->numberobj_276_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-110"), localvalue, this->_currentTime);
        this->numberobj_276_output_set(localvalue);
    }
    
    void route_02_match81_bang_bang() {
        this->numberobj_276_value_bang();
    }
    
    void numberobj_276_value_set(number v) {
        this->numberobj_276_value_setter(v);
        v = this->numberobj_276_value;
        number localvalue = v;
    
        if (this->numberobj_276_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-110"), localvalue, this->_currentTime);
        this->numberobj_276_output_set(localvalue);
    }
    
    void route_02_match81_number_set(number v) {
        this->numberobj_276_value_set(v);
    }
    
    void route_02_match81_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_276_value_set(converted);
        }
    }
    
    void pak_04_in80_set(number v) {
        this->pak_04_in80 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_275_output_set(number v) {
        this->pak_04_in80_set(v);
    }
    
    void numberobj_275_value_bang() {
        number v = this->numberobj_275_value;
        number localvalue = v;
    
        if (this->numberobj_275_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-111"), localvalue, this->_currentTime);
        this->numberobj_275_output_set(localvalue);
    }
    
    void route_02_match80_bang_bang() {
        this->numberobj_275_value_bang();
    }
    
    void numberobj_275_value_set(number v) {
        this->numberobj_275_value_setter(v);
        v = this->numberobj_275_value;
        number localvalue = v;
    
        if (this->numberobj_275_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-111"), localvalue, this->_currentTime);
        this->numberobj_275_output_set(localvalue);
    }
    
    void route_02_match80_number_set(number v) {
        this->numberobj_275_value_set(v);
    }
    
    void route_02_match80_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_275_value_set(converted);
        }
    }
    
    void pak_04_in79_set(number v) {
        this->pak_04_in79 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_274_output_set(number v) {
        this->pak_04_in79_set(v);
    }
    
    void numberobj_274_value_bang() {
        number v = this->numberobj_274_value;
        number localvalue = v;
    
        if (this->numberobj_274_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-112"), localvalue, this->_currentTime);
        this->numberobj_274_output_set(localvalue);
    }
    
    void route_02_match79_bang_bang() {
        this->numberobj_274_value_bang();
    }
    
    void numberobj_274_value_set(number v) {
        this->numberobj_274_value_setter(v);
        v = this->numberobj_274_value;
        number localvalue = v;
    
        if (this->numberobj_274_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-112"), localvalue, this->_currentTime);
        this->numberobj_274_output_set(localvalue);
    }
    
    void route_02_match79_number_set(number v) {
        this->numberobj_274_value_set(v);
    }
    
    void route_02_match79_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_274_value_set(converted);
        }
    }
    
    void pak_04_in78_set(number v) {
        this->pak_04_in78 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_273_output_set(number v) {
        this->pak_04_in78_set(v);
    }
    
    void numberobj_273_value_bang() {
        number v = this->numberobj_273_value;
        number localvalue = v;
    
        if (this->numberobj_273_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-113"), localvalue, this->_currentTime);
        this->numberobj_273_output_set(localvalue);
    }
    
    void route_02_match78_bang_bang() {
        this->numberobj_273_value_bang();
    }
    
    void numberobj_273_value_set(number v) {
        this->numberobj_273_value_setter(v);
        v = this->numberobj_273_value;
        number localvalue = v;
    
        if (this->numberobj_273_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-113"), localvalue, this->_currentTime);
        this->numberobj_273_output_set(localvalue);
    }
    
    void route_02_match78_number_set(number v) {
        this->numberobj_273_value_set(v);
    }
    
    void route_02_match78_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_273_value_set(converted);
        }
    }
    
    void pak_04_in77_set(number v) {
        this->pak_04_in77 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_272_output_set(number v) {
        this->pak_04_in77_set(v);
    }
    
    void numberobj_272_value_bang() {
        number v = this->numberobj_272_value;
        number localvalue = v;
    
        if (this->numberobj_272_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-114"), localvalue, this->_currentTime);
        this->numberobj_272_output_set(localvalue);
    }
    
    void route_02_match77_bang_bang() {
        this->numberobj_272_value_bang();
    }
    
    void numberobj_272_value_set(number v) {
        this->numberobj_272_value_setter(v);
        v = this->numberobj_272_value;
        number localvalue = v;
    
        if (this->numberobj_272_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-114"), localvalue, this->_currentTime);
        this->numberobj_272_output_set(localvalue);
    }
    
    void route_02_match77_number_set(number v) {
        this->numberobj_272_value_set(v);
    }
    
    void route_02_match77_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_272_value_set(converted);
        }
    }
    
    void pak_04_in76_set(number v) {
        this->pak_04_in76 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_271_output_set(number v) {
        this->pak_04_in76_set(v);
    }
    
    void numberobj_271_value_bang() {
        number v = this->numberobj_271_value;
        number localvalue = v;
    
        if (this->numberobj_271_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-115"), localvalue, this->_currentTime);
        this->numberobj_271_output_set(localvalue);
    }
    
    void route_02_match76_bang_bang() {
        this->numberobj_271_value_bang();
    }
    
    void numberobj_271_value_set(number v) {
        this->numberobj_271_value_setter(v);
        v = this->numberobj_271_value;
        number localvalue = v;
    
        if (this->numberobj_271_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-115"), localvalue, this->_currentTime);
        this->numberobj_271_output_set(localvalue);
    }
    
    void route_02_match76_number_set(number v) {
        this->numberobj_271_value_set(v);
    }
    
    void route_02_match76_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_271_value_set(converted);
        }
    }
    
    void pak_04_in75_set(number v) {
        this->pak_04_in75 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_270_output_set(number v) {
        this->pak_04_in75_set(v);
    }
    
    void numberobj_270_value_bang() {
        number v = this->numberobj_270_value;
        number localvalue = v;
    
        if (this->numberobj_270_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-116"), localvalue, this->_currentTime);
        this->numberobj_270_output_set(localvalue);
    }
    
    void route_02_match75_bang_bang() {
        this->numberobj_270_value_bang();
    }
    
    void numberobj_270_value_set(number v) {
        this->numberobj_270_value_setter(v);
        v = this->numberobj_270_value;
        number localvalue = v;
    
        if (this->numberobj_270_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-116"), localvalue, this->_currentTime);
        this->numberobj_270_output_set(localvalue);
    }
    
    void route_02_match75_number_set(number v) {
        this->numberobj_270_value_set(v);
    }
    
    void route_02_match75_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_270_value_set(converted);
        }
    }
    
    void pak_04_in74_set(number v) {
        this->pak_04_in74 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_269_output_set(number v) {
        this->pak_04_in74_set(v);
    }
    
    void numberobj_269_value_bang() {
        number v = this->numberobj_269_value;
        number localvalue = v;
    
        if (this->numberobj_269_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-117"), localvalue, this->_currentTime);
        this->numberobj_269_output_set(localvalue);
    }
    
    void route_02_match74_bang_bang() {
        this->numberobj_269_value_bang();
    }
    
    void numberobj_269_value_set(number v) {
        this->numberobj_269_value_setter(v);
        v = this->numberobj_269_value;
        number localvalue = v;
    
        if (this->numberobj_269_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-117"), localvalue, this->_currentTime);
        this->numberobj_269_output_set(localvalue);
    }
    
    void route_02_match74_number_set(number v) {
        this->numberobj_269_value_set(v);
    }
    
    void route_02_match74_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_269_value_set(converted);
        }
    }
    
    void pak_04_in73_set(number v) {
        this->pak_04_in73 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_268_output_set(number v) {
        this->pak_04_in73_set(v);
    }
    
    void numberobj_268_value_bang() {
        number v = this->numberobj_268_value;
        number localvalue = v;
    
        if (this->numberobj_268_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-118"), localvalue, this->_currentTime);
        this->numberobj_268_output_set(localvalue);
    }
    
    void route_02_match73_bang_bang() {
        this->numberobj_268_value_bang();
    }
    
    void numberobj_268_value_set(number v) {
        this->numberobj_268_value_setter(v);
        v = this->numberobj_268_value;
        number localvalue = v;
    
        if (this->numberobj_268_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-118"), localvalue, this->_currentTime);
        this->numberobj_268_output_set(localvalue);
    }
    
    void route_02_match73_number_set(number v) {
        this->numberobj_268_value_set(v);
    }
    
    void route_02_match73_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_268_value_set(converted);
        }
    }
    
    void pak_04_in72_set(number v) {
        this->pak_04_in72 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_267_output_set(number v) {
        this->pak_04_in72_set(v);
    }
    
    void numberobj_267_value_bang() {
        number v = this->numberobj_267_value;
        number localvalue = v;
    
        if (this->numberobj_267_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-119"), localvalue, this->_currentTime);
        this->numberobj_267_output_set(localvalue);
    }
    
    void route_02_match72_bang_bang() {
        this->numberobj_267_value_bang();
    }
    
    void numberobj_267_value_set(number v) {
        this->numberobj_267_value_setter(v);
        v = this->numberobj_267_value;
        number localvalue = v;
    
        if (this->numberobj_267_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-119"), localvalue, this->_currentTime);
        this->numberobj_267_output_set(localvalue);
    }
    
    void route_02_match72_number_set(number v) {
        this->numberobj_267_value_set(v);
    }
    
    void route_02_match72_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_267_value_set(converted);
        }
    }
    
    void pak_04_in71_set(number v) {
        this->pak_04_in71 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_266_output_set(number v) {
        this->pak_04_in71_set(v);
    }
    
    void numberobj_266_value_bang() {
        number v = this->numberobj_266_value;
        number localvalue = v;
    
        if (this->numberobj_266_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-120"), localvalue, this->_currentTime);
        this->numberobj_266_output_set(localvalue);
    }
    
    void route_02_match71_bang_bang() {
        this->numberobj_266_value_bang();
    }
    
    void numberobj_266_value_set(number v) {
        this->numberobj_266_value_setter(v);
        v = this->numberobj_266_value;
        number localvalue = v;
    
        if (this->numberobj_266_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-120"), localvalue, this->_currentTime);
        this->numberobj_266_output_set(localvalue);
    }
    
    void route_02_match71_number_set(number v) {
        this->numberobj_266_value_set(v);
    }
    
    void route_02_match71_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_266_value_set(converted);
        }
    }
    
    void pak_04_in70_set(number v) {
        this->pak_04_in70 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_265_output_set(number v) {
        this->pak_04_in70_set(v);
    }
    
    void numberobj_265_value_bang() {
        number v = this->numberobj_265_value;
        number localvalue = v;
    
        if (this->numberobj_265_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-121"), localvalue, this->_currentTime);
        this->numberobj_265_output_set(localvalue);
    }
    
    void route_02_match70_bang_bang() {
        this->numberobj_265_value_bang();
    }
    
    void numberobj_265_value_set(number v) {
        this->numberobj_265_value_setter(v);
        v = this->numberobj_265_value;
        number localvalue = v;
    
        if (this->numberobj_265_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-121"), localvalue, this->_currentTime);
        this->numberobj_265_output_set(localvalue);
    }
    
    void route_02_match70_number_set(number v) {
        this->numberobj_265_value_set(v);
    }
    
    void route_02_match70_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_265_value_set(converted);
        }
    }
    
    void pak_04_in69_set(number v) {
        this->pak_04_in69 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_264_output_set(number v) {
        this->pak_04_in69_set(v);
    }
    
    void numberobj_264_value_bang() {
        number v = this->numberobj_264_value;
        number localvalue = v;
    
        if (this->numberobj_264_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-122"), localvalue, this->_currentTime);
        this->numberobj_264_output_set(localvalue);
    }
    
    void route_02_match69_bang_bang() {
        this->numberobj_264_value_bang();
    }
    
    void numberobj_264_value_set(number v) {
        this->numberobj_264_value_setter(v);
        v = this->numberobj_264_value;
        number localvalue = v;
    
        if (this->numberobj_264_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-122"), localvalue, this->_currentTime);
        this->numberobj_264_output_set(localvalue);
    }
    
    void route_02_match69_number_set(number v) {
        this->numberobj_264_value_set(v);
    }
    
    void route_02_match69_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_264_value_set(converted);
        }
    }
    
    void pak_04_in68_set(number v) {
        this->pak_04_in68 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_263_output_set(number v) {
        this->pak_04_in68_set(v);
    }
    
    void numberobj_263_value_bang() {
        number v = this->numberobj_263_value;
        number localvalue = v;
    
        if (this->numberobj_263_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-123"), localvalue, this->_currentTime);
        this->numberobj_263_output_set(localvalue);
    }
    
    void route_02_match68_bang_bang() {
        this->numberobj_263_value_bang();
    }
    
    void numberobj_263_value_set(number v) {
        this->numberobj_263_value_setter(v);
        v = this->numberobj_263_value;
        number localvalue = v;
    
        if (this->numberobj_263_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-123"), localvalue, this->_currentTime);
        this->numberobj_263_output_set(localvalue);
    }
    
    void route_02_match68_number_set(number v) {
        this->numberobj_263_value_set(v);
    }
    
    void route_02_match68_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_263_value_set(converted);
        }
    }
    
    void pak_04_in67_set(number v) {
        this->pak_04_in67 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_262_output_set(number v) {
        this->pak_04_in67_set(v);
    }
    
    void numberobj_262_value_bang() {
        number v = this->numberobj_262_value;
        number localvalue = v;
    
        if (this->numberobj_262_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-124"), localvalue, this->_currentTime);
        this->numberobj_262_output_set(localvalue);
    }
    
    void route_02_match67_bang_bang() {
        this->numberobj_262_value_bang();
    }
    
    void numberobj_262_value_set(number v) {
        this->numberobj_262_value_setter(v);
        v = this->numberobj_262_value;
        number localvalue = v;
    
        if (this->numberobj_262_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-124"), localvalue, this->_currentTime);
        this->numberobj_262_output_set(localvalue);
    }
    
    void route_02_match67_number_set(number v) {
        this->numberobj_262_value_set(v);
    }
    
    void route_02_match67_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_262_value_set(converted);
        }
    }
    
    void pak_04_in66_set(number v) {
        this->pak_04_in66 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_261_output_set(number v) {
        this->pak_04_in66_set(v);
    }
    
    void numberobj_261_value_bang() {
        number v = this->numberobj_261_value;
        number localvalue = v;
    
        if (this->numberobj_261_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-125"), localvalue, this->_currentTime);
        this->numberobj_261_output_set(localvalue);
    }
    
    void route_02_match66_bang_bang() {
        this->numberobj_261_value_bang();
    }
    
    void numberobj_261_value_set(number v) {
        this->numberobj_261_value_setter(v);
        v = this->numberobj_261_value;
        number localvalue = v;
    
        if (this->numberobj_261_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-125"), localvalue, this->_currentTime);
        this->numberobj_261_output_set(localvalue);
    }
    
    void route_02_match66_number_set(number v) {
        this->numberobj_261_value_set(v);
    }
    
    void route_02_match66_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_261_value_set(converted);
        }
    }
    
    void pak_04_in65_set(number v) {
        this->pak_04_in65 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_260_output_set(number v) {
        this->pak_04_in65_set(v);
    }
    
    void numberobj_260_value_bang() {
        number v = this->numberobj_260_value;
        number localvalue = v;
    
        if (this->numberobj_260_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-126"), localvalue, this->_currentTime);
        this->numberobj_260_output_set(localvalue);
    }
    
    void route_02_match65_bang_bang() {
        this->numberobj_260_value_bang();
    }
    
    void numberobj_260_value_set(number v) {
        this->numberobj_260_value_setter(v);
        v = this->numberobj_260_value;
        number localvalue = v;
    
        if (this->numberobj_260_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-126"), localvalue, this->_currentTime);
        this->numberobj_260_output_set(localvalue);
    }
    
    void route_02_match65_number_set(number v) {
        this->numberobj_260_value_set(v);
    }
    
    void route_02_match65_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_260_value_set(converted);
        }
    }
    
    void pak_04_in64_set(number v) {
        this->pak_04_in64 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_259_output_set(number v) {
        this->pak_04_in64_set(v);
    }
    
    void numberobj_259_value_bang() {
        number v = this->numberobj_259_value;
        number localvalue = v;
    
        if (this->numberobj_259_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-127"), localvalue, this->_currentTime);
        this->numberobj_259_output_set(localvalue);
    }
    
    void route_02_match64_bang_bang() {
        this->numberobj_259_value_bang();
    }
    
    void numberobj_259_value_set(number v) {
        this->numberobj_259_value_setter(v);
        v = this->numberobj_259_value;
        number localvalue = v;
    
        if (this->numberobj_259_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-127"), localvalue, this->_currentTime);
        this->numberobj_259_output_set(localvalue);
    }
    
    void route_02_match64_number_set(number v) {
        this->numberobj_259_value_set(v);
    }
    
    void route_02_match64_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_259_value_set(converted);
        }
    }
    
    void pak_04_in63_set(number v) {
        this->pak_04_in63 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_258_output_set(number v) {
        this->pak_04_in63_set(v);
    }
    
    void numberobj_258_value_bang() {
        number v = this->numberobj_258_value;
        number localvalue = v;
    
        if (this->numberobj_258_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-128"), localvalue, this->_currentTime);
        this->numberobj_258_output_set(localvalue);
    }
    
    void route_02_match63_bang_bang() {
        this->numberobj_258_value_bang();
    }
    
    void numberobj_258_value_set(number v) {
        this->numberobj_258_value_setter(v);
        v = this->numberobj_258_value;
        number localvalue = v;
    
        if (this->numberobj_258_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-128"), localvalue, this->_currentTime);
        this->numberobj_258_output_set(localvalue);
    }
    
    void route_02_match63_number_set(number v) {
        this->numberobj_258_value_set(v);
    }
    
    void route_02_match63_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_258_value_set(converted);
        }
    }
    
    void pak_04_in62_set(number v) {
        this->pak_04_in62 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_257_output_set(number v) {
        this->pak_04_in62_set(v);
    }
    
    void numberobj_257_value_bang() {
        number v = this->numberobj_257_value;
        number localvalue = v;
    
        if (this->numberobj_257_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-129"), localvalue, this->_currentTime);
        this->numberobj_257_output_set(localvalue);
    }
    
    void route_02_match62_bang_bang() {
        this->numberobj_257_value_bang();
    }
    
    void numberobj_257_value_set(number v) {
        this->numberobj_257_value_setter(v);
        v = this->numberobj_257_value;
        number localvalue = v;
    
        if (this->numberobj_257_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-129"), localvalue, this->_currentTime);
        this->numberobj_257_output_set(localvalue);
    }
    
    void route_02_match62_number_set(number v) {
        this->numberobj_257_value_set(v);
    }
    
    void route_02_match62_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_257_value_set(converted);
        }
    }
    
    void pak_04_in61_set(number v) {
        this->pak_04_in61 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_256_output_set(number v) {
        this->pak_04_in61_set(v);
    }
    
    void numberobj_256_value_bang() {
        number v = this->numberobj_256_value;
        number localvalue = v;
    
        if (this->numberobj_256_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-130"), localvalue, this->_currentTime);
        this->numberobj_256_output_set(localvalue);
    }
    
    void route_02_match61_bang_bang() {
        this->numberobj_256_value_bang();
    }
    
    void numberobj_256_value_set(number v) {
        this->numberobj_256_value_setter(v);
        v = this->numberobj_256_value;
        number localvalue = v;
    
        if (this->numberobj_256_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-130"), localvalue, this->_currentTime);
        this->numberobj_256_output_set(localvalue);
    }
    
    void route_02_match61_number_set(number v) {
        this->numberobj_256_value_set(v);
    }
    
    void route_02_match61_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_256_value_set(converted);
        }
    }
    
    void pak_04_in60_set(number v) {
        this->pak_04_in60 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_255_output_set(number v) {
        this->pak_04_in60_set(v);
    }
    
    void numberobj_255_value_bang() {
        number v = this->numberobj_255_value;
        number localvalue = v;
    
        if (this->numberobj_255_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-131"), localvalue, this->_currentTime);
        this->numberobj_255_output_set(localvalue);
    }
    
    void route_02_match60_bang_bang() {
        this->numberobj_255_value_bang();
    }
    
    void numberobj_255_value_set(number v) {
        this->numberobj_255_value_setter(v);
        v = this->numberobj_255_value;
        number localvalue = v;
    
        if (this->numberobj_255_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-131"), localvalue, this->_currentTime);
        this->numberobj_255_output_set(localvalue);
    }
    
    void route_02_match60_number_set(number v) {
        this->numberobj_255_value_set(v);
    }
    
    void route_02_match60_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_255_value_set(converted);
        }
    }
    
    void pak_04_in59_set(number v) {
        this->pak_04_in59 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_254_output_set(number v) {
        this->pak_04_in59_set(v);
    }
    
    void numberobj_254_value_bang() {
        number v = this->numberobj_254_value;
        number localvalue = v;
    
        if (this->numberobj_254_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-132"), localvalue, this->_currentTime);
        this->numberobj_254_output_set(localvalue);
    }
    
    void route_02_match59_bang_bang() {
        this->numberobj_254_value_bang();
    }
    
    void numberobj_254_value_set(number v) {
        this->numberobj_254_value_setter(v);
        v = this->numberobj_254_value;
        number localvalue = v;
    
        if (this->numberobj_254_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-132"), localvalue, this->_currentTime);
        this->numberobj_254_output_set(localvalue);
    }
    
    void route_02_match59_number_set(number v) {
        this->numberobj_254_value_set(v);
    }
    
    void route_02_match59_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_254_value_set(converted);
        }
    }
    
    void pak_04_in58_set(number v) {
        this->pak_04_in58 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_253_output_set(number v) {
        this->pak_04_in58_set(v);
    }
    
    void numberobj_253_value_bang() {
        number v = this->numberobj_253_value;
        number localvalue = v;
    
        if (this->numberobj_253_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-133"), localvalue, this->_currentTime);
        this->numberobj_253_output_set(localvalue);
    }
    
    void route_02_match58_bang_bang() {
        this->numberobj_253_value_bang();
    }
    
    void numberobj_253_value_set(number v) {
        this->numberobj_253_value_setter(v);
        v = this->numberobj_253_value;
        number localvalue = v;
    
        if (this->numberobj_253_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-133"), localvalue, this->_currentTime);
        this->numberobj_253_output_set(localvalue);
    }
    
    void route_02_match58_number_set(number v) {
        this->numberobj_253_value_set(v);
    }
    
    void route_02_match58_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_253_value_set(converted);
        }
    }
    
    void pak_04_in57_set(number v) {
        this->pak_04_in57 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_252_output_set(number v) {
        this->pak_04_in57_set(v);
    }
    
    void numberobj_252_value_bang() {
        number v = this->numberobj_252_value;
        number localvalue = v;
    
        if (this->numberobj_252_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-134"), localvalue, this->_currentTime);
        this->numberobj_252_output_set(localvalue);
    }
    
    void route_02_match57_bang_bang() {
        this->numberobj_252_value_bang();
    }
    
    void numberobj_252_value_set(number v) {
        this->numberobj_252_value_setter(v);
        v = this->numberobj_252_value;
        number localvalue = v;
    
        if (this->numberobj_252_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-134"), localvalue, this->_currentTime);
        this->numberobj_252_output_set(localvalue);
    }
    
    void route_02_match57_number_set(number v) {
        this->numberobj_252_value_set(v);
    }
    
    void route_02_match57_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_252_value_set(converted);
        }
    }
    
    void pak_04_in56_set(number v) {
        this->pak_04_in56 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_251_output_set(number v) {
        this->pak_04_in56_set(v);
    }
    
    void numberobj_251_value_bang() {
        number v = this->numberobj_251_value;
        number localvalue = v;
    
        if (this->numberobj_251_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-135"), localvalue, this->_currentTime);
        this->numberobj_251_output_set(localvalue);
    }
    
    void route_02_match56_bang_bang() {
        this->numberobj_251_value_bang();
    }
    
    void numberobj_251_value_set(number v) {
        this->numberobj_251_value_setter(v);
        v = this->numberobj_251_value;
        number localvalue = v;
    
        if (this->numberobj_251_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-135"), localvalue, this->_currentTime);
        this->numberobj_251_output_set(localvalue);
    }
    
    void route_02_match56_number_set(number v) {
        this->numberobj_251_value_set(v);
    }
    
    void route_02_match56_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_251_value_set(converted);
        }
    }
    
    void pak_04_in55_set(number v) {
        this->pak_04_in55 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_250_output_set(number v) {
        this->pak_04_in55_set(v);
    }
    
    void numberobj_250_value_bang() {
        number v = this->numberobj_250_value;
        number localvalue = v;
    
        if (this->numberobj_250_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-136"), localvalue, this->_currentTime);
        this->numberobj_250_output_set(localvalue);
    }
    
    void route_02_match55_bang_bang() {
        this->numberobj_250_value_bang();
    }
    
    void numberobj_250_value_set(number v) {
        this->numberobj_250_value_setter(v);
        v = this->numberobj_250_value;
        number localvalue = v;
    
        if (this->numberobj_250_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-136"), localvalue, this->_currentTime);
        this->numberobj_250_output_set(localvalue);
    }
    
    void route_02_match55_number_set(number v) {
        this->numberobj_250_value_set(v);
    }
    
    void route_02_match55_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_250_value_set(converted);
        }
    }
    
    void pak_04_in54_set(number v) {
        this->pak_04_in54 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_249_output_set(number v) {
        this->pak_04_in54_set(v);
    }
    
    void numberobj_249_value_bang() {
        number v = this->numberobj_249_value;
        number localvalue = v;
    
        if (this->numberobj_249_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-137"), localvalue, this->_currentTime);
        this->numberobj_249_output_set(localvalue);
    }
    
    void route_02_match54_bang_bang() {
        this->numberobj_249_value_bang();
    }
    
    void numberobj_249_value_set(number v) {
        this->numberobj_249_value_setter(v);
        v = this->numberobj_249_value;
        number localvalue = v;
    
        if (this->numberobj_249_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-137"), localvalue, this->_currentTime);
        this->numberobj_249_output_set(localvalue);
    }
    
    void route_02_match54_number_set(number v) {
        this->numberobj_249_value_set(v);
    }
    
    void route_02_match54_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_249_value_set(converted);
        }
    }
    
    void pak_04_in53_set(number v) {
        this->pak_04_in53 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_248_output_set(number v) {
        this->pak_04_in53_set(v);
    }
    
    void numberobj_248_value_bang() {
        number v = this->numberobj_248_value;
        number localvalue = v;
    
        if (this->numberobj_248_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-138"), localvalue, this->_currentTime);
        this->numberobj_248_output_set(localvalue);
    }
    
    void route_02_match53_bang_bang() {
        this->numberobj_248_value_bang();
    }
    
    void numberobj_248_value_set(number v) {
        this->numberobj_248_value_setter(v);
        v = this->numberobj_248_value;
        number localvalue = v;
    
        if (this->numberobj_248_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-138"), localvalue, this->_currentTime);
        this->numberobj_248_output_set(localvalue);
    }
    
    void route_02_match53_number_set(number v) {
        this->numberobj_248_value_set(v);
    }
    
    void route_02_match53_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_248_value_set(converted);
        }
    }
    
    void pak_04_in52_set(number v) {
        this->pak_04_in52 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_247_output_set(number v) {
        this->pak_04_in52_set(v);
    }
    
    void numberobj_247_value_bang() {
        number v = this->numberobj_247_value;
        number localvalue = v;
    
        if (this->numberobj_247_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-139"), localvalue, this->_currentTime);
        this->numberobj_247_output_set(localvalue);
    }
    
    void route_02_match52_bang_bang() {
        this->numberobj_247_value_bang();
    }
    
    void numberobj_247_value_set(number v) {
        this->numberobj_247_value_setter(v);
        v = this->numberobj_247_value;
        number localvalue = v;
    
        if (this->numberobj_247_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-139"), localvalue, this->_currentTime);
        this->numberobj_247_output_set(localvalue);
    }
    
    void route_02_match52_number_set(number v) {
        this->numberobj_247_value_set(v);
    }
    
    void route_02_match52_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_247_value_set(converted);
        }
    }
    
    void pak_04_in51_set(number v) {
        this->pak_04_in51 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_246_output_set(number v) {
        this->pak_04_in51_set(v);
    }
    
    void numberobj_246_value_bang() {
        number v = this->numberobj_246_value;
        number localvalue = v;
    
        if (this->numberobj_246_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-140"), localvalue, this->_currentTime);
        this->numberobj_246_output_set(localvalue);
    }
    
    void route_02_match51_bang_bang() {
        this->numberobj_246_value_bang();
    }
    
    void numberobj_246_value_set(number v) {
        this->numberobj_246_value_setter(v);
        v = this->numberobj_246_value;
        number localvalue = v;
    
        if (this->numberobj_246_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-140"), localvalue, this->_currentTime);
        this->numberobj_246_output_set(localvalue);
    }
    
    void route_02_match51_number_set(number v) {
        this->numberobj_246_value_set(v);
    }
    
    void route_02_match51_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_246_value_set(converted);
        }
    }
    
    void pak_04_in50_set(number v) {
        this->pak_04_in50 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_245_output_set(number v) {
        this->pak_04_in50_set(v);
    }
    
    void numberobj_245_value_bang() {
        number v = this->numberobj_245_value;
        number localvalue = v;
    
        if (this->numberobj_245_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-46"), localvalue, this->_currentTime);
        this->numberobj_245_output_set(localvalue);
    }
    
    void route_02_match50_bang_bang() {
        this->numberobj_245_value_bang();
    }
    
    void numberobj_245_value_set(number v) {
        this->numberobj_245_value_setter(v);
        v = this->numberobj_245_value;
        number localvalue = v;
    
        if (this->numberobj_245_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-46"), localvalue, this->_currentTime);
        this->numberobj_245_output_set(localvalue);
    }
    
    void route_02_match50_number_set(number v) {
        this->numberobj_245_value_set(v);
    }
    
    void route_02_match50_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_245_value_set(converted);
        }
    }
    
    void pak_04_in49_set(number v) {
        this->pak_04_in49 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_244_output_set(number v) {
        this->pak_04_in49_set(v);
    }
    
    void numberobj_244_value_bang() {
        number v = this->numberobj_244_value;
        number localvalue = v;
    
        if (this->numberobj_244_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-47"), localvalue, this->_currentTime);
        this->numberobj_244_output_set(localvalue);
    }
    
    void route_02_match49_bang_bang() {
        this->numberobj_244_value_bang();
    }
    
    void numberobj_244_value_set(number v) {
        this->numberobj_244_value_setter(v);
        v = this->numberobj_244_value;
        number localvalue = v;
    
        if (this->numberobj_244_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-47"), localvalue, this->_currentTime);
        this->numberobj_244_output_set(localvalue);
    }
    
    void route_02_match49_number_set(number v) {
        this->numberobj_244_value_set(v);
    }
    
    void route_02_match49_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_244_value_set(converted);
        }
    }
    
    void pak_04_in48_set(number v) {
        this->pak_04_in48 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_243_output_set(number v) {
        this->pak_04_in48_set(v);
    }
    
    void numberobj_243_value_bang() {
        number v = this->numberobj_243_value;
        number localvalue = v;
    
        if (this->numberobj_243_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-48"), localvalue, this->_currentTime);
        this->numberobj_243_output_set(localvalue);
    }
    
    void route_02_match48_bang_bang() {
        this->numberobj_243_value_bang();
    }
    
    void numberobj_243_value_set(number v) {
        this->numberobj_243_value_setter(v);
        v = this->numberobj_243_value;
        number localvalue = v;
    
        if (this->numberobj_243_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-48"), localvalue, this->_currentTime);
        this->numberobj_243_output_set(localvalue);
    }
    
    void route_02_match48_number_set(number v) {
        this->numberobj_243_value_set(v);
    }
    
    void route_02_match48_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_243_value_set(converted);
        }
    }
    
    void pak_04_in47_set(number v) {
        this->pak_04_in47 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_242_output_set(number v) {
        this->pak_04_in47_set(v);
    }
    
    void numberobj_242_value_bang() {
        number v = this->numberobj_242_value;
        number localvalue = v;
    
        if (this->numberobj_242_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-49"), localvalue, this->_currentTime);
        this->numberobj_242_output_set(localvalue);
    }
    
    void route_02_match47_bang_bang() {
        this->numberobj_242_value_bang();
    }
    
    void numberobj_242_value_set(number v) {
        this->numberobj_242_value_setter(v);
        v = this->numberobj_242_value;
        number localvalue = v;
    
        if (this->numberobj_242_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-49"), localvalue, this->_currentTime);
        this->numberobj_242_output_set(localvalue);
    }
    
    void route_02_match47_number_set(number v) {
        this->numberobj_242_value_set(v);
    }
    
    void route_02_match47_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_242_value_set(converted);
        }
    }
    
    void pak_04_in46_set(number v) {
        this->pak_04_in46 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_241_output_set(number v) {
        this->pak_04_in46_set(v);
    }
    
    void numberobj_241_value_bang() {
        number v = this->numberobj_241_value;
        number localvalue = v;
    
        if (this->numberobj_241_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-50"), localvalue, this->_currentTime);
        this->numberobj_241_output_set(localvalue);
    }
    
    void route_02_match46_bang_bang() {
        this->numberobj_241_value_bang();
    }
    
    void numberobj_241_value_set(number v) {
        this->numberobj_241_value_setter(v);
        v = this->numberobj_241_value;
        number localvalue = v;
    
        if (this->numberobj_241_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-50"), localvalue, this->_currentTime);
        this->numberobj_241_output_set(localvalue);
    }
    
    void route_02_match46_number_set(number v) {
        this->numberobj_241_value_set(v);
    }
    
    void route_02_match46_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_241_value_set(converted);
        }
    }
    
    void pak_04_in45_set(number v) {
        this->pak_04_in45 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_240_output_set(number v) {
        this->pak_04_in45_set(v);
    }
    
    void numberobj_240_value_bang() {
        number v = this->numberobj_240_value;
        number localvalue = v;
    
        if (this->numberobj_240_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-51"), localvalue, this->_currentTime);
        this->numberobj_240_output_set(localvalue);
    }
    
    void route_02_match45_bang_bang() {
        this->numberobj_240_value_bang();
    }
    
    void numberobj_240_value_set(number v) {
        this->numberobj_240_value_setter(v);
        v = this->numberobj_240_value;
        number localvalue = v;
    
        if (this->numberobj_240_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-51"), localvalue, this->_currentTime);
        this->numberobj_240_output_set(localvalue);
    }
    
    void route_02_match45_number_set(number v) {
        this->numberobj_240_value_set(v);
    }
    
    void route_02_match45_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_240_value_set(converted);
        }
    }
    
    void pak_04_in44_set(number v) {
        this->pak_04_in44 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_239_output_set(number v) {
        this->pak_04_in44_set(v);
    }
    
    void numberobj_239_value_bang() {
        number v = this->numberobj_239_value;
        number localvalue = v;
    
        if (this->numberobj_239_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-52"), localvalue, this->_currentTime);
        this->numberobj_239_output_set(localvalue);
    }
    
    void route_02_match44_bang_bang() {
        this->numberobj_239_value_bang();
    }
    
    void numberobj_239_value_set(number v) {
        this->numberobj_239_value_setter(v);
        v = this->numberobj_239_value;
        number localvalue = v;
    
        if (this->numberobj_239_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-52"), localvalue, this->_currentTime);
        this->numberobj_239_output_set(localvalue);
    }
    
    void route_02_match44_number_set(number v) {
        this->numberobj_239_value_set(v);
    }
    
    void route_02_match44_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_239_value_set(converted);
        }
    }
    
    void pak_04_in43_set(number v) {
        this->pak_04_in43 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_238_output_set(number v) {
        this->pak_04_in43_set(v);
    }
    
    void numberobj_238_value_bang() {
        number v = this->numberobj_238_value;
        number localvalue = v;
    
        if (this->numberobj_238_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-53"), localvalue, this->_currentTime);
        this->numberobj_238_output_set(localvalue);
    }
    
    void route_02_match43_bang_bang() {
        this->numberobj_238_value_bang();
    }
    
    void numberobj_238_value_set(number v) {
        this->numberobj_238_value_setter(v);
        v = this->numberobj_238_value;
        number localvalue = v;
    
        if (this->numberobj_238_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-53"), localvalue, this->_currentTime);
        this->numberobj_238_output_set(localvalue);
    }
    
    void route_02_match43_number_set(number v) {
        this->numberobj_238_value_set(v);
    }
    
    void route_02_match43_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_238_value_set(converted);
        }
    }
    
    void pak_04_in42_set(number v) {
        this->pak_04_in42 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_237_output_set(number v) {
        this->pak_04_in42_set(v);
    }
    
    void numberobj_237_value_bang() {
        number v = this->numberobj_237_value;
        number localvalue = v;
    
        if (this->numberobj_237_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-54"), localvalue, this->_currentTime);
        this->numberobj_237_output_set(localvalue);
    }
    
    void route_02_match42_bang_bang() {
        this->numberobj_237_value_bang();
    }
    
    void numberobj_237_value_set(number v) {
        this->numberobj_237_value_setter(v);
        v = this->numberobj_237_value;
        number localvalue = v;
    
        if (this->numberobj_237_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-54"), localvalue, this->_currentTime);
        this->numberobj_237_output_set(localvalue);
    }
    
    void route_02_match42_number_set(number v) {
        this->numberobj_237_value_set(v);
    }
    
    void route_02_match42_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_237_value_set(converted);
        }
    }
    
    void pak_04_in41_set(number v) {
        this->pak_04_in41 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_236_output_set(number v) {
        this->pak_04_in41_set(v);
    }
    
    void numberobj_236_value_bang() {
        number v = this->numberobj_236_value;
        number localvalue = v;
    
        if (this->numberobj_236_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-55"), localvalue, this->_currentTime);
        this->numberobj_236_output_set(localvalue);
    }
    
    void route_02_match41_bang_bang() {
        this->numberobj_236_value_bang();
    }
    
    void numberobj_236_value_set(number v) {
        this->numberobj_236_value_setter(v);
        v = this->numberobj_236_value;
        number localvalue = v;
    
        if (this->numberobj_236_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-55"), localvalue, this->_currentTime);
        this->numberobj_236_output_set(localvalue);
    }
    
    void route_02_match41_number_set(number v) {
        this->numberobj_236_value_set(v);
    }
    
    void route_02_match41_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_236_value_set(converted);
        }
    }
    
    void pak_04_in40_set(number v) {
        this->pak_04_in40 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_235_output_set(number v) {
        this->pak_04_in40_set(v);
    }
    
    void numberobj_235_value_bang() {
        number v = this->numberobj_235_value;
        number localvalue = v;
    
        if (this->numberobj_235_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-26"), localvalue, this->_currentTime);
        this->numberobj_235_output_set(localvalue);
    }
    
    void route_02_match40_bang_bang() {
        this->numberobj_235_value_bang();
    }
    
    void numberobj_235_value_set(number v) {
        this->numberobj_235_value_setter(v);
        v = this->numberobj_235_value;
        number localvalue = v;
    
        if (this->numberobj_235_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-26"), localvalue, this->_currentTime);
        this->numberobj_235_output_set(localvalue);
    }
    
    void route_02_match40_number_set(number v) {
        this->numberobj_235_value_set(v);
    }
    
    void route_02_match40_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_235_value_set(converted);
        }
    }
    
    void pak_04_in39_set(number v) {
        this->pak_04_in39 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_234_output_set(number v) {
        this->pak_04_in39_set(v);
    }
    
    void numberobj_234_value_bang() {
        number v = this->numberobj_234_value;
        number localvalue = v;
    
        if (this->numberobj_234_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-27"), localvalue, this->_currentTime);
        this->numberobj_234_output_set(localvalue);
    }
    
    void route_02_match39_bang_bang() {
        this->numberobj_234_value_bang();
    }
    
    void numberobj_234_value_set(number v) {
        this->numberobj_234_value_setter(v);
        v = this->numberobj_234_value;
        number localvalue = v;
    
        if (this->numberobj_234_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-27"), localvalue, this->_currentTime);
        this->numberobj_234_output_set(localvalue);
    }
    
    void route_02_match39_number_set(number v) {
        this->numberobj_234_value_set(v);
    }
    
    void route_02_match39_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_234_value_set(converted);
        }
    }
    
    void pak_04_in38_set(number v) {
        this->pak_04_in38 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_233_output_set(number v) {
        this->pak_04_in38_set(v);
    }
    
    void numberobj_233_value_bang() {
        number v = this->numberobj_233_value;
        number localvalue = v;
    
        if (this->numberobj_233_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-28"), localvalue, this->_currentTime);
        this->numberobj_233_output_set(localvalue);
    }
    
    void route_02_match38_bang_bang() {
        this->numberobj_233_value_bang();
    }
    
    void numberobj_233_value_set(number v) {
        this->numberobj_233_value_setter(v);
        v = this->numberobj_233_value;
        number localvalue = v;
    
        if (this->numberobj_233_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-28"), localvalue, this->_currentTime);
        this->numberobj_233_output_set(localvalue);
    }
    
    void route_02_match38_number_set(number v) {
        this->numberobj_233_value_set(v);
    }
    
    void route_02_match38_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_233_value_set(converted);
        }
    }
    
    void pak_04_in37_set(number v) {
        this->pak_04_in37 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_232_output_set(number v) {
        this->pak_04_in37_set(v);
    }
    
    void numberobj_232_value_bang() {
        number v = this->numberobj_232_value;
        number localvalue = v;
    
        if (this->numberobj_232_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-29"), localvalue, this->_currentTime);
        this->numberobj_232_output_set(localvalue);
    }
    
    void route_02_match37_bang_bang() {
        this->numberobj_232_value_bang();
    }
    
    void numberobj_232_value_set(number v) {
        this->numberobj_232_value_setter(v);
        v = this->numberobj_232_value;
        number localvalue = v;
    
        if (this->numberobj_232_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-29"), localvalue, this->_currentTime);
        this->numberobj_232_output_set(localvalue);
    }
    
    void route_02_match37_number_set(number v) {
        this->numberobj_232_value_set(v);
    }
    
    void route_02_match37_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_232_value_set(converted);
        }
    }
    
    void pak_04_in36_set(number v) {
        this->pak_04_in36 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_231_output_set(number v) {
        this->pak_04_in36_set(v);
    }
    
    void numberobj_231_value_bang() {
        number v = this->numberobj_231_value;
        number localvalue = v;
    
        if (this->numberobj_231_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-30"), localvalue, this->_currentTime);
        this->numberobj_231_output_set(localvalue);
    }
    
    void route_02_match36_bang_bang() {
        this->numberobj_231_value_bang();
    }
    
    void numberobj_231_value_set(number v) {
        this->numberobj_231_value_setter(v);
        v = this->numberobj_231_value;
        number localvalue = v;
    
        if (this->numberobj_231_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-30"), localvalue, this->_currentTime);
        this->numberobj_231_output_set(localvalue);
    }
    
    void route_02_match36_number_set(number v) {
        this->numberobj_231_value_set(v);
    }
    
    void route_02_match36_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_231_value_set(converted);
        }
    }
    
    void pak_04_in35_set(number v) {
        this->pak_04_in35 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_230_output_set(number v) {
        this->pak_04_in35_set(v);
    }
    
    void numberobj_230_value_bang() {
        number v = this->numberobj_230_value;
        number localvalue = v;
    
        if (this->numberobj_230_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-31"), localvalue, this->_currentTime);
        this->numberobj_230_output_set(localvalue);
    }
    
    void route_02_match35_bang_bang() {
        this->numberobj_230_value_bang();
    }
    
    void numberobj_230_value_set(number v) {
        this->numberobj_230_value_setter(v);
        v = this->numberobj_230_value;
        number localvalue = v;
    
        if (this->numberobj_230_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-31"), localvalue, this->_currentTime);
        this->numberobj_230_output_set(localvalue);
    }
    
    void route_02_match35_number_set(number v) {
        this->numberobj_230_value_set(v);
    }
    
    void route_02_match35_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_230_value_set(converted);
        }
    }
    
    void pak_04_in34_set(number v) {
        this->pak_04_in34 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_229_output_set(number v) {
        this->pak_04_in34_set(v);
    }
    
    void numberobj_229_value_bang() {
        number v = this->numberobj_229_value;
        number localvalue = v;
    
        if (this->numberobj_229_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-32"), localvalue, this->_currentTime);
        this->numberobj_229_output_set(localvalue);
    }
    
    void route_02_match34_bang_bang() {
        this->numberobj_229_value_bang();
    }
    
    void numberobj_229_value_set(number v) {
        this->numberobj_229_value_setter(v);
        v = this->numberobj_229_value;
        number localvalue = v;
    
        if (this->numberobj_229_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-32"), localvalue, this->_currentTime);
        this->numberobj_229_output_set(localvalue);
    }
    
    void route_02_match34_number_set(number v) {
        this->numberobj_229_value_set(v);
    }
    
    void route_02_match34_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_229_value_set(converted);
        }
    }
    
    void pak_04_in33_set(number v) {
        this->pak_04_in33 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_228_output_set(number v) {
        this->pak_04_in33_set(v);
    }
    
    void numberobj_228_value_bang() {
        number v = this->numberobj_228_value;
        number localvalue = v;
    
        if (this->numberobj_228_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-33"), localvalue, this->_currentTime);
        this->numberobj_228_output_set(localvalue);
    }
    
    void route_02_match33_bang_bang() {
        this->numberobj_228_value_bang();
    }
    
    void numberobj_228_value_set(number v) {
        this->numberobj_228_value_setter(v);
        v = this->numberobj_228_value;
        number localvalue = v;
    
        if (this->numberobj_228_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-33"), localvalue, this->_currentTime);
        this->numberobj_228_output_set(localvalue);
    }
    
    void route_02_match33_number_set(number v) {
        this->numberobj_228_value_set(v);
    }
    
    void route_02_match33_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_228_value_set(converted);
        }
    }
    
    void pak_04_in32_set(number v) {
        this->pak_04_in32 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_227_output_set(number v) {
        this->pak_04_in32_set(v);
    }
    
    void numberobj_227_value_bang() {
        number v = this->numberobj_227_value;
        number localvalue = v;
    
        if (this->numberobj_227_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-34"), localvalue, this->_currentTime);
        this->numberobj_227_output_set(localvalue);
    }
    
    void route_02_match32_bang_bang() {
        this->numberobj_227_value_bang();
    }
    
    void numberobj_227_value_set(number v) {
        this->numberobj_227_value_setter(v);
        v = this->numberobj_227_value;
        number localvalue = v;
    
        if (this->numberobj_227_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-34"), localvalue, this->_currentTime);
        this->numberobj_227_output_set(localvalue);
    }
    
    void route_02_match32_number_set(number v) {
        this->numberobj_227_value_set(v);
    }
    
    void route_02_match32_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_227_value_set(converted);
        }
    }
    
    void pak_04_in31_set(number v) {
        this->pak_04_in31 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_226_output_set(number v) {
        this->pak_04_in31_set(v);
    }
    
    void numberobj_226_value_bang() {
        number v = this->numberobj_226_value;
        number localvalue = v;
    
        if (this->numberobj_226_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-35"), localvalue, this->_currentTime);
        this->numberobj_226_output_set(localvalue);
    }
    
    void route_02_match31_bang_bang() {
        this->numberobj_226_value_bang();
    }
    
    void numberobj_226_value_set(number v) {
        this->numberobj_226_value_setter(v);
        v = this->numberobj_226_value;
        number localvalue = v;
    
        if (this->numberobj_226_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-35"), localvalue, this->_currentTime);
        this->numberobj_226_output_set(localvalue);
    }
    
    void route_02_match31_number_set(number v) {
        this->numberobj_226_value_set(v);
    }
    
    void route_02_match31_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_226_value_set(converted);
        }
    }
    
    void pak_04_in30_set(number v) {
        this->pak_04_in30 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_225_output_set(number v) {
        this->pak_04_in30_set(v);
    }
    
    void numberobj_225_value_bang() {
        number v = this->numberobj_225_value;
        number localvalue = v;
    
        if (this->numberobj_225_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-36"), localvalue, this->_currentTime);
        this->numberobj_225_output_set(localvalue);
    }
    
    void route_02_match30_bang_bang() {
        this->numberobj_225_value_bang();
    }
    
    void numberobj_225_value_set(number v) {
        this->numberobj_225_value_setter(v);
        v = this->numberobj_225_value;
        number localvalue = v;
    
        if (this->numberobj_225_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-36"), localvalue, this->_currentTime);
        this->numberobj_225_output_set(localvalue);
    }
    
    void route_02_match30_number_set(number v) {
        this->numberobj_225_value_set(v);
    }
    
    void route_02_match30_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_225_value_set(converted);
        }
    }
    
    void pak_04_in29_set(number v) {
        this->pak_04_in29 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_224_output_set(number v) {
        this->pak_04_in29_set(v);
    }
    
    void numberobj_224_value_bang() {
        number v = this->numberobj_224_value;
        number localvalue = v;
    
        if (this->numberobj_224_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-37"), localvalue, this->_currentTime);
        this->numberobj_224_output_set(localvalue);
    }
    
    void route_02_match29_bang_bang() {
        this->numberobj_224_value_bang();
    }
    
    void numberobj_224_value_set(number v) {
        this->numberobj_224_value_setter(v);
        v = this->numberobj_224_value;
        number localvalue = v;
    
        if (this->numberobj_224_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-37"), localvalue, this->_currentTime);
        this->numberobj_224_output_set(localvalue);
    }
    
    void route_02_match29_number_set(number v) {
        this->numberobj_224_value_set(v);
    }
    
    void route_02_match29_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_224_value_set(converted);
        }
    }
    
    void pak_04_in28_set(number v) {
        this->pak_04_in28 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_223_output_set(number v) {
        this->pak_04_in28_set(v);
    }
    
    void numberobj_223_value_bang() {
        number v = this->numberobj_223_value;
        number localvalue = v;
    
        if (this->numberobj_223_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-38"), localvalue, this->_currentTime);
        this->numberobj_223_output_set(localvalue);
    }
    
    void route_02_match28_bang_bang() {
        this->numberobj_223_value_bang();
    }
    
    void numberobj_223_value_set(number v) {
        this->numberobj_223_value_setter(v);
        v = this->numberobj_223_value;
        number localvalue = v;
    
        if (this->numberobj_223_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-38"), localvalue, this->_currentTime);
        this->numberobj_223_output_set(localvalue);
    }
    
    void route_02_match28_number_set(number v) {
        this->numberobj_223_value_set(v);
    }
    
    void route_02_match28_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_223_value_set(converted);
        }
    }
    
    void pak_04_in27_set(number v) {
        this->pak_04_in27 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_222_output_set(number v) {
        this->pak_04_in27_set(v);
    }
    
    void numberobj_222_value_bang() {
        number v = this->numberobj_222_value;
        number localvalue = v;
    
        if (this->numberobj_222_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-39"), localvalue, this->_currentTime);
        this->numberobj_222_output_set(localvalue);
    }
    
    void route_02_match27_bang_bang() {
        this->numberobj_222_value_bang();
    }
    
    void numberobj_222_value_set(number v) {
        this->numberobj_222_value_setter(v);
        v = this->numberobj_222_value;
        number localvalue = v;
    
        if (this->numberobj_222_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-39"), localvalue, this->_currentTime);
        this->numberobj_222_output_set(localvalue);
    }
    
    void route_02_match27_number_set(number v) {
        this->numberobj_222_value_set(v);
    }
    
    void route_02_match27_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_222_value_set(converted);
        }
    }
    
    void pak_04_in26_set(number v) {
        this->pak_04_in26 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_221_output_set(number v) {
        this->pak_04_in26_set(v);
    }
    
    void numberobj_221_value_bang() {
        number v = this->numberobj_221_value;
        number localvalue = v;
    
        if (this->numberobj_221_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-40"), localvalue, this->_currentTime);
        this->numberobj_221_output_set(localvalue);
    }
    
    void route_02_match26_bang_bang() {
        this->numberobj_221_value_bang();
    }
    
    void numberobj_221_value_set(number v) {
        this->numberobj_221_value_setter(v);
        v = this->numberobj_221_value;
        number localvalue = v;
    
        if (this->numberobj_221_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-40"), localvalue, this->_currentTime);
        this->numberobj_221_output_set(localvalue);
    }
    
    void route_02_match26_number_set(number v) {
        this->numberobj_221_value_set(v);
    }
    
    void route_02_match26_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_221_value_set(converted);
        }
    }
    
    void pak_04_in25_set(number v) {
        this->pak_04_in25 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_220_output_set(number v) {
        this->pak_04_in25_set(v);
    }
    
    void numberobj_220_value_bang() {
        number v = this->numberobj_220_value;
        number localvalue = v;
    
        if (this->numberobj_220_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_220_output_set(localvalue);
    }
    
    void route_02_match25_bang_bang() {
        this->numberobj_220_value_bang();
    }
    
    void numberobj_220_value_set(number v) {
        this->numberobj_220_value_setter(v);
        v = this->numberobj_220_value;
        number localvalue = v;
    
        if (this->numberobj_220_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_220_output_set(localvalue);
    }
    
    void route_02_match25_number_set(number v) {
        this->numberobj_220_value_set(v);
    }
    
    void route_02_match25_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_220_value_set(converted);
        }
    }
    
    void pak_04_in24_set(number v) {
        this->pak_04_in24 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_219_output_set(number v) {
        this->pak_04_in24_set(v);
    }
    
    void numberobj_219_value_bang() {
        number v = this->numberobj_219_value;
        number localvalue = v;
    
        if (this->numberobj_219_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-42"), localvalue, this->_currentTime);
        this->numberobj_219_output_set(localvalue);
    }
    
    void route_02_match24_bang_bang() {
        this->numberobj_219_value_bang();
    }
    
    void numberobj_219_value_set(number v) {
        this->numberobj_219_value_setter(v);
        v = this->numberobj_219_value;
        number localvalue = v;
    
        if (this->numberobj_219_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-42"), localvalue, this->_currentTime);
        this->numberobj_219_output_set(localvalue);
    }
    
    void route_02_match24_number_set(number v) {
        this->numberobj_219_value_set(v);
    }
    
    void route_02_match24_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_219_value_set(converted);
        }
    }
    
    void pak_04_in23_set(number v) {
        this->pak_04_in23 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_218_output_set(number v) {
        this->pak_04_in23_set(v);
    }
    
    void numberobj_218_value_bang() {
        number v = this->numberobj_218_value;
        number localvalue = v;
    
        if (this->numberobj_218_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-43"), localvalue, this->_currentTime);
        this->numberobj_218_output_set(localvalue);
    }
    
    void route_02_match23_bang_bang() {
        this->numberobj_218_value_bang();
    }
    
    void numberobj_218_value_set(number v) {
        this->numberobj_218_value_setter(v);
        v = this->numberobj_218_value;
        number localvalue = v;
    
        if (this->numberobj_218_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-43"), localvalue, this->_currentTime);
        this->numberobj_218_output_set(localvalue);
    }
    
    void route_02_match23_number_set(number v) {
        this->numberobj_218_value_set(v);
    }
    
    void route_02_match23_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_218_value_set(converted);
        }
    }
    
    void pak_04_in22_set(number v) {
        this->pak_04_in22 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_217_output_set(number v) {
        this->pak_04_in22_set(v);
    }
    
    void numberobj_217_value_bang() {
        number v = this->numberobj_217_value;
        number localvalue = v;
    
        if (this->numberobj_217_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-44"), localvalue, this->_currentTime);
        this->numberobj_217_output_set(localvalue);
    }
    
    void route_02_match22_bang_bang() {
        this->numberobj_217_value_bang();
    }
    
    void numberobj_217_value_set(number v) {
        this->numberobj_217_value_setter(v);
        v = this->numberobj_217_value;
        number localvalue = v;
    
        if (this->numberobj_217_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-44"), localvalue, this->_currentTime);
        this->numberobj_217_output_set(localvalue);
    }
    
    void route_02_match22_number_set(number v) {
        this->numberobj_217_value_set(v);
    }
    
    void route_02_match22_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_217_value_set(converted);
        }
    }
    
    void pak_04_in21_set(number v) {
        this->pak_04_in21 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_216_output_set(number v) {
        this->pak_04_in21_set(v);
    }
    
    void numberobj_216_value_bang() {
        number v = this->numberobj_216_value;
        number localvalue = v;
    
        if (this->numberobj_216_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-45"), localvalue, this->_currentTime);
        this->numberobj_216_output_set(localvalue);
    }
    
    void route_02_match21_bang_bang() {
        this->numberobj_216_value_bang();
    }
    
    void numberobj_216_value_set(number v) {
        this->numberobj_216_value_setter(v);
        v = this->numberobj_216_value;
        number localvalue = v;
    
        if (this->numberobj_216_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-45"), localvalue, this->_currentTime);
        this->numberobj_216_output_set(localvalue);
    }
    
    void route_02_match21_number_set(number v) {
        this->numberobj_216_value_set(v);
    }
    
    void route_02_match21_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_216_value_set(converted);
        }
    }
    
    void pak_04_in20_set(number v) {
        this->pak_04_in20 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_215_output_set(number v) {
        this->pak_04_in20_set(v);
    }
    
    void numberobj_215_value_bang() {
        number v = this->numberobj_215_value;
        number localvalue = v;
    
        if (this->numberobj_215_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_215_output_set(localvalue);
    }
    
    void route_02_match20_bang_bang() {
        this->numberobj_215_value_bang();
    }
    
    void numberobj_215_value_set(number v) {
        this->numberobj_215_value_setter(v);
        v = this->numberobj_215_value;
        number localvalue = v;
    
        if (this->numberobj_215_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_215_output_set(localvalue);
    }
    
    void route_02_match20_number_set(number v) {
        this->numberobj_215_value_set(v);
    }
    
    void route_02_match20_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_215_value_set(converted);
        }
    }
    
    void pak_04_in19_set(number v) {
        this->pak_04_in19 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_214_output_set(number v) {
        this->pak_04_in19_set(v);
    }
    
    void numberobj_214_value_bang() {
        number v = this->numberobj_214_value;
        number localvalue = v;
    
        if (this->numberobj_214_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-17"), localvalue, this->_currentTime);
        this->numberobj_214_output_set(localvalue);
    }
    
    void route_02_match19_bang_bang() {
        this->numberobj_214_value_bang();
    }
    
    void numberobj_214_value_set(number v) {
        this->numberobj_214_value_setter(v);
        v = this->numberobj_214_value;
        number localvalue = v;
    
        if (this->numberobj_214_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-17"), localvalue, this->_currentTime);
        this->numberobj_214_output_set(localvalue);
    }
    
    void route_02_match19_number_set(number v) {
        this->numberobj_214_value_set(v);
    }
    
    void route_02_match19_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_214_value_set(converted);
        }
    }
    
    void pak_04_in18_set(number v) {
        this->pak_04_in18 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_213_output_set(number v) {
        this->pak_04_in18_set(v);
    }
    
    void numberobj_213_value_bang() {
        number v = this->numberobj_213_value;
        number localvalue = v;
    
        if (this->numberobj_213_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-18"), localvalue, this->_currentTime);
        this->numberobj_213_output_set(localvalue);
    }
    
    void route_02_match18_bang_bang() {
        this->numberobj_213_value_bang();
    }
    
    void numberobj_213_value_set(number v) {
        this->numberobj_213_value_setter(v);
        v = this->numberobj_213_value;
        number localvalue = v;
    
        if (this->numberobj_213_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-18"), localvalue, this->_currentTime);
        this->numberobj_213_output_set(localvalue);
    }
    
    void route_02_match18_number_set(number v) {
        this->numberobj_213_value_set(v);
    }
    
    void route_02_match18_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_213_value_set(converted);
        }
    }
    
    void pak_04_in17_set(number v) {
        this->pak_04_in17 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_212_output_set(number v) {
        this->pak_04_in17_set(v);
    }
    
    void numberobj_212_value_bang() {
        number v = this->numberobj_212_value;
        number localvalue = v;
    
        if (this->numberobj_212_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-19"), localvalue, this->_currentTime);
        this->numberobj_212_output_set(localvalue);
    }
    
    void route_02_match17_bang_bang() {
        this->numberobj_212_value_bang();
    }
    
    void numberobj_212_value_set(number v) {
        this->numberobj_212_value_setter(v);
        v = this->numberobj_212_value;
        number localvalue = v;
    
        if (this->numberobj_212_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-19"), localvalue, this->_currentTime);
        this->numberobj_212_output_set(localvalue);
    }
    
    void route_02_match17_number_set(number v) {
        this->numberobj_212_value_set(v);
    }
    
    void route_02_match17_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_212_value_set(converted);
        }
    }
    
    void pak_04_in16_set(number v) {
        this->pak_04_in16 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_211_output_set(number v) {
        this->pak_04_in16_set(v);
    }
    
    void numberobj_211_value_bang() {
        number v = this->numberobj_211_value;
        number localvalue = v;
    
        if (this->numberobj_211_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-20"), localvalue, this->_currentTime);
        this->numberobj_211_output_set(localvalue);
    }
    
    void route_02_match16_bang_bang() {
        this->numberobj_211_value_bang();
    }
    
    void numberobj_211_value_set(number v) {
        this->numberobj_211_value_setter(v);
        v = this->numberobj_211_value;
        number localvalue = v;
    
        if (this->numberobj_211_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-20"), localvalue, this->_currentTime);
        this->numberobj_211_output_set(localvalue);
    }
    
    void route_02_match16_number_set(number v) {
        this->numberobj_211_value_set(v);
    }
    
    void route_02_match16_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_211_value_set(converted);
        }
    }
    
    void pak_04_in15_set(number v) {
        this->pak_04_in15 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_210_output_set(number v) {
        this->pak_04_in15_set(v);
    }
    
    void numberobj_210_value_bang() {
        number v = this->numberobj_210_value;
        number localvalue = v;
    
        if (this->numberobj_210_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_210_output_set(localvalue);
    }
    
    void route_02_match15_bang_bang() {
        this->numberobj_210_value_bang();
    }
    
    void numberobj_210_value_set(number v) {
        this->numberobj_210_value_setter(v);
        v = this->numberobj_210_value;
        number localvalue = v;
    
        if (this->numberobj_210_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_210_output_set(localvalue);
    }
    
    void route_02_match15_number_set(number v) {
        this->numberobj_210_value_set(v);
    }
    
    void route_02_match15_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_210_value_set(converted);
        }
    }
    
    void pak_04_in14_set(number v) {
        this->pak_04_in14 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_209_output_set(number v) {
        this->pak_04_in14_set(v);
    }
    
    void numberobj_209_value_bang() {
        number v = this->numberobj_209_value;
        number localvalue = v;
    
        if (this->numberobj_209_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-22"), localvalue, this->_currentTime);
        this->numberobj_209_output_set(localvalue);
    }
    
    void route_02_match14_bang_bang() {
        this->numberobj_209_value_bang();
    }
    
    void numberobj_209_value_set(number v) {
        this->numberobj_209_value_setter(v);
        v = this->numberobj_209_value;
        number localvalue = v;
    
        if (this->numberobj_209_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-22"), localvalue, this->_currentTime);
        this->numberobj_209_output_set(localvalue);
    }
    
    void route_02_match14_number_set(number v) {
        this->numberobj_209_value_set(v);
    }
    
    void route_02_match14_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_209_value_set(converted);
        }
    }
    
    void pak_04_in13_set(number v) {
        this->pak_04_in13 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_208_output_set(number v) {
        this->pak_04_in13_set(v);
    }
    
    void numberobj_208_value_bang() {
        number v = this->numberobj_208_value;
        number localvalue = v;
    
        if (this->numberobj_208_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_208_output_set(localvalue);
    }
    
    void route_02_match13_bang_bang() {
        this->numberobj_208_value_bang();
    }
    
    void numberobj_208_value_set(number v) {
        this->numberobj_208_value_setter(v);
        v = this->numberobj_208_value;
        number localvalue = v;
    
        if (this->numberobj_208_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_208_output_set(localvalue);
    }
    
    void route_02_match13_number_set(number v) {
        this->numberobj_208_value_set(v);
    }
    
    void route_02_match13_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_208_value_set(converted);
        }
    }
    
    void pak_04_in12_set(number v) {
        this->pak_04_in12 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_207_output_set(number v) {
        this->pak_04_in12_set(v);
    }
    
    void numberobj_207_value_bang() {
        number v = this->numberobj_207_value;
        number localvalue = v;
    
        if (this->numberobj_207_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-24"), localvalue, this->_currentTime);
        this->numberobj_207_output_set(localvalue);
    }
    
    void route_02_match12_bang_bang() {
        this->numberobj_207_value_bang();
    }
    
    void numberobj_207_value_set(number v) {
        this->numberobj_207_value_setter(v);
        v = this->numberobj_207_value;
        number localvalue = v;
    
        if (this->numberobj_207_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-24"), localvalue, this->_currentTime);
        this->numberobj_207_output_set(localvalue);
    }
    
    void route_02_match12_number_set(number v) {
        this->numberobj_207_value_set(v);
    }
    
    void route_02_match12_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_207_value_set(converted);
        }
    }
    
    void pak_04_in11_set(number v) {
        this->pak_04_in11 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_206_output_set(number v) {
        this->pak_04_in11_set(v);
    }
    
    void numberobj_206_value_bang() {
        number v = this->numberobj_206_value;
        number localvalue = v;
    
        if (this->numberobj_206_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-25"), localvalue, this->_currentTime);
        this->numberobj_206_output_set(localvalue);
    }
    
    void route_02_match11_bang_bang() {
        this->numberobj_206_value_bang();
    }
    
    void numberobj_206_value_set(number v) {
        this->numberobj_206_value_setter(v);
        v = this->numberobj_206_value;
        number localvalue = v;
    
        if (this->numberobj_206_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-25"), localvalue, this->_currentTime);
        this->numberobj_206_output_set(localvalue);
    }
    
    void route_02_match11_number_set(number v) {
        this->numberobj_206_value_set(v);
    }
    
    void route_02_match11_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_206_value_set(converted);
        }
    }
    
    void pak_04_in10_set(number v) {
        this->pak_04_in10 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_205_output_set(number v) {
        this->pak_04_in10_set(v);
    }
    
    void numberobj_205_value_bang() {
        number v = this->numberobj_205_value;
        number localvalue = v;
    
        if (this->numberobj_205_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-11"), localvalue, this->_currentTime);
        this->numberobj_205_output_set(localvalue);
    }
    
    void route_02_match10_bang_bang() {
        this->numberobj_205_value_bang();
    }
    
    void numberobj_205_value_set(number v) {
        this->numberobj_205_value_setter(v);
        v = this->numberobj_205_value;
        number localvalue = v;
    
        if (this->numberobj_205_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-11"), localvalue, this->_currentTime);
        this->numberobj_205_output_set(localvalue);
    }
    
    void route_02_match10_number_set(number v) {
        this->numberobj_205_value_set(v);
    }
    
    void route_02_match10_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_205_value_set(converted);
        }
    }
    
    void pak_04_in9_set(number v) {
        this->pak_04_in9 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_204_output_set(number v) {
        this->pak_04_in9_set(v);
    }
    
    void numberobj_204_value_bang() {
        number v = this->numberobj_204_value;
        number localvalue = v;
    
        if (this->numberobj_204_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-12"), localvalue, this->_currentTime);
        this->numberobj_204_output_set(localvalue);
    }
    
    void route_02_match9_bang_bang() {
        this->numberobj_204_value_bang();
    }
    
    void numberobj_204_value_set(number v) {
        this->numberobj_204_value_setter(v);
        v = this->numberobj_204_value;
        number localvalue = v;
    
        if (this->numberobj_204_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-12"), localvalue, this->_currentTime);
        this->numberobj_204_output_set(localvalue);
    }
    
    void route_02_match9_number_set(number v) {
        this->numberobj_204_value_set(v);
    }
    
    void route_02_match9_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_204_value_set(converted);
        }
    }
    
    void pak_04_in8_set(number v) {
        this->pak_04_in8 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_203_output_set(number v) {
        this->pak_04_in8_set(v);
    }
    
    void numberobj_203_value_bang() {
        number v = this->numberobj_203_value;
        number localvalue = v;
    
        if (this->numberobj_203_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-13"), localvalue, this->_currentTime);
        this->numberobj_203_output_set(localvalue);
    }
    
    void route_02_match8_bang_bang() {
        this->numberobj_203_value_bang();
    }
    
    void numberobj_203_value_set(number v) {
        this->numberobj_203_value_setter(v);
        v = this->numberobj_203_value;
        number localvalue = v;
    
        if (this->numberobj_203_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-13"), localvalue, this->_currentTime);
        this->numberobj_203_output_set(localvalue);
    }
    
    void route_02_match8_number_set(number v) {
        this->numberobj_203_value_set(v);
    }
    
    void route_02_match8_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_203_value_set(converted);
        }
    }
    
    void pak_04_in7_set(number v) {
        this->pak_04_in7 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_202_output_set(number v) {
        this->pak_04_in7_set(v);
    }
    
    void numberobj_202_value_bang() {
        number v = this->numberobj_202_value;
        number localvalue = v;
    
        if (this->numberobj_202_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_202_output_set(localvalue);
    }
    
    void route_02_match7_bang_bang() {
        this->numberobj_202_value_bang();
    }
    
    void numberobj_202_value_set(number v) {
        this->numberobj_202_value_setter(v);
        v = this->numberobj_202_value;
        number localvalue = v;
    
        if (this->numberobj_202_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_202_output_set(localvalue);
    }
    
    void route_02_match7_number_set(number v) {
        this->numberobj_202_value_set(v);
    }
    
    void route_02_match7_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_202_value_set(converted);
        }
    }
    
    void pak_04_in6_set(number v) {
        this->pak_04_in6 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_201_output_set(number v) {
        this->pak_04_in6_set(v);
    }
    
    void numberobj_201_value_bang() {
        number v = this->numberobj_201_value;
        number localvalue = v;
    
        if (this->numberobj_201_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-15"), localvalue, this->_currentTime);
        this->numberobj_201_output_set(localvalue);
    }
    
    void route_02_match6_bang_bang() {
        this->numberobj_201_value_bang();
    }
    
    void numberobj_201_value_set(number v) {
        this->numberobj_201_value_setter(v);
        v = this->numberobj_201_value;
        number localvalue = v;
    
        if (this->numberobj_201_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-15"), localvalue, this->_currentTime);
        this->numberobj_201_output_set(localvalue);
    }
    
    void route_02_match6_number_set(number v) {
        this->numberobj_201_value_set(v);
    }
    
    void route_02_match6_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_201_value_set(converted);
        }
    }
    
    void pak_04_in5_set(number v) {
        this->pak_04_in5 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_200_output_set(number v) {
        this->pak_04_in5_set(v);
    }
    
    void numberobj_200_value_bang() {
        number v = this->numberobj_200_value;
        number localvalue = v;
    
        if (this->numberobj_200_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-10"), localvalue, this->_currentTime);
        this->numberobj_200_output_set(localvalue);
    }
    
    void route_02_match5_bang_bang() {
        this->numberobj_200_value_bang();
    }
    
    void numberobj_200_value_set(number v) {
        this->numberobj_200_value_setter(v);
        v = this->numberobj_200_value;
        number localvalue = v;
    
        if (this->numberobj_200_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-10"), localvalue, this->_currentTime);
        this->numberobj_200_output_set(localvalue);
    }
    
    void route_02_match5_number_set(number v) {
        this->numberobj_200_value_set(v);
    }
    
    void route_02_match5_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_200_value_set(converted);
        }
    }
    
    void pak_04_in4_set(number v) {
        this->pak_04_in4 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_199_output_set(number v) {
        this->pak_04_in4_set(v);
    }
    
    void numberobj_199_value_bang() {
        number v = this->numberobj_199_value;
        number localvalue = v;
    
        if (this->numberobj_199_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_199_output_set(localvalue);
    }
    
    void route_02_match4_bang_bang() {
        this->numberobj_199_value_bang();
    }
    
    void numberobj_199_value_set(number v) {
        this->numberobj_199_value_setter(v);
        v = this->numberobj_199_value;
        number localvalue = v;
    
        if (this->numberobj_199_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_199_output_set(localvalue);
    }
    
    void route_02_match4_number_set(number v) {
        this->numberobj_199_value_set(v);
    }
    
    void route_02_match4_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_199_value_set(converted);
        }
    }
    
    void pak_04_in3_set(number v) {
        this->pak_04_in3 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_198_output_set(number v) {
        this->pak_04_in3_set(v);
    }
    
    void numberobj_198_value_bang() {
        number v = this->numberobj_198_value;
        number localvalue = v;
    
        if (this->numberobj_198_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-8"), localvalue, this->_currentTime);
        this->numberobj_198_output_set(localvalue);
    }
    
    void route_02_match3_bang_bang() {
        this->numberobj_198_value_bang();
    }
    
    void numberobj_198_value_set(number v) {
        this->numberobj_198_value_setter(v);
        v = this->numberobj_198_value;
        number localvalue = v;
    
        if (this->numberobj_198_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-8"), localvalue, this->_currentTime);
        this->numberobj_198_output_set(localvalue);
    }
    
    void route_02_match3_number_set(number v) {
        this->numberobj_198_value_set(v);
    }
    
    void route_02_match3_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_198_value_set(converted);
        }
    }
    
    void pak_04_in2_set(number v) {
        this->pak_04_in2 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_197_output_set(number v) {
        this->pak_04_in2_set(v);
    }
    
    void numberobj_197_value_bang() {
        number v = this->numberobj_197_value;
        number localvalue = v;
    
        if (this->numberobj_197_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-7"), localvalue, this->_currentTime);
        this->numberobj_197_output_set(localvalue);
    }
    
    void route_02_match2_bang_bang() {
        this->numberobj_197_value_bang();
    }
    
    void numberobj_197_value_set(number v) {
        this->numberobj_197_value_setter(v);
        v = this->numberobj_197_value;
        number localvalue = v;
    
        if (this->numberobj_197_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-7"), localvalue, this->_currentTime);
        this->numberobj_197_output_set(localvalue);
    }
    
    void route_02_match2_number_set(number v) {
        this->numberobj_197_value_set(v);
    }
    
    void route_02_match2_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_197_value_set(converted);
        }
    }
    
    void pak_04_in1_set(number v) {
        this->pak_04_in1 = v;
    
        list array = list(
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        );
    
        array[0] = trunc(this->pak_04_in1);
        array[1] = trunc(this->pak_04_in2);
        array[2] = trunc(this->pak_04_in3);
        array[3] = trunc(this->pak_04_in4);
        array[4] = trunc(this->pak_04_in5);
        array[5] = trunc(this->pak_04_in6);
        array[6] = trunc(this->pak_04_in7);
        array[7] = trunc(this->pak_04_in8);
        array[8] = trunc(this->pak_04_in9);
        array[9] = trunc(this->pak_04_in10);
        array[10] = trunc(this->pak_04_in11);
        array[11] = trunc(this->pak_04_in12);
        array[12] = trunc(this->pak_04_in13);
        array[13] = trunc(this->pak_04_in14);
        array[14] = trunc(this->pak_04_in15);
        array[15] = trunc(this->pak_04_in16);
        array[16] = trunc(this->pak_04_in17);
        array[17] = trunc(this->pak_04_in18);
        array[18] = trunc(this->pak_04_in19);
        array[19] = trunc(this->pak_04_in20);
        array[20] = trunc(this->pak_04_in21);
        array[21] = trunc(this->pak_04_in22);
        array[22] = trunc(this->pak_04_in23);
        array[23] = trunc(this->pak_04_in24);
        array[24] = trunc(this->pak_04_in25);
        array[25] = trunc(this->pak_04_in26);
        array[26] = trunc(this->pak_04_in27);
        array[27] = trunc(this->pak_04_in28);
        array[28] = trunc(this->pak_04_in29);
        array[29] = trunc(this->pak_04_in30);
        array[30] = trunc(this->pak_04_in31);
        array[31] = trunc(this->pak_04_in32);
        array[32] = trunc(this->pak_04_in33);
        array[33] = trunc(this->pak_04_in34);
        array[34] = trunc(this->pak_04_in35);
        array[35] = trunc(this->pak_04_in36);
        array[36] = trunc(this->pak_04_in37);
        array[37] = trunc(this->pak_04_in38);
        array[38] = trunc(this->pak_04_in39);
        array[39] = trunc(this->pak_04_in40);
        array[40] = trunc(this->pak_04_in41);
        array[41] = trunc(this->pak_04_in42);
        array[42] = trunc(this->pak_04_in43);
        array[43] = trunc(this->pak_04_in44);
        array[44] = trunc(this->pak_04_in45);
        array[45] = trunc(this->pak_04_in46);
        array[46] = trunc(this->pak_04_in47);
        array[47] = trunc(this->pak_04_in48);
        array[48] = trunc(this->pak_04_in49);
        array[49] = trunc(this->pak_04_in50);
        array[50] = trunc(this->pak_04_in51);
        array[51] = trunc(this->pak_04_in52);
        array[52] = trunc(this->pak_04_in53);
        array[53] = trunc(this->pak_04_in54);
        array[54] = trunc(this->pak_04_in55);
        array[55] = trunc(this->pak_04_in56);
        array[56] = trunc(this->pak_04_in57);
        array[57] = trunc(this->pak_04_in58);
        array[58] = trunc(this->pak_04_in59);
        array[59] = trunc(this->pak_04_in60);
        array[60] = trunc(this->pak_04_in61);
        array[61] = trunc(this->pak_04_in62);
        array[62] = trunc(this->pak_04_in63);
        array[63] = trunc(this->pak_04_in64);
        array[64] = trunc(this->pak_04_in65);
        array[65] = trunc(this->pak_04_in66);
        array[66] = trunc(this->pak_04_in67);
        array[67] = trunc(this->pak_04_in68);
        array[68] = trunc(this->pak_04_in69);
        array[69] = trunc(this->pak_04_in70);
        array[70] = trunc(this->pak_04_in71);
        array[71] = trunc(this->pak_04_in72);
        array[72] = trunc(this->pak_04_in73);
        array[73] = trunc(this->pak_04_in74);
        array[74] = trunc(this->pak_04_in75);
        array[75] = trunc(this->pak_04_in76);
        array[76] = trunc(this->pak_04_in77);
        array[77] = trunc(this->pak_04_in78);
        array[78] = trunc(this->pak_04_in79);
        array[79] = trunc(this->pak_04_in80);
        array[80] = trunc(this->pak_04_in81);
        array[81] = trunc(this->pak_04_in82);
        array[82] = trunc(this->pak_04_in83);
        array[83] = trunc(this->pak_04_in84);
        array[84] = trunc(this->pak_04_in85);
        array[85] = trunc(this->pak_04_in86);
        array[86] = trunc(this->pak_04_in87);
        array[87] = trunc(this->pak_04_in88);
        array[88] = trunc(this->pak_04_in89);
        array[89] = trunc(this->pak_04_in90);
        array[90] = trunc(this->pak_04_in91);
        array[91] = trunc(this->pak_04_in92);
        array[92] = trunc(this->pak_04_in93);
        array[93] = trunc(this->pak_04_in94);
        array[94] = trunc(this->pak_04_in95);
        array[95] = trunc(this->pak_04_in96);
        array[96] = trunc(this->pak_04_in97);
        array[97] = trunc(this->pak_04_in98);
        array[98] = trunc(this->pak_04_in99);
        array[99] = trunc(this->pak_04_in100);
        this->pak_04_out_set(array);
    }
    
    void numberobj_196_output_set(number v) {
        this->pak_04_in1_set(v);
    }
    
    void numberobj_196_value_bang() {
        number v = this->numberobj_196_value;
        number localvalue = v;
    
        if (this->numberobj_196_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_196_output_set(localvalue);
    }
    
    void route_02_match1_bang_bang() {
        this->numberobj_196_value_bang();
    }
    
    void numberobj_196_value_set(number v) {
        this->numberobj_196_value_setter(v);
        v = this->numberobj_196_value;
        number localvalue = v;
    
        if (this->numberobj_196_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_196_output_set(localvalue);
    }
    
    void route_02_match1_number_set(number v) {
        this->numberobj_196_value_set(v);
    }
    
    void route_02_match1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_196_value_set(converted);
        }
    }
    
    void route_02_nomatch_number_set(number ) {}
    
    void route_02_nomatch_list_set(const list& ) {}
    
    void route_02_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_02_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_02_selector100) {
                if (input->length == 0)
                    this->route_02_match100_bang_bang();
                else if (input->length == 1)
                    this->route_02_match100_number_set(input[0]);
                else
                    this->route_02_match100_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector99) {
                if (input->length == 0)
                    this->route_02_match99_bang_bang();
                else if (input->length == 1)
                    this->route_02_match99_number_set(input[0]);
                else
                    this->route_02_match99_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector98) {
                if (input->length == 0)
                    this->route_02_match98_bang_bang();
                else if (input->length == 1)
                    this->route_02_match98_number_set(input[0]);
                else
                    this->route_02_match98_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector97) {
                if (input->length == 0)
                    this->route_02_match97_bang_bang();
                else if (input->length == 1)
                    this->route_02_match97_number_set(input[0]);
                else
                    this->route_02_match97_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector96) {
                if (input->length == 0)
                    this->route_02_match96_bang_bang();
                else if (input->length == 1)
                    this->route_02_match96_number_set(input[0]);
                else
                    this->route_02_match96_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector95) {
                if (input->length == 0)
                    this->route_02_match95_bang_bang();
                else if (input->length == 1)
                    this->route_02_match95_number_set(input[0]);
                else
                    this->route_02_match95_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector94) {
                if (input->length == 0)
                    this->route_02_match94_bang_bang();
                else if (input->length == 1)
                    this->route_02_match94_number_set(input[0]);
                else
                    this->route_02_match94_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector93) {
                if (input->length == 0)
                    this->route_02_match93_bang_bang();
                else if (input->length == 1)
                    this->route_02_match93_number_set(input[0]);
                else
                    this->route_02_match93_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector92) {
                if (input->length == 0)
                    this->route_02_match92_bang_bang();
                else if (input->length == 1)
                    this->route_02_match92_number_set(input[0]);
                else
                    this->route_02_match92_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector91) {
                if (input->length == 0)
                    this->route_02_match91_bang_bang();
                else if (input->length == 1)
                    this->route_02_match91_number_set(input[0]);
                else
                    this->route_02_match91_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector90) {
                if (input->length == 0)
                    this->route_02_match90_bang_bang();
                else if (input->length == 1)
                    this->route_02_match90_number_set(input[0]);
                else
                    this->route_02_match90_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector89) {
                if (input->length == 0)
                    this->route_02_match89_bang_bang();
                else if (input->length == 1)
                    this->route_02_match89_number_set(input[0]);
                else
                    this->route_02_match89_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector88) {
                if (input->length == 0)
                    this->route_02_match88_bang_bang();
                else if (input->length == 1)
                    this->route_02_match88_number_set(input[0]);
                else
                    this->route_02_match88_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector87) {
                if (input->length == 0)
                    this->route_02_match87_bang_bang();
                else if (input->length == 1)
                    this->route_02_match87_number_set(input[0]);
                else
                    this->route_02_match87_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector86) {
                if (input->length == 0)
                    this->route_02_match86_bang_bang();
                else if (input->length == 1)
                    this->route_02_match86_number_set(input[0]);
                else
                    this->route_02_match86_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector85) {
                if (input->length == 0)
                    this->route_02_match85_bang_bang();
                else if (input->length == 1)
                    this->route_02_match85_number_set(input[0]);
                else
                    this->route_02_match85_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector84) {
                if (input->length == 0)
                    this->route_02_match84_bang_bang();
                else if (input->length == 1)
                    this->route_02_match84_number_set(input[0]);
                else
                    this->route_02_match84_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector83) {
                if (input->length == 0)
                    this->route_02_match83_bang_bang();
                else if (input->length == 1)
                    this->route_02_match83_number_set(input[0]);
                else
                    this->route_02_match83_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector82) {
                if (input->length == 0)
                    this->route_02_match82_bang_bang();
                else if (input->length == 1)
                    this->route_02_match82_number_set(input[0]);
                else
                    this->route_02_match82_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector81) {
                if (input->length == 0)
                    this->route_02_match81_bang_bang();
                else if (input->length == 1)
                    this->route_02_match81_number_set(input[0]);
                else
                    this->route_02_match81_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector80) {
                if (input->length == 0)
                    this->route_02_match80_bang_bang();
                else if (input->length == 1)
                    this->route_02_match80_number_set(input[0]);
                else
                    this->route_02_match80_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector79) {
                if (input->length == 0)
                    this->route_02_match79_bang_bang();
                else if (input->length == 1)
                    this->route_02_match79_number_set(input[0]);
                else
                    this->route_02_match79_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector78) {
                if (input->length == 0)
                    this->route_02_match78_bang_bang();
                else if (input->length == 1)
                    this->route_02_match78_number_set(input[0]);
                else
                    this->route_02_match78_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector77) {
                if (input->length == 0)
                    this->route_02_match77_bang_bang();
                else if (input->length == 1)
                    this->route_02_match77_number_set(input[0]);
                else
                    this->route_02_match77_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector76) {
                if (input->length == 0)
                    this->route_02_match76_bang_bang();
                else if (input->length == 1)
                    this->route_02_match76_number_set(input[0]);
                else
                    this->route_02_match76_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector75) {
                if (input->length == 0)
                    this->route_02_match75_bang_bang();
                else if (input->length == 1)
                    this->route_02_match75_number_set(input[0]);
                else
                    this->route_02_match75_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector74) {
                if (input->length == 0)
                    this->route_02_match74_bang_bang();
                else if (input->length == 1)
                    this->route_02_match74_number_set(input[0]);
                else
                    this->route_02_match74_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector73) {
                if (input->length == 0)
                    this->route_02_match73_bang_bang();
                else if (input->length == 1)
                    this->route_02_match73_number_set(input[0]);
                else
                    this->route_02_match73_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector72) {
                if (input->length == 0)
                    this->route_02_match72_bang_bang();
                else if (input->length == 1)
                    this->route_02_match72_number_set(input[0]);
                else
                    this->route_02_match72_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector71) {
                if (input->length == 0)
                    this->route_02_match71_bang_bang();
                else if (input->length == 1)
                    this->route_02_match71_number_set(input[0]);
                else
                    this->route_02_match71_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector70) {
                if (input->length == 0)
                    this->route_02_match70_bang_bang();
                else if (input->length == 1)
                    this->route_02_match70_number_set(input[0]);
                else
                    this->route_02_match70_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector69) {
                if (input->length == 0)
                    this->route_02_match69_bang_bang();
                else if (input->length == 1)
                    this->route_02_match69_number_set(input[0]);
                else
                    this->route_02_match69_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector68) {
                if (input->length == 0)
                    this->route_02_match68_bang_bang();
                else if (input->length == 1)
                    this->route_02_match68_number_set(input[0]);
                else
                    this->route_02_match68_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector67) {
                if (input->length == 0)
                    this->route_02_match67_bang_bang();
                else if (input->length == 1)
                    this->route_02_match67_number_set(input[0]);
                else
                    this->route_02_match67_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector66) {
                if (input->length == 0)
                    this->route_02_match66_bang_bang();
                else if (input->length == 1)
                    this->route_02_match66_number_set(input[0]);
                else
                    this->route_02_match66_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector65) {
                if (input->length == 0)
                    this->route_02_match65_bang_bang();
                else if (input->length == 1)
                    this->route_02_match65_number_set(input[0]);
                else
                    this->route_02_match65_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector64) {
                if (input->length == 0)
                    this->route_02_match64_bang_bang();
                else if (input->length == 1)
                    this->route_02_match64_number_set(input[0]);
                else
                    this->route_02_match64_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector63) {
                if (input->length == 0)
                    this->route_02_match63_bang_bang();
                else if (input->length == 1)
                    this->route_02_match63_number_set(input[0]);
                else
                    this->route_02_match63_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector62) {
                if (input->length == 0)
                    this->route_02_match62_bang_bang();
                else if (input->length == 1)
                    this->route_02_match62_number_set(input[0]);
                else
                    this->route_02_match62_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector61) {
                if (input->length == 0)
                    this->route_02_match61_bang_bang();
                else if (input->length == 1)
                    this->route_02_match61_number_set(input[0]);
                else
                    this->route_02_match61_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector60) {
                if (input->length == 0)
                    this->route_02_match60_bang_bang();
                else if (input->length == 1)
                    this->route_02_match60_number_set(input[0]);
                else
                    this->route_02_match60_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector59) {
                if (input->length == 0)
                    this->route_02_match59_bang_bang();
                else if (input->length == 1)
                    this->route_02_match59_number_set(input[0]);
                else
                    this->route_02_match59_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector58) {
                if (input->length == 0)
                    this->route_02_match58_bang_bang();
                else if (input->length == 1)
                    this->route_02_match58_number_set(input[0]);
                else
                    this->route_02_match58_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector57) {
                if (input->length == 0)
                    this->route_02_match57_bang_bang();
                else if (input->length == 1)
                    this->route_02_match57_number_set(input[0]);
                else
                    this->route_02_match57_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector56) {
                if (input->length == 0)
                    this->route_02_match56_bang_bang();
                else if (input->length == 1)
                    this->route_02_match56_number_set(input[0]);
                else
                    this->route_02_match56_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector55) {
                if (input->length == 0)
                    this->route_02_match55_bang_bang();
                else if (input->length == 1)
                    this->route_02_match55_number_set(input[0]);
                else
                    this->route_02_match55_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector54) {
                if (input->length == 0)
                    this->route_02_match54_bang_bang();
                else if (input->length == 1)
                    this->route_02_match54_number_set(input[0]);
                else
                    this->route_02_match54_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector53) {
                if (input->length == 0)
                    this->route_02_match53_bang_bang();
                else if (input->length == 1)
                    this->route_02_match53_number_set(input[0]);
                else
                    this->route_02_match53_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector52) {
                if (input->length == 0)
                    this->route_02_match52_bang_bang();
                else if (input->length == 1)
                    this->route_02_match52_number_set(input[0]);
                else
                    this->route_02_match52_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector51) {
                if (input->length == 0)
                    this->route_02_match51_bang_bang();
                else if (input->length == 1)
                    this->route_02_match51_number_set(input[0]);
                else
                    this->route_02_match51_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector50) {
                if (input->length == 0)
                    this->route_02_match50_bang_bang();
                else if (input->length == 1)
                    this->route_02_match50_number_set(input[0]);
                else
                    this->route_02_match50_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector49) {
                if (input->length == 0)
                    this->route_02_match49_bang_bang();
                else if (input->length == 1)
                    this->route_02_match49_number_set(input[0]);
                else
                    this->route_02_match49_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector48) {
                if (input->length == 0)
                    this->route_02_match48_bang_bang();
                else if (input->length == 1)
                    this->route_02_match48_number_set(input[0]);
                else
                    this->route_02_match48_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector47) {
                if (input->length == 0)
                    this->route_02_match47_bang_bang();
                else if (input->length == 1)
                    this->route_02_match47_number_set(input[0]);
                else
                    this->route_02_match47_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector46) {
                if (input->length == 0)
                    this->route_02_match46_bang_bang();
                else if (input->length == 1)
                    this->route_02_match46_number_set(input[0]);
                else
                    this->route_02_match46_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector45) {
                if (input->length == 0)
                    this->route_02_match45_bang_bang();
                else if (input->length == 1)
                    this->route_02_match45_number_set(input[0]);
                else
                    this->route_02_match45_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector44) {
                if (input->length == 0)
                    this->route_02_match44_bang_bang();
                else if (input->length == 1)
                    this->route_02_match44_number_set(input[0]);
                else
                    this->route_02_match44_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector43) {
                if (input->length == 0)
                    this->route_02_match43_bang_bang();
                else if (input->length == 1)
                    this->route_02_match43_number_set(input[0]);
                else
                    this->route_02_match43_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector42) {
                if (input->length == 0)
                    this->route_02_match42_bang_bang();
                else if (input->length == 1)
                    this->route_02_match42_number_set(input[0]);
                else
                    this->route_02_match42_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector41) {
                if (input->length == 0)
                    this->route_02_match41_bang_bang();
                else if (input->length == 1)
                    this->route_02_match41_number_set(input[0]);
                else
                    this->route_02_match41_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector40) {
                if (input->length == 0)
                    this->route_02_match40_bang_bang();
                else if (input->length == 1)
                    this->route_02_match40_number_set(input[0]);
                else
                    this->route_02_match40_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector39) {
                if (input->length == 0)
                    this->route_02_match39_bang_bang();
                else if (input->length == 1)
                    this->route_02_match39_number_set(input[0]);
                else
                    this->route_02_match39_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector38) {
                if (input->length == 0)
                    this->route_02_match38_bang_bang();
                else if (input->length == 1)
                    this->route_02_match38_number_set(input[0]);
                else
                    this->route_02_match38_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector37) {
                if (input->length == 0)
                    this->route_02_match37_bang_bang();
                else if (input->length == 1)
                    this->route_02_match37_number_set(input[0]);
                else
                    this->route_02_match37_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector36) {
                if (input->length == 0)
                    this->route_02_match36_bang_bang();
                else if (input->length == 1)
                    this->route_02_match36_number_set(input[0]);
                else
                    this->route_02_match36_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector35) {
                if (input->length == 0)
                    this->route_02_match35_bang_bang();
                else if (input->length == 1)
                    this->route_02_match35_number_set(input[0]);
                else
                    this->route_02_match35_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector34) {
                if (input->length == 0)
                    this->route_02_match34_bang_bang();
                else if (input->length == 1)
                    this->route_02_match34_number_set(input[0]);
                else
                    this->route_02_match34_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector33) {
                if (input->length == 0)
                    this->route_02_match33_bang_bang();
                else if (input->length == 1)
                    this->route_02_match33_number_set(input[0]);
                else
                    this->route_02_match33_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector32) {
                if (input->length == 0)
                    this->route_02_match32_bang_bang();
                else if (input->length == 1)
                    this->route_02_match32_number_set(input[0]);
                else
                    this->route_02_match32_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector31) {
                if (input->length == 0)
                    this->route_02_match31_bang_bang();
                else if (input->length == 1)
                    this->route_02_match31_number_set(input[0]);
                else
                    this->route_02_match31_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector30) {
                if (input->length == 0)
                    this->route_02_match30_bang_bang();
                else if (input->length == 1)
                    this->route_02_match30_number_set(input[0]);
                else
                    this->route_02_match30_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector29) {
                if (input->length == 0)
                    this->route_02_match29_bang_bang();
                else if (input->length == 1)
                    this->route_02_match29_number_set(input[0]);
                else
                    this->route_02_match29_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector28) {
                if (input->length == 0)
                    this->route_02_match28_bang_bang();
                else if (input->length == 1)
                    this->route_02_match28_number_set(input[0]);
                else
                    this->route_02_match28_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector27) {
                if (input->length == 0)
                    this->route_02_match27_bang_bang();
                else if (input->length == 1)
                    this->route_02_match27_number_set(input[0]);
                else
                    this->route_02_match27_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector26) {
                if (input->length == 0)
                    this->route_02_match26_bang_bang();
                else if (input->length == 1)
                    this->route_02_match26_number_set(input[0]);
                else
                    this->route_02_match26_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector25) {
                if (input->length == 0)
                    this->route_02_match25_bang_bang();
                else if (input->length == 1)
                    this->route_02_match25_number_set(input[0]);
                else
                    this->route_02_match25_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector24) {
                if (input->length == 0)
                    this->route_02_match24_bang_bang();
                else if (input->length == 1)
                    this->route_02_match24_number_set(input[0]);
                else
                    this->route_02_match24_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector23) {
                if (input->length == 0)
                    this->route_02_match23_bang_bang();
                else if (input->length == 1)
                    this->route_02_match23_number_set(input[0]);
                else
                    this->route_02_match23_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector22) {
                if (input->length == 0)
                    this->route_02_match22_bang_bang();
                else if (input->length == 1)
                    this->route_02_match22_number_set(input[0]);
                else
                    this->route_02_match22_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector21) {
                if (input->length == 0)
                    this->route_02_match21_bang_bang();
                else if (input->length == 1)
                    this->route_02_match21_number_set(input[0]);
                else
                    this->route_02_match21_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector20) {
                if (input->length == 0)
                    this->route_02_match20_bang_bang();
                else if (input->length == 1)
                    this->route_02_match20_number_set(input[0]);
                else
                    this->route_02_match20_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector19) {
                if (input->length == 0)
                    this->route_02_match19_bang_bang();
                else if (input->length == 1)
                    this->route_02_match19_number_set(input[0]);
                else
                    this->route_02_match19_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector18) {
                if (input->length == 0)
                    this->route_02_match18_bang_bang();
                else if (input->length == 1)
                    this->route_02_match18_number_set(input[0]);
                else
                    this->route_02_match18_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector17) {
                if (input->length == 0)
                    this->route_02_match17_bang_bang();
                else if (input->length == 1)
                    this->route_02_match17_number_set(input[0]);
                else
                    this->route_02_match17_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector16) {
                if (input->length == 0)
                    this->route_02_match16_bang_bang();
                else if (input->length == 1)
                    this->route_02_match16_number_set(input[0]);
                else
                    this->route_02_match16_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector15) {
                if (input->length == 0)
                    this->route_02_match15_bang_bang();
                else if (input->length == 1)
                    this->route_02_match15_number_set(input[0]);
                else
                    this->route_02_match15_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector14) {
                if (input->length == 0)
                    this->route_02_match14_bang_bang();
                else if (input->length == 1)
                    this->route_02_match14_number_set(input[0]);
                else
                    this->route_02_match14_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector13) {
                if (input->length == 0)
                    this->route_02_match13_bang_bang();
                else if (input->length == 1)
                    this->route_02_match13_number_set(input[0]);
                else
                    this->route_02_match13_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector12) {
                if (input->length == 0)
                    this->route_02_match12_bang_bang();
                else if (input->length == 1)
                    this->route_02_match12_number_set(input[0]);
                else
                    this->route_02_match12_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector11) {
                if (input->length == 0)
                    this->route_02_match11_bang_bang();
                else if (input->length == 1)
                    this->route_02_match11_number_set(input[0]);
                else
                    this->route_02_match11_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector10) {
                if (input->length == 0)
                    this->route_02_match10_bang_bang();
                else if (input->length == 1)
                    this->route_02_match10_number_set(input[0]);
                else
                    this->route_02_match10_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector9) {
                if (input->length == 0)
                    this->route_02_match9_bang_bang();
                else if (input->length == 1)
                    this->route_02_match9_number_set(input[0]);
                else
                    this->route_02_match9_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector8) {
                if (input->length == 0)
                    this->route_02_match8_bang_bang();
                else if (input->length == 1)
                    this->route_02_match8_number_set(input[0]);
                else
                    this->route_02_match8_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector7) {
                if (input->length == 0)
                    this->route_02_match7_bang_bang();
                else if (input->length == 1)
                    this->route_02_match7_number_set(input[0]);
                else
                    this->route_02_match7_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector6) {
                if (input->length == 0)
                    this->route_02_match6_bang_bang();
                else if (input->length == 1)
                    this->route_02_match6_number_set(input[0]);
                else
                    this->route_02_match6_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector5) {
                if (input->length == 0)
                    this->route_02_match5_bang_bang();
                else if (input->length == 1)
                    this->route_02_match5_number_set(input[0]);
                else
                    this->route_02_match5_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector4) {
                if (input->length == 0)
                    this->route_02_match4_bang_bang();
                else if (input->length == 1)
                    this->route_02_match4_number_set(input[0]);
                else
                    this->route_02_match4_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector3) {
                if (input->length == 0)
                    this->route_02_match3_bang_bang();
                else if (input->length == 1)
                    this->route_02_match3_number_set(input[0]);
                else
                    this->route_02_match3_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector2) {
                if (input->length == 0)
                    this->route_02_match2_bang_bang();
                else if (input->length == 1)
                    this->route_02_match2_number_set(input[0]);
                else
                    this->route_02_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector1) {
                if (input->length == 0)
                    this->route_02_match1_bang_bang();
                else if (input->length == 1)
                    this->route_02_match1_number_set(input[0]);
                else
                    this->route_02_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_02_nomatch_number_set(v[0]);
                } else {
                    this->route_02_nomatch_list_set(v);
                }
            }
        }
    }
    
    void eventinlet_52_out1_list_set(const list& v) {
        this->route_02_input_list_set(v);
    }
    
    void eventoutlet_35_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_30_out3_list_set((list)v);
    }
    
    void message_81_out_set(const list& v) {
        this->eventoutlet_35_in1_list_set(v);
    }
    
    void message_81_trigger_bang() {
        this->message_81_out_set(this->message_81_set);
    }
    
    void trigger_40_out7_bang() {
        this->message_81_trigger_bang();
    }
    
    void eventoutlet_34_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_30_out2_list_set((list)v);
    }
    
    void message_80_out_set(const list& v) {
        this->eventoutlet_34_in1_list_set(v);
    }
    
    void message_80_trigger_bang() {
        this->message_80_out_set(this->message_80_set);
    }
    
    void trigger_40_out6_bang() {
        this->message_80_trigger_bang();
    }
    
    void eventoutlet_33_in1_bang_bang() {
        ;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_30_out1_bang_bang();
    }
    
    void button_16_output_bang() {
        this->eventoutlet_33_in1_bang_bang();
    }
    
    void button_16_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort/button_obj-76"), this->_currentTime);;
        this->button_16_output_bang();
    }
    
    void trigger_40_out5_bang() {
        this->button_16_bangval_bang();
    }
    
    void accum_04_reset_set(number v) {
        this->accum_04_reset = v;
    }
    
    void toggle_05_output_set(number v) {
        this->accum_04_reset_set(v);
    }
    
    void toggle_05_value_number_set(number v) {
        this->toggle_05_value_number_setter(v);
        v = this->toggle_05_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/toggle_obj-91"), v, this->_currentTime);
        this->toggle_05_output_set(v);
    }
    
    void message_78_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_05_value_number_set(converted);
        }
    }
    
    void message_78_trigger_bang() {
        this->message_78_out_set(this->message_78_set);
    }
    
    void trigger_40_out4_bang() {
        this->message_78_trigger_bang();
    }
    
    void message_73_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_73_out_set(this->message_73_set);
    }
    
    void trigger_40_out3_bang() {
        this->message_73_trigger_bang();
    }
    
    void message_75_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_05_value_number_set(converted);
        }
    }
    
    void message_75_trigger_bang() {
        this->message_75_out_set(this->message_75_set);
    }
    
    void trigger_40_out2_bang() {
        this->message_75_trigger_bang();
    }
    
    void gate_34_input_number_set(number v) {
        if (this->stackprotect_check())
            return;
    
        if (this->gate_34_onoff == 1)
            this->gate_34_out1_number_set(v);
        else if (this->gate_34_onoff == 2)
            this->gate_34_out2_number_set(v);
    }
    
    void message_74_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_34_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_34_onoff_set(converted);
        }
    }
    
    void message_74_trigger_bang() {
        this->message_74_out_set(this->message_74_set);
    }
    
    void trigger_40_out1_bang() {
        this->message_74_trigger_bang();
    }
    
    void trigger_40_input_bang_bang() {
        this->trigger_40_out7_bang();
        this->trigger_40_out6_bang();
        this->trigger_40_out5_bang();
        this->trigger_40_out4_bang();
        this->trigger_40_out3_bang();
        this->trigger_40_out2_bang();
        this->trigger_40_out1_bang();
    }
    
    void select_43_match1_bang() {
        this->trigger_40_input_bang_bang();
    }
    
    void button_17_output_bang() {
        this->message_73_trigger_bang();
    }
    
    void button_17_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort/button_obj-71"), this->_currentTime);;
        this->button_17_output_bang();
    }
    
    void select_43_nomatch_number_set(number v) {
        RNBO_UNUSED(v);
        this->button_17_bangval_bang();
    }
    
    void select_43_input_number_set(number v) {
        if (v == this->select_43_test1)
            this->select_43_match1_bang();
        else
            this->select_43_nomatch_number_set(v);
    }
    
    void numberobj_195_output_set(number v) {
        this->select_43_input_number_set(v);
    }
    
    void numberobj_195_value_set(number v) {
        this->numberobj_195_value_setter(v);
        v = this->numberobj_195_value;
        number localvalue = v;
    
        if (this->numberobj_195_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-58"), localvalue, this->_currentTime);
        this->numberobj_195_output_set(localvalue);
    }
    
    void listlookup_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_195_value_set(converted);
        }
    }
    
    void listlookup_02_input_set(const list& v) {
        this->listlookup_02_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_02_lookup->length)
                tmp->push(this->listlookup_02_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_02_out_set(tmp);
    }
    
    void trigger_39_out1_set(number v) {
        {
            list converted = {v};
            this->listlookup_02_input_set(converted);
        }
    }
    
    void trigger_39_input_number_set(number v) {
        this->trigger_39_out3_set(trunc(v));
        this->trigger_39_out2_set(trunc(v));
        this->trigger_39_out1_set(trunc(v));
    }
    
    void numberobj_194_output_set(number v) {
        this->trigger_39_input_number_set(v);
    }
    
    void numberobj_194_value_set(number v) {
        this->numberobj_194_value_setter(v);
        v = this->numberobj_194_value;
        number localvalue = v;
    
        if (this->numberobj_194_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("sort/number_obj-5"), localvalue, this->_currentTime);
        this->numberobj_194_output_set(localvalue);
    }
    
    void accum_04_out1_set(number v) {
        this->numberobj_194_value_set(v);
    }
    
    void accum_04_x_set(number x) {
        this->accum_04_x = x;
        auto reset = this->accum_04_reset;
    
        {
            {
                this->accum_04_value = ((bool)(reset) ? -1 : this->accum_04_value + x);
    
                {
                    this->accum_04_out1_set(this->accum_04_value);
                    return;
                }
            }
        }
    }
    
    void message_73_out_set(const list& v) {
        {
            if (v->length > 1)
                this->accum_04_reset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->accum_04_x_set(converted);
        }
    }
    
    void trigger_38_out1_bang() {
        this->message_73_trigger_bang();
    }
    
    void trigger_38_input_bang_bang() {
        this->trigger_38_out2_bang();
        this->trigger_38_out1_bang();
    }
    
    void button_15_output_bang() {
        this->trigger_38_input_bang_bang();
    }
    
    void button_15_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("sort/button_obj-64"), this->_currentTime);;
        this->button_15_output_bang();
    }
    
    void trigger_37_out1_bang() {
        this->button_15_bangval_bang();
    }
    
    void trigger_37_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_37_out2_bang();
        this->trigger_37_out1_bang();
    }
    
    void gate_34_out1_number_set(number v) {
        this->gate_34_out1_number = v;
        this->trigger_37_input_number_set(v);
    }
    
    void gate_34_out2_number_set(number v) {
        this->gate_34_out2_number = v;
    }
    
    void message_76_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_34_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_34_onoff_set(converted);
        }
    }
    
    void trigger_37_input_bang_bang() {
        this->trigger_37_out2_bang();
        this->trigger_37_out1_bang();
    }
    
    void gate_34_out1_bang_bang() {
        this->trigger_37_input_bang_bang();
    }
    
    void gate_34_out2_bang_bang() {}
    
    void gate_34_input_bang_bang() {
        if (this->gate_34_onoff == 1)
            this->gate_34_out1_bang_bang();
        else if (this->gate_34_onoff == 2)
            this->gate_34_out2_bang_bang();
    }
    
    void eventinlet_51_out1_bang_bang() {
        this->gate_34_input_bang_bang();
    }
    
    void message_77_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_196_value_set(converted);
        }
    }
    
    void message_77_trigger_bang() {
        this->message_77_out_set(this->message_77_set);
    }
    
    void receive_45_output_bang_bang() {
        this->message_77_trigger_bang();
        this->message_74_trigger_bang();
    }
    
    void message_73_set_set(const list& v) {
        this->message_73_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-75"), v, this->_currentTime);
    }
    
    void trigger_37_input_list_set(const list& v) {
        RNBO_UNUSED(v);
        this->trigger_37_out2_bang();
        this->trigger_37_out1_bang();
    }
    
    void gate_34_out1_list_set(const list& v) {
        this->gate_34_out1_list = jsCreateListCopy(v);
        this->trigger_37_input_list_set(v);
    }
    
    void gate_34_out2_list_set(const list& v) {
        this->gate_34_out2_list = jsCreateListCopy(v);
    }
    
    void gate_34_input_list_set(const list& v) {
        if (this->gate_34_onoff == 1)
            this->gate_34_out1_list_set(v);
        else if (this->gate_34_onoff == 2)
            this->gate_34_out2_list_set(v);
    }
    
    void message_74_set_set(const list& v) {
        this->message_74_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-144"), v, this->_currentTime);
    }
    
    void message_75_set_set(const list& v) {
        this->message_75_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-104"), v, this->_currentTime);
    }
    
    void message_76_set_set(const list& v) {
        this->message_76_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-146"), v, this->_currentTime);
    }
    
    void message_77_set_set(const list& v) {
        this->message_77_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-68"), v, this->_currentTime);
    }
    
    void message_78_set_set(const list& v) {
        this->message_78_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("sort/message_obj-94"), v, this->_currentTime);
    }
    
    void route_02_input_bang_bang() {
        this->route_02_nomatch_bang_bang();
    }
    
    void route_02_input_number_set(number v) {
        this->route_02_input_list_set({v});
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_194_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_194_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_194_value = localvalue;
    }
    
    void toggle_05_value_number_setter(number v) {
        this->toggle_05_value_number = (v != 0 ? 1 : 0);
    }
    
    void numberobj_195_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_195_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_195_value = localvalue;
    }
    
    void numberobj_196_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_196_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_196_value = localvalue;
    }
    
    void numberobj_197_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_197_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_197_value = localvalue;
    }
    
    void numberobj_198_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_198_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_198_value = localvalue;
    }
    
    void numberobj_199_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_199_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_199_value = localvalue;
    }
    
    void numberobj_200_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_200_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_200_value = localvalue;
    }
    
    void numberobj_201_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_201_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_201_value = localvalue;
    }
    
    void numberobj_202_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_202_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_202_value = localvalue;
    }
    
    void numberobj_203_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_203_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_203_value = localvalue;
    }
    
    void numberobj_204_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_204_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_204_value = localvalue;
    }
    
    void numberobj_205_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_205_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_205_value = localvalue;
    }
    
    void numberobj_206_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_206_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_206_value = localvalue;
    }
    
    void numberobj_207_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_207_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_207_value = localvalue;
    }
    
    void numberobj_208_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_208_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_208_value = localvalue;
    }
    
    void numberobj_209_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_209_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_209_value = localvalue;
    }
    
    void numberobj_210_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_210_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_210_value = localvalue;
    }
    
    void numberobj_211_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_211_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_211_value = localvalue;
    }
    
    void numberobj_212_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_212_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_212_value = localvalue;
    }
    
    void numberobj_213_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_213_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_213_value = localvalue;
    }
    
    void numberobj_214_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_214_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_214_value = localvalue;
    }
    
    void numberobj_215_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_215_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_215_value = localvalue;
    }
    
    void numberobj_216_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_216_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_216_value = localvalue;
    }
    
    void numberobj_217_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_217_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_217_value = localvalue;
    }
    
    void numberobj_218_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_218_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_218_value = localvalue;
    }
    
    void numberobj_219_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_219_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_219_value = localvalue;
    }
    
    void numberobj_220_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_220_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_220_value = localvalue;
    }
    
    void numberobj_221_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_221_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_221_value = localvalue;
    }
    
    void numberobj_222_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_222_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_222_value = localvalue;
    }
    
    void numberobj_223_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_223_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_223_value = localvalue;
    }
    
    void numberobj_224_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_224_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_224_value = localvalue;
    }
    
    void numberobj_225_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_225_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_225_value = localvalue;
    }
    
    void numberobj_226_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_226_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_226_value = localvalue;
    }
    
    void numberobj_227_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_227_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_227_value = localvalue;
    }
    
    void numberobj_228_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_228_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_228_value = localvalue;
    }
    
    void numberobj_229_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_229_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_229_value = localvalue;
    }
    
    void numberobj_230_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_230_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_230_value = localvalue;
    }
    
    void numberobj_231_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_231_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_231_value = localvalue;
    }
    
    void numberobj_232_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_232_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_232_value = localvalue;
    }
    
    void numberobj_233_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_233_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_233_value = localvalue;
    }
    
    void numberobj_234_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_234_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_234_value = localvalue;
    }
    
    void numberobj_235_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_235_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_235_value = localvalue;
    }
    
    void numberobj_236_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_236_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_236_value = localvalue;
    }
    
    void numberobj_237_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_237_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_237_value = localvalue;
    }
    
    void numberobj_238_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_238_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_238_value = localvalue;
    }
    
    void numberobj_239_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_239_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_239_value = localvalue;
    }
    
    void numberobj_240_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_240_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_240_value = localvalue;
    }
    
    void numberobj_241_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_241_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_241_value = localvalue;
    }
    
    void numberobj_242_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_242_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_242_value = localvalue;
    }
    
    void numberobj_243_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_243_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_243_value = localvalue;
    }
    
    void numberobj_244_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_244_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_244_value = localvalue;
    }
    
    void numberobj_245_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_245_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_245_value = localvalue;
    }
    
    void numberobj_246_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_246_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_246_value = localvalue;
    }
    
    void numberobj_247_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_247_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_247_value = localvalue;
    }
    
    void numberobj_248_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_248_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_248_value = localvalue;
    }
    
    void numberobj_249_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_249_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_249_value = localvalue;
    }
    
    void numberobj_250_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_250_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_250_value = localvalue;
    }
    
    void numberobj_251_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_251_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_251_value = localvalue;
    }
    
    void numberobj_252_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_252_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_252_value = localvalue;
    }
    
    void numberobj_253_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_253_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_253_value = localvalue;
    }
    
    void numberobj_254_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_254_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_254_value = localvalue;
    }
    
    void numberobj_255_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_255_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_255_value = localvalue;
    }
    
    void numberobj_256_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_256_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_256_value = localvalue;
    }
    
    void numberobj_257_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_257_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_257_value = localvalue;
    }
    
    void numberobj_258_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_258_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_258_value = localvalue;
    }
    
    void numberobj_259_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_259_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_259_value = localvalue;
    }
    
    void numberobj_260_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_260_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_260_value = localvalue;
    }
    
    void numberobj_261_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_261_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_261_value = localvalue;
    }
    
    void numberobj_262_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_262_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_262_value = localvalue;
    }
    
    void numberobj_263_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_263_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_263_value = localvalue;
    }
    
    void numberobj_264_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_264_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_264_value = localvalue;
    }
    
    void numberobj_265_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_265_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_265_value = localvalue;
    }
    
    void numberobj_266_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_266_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_266_value = localvalue;
    }
    
    void numberobj_267_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_267_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_267_value = localvalue;
    }
    
    void numberobj_268_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_268_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_268_value = localvalue;
    }
    
    void numberobj_269_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_269_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_269_value = localvalue;
    }
    
    void numberobj_270_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_270_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_270_value = localvalue;
    }
    
    void numberobj_271_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_271_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_271_value = localvalue;
    }
    
    void numberobj_272_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_272_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_272_value = localvalue;
    }
    
    void numberobj_273_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_273_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_273_value = localvalue;
    }
    
    void numberobj_274_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_274_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_274_value = localvalue;
    }
    
    void numberobj_275_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_275_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_275_value = localvalue;
    }
    
    void numberobj_276_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_276_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_276_value = localvalue;
    }
    
    void numberobj_277_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_277_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_277_value = localvalue;
    }
    
    void numberobj_278_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_278_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_278_value = localvalue;
    }
    
    void numberobj_279_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_279_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_279_value = localvalue;
    }
    
    void numberobj_280_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_280_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_280_value = localvalue;
    }
    
    void numberobj_281_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_281_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_281_value = localvalue;
    }
    
    void numberobj_282_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_282_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_282_value = localvalue;
    }
    
    void numberobj_283_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_283_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_283_value = localvalue;
    }
    
    void numberobj_284_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_284_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_284_value = localvalue;
    }
    
    void numberobj_285_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_285_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_285_value = localvalue;
    }
    
    void numberobj_286_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_286_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_286_value = localvalue;
    }
    
    void numberobj_287_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_287_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_287_value = localvalue;
    }
    
    void numberobj_288_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_288_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_288_value = localvalue;
    }
    
    void numberobj_289_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_289_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_289_value = localvalue;
    }
    
    void numberobj_290_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_290_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_290_value = localvalue;
    }
    
    void numberobj_291_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_291_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_291_value = localvalue;
    }
    
    void numberobj_292_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_292_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_292_value = localvalue;
    }
    
    void numberobj_293_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_293_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_293_value = localvalue;
    }
    
    void numberobj_294_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_294_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_294_value = localvalue;
    }
    
    void numberobj_295_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_295_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_295_value = localvalue;
    }
    
    void message_73_init() {
        this->message_73_set_set({1});
    }
    
    void numberobj_194_init() {
        this->numberobj_194_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-5"), 1, this->_currentTime);
    }
    
    void numberobj_194_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_194_value;
    }
    
    void numberobj_194_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_194_value_set(preset["value"]);
    }
    
    void message_74_init() {
        this->message_74_set_set({1});
    }
    
    void message_75_init() {
        this->message_75_set_set({0});
    }
    
    void toggle_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_05_value_number;
    }
    
    void toggle_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_05_value_number_set(preset["value"]);
    }
    
    void numberobj_195_init() {
        this->numberobj_195_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-58"), 1, this->_currentTime);
    }
    
    void numberobj_195_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_195_value;
    }
    
    void numberobj_195_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_195_value_set(preset["value"]);
    }
    
    void message_76_init() {
        this->message_76_set_set({2});
    }
    
    void message_77_init() {
        this->message_77_set_set({1});
    }
    
    void message_78_init() {
        this->message_78_set_set({1});
    }
    
    void numberobj_196_init() {
        this->numberobj_196_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_196_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_196_value;
    }
    
    void numberobj_196_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_196_value_set(preset["value"]);
    }
    
    void message_79_init() {
        this->message_79_set_set({
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        });
    }
    
    void message_80_init() {
        this->message_80_set_set({0});
    }
    
    void numberobj_197_init() {
        this->numberobj_197_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-7"), 1, this->_currentTime);
    }
    
    void numberobj_197_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_197_value;
    }
    
    void numberobj_197_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_197_value_set(preset["value"]);
    }
    
    void numberobj_198_init() {
        this->numberobj_198_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-8"), 1, this->_currentTime);
    }
    
    void numberobj_198_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_198_value;
    }
    
    void numberobj_198_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_198_value_set(preset["value"]);
    }
    
    void message_81_init() {
        this->message_81_set_set({0, 0});
    }
    
    void numberobj_199_init() {
        this->numberobj_199_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_199_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_199_value;
    }
    
    void numberobj_199_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_199_value_set(preset["value"]);
    }
    
    void numberobj_200_init() {
        this->numberobj_200_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-10"), 1, this->_currentTime);
    }
    
    void numberobj_200_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_200_value;
    }
    
    void numberobj_200_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_200_value_set(preset["value"]);
    }
    
    void numberobj_201_init() {
        this->numberobj_201_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-15"), 1, this->_currentTime);
    }
    
    void numberobj_201_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_201_value;
    }
    
    void numberobj_201_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_201_value_set(preset["value"]);
    }
    
    void numberobj_202_init() {
        this->numberobj_202_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_202_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_202_value;
    }
    
    void numberobj_202_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_202_value_set(preset["value"]);
    }
    
    void numberobj_203_init() {
        this->numberobj_203_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-13"), 1, this->_currentTime);
    }
    
    void numberobj_203_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_203_value;
    }
    
    void numberobj_203_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_203_value_set(preset["value"]);
    }
    
    void numberobj_204_init() {
        this->numberobj_204_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_204_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_204_value;
    }
    
    void numberobj_204_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_204_value_set(preset["value"]);
    }
    
    void numberobj_205_init() {
        this->numberobj_205_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_205_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_205_value;
    }
    
    void numberobj_205_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_205_value_set(preset["value"]);
    }
    
    void numberobj_206_init() {
        this->numberobj_206_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-25"), 1, this->_currentTime);
    }
    
    void numberobj_206_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_206_value;
    }
    
    void numberobj_206_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_206_value_set(preset["value"]);
    }
    
    void numberobj_207_init() {
        this->numberobj_207_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-24"), 1, this->_currentTime);
    }
    
    void numberobj_207_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_207_value;
    }
    
    void numberobj_207_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_207_value_set(preset["value"]);
    }
    
    void numberobj_208_init() {
        this->numberobj_208_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_208_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_208_value;
    }
    
    void numberobj_208_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_208_value_set(preset["value"]);
    }
    
    void numberobj_209_init() {
        this->numberobj_209_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-22"), 1, this->_currentTime);
    }
    
    void numberobj_209_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_209_value;
    }
    
    void numberobj_209_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_209_value_set(preset["value"]);
    }
    
    void numberobj_210_init() {
        this->numberobj_210_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_210_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_210_value;
    }
    
    void numberobj_210_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_210_value_set(preset["value"]);
    }
    
    void numberobj_211_init() {
        this->numberobj_211_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_211_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_211_value;
    }
    
    void numberobj_211_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_211_value_set(preset["value"]);
    }
    
    void numberobj_212_init() {
        this->numberobj_212_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-19"), 1, this->_currentTime);
    }
    
    void numberobj_212_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_212_value;
    }
    
    void numberobj_212_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_212_value_set(preset["value"]);
    }
    
    void numberobj_213_init() {
        this->numberobj_213_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_213_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_213_value;
    }
    
    void numberobj_213_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_213_value_set(preset["value"]);
    }
    
    void numberobj_214_init() {
        this->numberobj_214_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-17"), 1, this->_currentTime);
    }
    
    void numberobj_214_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_214_value;
    }
    
    void numberobj_214_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_214_value_set(preset["value"]);
    }
    
    void numberobj_215_init() {
        this->numberobj_215_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_215_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_215_value;
    }
    
    void numberobj_215_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_215_value_set(preset["value"]);
    }
    
    void numberobj_216_init() {
        this->numberobj_216_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-45"), 1, this->_currentTime);
    }
    
    void numberobj_216_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_216_value;
    }
    
    void numberobj_216_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_216_value_set(preset["value"]);
    }
    
    void numberobj_217_init() {
        this->numberobj_217_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-44"), 1, this->_currentTime);
    }
    
    void numberobj_217_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_217_value;
    }
    
    void numberobj_217_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_217_value_set(preset["value"]);
    }
    
    void numberobj_218_init() {
        this->numberobj_218_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-43"), 1, this->_currentTime);
    }
    
    void numberobj_218_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_218_value;
    }
    
    void numberobj_218_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_218_value_set(preset["value"]);
    }
    
    void numberobj_219_init() {
        this->numberobj_219_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-42"), 1, this->_currentTime);
    }
    
    void numberobj_219_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_219_value;
    }
    
    void numberobj_219_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_219_value_set(preset["value"]);
    }
    
    void numberobj_220_init() {
        this->numberobj_220_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-41"), 1, this->_currentTime);
    }
    
    void numberobj_220_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_220_value;
    }
    
    void numberobj_220_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_220_value_set(preset["value"]);
    }
    
    void numberobj_221_init() {
        this->numberobj_221_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-40"), 1, this->_currentTime);
    }
    
    void numberobj_221_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_221_value;
    }
    
    void numberobj_221_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_221_value_set(preset["value"]);
    }
    
    void numberobj_222_init() {
        this->numberobj_222_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-39"), 1, this->_currentTime);
    }
    
    void numberobj_222_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_222_value;
    }
    
    void numberobj_222_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_222_value_set(preset["value"]);
    }
    
    void numberobj_223_init() {
        this->numberobj_223_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-38"), 1, this->_currentTime);
    }
    
    void numberobj_223_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_223_value;
    }
    
    void numberobj_223_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_223_value_set(preset["value"]);
    }
    
    void numberobj_224_init() {
        this->numberobj_224_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-37"), 1, this->_currentTime);
    }
    
    void numberobj_224_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_224_value;
    }
    
    void numberobj_224_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_224_value_set(preset["value"]);
    }
    
    void numberobj_225_init() {
        this->numberobj_225_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-36"), 1, this->_currentTime);
    }
    
    void numberobj_225_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_225_value;
    }
    
    void numberobj_225_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_225_value_set(preset["value"]);
    }
    
    void numberobj_226_init() {
        this->numberobj_226_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-35"), 1, this->_currentTime);
    }
    
    void numberobj_226_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_226_value;
    }
    
    void numberobj_226_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_226_value_set(preset["value"]);
    }
    
    void numberobj_227_init() {
        this->numberobj_227_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-34"), 1, this->_currentTime);
    }
    
    void numberobj_227_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_227_value;
    }
    
    void numberobj_227_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_227_value_set(preset["value"]);
    }
    
    void numberobj_228_init() {
        this->numberobj_228_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-33"), 1, this->_currentTime);
    }
    
    void numberobj_228_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_228_value;
    }
    
    void numberobj_228_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_228_value_set(preset["value"]);
    }
    
    void numberobj_229_init() {
        this->numberobj_229_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_229_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_229_value;
    }
    
    void numberobj_229_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_229_value_set(preset["value"]);
    }
    
    void numberobj_230_init() {
        this->numberobj_230_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-31"), 1, this->_currentTime);
    }
    
    void numberobj_230_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_230_value;
    }
    
    void numberobj_230_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_230_value_set(preset["value"]);
    }
    
    void numberobj_231_init() {
        this->numberobj_231_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-30"), 1, this->_currentTime);
    }
    
    void numberobj_231_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_231_value;
    }
    
    void numberobj_231_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_231_value_set(preset["value"]);
    }
    
    void numberobj_232_init() {
        this->numberobj_232_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-29"), 1, this->_currentTime);
    }
    
    void numberobj_232_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_232_value;
    }
    
    void numberobj_232_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_232_value_set(preset["value"]);
    }
    
    void numberobj_233_init() {
        this->numberobj_233_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-28"), 1, this->_currentTime);
    }
    
    void numberobj_233_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_233_value;
    }
    
    void numberobj_233_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_233_value_set(preset["value"]);
    }
    
    void numberobj_234_init() {
        this->numberobj_234_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-27"), 1, this->_currentTime);
    }
    
    void numberobj_234_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_234_value;
    }
    
    void numberobj_234_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_234_value_set(preset["value"]);
    }
    
    void numberobj_235_init() {
        this->numberobj_235_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_235_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_235_value;
    }
    
    void numberobj_235_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_235_value_set(preset["value"]);
    }
    
    void numberobj_236_init() {
        this->numberobj_236_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-55"), 1, this->_currentTime);
    }
    
    void numberobj_236_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_236_value;
    }
    
    void numberobj_236_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_236_value_set(preset["value"]);
    }
    
    void numberobj_237_init() {
        this->numberobj_237_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_237_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_237_value;
    }
    
    void numberobj_237_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_237_value_set(preset["value"]);
    }
    
    void numberobj_238_init() {
        this->numberobj_238_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-53"), 1, this->_currentTime);
    }
    
    void numberobj_238_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_238_value;
    }
    
    void numberobj_238_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_238_value_set(preset["value"]);
    }
    
    void numberobj_239_init() {
        this->numberobj_239_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-52"), 1, this->_currentTime);
    }
    
    void numberobj_239_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_239_value;
    }
    
    void numberobj_239_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_239_value_set(preset["value"]);
    }
    
    void numberobj_240_init() {
        this->numberobj_240_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-51"), 1, this->_currentTime);
    }
    
    void numberobj_240_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_240_value;
    }
    
    void numberobj_240_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_240_value_set(preset["value"]);
    }
    
    void numberobj_241_init() {
        this->numberobj_241_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-50"), 1, this->_currentTime);
    }
    
    void numberobj_241_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_241_value;
    }
    
    void numberobj_241_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_241_value_set(preset["value"]);
    }
    
    void numberobj_242_init() {
        this->numberobj_242_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-49"), 1, this->_currentTime);
    }
    
    void numberobj_242_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_242_value;
    }
    
    void numberobj_242_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_242_value_set(preset["value"]);
    }
    
    void numberobj_243_init() {
        this->numberobj_243_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-48"), 1, this->_currentTime);
    }
    
    void numberobj_243_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_243_value;
    }
    
    void numberobj_243_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_243_value_set(preset["value"]);
    }
    
    void numberobj_244_init() {
        this->numberobj_244_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-47"), 1, this->_currentTime);
    }
    
    void numberobj_244_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_244_value;
    }
    
    void numberobj_244_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_244_value_set(preset["value"]);
    }
    
    void numberobj_245_init() {
        this->numberobj_245_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-46"), 1, this->_currentTime);
    }
    
    void numberobj_245_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_245_value;
    }
    
    void numberobj_245_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_245_value_set(preset["value"]);
    }
    
    void numberobj_246_init() {
        this->numberobj_246_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-140"), 1, this->_currentTime);
    }
    
    void numberobj_246_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_246_value;
    }
    
    void numberobj_246_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_246_value_set(preset["value"]);
    }
    
    void numberobj_247_init() {
        this->numberobj_247_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-139"), 1, this->_currentTime);
    }
    
    void numberobj_247_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_247_value;
    }
    
    void numberobj_247_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_247_value_set(preset["value"]);
    }
    
    void numberobj_248_init() {
        this->numberobj_248_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-138"), 1, this->_currentTime);
    }
    
    void numberobj_248_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_248_value;
    }
    
    void numberobj_248_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_248_value_set(preset["value"]);
    }
    
    void numberobj_249_init() {
        this->numberobj_249_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-137"), 1, this->_currentTime);
    }
    
    void numberobj_249_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_249_value;
    }
    
    void numberobj_249_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_249_value_set(preset["value"]);
    }
    
    void numberobj_250_init() {
        this->numberobj_250_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-136"), 1, this->_currentTime);
    }
    
    void numberobj_250_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_250_value;
    }
    
    void numberobj_250_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_250_value_set(preset["value"]);
    }
    
    void numberobj_251_init() {
        this->numberobj_251_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-135"), 1, this->_currentTime);
    }
    
    void numberobj_251_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_251_value;
    }
    
    void numberobj_251_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_251_value_set(preset["value"]);
    }
    
    void numberobj_252_init() {
        this->numberobj_252_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-134"), 1, this->_currentTime);
    }
    
    void numberobj_252_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_252_value;
    }
    
    void numberobj_252_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_252_value_set(preset["value"]);
    }
    
    void numberobj_253_init() {
        this->numberobj_253_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-133"), 1, this->_currentTime);
    }
    
    void numberobj_253_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_253_value;
    }
    
    void numberobj_253_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_253_value_set(preset["value"]);
    }
    
    void numberobj_254_init() {
        this->numberobj_254_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-132"), 1, this->_currentTime);
    }
    
    void numberobj_254_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_254_value;
    }
    
    void numberobj_254_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_254_value_set(preset["value"]);
    }
    
    void numberobj_255_init() {
        this->numberobj_255_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-131"), 1, this->_currentTime);
    }
    
    void numberobj_255_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_255_value;
    }
    
    void numberobj_255_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_255_value_set(preset["value"]);
    }
    
    void numberobj_256_init() {
        this->numberobj_256_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-130"), 1, this->_currentTime);
    }
    
    void numberobj_256_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_256_value;
    }
    
    void numberobj_256_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_256_value_set(preset["value"]);
    }
    
    void numberobj_257_init() {
        this->numberobj_257_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-129"), 1, this->_currentTime);
    }
    
    void numberobj_257_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_257_value;
    }
    
    void numberobj_257_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_257_value_set(preset["value"]);
    }
    
    void numberobj_258_init() {
        this->numberobj_258_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-128"), 1, this->_currentTime);
    }
    
    void numberobj_258_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_258_value;
    }
    
    void numberobj_258_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_258_value_set(preset["value"]);
    }
    
    void numberobj_259_init() {
        this->numberobj_259_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-127"), 1, this->_currentTime);
    }
    
    void numberobj_259_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_259_value;
    }
    
    void numberobj_259_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_259_value_set(preset["value"]);
    }
    
    void numberobj_260_init() {
        this->numberobj_260_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-126"), 1, this->_currentTime);
    }
    
    void numberobj_260_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_260_value;
    }
    
    void numberobj_260_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_260_value_set(preset["value"]);
    }
    
    void numberobj_261_init() {
        this->numberobj_261_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-125"), 1, this->_currentTime);
    }
    
    void numberobj_261_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_261_value;
    }
    
    void numberobj_261_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_261_value_set(preset["value"]);
    }
    
    void numberobj_262_init() {
        this->numberobj_262_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-124"), 1, this->_currentTime);
    }
    
    void numberobj_262_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_262_value;
    }
    
    void numberobj_262_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_262_value_set(preset["value"]);
    }
    
    void numberobj_263_init() {
        this->numberobj_263_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-123"), 1, this->_currentTime);
    }
    
    void numberobj_263_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_263_value;
    }
    
    void numberobj_263_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_263_value_set(preset["value"]);
    }
    
    void numberobj_264_init() {
        this->numberobj_264_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-122"), 1, this->_currentTime);
    }
    
    void numberobj_264_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_264_value;
    }
    
    void numberobj_264_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_264_value_set(preset["value"]);
    }
    
    void numberobj_265_init() {
        this->numberobj_265_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-121"), 1, this->_currentTime);
    }
    
    void numberobj_265_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_265_value;
    }
    
    void numberobj_265_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_265_value_set(preset["value"]);
    }
    
    void numberobj_266_init() {
        this->numberobj_266_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-120"), 1, this->_currentTime);
    }
    
    void numberobj_266_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_266_value;
    }
    
    void numberobj_266_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_266_value_set(preset["value"]);
    }
    
    void numberobj_267_init() {
        this->numberobj_267_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_267_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_267_value;
    }
    
    void numberobj_267_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_267_value_set(preset["value"]);
    }
    
    void numberobj_268_init() {
        this->numberobj_268_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-118"), 1, this->_currentTime);
    }
    
    void numberobj_268_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_268_value;
    }
    
    void numberobj_268_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_268_value_set(preset["value"]);
    }
    
    void numberobj_269_init() {
        this->numberobj_269_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-117"), 1, this->_currentTime);
    }
    
    void numberobj_269_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_269_value;
    }
    
    void numberobj_269_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_269_value_set(preset["value"]);
    }
    
    void numberobj_270_init() {
        this->numberobj_270_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-116"), 1, this->_currentTime);
    }
    
    void numberobj_270_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_270_value;
    }
    
    void numberobj_270_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_270_value_set(preset["value"]);
    }
    
    void numberobj_271_init() {
        this->numberobj_271_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-115"), 1, this->_currentTime);
    }
    
    void numberobj_271_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_271_value;
    }
    
    void numberobj_271_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_271_value_set(preset["value"]);
    }
    
    void numberobj_272_init() {
        this->numberobj_272_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-114"), 1, this->_currentTime);
    }
    
    void numberobj_272_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_272_value;
    }
    
    void numberobj_272_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_272_value_set(preset["value"]);
    }
    
    void numberobj_273_init() {
        this->numberobj_273_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-113"), 1, this->_currentTime);
    }
    
    void numberobj_273_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_273_value;
    }
    
    void numberobj_273_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_273_value_set(preset["value"]);
    }
    
    void numberobj_274_init() {
        this->numberobj_274_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-112"), 1, this->_currentTime);
    }
    
    void numberobj_274_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_274_value;
    }
    
    void numberobj_274_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_274_value_set(preset["value"]);
    }
    
    void numberobj_275_init() {
        this->numberobj_275_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-111"), 1, this->_currentTime);
    }
    
    void numberobj_275_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_275_value;
    }
    
    void numberobj_275_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_275_value_set(preset["value"]);
    }
    
    void numberobj_276_init() {
        this->numberobj_276_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-110"), 1, this->_currentTime);
    }
    
    void numberobj_276_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_276_value;
    }
    
    void numberobj_276_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_276_value_set(preset["value"]);
    }
    
    void numberobj_277_init() {
        this->numberobj_277_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-109"), 1, this->_currentTime);
    }
    
    void numberobj_277_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_277_value;
    }
    
    void numberobj_277_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_277_value_set(preset["value"]);
    }
    
    void numberobj_278_init() {
        this->numberobj_278_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-106"), 1, this->_currentTime);
    }
    
    void numberobj_278_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_278_value;
    }
    
    void numberobj_278_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_278_value_set(preset["value"]);
    }
    
    void numberobj_279_init() {
        this->numberobj_279_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-105"), 1, this->_currentTime);
    }
    
    void numberobj_279_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_279_value;
    }
    
    void numberobj_279_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_279_value_set(preset["value"]);
    }
    
    void numberobj_280_init() {
        this->numberobj_280_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-103"), 1, this->_currentTime);
    }
    
    void numberobj_280_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_280_value;
    }
    
    void numberobj_280_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_280_value_set(preset["value"]);
    }
    
    void numberobj_281_init() {
        this->numberobj_281_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-101"), 1, this->_currentTime);
    }
    
    void numberobj_281_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_281_value;
    }
    
    void numberobj_281_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_281_value_set(preset["value"]);
    }
    
    void numberobj_282_init() {
        this->numberobj_282_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-100"), 1, this->_currentTime);
    }
    
    void numberobj_282_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_282_value;
    }
    
    void numberobj_282_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_282_value_set(preset["value"]);
    }
    
    void numberobj_283_init() {
        this->numberobj_283_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-99"), 1, this->_currentTime);
    }
    
    void numberobj_283_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_283_value;
    }
    
    void numberobj_283_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_283_value_set(preset["value"]);
    }
    
    void numberobj_284_init() {
        this->numberobj_284_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-98"), 1, this->_currentTime);
    }
    
    void numberobj_284_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_284_value;
    }
    
    void numberobj_284_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_284_value_set(preset["value"]);
    }
    
    void numberobj_285_init() {
        this->numberobj_285_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-97"), 1, this->_currentTime);
    }
    
    void numberobj_285_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_285_value;
    }
    
    void numberobj_285_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_285_value_set(preset["value"]);
    }
    
    void numberobj_286_init() {
        this->numberobj_286_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-96"), 1, this->_currentTime);
    }
    
    void numberobj_286_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_286_value;
    }
    
    void numberobj_286_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_286_value_set(preset["value"]);
    }
    
    void numberobj_287_init() {
        this->numberobj_287_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-95"), 1, this->_currentTime);
    }
    
    void numberobj_287_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_287_value;
    }
    
    void numberobj_287_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_287_value_set(preset["value"]);
    }
    
    void numberobj_288_init() {
        this->numberobj_288_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-93"), 1, this->_currentTime);
    }
    
    void numberobj_288_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_288_value;
    }
    
    void numberobj_288_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_288_value_set(preset["value"]);
    }
    
    void numberobj_289_init() {
        this->numberobj_289_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-89"), 1, this->_currentTime);
    }
    
    void numberobj_289_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_289_value;
    }
    
    void numberobj_289_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_289_value_set(preset["value"]);
    }
    
    void numberobj_290_init() {
        this->numberobj_290_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-87"), 1, this->_currentTime);
    }
    
    void numberobj_290_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_290_value;
    }
    
    void numberobj_290_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_290_value_set(preset["value"]);
    }
    
    void numberobj_291_init() {
        this->numberobj_291_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-83"), 1, this->_currentTime);
    }
    
    void numberobj_291_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_291_value;
    }
    
    void numberobj_291_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_291_value_set(preset["value"]);
    }
    
    void numberobj_292_init() {
        this->numberobj_292_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-81"), 1, this->_currentTime);
    }
    
    void numberobj_292_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_292_value;
    }
    
    void numberobj_292_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_292_value_set(preset["value"]);
    }
    
    void numberobj_293_init() {
        this->numberobj_293_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-80"), 1, this->_currentTime);
    }
    
    void numberobj_293_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_293_value;
    }
    
    void numberobj_293_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_293_value_set(preset["value"]);
    }
    
    void numberobj_294_init() {
        this->numberobj_294_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-79"), 1, this->_currentTime);
    }
    
    void numberobj_294_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_294_value;
    }
    
    void numberobj_294_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_294_value_set(preset["value"]);
    }
    
    void numberobj_295_init() {
        this->numberobj_295_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("sort/number_obj-65"), 1, this->_currentTime);
    }
    
    void numberobj_295_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_295_value;
    }
    
    void numberobj_295_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_295_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        gate_34_onoff = 0;
        gate_34_out1_number = 0;
        gate_34_out2_number = 0;
        accum_04_x = 0;
        accum_04_reset = 0;
        numberobj_194_value = 0;
        numberobj_194_value_setter(numberobj_194_value);
        toggle_05_value_number = 0;
        toggle_05_value_number_setter(toggle_05_value_number);
        receive_45_output_number = 0;
        select_43_test1 = 1;
        numberobj_195_value = 0;
        numberobj_195_value_setter(numberobj_195_value);
        pak_04_in1 = 0;
        pak_04_in2 = 0;
        pak_04_in3 = 0;
        pak_04_in4 = 0;
        pak_04_in5 = 0;
        pak_04_in6 = 0;
        pak_04_in7 = 0;
        pak_04_in8 = 0;
        pak_04_in9 = 0;
        pak_04_in10 = 0;
        pak_04_in11 = 0;
        pak_04_in12 = 0;
        pak_04_in13 = 0;
        pak_04_in14 = 0;
        pak_04_in15 = 0;
        pak_04_in16 = 0;
        pak_04_in17 = 0;
        pak_04_in18 = 0;
        pak_04_in19 = 0;
        pak_04_in20 = 0;
        pak_04_in21 = 0;
        pak_04_in22 = 0;
        pak_04_in23 = 0;
        pak_04_in24 = 0;
        pak_04_in25 = 0;
        pak_04_in26 = 0;
        pak_04_in27 = 0;
        pak_04_in28 = 0;
        pak_04_in29 = 0;
        pak_04_in30 = 0;
        pak_04_in31 = 0;
        pak_04_in32 = 0;
        pak_04_in33 = 0;
        pak_04_in34 = 0;
        pak_04_in35 = 0;
        pak_04_in36 = 0;
        pak_04_in37 = 0;
        pak_04_in38 = 0;
        pak_04_in39 = 0;
        pak_04_in40 = 0;
        pak_04_in41 = 0;
        pak_04_in42 = 0;
        pak_04_in43 = 0;
        pak_04_in44 = 0;
        pak_04_in45 = 0;
        pak_04_in46 = 0;
        pak_04_in47 = 0;
        pak_04_in48 = 0;
        pak_04_in49 = 0;
        pak_04_in50 = 0;
        pak_04_in51 = 0;
        pak_04_in52 = 0;
        pak_04_in53 = 0;
        pak_04_in54 = 0;
        pak_04_in55 = 0;
        pak_04_in56 = 0;
        pak_04_in57 = 0;
        pak_04_in58 = 0;
        pak_04_in59 = 0;
        pak_04_in60 = 0;
        pak_04_in61 = 0;
        pak_04_in62 = 0;
        pak_04_in63 = 0;
        pak_04_in64 = 0;
        pak_04_in65 = 0;
        pak_04_in66 = 0;
        pak_04_in67 = 0;
        pak_04_in68 = 0;
        pak_04_in69 = 0;
        pak_04_in70 = 0;
        pak_04_in71 = 0;
        pak_04_in72 = 0;
        pak_04_in73 = 0;
        pak_04_in74 = 0;
        pak_04_in75 = 0;
        pak_04_in76 = 0;
        pak_04_in77 = 0;
        pak_04_in78 = 0;
        pak_04_in79 = 0;
        pak_04_in80 = 0;
        pak_04_in81 = 0;
        pak_04_in82 = 0;
        pak_04_in83 = 0;
        pak_04_in84 = 0;
        pak_04_in85 = 0;
        pak_04_in86 = 0;
        pak_04_in87 = 0;
        pak_04_in88 = 0;
        pak_04_in89 = 0;
        pak_04_in90 = 0;
        pak_04_in91 = 0;
        pak_04_in92 = 0;
        pak_04_in93 = 0;
        pak_04_in94 = 0;
        pak_04_in95 = 0;
        pak_04_in96 = 0;
        pak_04_in97 = 0;
        pak_04_in98 = 0;
        pak_04_in99 = 0;
        pak_04_in100 = 0;
        numberobj_196_value = 0;
        numberobj_196_value_setter(numberobj_196_value);
        route_02_selector1 = 1;
        route_02_selector2 = 2;
        route_02_selector3 = 3;
        route_02_selector4 = 4;
        route_02_selector5 = 5;
        route_02_selector6 = 6;
        route_02_selector7 = 7;
        route_02_selector8 = 8;
        route_02_selector9 = 9;
        route_02_selector10 = 10;
        route_02_selector11 = 11;
        route_02_selector12 = 12;
        route_02_selector13 = 13;
        route_02_selector14 = 14;
        route_02_selector15 = 15;
        route_02_selector16 = 16;
        route_02_selector17 = 17;
        route_02_selector18 = 18;
        route_02_selector19 = 19;
        route_02_selector20 = 20;
        route_02_selector21 = 21;
        route_02_selector22 = 22;
        route_02_selector23 = 23;
        route_02_selector24 = 24;
        route_02_selector25 = 25;
        route_02_selector26 = 26;
        route_02_selector27 = 27;
        route_02_selector28 = 28;
        route_02_selector29 = 29;
        route_02_selector30 = 30;
        route_02_selector31 = 31;
        route_02_selector32 = 32;
        route_02_selector33 = 33;
        route_02_selector34 = 34;
        route_02_selector35 = 35;
        route_02_selector36 = 36;
        route_02_selector37 = 37;
        route_02_selector38 = 38;
        route_02_selector39 = 39;
        route_02_selector40 = 40;
        route_02_selector41 = 41;
        route_02_selector42 = 42;
        route_02_selector43 = 43;
        route_02_selector44 = 44;
        route_02_selector45 = 45;
        route_02_selector46 = 46;
        route_02_selector47 = 47;
        route_02_selector48 = 48;
        route_02_selector49 = 49;
        route_02_selector50 = 50;
        route_02_selector51 = 51;
        route_02_selector52 = 52;
        route_02_selector53 = 53;
        route_02_selector54 = 54;
        route_02_selector55 = 55;
        route_02_selector56 = 56;
        route_02_selector57 = 57;
        route_02_selector58 = 58;
        route_02_selector59 = 59;
        route_02_selector60 = 60;
        route_02_selector61 = 61;
        route_02_selector62 = 62;
        route_02_selector63 = 63;
        route_02_selector64 = 64;
        route_02_selector65 = 65;
        route_02_selector66 = 66;
        route_02_selector67 = 67;
        route_02_selector68 = 68;
        route_02_selector69 = 69;
        route_02_selector70 = 70;
        route_02_selector71 = 71;
        route_02_selector72 = 72;
        route_02_selector73 = 73;
        route_02_selector74 = 74;
        route_02_selector75 = 75;
        route_02_selector76 = 76;
        route_02_selector77 = 77;
        route_02_selector78 = 78;
        route_02_selector79 = 79;
        route_02_selector80 = 80;
        route_02_selector81 = 81;
        route_02_selector82 = 82;
        route_02_selector83 = 83;
        route_02_selector84 = 84;
        route_02_selector85 = 85;
        route_02_selector86 = 86;
        route_02_selector87 = 87;
        route_02_selector88 = 88;
        route_02_selector89 = 89;
        route_02_selector90 = 90;
        route_02_selector91 = 91;
        route_02_selector92 = 92;
        route_02_selector93 = 93;
        route_02_selector94 = 94;
        route_02_selector95 = 95;
        route_02_selector96 = 96;
        route_02_selector97 = 97;
        route_02_selector98 = 98;
        route_02_selector99 = 99;
        route_02_selector100 = 100;
        numberobj_197_value = 0;
        numberobj_197_value_setter(numberobj_197_value);
        expr_89_in1 = 0;
        expr_89_in2 = 1;
        expr_89_out1 = 0;
        numberobj_198_value = 0;
        numberobj_198_value_setter(numberobj_198_value);
        numberobj_199_value = 0;
        numberobj_199_value_setter(numberobj_199_value);
        pack_04_in1 = 0;
        pack_04_in2 = 0;
        expr_90_in1 = 0;
        expr_90_in2 = 1;
        expr_90_out1 = 0;
        numberobj_200_value = 0;
        numberobj_200_value_setter(numberobj_200_value);
        numberobj_201_value = 0;
        numberobj_201_value_setter(numberobj_201_value);
        numberobj_202_value = 0;
        numberobj_202_value_setter(numberobj_202_value);
        numberobj_203_value = 0;
        numberobj_203_value_setter(numberobj_203_value);
        numberobj_204_value = 0;
        numberobj_204_value_setter(numberobj_204_value);
        numberobj_205_value = 0;
        numberobj_205_value_setter(numberobj_205_value);
        numberobj_206_value = 0;
        numberobj_206_value_setter(numberobj_206_value);
        numberobj_207_value = 0;
        numberobj_207_value_setter(numberobj_207_value);
        numberobj_208_value = 0;
        numberobj_208_value_setter(numberobj_208_value);
        numberobj_209_value = 0;
        numberobj_209_value_setter(numberobj_209_value);
        numberobj_210_value = 0;
        numberobj_210_value_setter(numberobj_210_value);
        numberobj_211_value = 0;
        numberobj_211_value_setter(numberobj_211_value);
        numberobj_212_value = 0;
        numberobj_212_value_setter(numberobj_212_value);
        numberobj_213_value = 0;
        numberobj_213_value_setter(numberobj_213_value);
        numberobj_214_value = 0;
        numberobj_214_value_setter(numberobj_214_value);
        numberobj_215_value = 0;
        numberobj_215_value_setter(numberobj_215_value);
        numberobj_216_value = 0;
        numberobj_216_value_setter(numberobj_216_value);
        numberobj_217_value = 0;
        numberobj_217_value_setter(numberobj_217_value);
        numberobj_218_value = 0;
        numberobj_218_value_setter(numberobj_218_value);
        numberobj_219_value = 0;
        numberobj_219_value_setter(numberobj_219_value);
        numberobj_220_value = 0;
        numberobj_220_value_setter(numberobj_220_value);
        numberobj_221_value = 0;
        numberobj_221_value_setter(numberobj_221_value);
        numberobj_222_value = 0;
        numberobj_222_value_setter(numberobj_222_value);
        numberobj_223_value = 0;
        numberobj_223_value_setter(numberobj_223_value);
        numberobj_224_value = 0;
        numberobj_224_value_setter(numberobj_224_value);
        numberobj_225_value = 0;
        numberobj_225_value_setter(numberobj_225_value);
        numberobj_226_value = 0;
        numberobj_226_value_setter(numberobj_226_value);
        numberobj_227_value = 0;
        numberobj_227_value_setter(numberobj_227_value);
        numberobj_228_value = 0;
        numberobj_228_value_setter(numberobj_228_value);
        numberobj_229_value = 0;
        numberobj_229_value_setter(numberobj_229_value);
        numberobj_230_value = 0;
        numberobj_230_value_setter(numberobj_230_value);
        numberobj_231_value = 0;
        numberobj_231_value_setter(numberobj_231_value);
        numberobj_232_value = 0;
        numberobj_232_value_setter(numberobj_232_value);
        numberobj_233_value = 0;
        numberobj_233_value_setter(numberobj_233_value);
        numberobj_234_value = 0;
        numberobj_234_value_setter(numberobj_234_value);
        numberobj_235_value = 0;
        numberobj_235_value_setter(numberobj_235_value);
        numberobj_236_value = 0;
        numberobj_236_value_setter(numberobj_236_value);
        numberobj_237_value = 0;
        numberobj_237_value_setter(numberobj_237_value);
        numberobj_238_value = 0;
        numberobj_238_value_setter(numberobj_238_value);
        numberobj_239_value = 0;
        numberobj_239_value_setter(numberobj_239_value);
        numberobj_240_value = 0;
        numberobj_240_value_setter(numberobj_240_value);
        numberobj_241_value = 0;
        numberobj_241_value_setter(numberobj_241_value);
        numberobj_242_value = 0;
        numberobj_242_value_setter(numberobj_242_value);
        numberobj_243_value = 0;
        numberobj_243_value_setter(numberobj_243_value);
        numberobj_244_value = 0;
        numberobj_244_value_setter(numberobj_244_value);
        numberobj_245_value = 0;
        numberobj_245_value_setter(numberobj_245_value);
        numberobj_246_value = 0;
        numberobj_246_value_setter(numberobj_246_value);
        numberobj_247_value = 0;
        numberobj_247_value_setter(numberobj_247_value);
        numberobj_248_value = 0;
        numberobj_248_value_setter(numberobj_248_value);
        numberobj_249_value = 0;
        numberobj_249_value_setter(numberobj_249_value);
        numberobj_250_value = 0;
        numberobj_250_value_setter(numberobj_250_value);
        numberobj_251_value = 0;
        numberobj_251_value_setter(numberobj_251_value);
        numberobj_252_value = 0;
        numberobj_252_value_setter(numberobj_252_value);
        numberobj_253_value = 0;
        numberobj_253_value_setter(numberobj_253_value);
        numberobj_254_value = 0;
        numberobj_254_value_setter(numberobj_254_value);
        numberobj_255_value = 0;
        numberobj_255_value_setter(numberobj_255_value);
        numberobj_256_value = 0;
        numberobj_256_value_setter(numberobj_256_value);
        numberobj_257_value = 0;
        numberobj_257_value_setter(numberobj_257_value);
        numberobj_258_value = 0;
        numberobj_258_value_setter(numberobj_258_value);
        numberobj_259_value = 0;
        numberobj_259_value_setter(numberobj_259_value);
        numberobj_260_value = 0;
        numberobj_260_value_setter(numberobj_260_value);
        numberobj_261_value = 0;
        numberobj_261_value_setter(numberobj_261_value);
        numberobj_262_value = 0;
        numberobj_262_value_setter(numberobj_262_value);
        numberobj_263_value = 0;
        numberobj_263_value_setter(numberobj_263_value);
        numberobj_264_value = 0;
        numberobj_264_value_setter(numberobj_264_value);
        numberobj_265_value = 0;
        numberobj_265_value_setter(numberobj_265_value);
        numberobj_266_value = 0;
        numberobj_266_value_setter(numberobj_266_value);
        numberobj_267_value = 0;
        numberobj_267_value_setter(numberobj_267_value);
        numberobj_268_value = 0;
        numberobj_268_value_setter(numberobj_268_value);
        numberobj_269_value = 0;
        numberobj_269_value_setter(numberobj_269_value);
        numberobj_270_value = 0;
        numberobj_270_value_setter(numberobj_270_value);
        numberobj_271_value = 0;
        numberobj_271_value_setter(numberobj_271_value);
        numberobj_272_value = 0;
        numberobj_272_value_setter(numberobj_272_value);
        numberobj_273_value = 0;
        numberobj_273_value_setter(numberobj_273_value);
        numberobj_274_value = 0;
        numberobj_274_value_setter(numberobj_274_value);
        numberobj_275_value = 0;
        numberobj_275_value_setter(numberobj_275_value);
        numberobj_276_value = 0;
        numberobj_276_value_setter(numberobj_276_value);
        numberobj_277_value = 0;
        numberobj_277_value_setter(numberobj_277_value);
        numberobj_278_value = 0;
        numberobj_278_value_setter(numberobj_278_value);
        numberobj_279_value = 0;
        numberobj_279_value_setter(numberobj_279_value);
        numberobj_280_value = 0;
        numberobj_280_value_setter(numberobj_280_value);
        numberobj_281_value = 0;
        numberobj_281_value_setter(numberobj_281_value);
        numberobj_282_value = 0;
        numberobj_282_value_setter(numberobj_282_value);
        numberobj_283_value = 0;
        numberobj_283_value_setter(numberobj_283_value);
        numberobj_284_value = 0;
        numberobj_284_value_setter(numberobj_284_value);
        numberobj_285_value = 0;
        numberobj_285_value_setter(numberobj_285_value);
        numberobj_286_value = 0;
        numberobj_286_value_setter(numberobj_286_value);
        numberobj_287_value = 0;
        numberobj_287_value_setter(numberobj_287_value);
        numberobj_288_value = 0;
        numberobj_288_value_setter(numberobj_288_value);
        numberobj_289_value = 0;
        numberobj_289_value_setter(numberobj_289_value);
        numberobj_290_value = 0;
        numberobj_290_value_setter(numberobj_290_value);
        numberobj_291_value = 0;
        numberobj_291_value_setter(numberobj_291_value);
        numberobj_292_value = 0;
        numberobj_292_value_setter(numberobj_292_value);
        numberobj_293_value = 0;
        numberobj_293_value_setter(numberobj_293_value);
        numberobj_294_value = 0;
        numberobj_294_value_setter(numberobj_294_value);
        numberobj_295_value = 0;
        numberobj_295_value_setter(numberobj_295_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        accum_04_value = -1;
        numberobj_194_currentFormat = 6;
        numberobj_194_lastValue = 0;
        toggle_05_lastValue = 0;
        numberobj_195_currentFormat = 6;
        numberobj_195_lastValue = 0;
        numberobj_196_currentFormat = 6;
        numberobj_196_lastValue = 0;
        numberobj_197_currentFormat = 6;
        numberobj_197_lastValue = 0;
        numberobj_198_currentFormat = 6;
        numberobj_198_lastValue = 0;
        numberobj_199_currentFormat = 6;
        numberobj_199_lastValue = 0;
        numberobj_200_currentFormat = 6;
        numberobj_200_lastValue = 0;
        numberobj_201_currentFormat = 6;
        numberobj_201_lastValue = 0;
        numberobj_202_currentFormat = 6;
        numberobj_202_lastValue = 0;
        numberobj_203_currentFormat = 6;
        numberobj_203_lastValue = 0;
        numberobj_204_currentFormat = 6;
        numberobj_204_lastValue = 0;
        numberobj_205_currentFormat = 6;
        numberobj_205_lastValue = 0;
        numberobj_206_currentFormat = 6;
        numberobj_206_lastValue = 0;
        numberobj_207_currentFormat = 6;
        numberobj_207_lastValue = 0;
        numberobj_208_currentFormat = 6;
        numberobj_208_lastValue = 0;
        numberobj_209_currentFormat = 6;
        numberobj_209_lastValue = 0;
        numberobj_210_currentFormat = 6;
        numberobj_210_lastValue = 0;
        numberobj_211_currentFormat = 6;
        numberobj_211_lastValue = 0;
        numberobj_212_currentFormat = 6;
        numberobj_212_lastValue = 0;
        numberobj_213_currentFormat = 6;
        numberobj_213_lastValue = 0;
        numberobj_214_currentFormat = 6;
        numberobj_214_lastValue = 0;
        numberobj_215_currentFormat = 6;
        numberobj_215_lastValue = 0;
        numberobj_216_currentFormat = 6;
        numberobj_216_lastValue = 0;
        numberobj_217_currentFormat = 6;
        numberobj_217_lastValue = 0;
        numberobj_218_currentFormat = 6;
        numberobj_218_lastValue = 0;
        numberobj_219_currentFormat = 6;
        numberobj_219_lastValue = 0;
        numberobj_220_currentFormat = 6;
        numberobj_220_lastValue = 0;
        numberobj_221_currentFormat = 6;
        numberobj_221_lastValue = 0;
        numberobj_222_currentFormat = 6;
        numberobj_222_lastValue = 0;
        numberobj_223_currentFormat = 6;
        numberobj_223_lastValue = 0;
        numberobj_224_currentFormat = 6;
        numberobj_224_lastValue = 0;
        numberobj_225_currentFormat = 6;
        numberobj_225_lastValue = 0;
        numberobj_226_currentFormat = 6;
        numberobj_226_lastValue = 0;
        numberobj_227_currentFormat = 6;
        numberobj_227_lastValue = 0;
        numberobj_228_currentFormat = 6;
        numberobj_228_lastValue = 0;
        numberobj_229_currentFormat = 6;
        numberobj_229_lastValue = 0;
        numberobj_230_currentFormat = 6;
        numberobj_230_lastValue = 0;
        numberobj_231_currentFormat = 6;
        numberobj_231_lastValue = 0;
        numberobj_232_currentFormat = 6;
        numberobj_232_lastValue = 0;
        numberobj_233_currentFormat = 6;
        numberobj_233_lastValue = 0;
        numberobj_234_currentFormat = 6;
        numberobj_234_lastValue = 0;
        numberobj_235_currentFormat = 6;
        numberobj_235_lastValue = 0;
        numberobj_236_currentFormat = 6;
        numberobj_236_lastValue = 0;
        numberobj_237_currentFormat = 6;
        numberobj_237_lastValue = 0;
        numberobj_238_currentFormat = 6;
        numberobj_238_lastValue = 0;
        numberobj_239_currentFormat = 6;
        numberobj_239_lastValue = 0;
        numberobj_240_currentFormat = 6;
        numberobj_240_lastValue = 0;
        numberobj_241_currentFormat = 6;
        numberobj_241_lastValue = 0;
        numberobj_242_currentFormat = 6;
        numberobj_242_lastValue = 0;
        numberobj_243_currentFormat = 6;
        numberobj_243_lastValue = 0;
        numberobj_244_currentFormat = 6;
        numberobj_244_lastValue = 0;
        numberobj_245_currentFormat = 6;
        numberobj_245_lastValue = 0;
        numberobj_246_currentFormat = 6;
        numberobj_246_lastValue = 0;
        numberobj_247_currentFormat = 6;
        numberobj_247_lastValue = 0;
        numberobj_248_currentFormat = 6;
        numberobj_248_lastValue = 0;
        numberobj_249_currentFormat = 6;
        numberobj_249_lastValue = 0;
        numberobj_250_currentFormat = 6;
        numberobj_250_lastValue = 0;
        numberobj_251_currentFormat = 6;
        numberobj_251_lastValue = 0;
        numberobj_252_currentFormat = 6;
        numberobj_252_lastValue = 0;
        numberobj_253_currentFormat = 6;
        numberobj_253_lastValue = 0;
        numberobj_254_currentFormat = 6;
        numberobj_254_lastValue = 0;
        numberobj_255_currentFormat = 6;
        numberobj_255_lastValue = 0;
        numberobj_256_currentFormat = 6;
        numberobj_256_lastValue = 0;
        numberobj_257_currentFormat = 6;
        numberobj_257_lastValue = 0;
        numberobj_258_currentFormat = 6;
        numberobj_258_lastValue = 0;
        numberobj_259_currentFormat = 6;
        numberobj_259_lastValue = 0;
        numberobj_260_currentFormat = 6;
        numberobj_260_lastValue = 0;
        numberobj_261_currentFormat = 6;
        numberobj_261_lastValue = 0;
        numberobj_262_currentFormat = 6;
        numberobj_262_lastValue = 0;
        numberobj_263_currentFormat = 6;
        numberobj_263_lastValue = 0;
        numberobj_264_currentFormat = 6;
        numberobj_264_lastValue = 0;
        numberobj_265_currentFormat = 6;
        numberobj_265_lastValue = 0;
        numberobj_266_currentFormat = 6;
        numberobj_266_lastValue = 0;
        numberobj_267_currentFormat = 6;
        numberobj_267_lastValue = 0;
        numberobj_268_currentFormat = 6;
        numberobj_268_lastValue = 0;
        numberobj_269_currentFormat = 6;
        numberobj_269_lastValue = 0;
        numberobj_270_currentFormat = 6;
        numberobj_270_lastValue = 0;
        numberobj_271_currentFormat = 6;
        numberobj_271_lastValue = 0;
        numberobj_272_currentFormat = 6;
        numberobj_272_lastValue = 0;
        numberobj_273_currentFormat = 6;
        numberobj_273_lastValue = 0;
        numberobj_274_currentFormat = 6;
        numberobj_274_lastValue = 0;
        numberobj_275_currentFormat = 6;
        numberobj_275_lastValue = 0;
        numberobj_276_currentFormat = 6;
        numberobj_276_lastValue = 0;
        numberobj_277_currentFormat = 6;
        numberobj_277_lastValue = 0;
        numberobj_278_currentFormat = 6;
        numberobj_278_lastValue = 0;
        numberobj_279_currentFormat = 6;
        numberobj_279_lastValue = 0;
        numberobj_280_currentFormat = 6;
        numberobj_280_lastValue = 0;
        numberobj_281_currentFormat = 6;
        numberobj_281_lastValue = 0;
        numberobj_282_currentFormat = 6;
        numberobj_282_lastValue = 0;
        numberobj_283_currentFormat = 6;
        numberobj_283_lastValue = 0;
        numberobj_284_currentFormat = 6;
        numberobj_284_lastValue = 0;
        numberobj_285_currentFormat = 6;
        numberobj_285_lastValue = 0;
        numberobj_286_currentFormat = 6;
        numberobj_286_lastValue = 0;
        numberobj_287_currentFormat = 6;
        numberobj_287_lastValue = 0;
        numberobj_288_currentFormat = 6;
        numberobj_288_lastValue = 0;
        numberobj_289_currentFormat = 6;
        numberobj_289_lastValue = 0;
        numberobj_290_currentFormat = 6;
        numberobj_290_lastValue = 0;
        numberobj_291_currentFormat = 6;
        numberobj_291_lastValue = 0;
        numberobj_292_currentFormat = 6;
        numberobj_292_lastValue = 0;
        numberobj_293_currentFormat = 6;
        numberobj_293_lastValue = 0;
        numberobj_294_currentFormat = 6;
        numberobj_294_lastValue = 0;
        numberobj_295_currentFormat = 6;
        numberobj_295_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number gate_34_onoff;
        number gate_34_out1_number;
        list gate_34_out1_list;
        number gate_34_out2_number;
        list gate_34_out2_list;
        number accum_04_x;
        number accum_04_reset;
        list message_73_set;
        number numberobj_194_value;
        list message_74_set;
        list message_75_set;
        number toggle_05_value_number;
        number receive_45_output_number;
        list receive_45_output_list;
        number select_43_test1;
        number numberobj_195_value;
        list listlookup_02_input;
        list listlookup_02_lookup;
        list message_76_set;
        list message_77_set;
        list message_78_set;
        number pak_04_in1;
        number pak_04_in2;
        number pak_04_in3;
        number pak_04_in4;
        number pak_04_in5;
        number pak_04_in6;
        number pak_04_in7;
        number pak_04_in8;
        number pak_04_in9;
        number pak_04_in10;
        number pak_04_in11;
        number pak_04_in12;
        number pak_04_in13;
        number pak_04_in14;
        number pak_04_in15;
        number pak_04_in16;
        number pak_04_in17;
        number pak_04_in18;
        number pak_04_in19;
        number pak_04_in20;
        number pak_04_in21;
        number pak_04_in22;
        number pak_04_in23;
        number pak_04_in24;
        number pak_04_in25;
        number pak_04_in26;
        number pak_04_in27;
        number pak_04_in28;
        number pak_04_in29;
        number pak_04_in30;
        number pak_04_in31;
        number pak_04_in32;
        number pak_04_in33;
        number pak_04_in34;
        number pak_04_in35;
        number pak_04_in36;
        number pak_04_in37;
        number pak_04_in38;
        number pak_04_in39;
        number pak_04_in40;
        number pak_04_in41;
        number pak_04_in42;
        number pak_04_in43;
        number pak_04_in44;
        number pak_04_in45;
        number pak_04_in46;
        number pak_04_in47;
        number pak_04_in48;
        number pak_04_in49;
        number pak_04_in50;
        number pak_04_in51;
        number pak_04_in52;
        number pak_04_in53;
        number pak_04_in54;
        number pak_04_in55;
        number pak_04_in56;
        number pak_04_in57;
        number pak_04_in58;
        number pak_04_in59;
        number pak_04_in60;
        number pak_04_in61;
        number pak_04_in62;
        number pak_04_in63;
        number pak_04_in64;
        number pak_04_in65;
        number pak_04_in66;
        number pak_04_in67;
        number pak_04_in68;
        number pak_04_in69;
        number pak_04_in70;
        number pak_04_in71;
        number pak_04_in72;
        number pak_04_in73;
        number pak_04_in74;
        number pak_04_in75;
        number pak_04_in76;
        number pak_04_in77;
        number pak_04_in78;
        number pak_04_in79;
        number pak_04_in80;
        number pak_04_in81;
        number pak_04_in82;
        number pak_04_in83;
        number pak_04_in84;
        number pak_04_in85;
        number pak_04_in86;
        number pak_04_in87;
        number pak_04_in88;
        number pak_04_in89;
        number pak_04_in90;
        number pak_04_in91;
        number pak_04_in92;
        number pak_04_in93;
        number pak_04_in94;
        number pak_04_in95;
        number pak_04_in96;
        number pak_04_in97;
        number pak_04_in98;
        number pak_04_in99;
        number pak_04_in100;
        number numberobj_196_value;
        number route_02_selector1;
        number route_02_selector2;
        number route_02_selector3;
        number route_02_selector4;
        number route_02_selector5;
        number route_02_selector6;
        number route_02_selector7;
        number route_02_selector8;
        number route_02_selector9;
        number route_02_selector10;
        number route_02_selector11;
        number route_02_selector12;
        number route_02_selector13;
        number route_02_selector14;
        number route_02_selector15;
        number route_02_selector16;
        number route_02_selector17;
        number route_02_selector18;
        number route_02_selector19;
        number route_02_selector20;
        number route_02_selector21;
        number route_02_selector22;
        number route_02_selector23;
        number route_02_selector24;
        number route_02_selector25;
        number route_02_selector26;
        number route_02_selector27;
        number route_02_selector28;
        number route_02_selector29;
        number route_02_selector30;
        number route_02_selector31;
        number route_02_selector32;
        number route_02_selector33;
        number route_02_selector34;
        number route_02_selector35;
        number route_02_selector36;
        number route_02_selector37;
        number route_02_selector38;
        number route_02_selector39;
        number route_02_selector40;
        number route_02_selector41;
        number route_02_selector42;
        number route_02_selector43;
        number route_02_selector44;
        number route_02_selector45;
        number route_02_selector46;
        number route_02_selector47;
        number route_02_selector48;
        number route_02_selector49;
        number route_02_selector50;
        number route_02_selector51;
        number route_02_selector52;
        number route_02_selector53;
        number route_02_selector54;
        number route_02_selector55;
        number route_02_selector56;
        number route_02_selector57;
        number route_02_selector58;
        number route_02_selector59;
        number route_02_selector60;
        number route_02_selector61;
        number route_02_selector62;
        number route_02_selector63;
        number route_02_selector64;
        number route_02_selector65;
        number route_02_selector66;
        number route_02_selector67;
        number route_02_selector68;
        number route_02_selector69;
        number route_02_selector70;
        number route_02_selector71;
        number route_02_selector72;
        number route_02_selector73;
        number route_02_selector74;
        number route_02_selector75;
        number route_02_selector76;
        number route_02_selector77;
        number route_02_selector78;
        number route_02_selector79;
        number route_02_selector80;
        number route_02_selector81;
        number route_02_selector82;
        number route_02_selector83;
        number route_02_selector84;
        number route_02_selector85;
        number route_02_selector86;
        number route_02_selector87;
        number route_02_selector88;
        number route_02_selector89;
        number route_02_selector90;
        number route_02_selector91;
        number route_02_selector92;
        number route_02_selector93;
        number route_02_selector94;
        number route_02_selector95;
        number route_02_selector96;
        number route_02_selector97;
        number route_02_selector98;
        number route_02_selector99;
        number route_02_selector100;
        list message_79_set;
        list message_80_set;
        number numberobj_197_value;
        number expr_89_in1;
        number expr_89_in2;
        number expr_89_out1;
        number numberobj_198_value;
        list message_81_set;
        number numberobj_199_value;
        number pack_04_in1;
        number pack_04_in2;
        number expr_90_in1;
        number expr_90_in2;
        number expr_90_out1;
        number numberobj_200_value;
        number numberobj_201_value;
        number numberobj_202_value;
        number numberobj_203_value;
        number numberobj_204_value;
        number numberobj_205_value;
        number numberobj_206_value;
        number numberobj_207_value;
        number numberobj_208_value;
        number numberobj_209_value;
        number numberobj_210_value;
        number numberobj_211_value;
        number numberobj_212_value;
        number numberobj_213_value;
        number numberobj_214_value;
        number numberobj_215_value;
        number numberobj_216_value;
        number numberobj_217_value;
        number numberobj_218_value;
        number numberobj_219_value;
        number numberobj_220_value;
        number numberobj_221_value;
        number numberobj_222_value;
        number numberobj_223_value;
        number numberobj_224_value;
        number numberobj_225_value;
        number numberobj_226_value;
        number numberobj_227_value;
        number numberobj_228_value;
        number numberobj_229_value;
        number numberobj_230_value;
        number numberobj_231_value;
        number numberobj_232_value;
        number numberobj_233_value;
        number numberobj_234_value;
        number numberobj_235_value;
        number numberobj_236_value;
        number numberobj_237_value;
        number numberobj_238_value;
        number numberobj_239_value;
        number numberobj_240_value;
        number numberobj_241_value;
        number numberobj_242_value;
        number numberobj_243_value;
        number numberobj_244_value;
        number numberobj_245_value;
        number numberobj_246_value;
        number numberobj_247_value;
        number numberobj_248_value;
        number numberobj_249_value;
        number numberobj_250_value;
        number numberobj_251_value;
        number numberobj_252_value;
        number numberobj_253_value;
        number numberobj_254_value;
        number numberobj_255_value;
        number numberobj_256_value;
        number numberobj_257_value;
        number numberobj_258_value;
        number numberobj_259_value;
        number numberobj_260_value;
        number numberobj_261_value;
        number numberobj_262_value;
        number numberobj_263_value;
        number numberobj_264_value;
        number numberobj_265_value;
        number numberobj_266_value;
        number numberobj_267_value;
        number numberobj_268_value;
        number numberobj_269_value;
        number numberobj_270_value;
        number numberobj_271_value;
        number numberobj_272_value;
        number numberobj_273_value;
        number numberobj_274_value;
        number numberobj_275_value;
        number numberobj_276_value;
        number numberobj_277_value;
        number numberobj_278_value;
        number numberobj_279_value;
        number numberobj_280_value;
        number numberobj_281_value;
        number numberobj_282_value;
        number numberobj_283_value;
        number numberobj_284_value;
        number numberobj_285_value;
        number numberobj_286_value;
        number numberobj_287_value;
        number numberobj_288_value;
        number numberobj_289_value;
        number numberobj_290_value;
        number numberobj_291_value;
        number numberobj_292_value;
        number numberobj_293_value;
        number numberobj_294_value;
        number numberobj_295_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number accum_04_value;
        Int numberobj_194_currentFormat;
        number numberobj_194_lastValue;
        number toggle_05_lastValue;
        Int numberobj_195_currentFormat;
        number numberobj_195_lastValue;
        Int numberobj_196_currentFormat;
        number numberobj_196_lastValue;
        Int numberobj_197_currentFormat;
        number numberobj_197_lastValue;
        Int numberobj_198_currentFormat;
        number numberobj_198_lastValue;
        Int numberobj_199_currentFormat;
        number numberobj_199_lastValue;
        Int numberobj_200_currentFormat;
        number numberobj_200_lastValue;
        Int numberobj_201_currentFormat;
        number numberobj_201_lastValue;
        Int numberobj_202_currentFormat;
        number numberobj_202_lastValue;
        Int numberobj_203_currentFormat;
        number numberobj_203_lastValue;
        Int numberobj_204_currentFormat;
        number numberobj_204_lastValue;
        Int numberobj_205_currentFormat;
        number numberobj_205_lastValue;
        Int numberobj_206_currentFormat;
        number numberobj_206_lastValue;
        Int numberobj_207_currentFormat;
        number numberobj_207_lastValue;
        Int numberobj_208_currentFormat;
        number numberobj_208_lastValue;
        Int numberobj_209_currentFormat;
        number numberobj_209_lastValue;
        Int numberobj_210_currentFormat;
        number numberobj_210_lastValue;
        Int numberobj_211_currentFormat;
        number numberobj_211_lastValue;
        Int numberobj_212_currentFormat;
        number numberobj_212_lastValue;
        Int numberobj_213_currentFormat;
        number numberobj_213_lastValue;
        Int numberobj_214_currentFormat;
        number numberobj_214_lastValue;
        Int numberobj_215_currentFormat;
        number numberobj_215_lastValue;
        Int numberobj_216_currentFormat;
        number numberobj_216_lastValue;
        Int numberobj_217_currentFormat;
        number numberobj_217_lastValue;
        Int numberobj_218_currentFormat;
        number numberobj_218_lastValue;
        Int numberobj_219_currentFormat;
        number numberobj_219_lastValue;
        Int numberobj_220_currentFormat;
        number numberobj_220_lastValue;
        Int numberobj_221_currentFormat;
        number numberobj_221_lastValue;
        Int numberobj_222_currentFormat;
        number numberobj_222_lastValue;
        Int numberobj_223_currentFormat;
        number numberobj_223_lastValue;
        Int numberobj_224_currentFormat;
        number numberobj_224_lastValue;
        Int numberobj_225_currentFormat;
        number numberobj_225_lastValue;
        Int numberobj_226_currentFormat;
        number numberobj_226_lastValue;
        Int numberobj_227_currentFormat;
        number numberobj_227_lastValue;
        Int numberobj_228_currentFormat;
        number numberobj_228_lastValue;
        Int numberobj_229_currentFormat;
        number numberobj_229_lastValue;
        Int numberobj_230_currentFormat;
        number numberobj_230_lastValue;
        Int numberobj_231_currentFormat;
        number numberobj_231_lastValue;
        Int numberobj_232_currentFormat;
        number numberobj_232_lastValue;
        Int numberobj_233_currentFormat;
        number numberobj_233_lastValue;
        Int numberobj_234_currentFormat;
        number numberobj_234_lastValue;
        Int numberobj_235_currentFormat;
        number numberobj_235_lastValue;
        Int numberobj_236_currentFormat;
        number numberobj_236_lastValue;
        Int numberobj_237_currentFormat;
        number numberobj_237_lastValue;
        Int numberobj_238_currentFormat;
        number numberobj_238_lastValue;
        Int numberobj_239_currentFormat;
        number numberobj_239_lastValue;
        Int numberobj_240_currentFormat;
        number numberobj_240_lastValue;
        Int numberobj_241_currentFormat;
        number numberobj_241_lastValue;
        Int numberobj_242_currentFormat;
        number numberobj_242_lastValue;
        Int numberobj_243_currentFormat;
        number numberobj_243_lastValue;
        Int numberobj_244_currentFormat;
        number numberobj_244_lastValue;
        Int numberobj_245_currentFormat;
        number numberobj_245_lastValue;
        Int numberobj_246_currentFormat;
        number numberobj_246_lastValue;
        Int numberobj_247_currentFormat;
        number numberobj_247_lastValue;
        Int numberobj_248_currentFormat;
        number numberobj_248_lastValue;
        Int numberobj_249_currentFormat;
        number numberobj_249_lastValue;
        Int numberobj_250_currentFormat;
        number numberobj_250_lastValue;
        Int numberobj_251_currentFormat;
        number numberobj_251_lastValue;
        Int numberobj_252_currentFormat;
        number numberobj_252_lastValue;
        Int numberobj_253_currentFormat;
        number numberobj_253_lastValue;
        Int numberobj_254_currentFormat;
        number numberobj_254_lastValue;
        Int numberobj_255_currentFormat;
        number numberobj_255_lastValue;
        Int numberobj_256_currentFormat;
        number numberobj_256_lastValue;
        Int numberobj_257_currentFormat;
        number numberobj_257_lastValue;
        Int numberobj_258_currentFormat;
        number numberobj_258_lastValue;
        Int numberobj_259_currentFormat;
        number numberobj_259_lastValue;
        Int numberobj_260_currentFormat;
        number numberobj_260_lastValue;
        Int numberobj_261_currentFormat;
        number numberobj_261_lastValue;
        Int numberobj_262_currentFormat;
        number numberobj_262_lastValue;
        Int numberobj_263_currentFormat;
        number numberobj_263_lastValue;
        Int numberobj_264_currentFormat;
        number numberobj_264_lastValue;
        Int numberobj_265_currentFormat;
        number numberobj_265_lastValue;
        Int numberobj_266_currentFormat;
        number numberobj_266_lastValue;
        Int numberobj_267_currentFormat;
        number numberobj_267_lastValue;
        Int numberobj_268_currentFormat;
        number numberobj_268_lastValue;
        Int numberobj_269_currentFormat;
        number numberobj_269_lastValue;
        Int numberobj_270_currentFormat;
        number numberobj_270_lastValue;
        Int numberobj_271_currentFormat;
        number numberobj_271_lastValue;
        Int numberobj_272_currentFormat;
        number numberobj_272_lastValue;
        Int numberobj_273_currentFormat;
        number numberobj_273_lastValue;
        Int numberobj_274_currentFormat;
        number numberobj_274_lastValue;
        Int numberobj_275_currentFormat;
        number numberobj_275_lastValue;
        Int numberobj_276_currentFormat;
        number numberobj_276_lastValue;
        Int numberobj_277_currentFormat;
        number numberobj_277_lastValue;
        Int numberobj_278_currentFormat;
        number numberobj_278_lastValue;
        Int numberobj_279_currentFormat;
        number numberobj_279_lastValue;
        Int numberobj_280_currentFormat;
        number numberobj_280_lastValue;
        Int numberobj_281_currentFormat;
        number numberobj_281_lastValue;
        Int numberobj_282_currentFormat;
        number numberobj_282_lastValue;
        Int numberobj_283_currentFormat;
        number numberobj_283_lastValue;
        Int numberobj_284_currentFormat;
        number numberobj_284_lastValue;
        Int numberobj_285_currentFormat;
        number numberobj_285_lastValue;
        Int numberobj_286_currentFormat;
        number numberobj_286_lastValue;
        Int numberobj_287_currentFormat;
        number numberobj_287_lastValue;
        Int numberobj_288_currentFormat;
        number numberobj_288_lastValue;
        Int numberobj_289_currentFormat;
        number numberobj_289_lastValue;
        Int numberobj_290_currentFormat;
        number numberobj_290_lastValue;
        Int numberobj_291_currentFormat;
        number numberobj_291_lastValue;
        Int numberobj_292_currentFormat;
        number numberobj_292_lastValue;
        Int numberobj_293_currentFormat;
        number numberobj_293_lastValue;
        Int numberobj_294_currentFormat;
        number numberobj_294_lastValue;
        Int numberobj_295_currentFormat;
        number numberobj_295_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_124 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_124()
    {
    }
    
    ~RNBOSubpatcher_124()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1935387534, false);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return rand01() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->metro_04_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->metro_04_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1935387534:
            {
            this->metro_04_tick_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("emitter/toggle_obj-159") == objectId)
                this->toggle_06_valin_set(payload);
    
            if (TAG("emitter/number_obj-156") == objectId)
                this->numberobj_296_valin_set(payload);
    
            if (TAG("emitter/number_obj-71") == objectId)
                this->numberobj_297_valin_set(payload);
    
            if (TAG("emitter/number_obj-6") == objectId)
                this->numberobj_298_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("emitter/number_obj-156") == objectId)
                this->numberobj_296_format_set(payload);
    
            if (TAG("emitter/number_obj-71") == objectId)
                this->numberobj_297_format_set(payload);
    
            if (TAG("emitter/number_obj-6") == objectId)
                this->numberobj_298_format_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("emitter/message_obj-70") == objectId)
                this->message_82_listin_number_set(payload);
    
            if (TAG("emitter/message_obj-66") == objectId)
                this->message_83_listin_number_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("emitter/message_obj-70") == objectId)
                this->message_82_listin_list_set(payload);
    
            if (TAG("emitter/message_obj-66") == objectId)
                this->message_83_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("emitter/message_obj-70") == objectId)
                this->message_82_listin_bang_bang();
    
            if (TAG("emitter/message_obj-66") == objectId)
                this->message_83_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("emitter/toggle_obj-159"):
            {
            return "emitter/toggle_obj-159";
            }
        case TAG("emitter/number_obj-156"):
            {
            return "emitter/number_obj-156";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("emitter/number_obj-71"):
            {
            return "emitter/number_obj-71";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("emitter/message_obj-70"):
            {
            return "emitter/message_obj-70";
            }
        case TAG("emitter/message_obj-66"):
            {
            return "emitter/message_obj-66";
            }
        case TAG("emitter/number_obj-6"):
            {
            return "emitter/number_obj-6";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_53_out1_bang_bang() {
        this->toggle_06_value_bang_bang();
    }
    
    void eventinlet_53_out1_number_set(number v) {
        this->toggle_06_value_number_set(v);
    }
    
    void toggle_06_valin_set(number v) {
        this->toggle_06_value_number_set(v);
    }
    
    void metro_04_tick_bang() {
        this->metro_04_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_04_on)) {
            this->metro_04_last = this->currenttime();
    
            {
                this->metro_04_next = this->metro_04_last + this->metro_04_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_04_interval + this->_currentTime);;
            }
        }
    }
    
    void numberobj_296_valin_set(number v) {
        this->numberobj_296_value_set(v);
    }
    
    void numberobj_296_format_set(number v) {
        this->numberobj_296_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_297_valin_set(number v) {
        this->numberobj_297_value_set(v);
    }
    
    void numberobj_297_format_set(number v) {
        this->numberobj_297_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_82_listin_list_set(const list& v) {
        this->message_82_set_set(v);
    }
    
    void message_82_listin_number_set(number v) {
        this->message_82_set_set(v);
    }
    
    void message_82_listin_bang_bang() {
        this->message_82_trigger_bang();
    }
    
    void message_83_listin_list_set(const list& v) {
        this->message_83_set_set(v);
    }
    
    void message_83_listin_number_set(number v) {
        this->message_83_set_set(v);
    }
    
    void message_83_listin_bang_bang() {
        this->message_83_trigger_bang();
    }
    
    void numberobj_298_valin_set(number v) {
        this->numberobj_298_value_set(v);
    }
    
    void numberobj_298_format_set(number v) {
        this->numberobj_298_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_296_init();
        this->random_20_nz_init();
        this->numberobj_297_init();
        this->message_82_init();
        this->message_83_init();
        this->numberobj_298_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        if ((bool)(this->metro_04_on))
            this->metro_04_on_set(1);
    }
    
    void allocateDataRefs() {}
    
    void scale_88_outhigh_set(number v) {
        this->scale_88_outhigh = v;
    }
    
    void scale_87_outlow_set(number v) {
        this->scale_87_outlow = v;
    }
    
    void receive_46_output_number_set(number v) {
        this->receive_46_output_number = v;
        this->scale_88_outhigh_set(v);
        this->scale_87_outlow_set(v);
    }
    
    void scale_88_outlow_set(number v) {
        this->scale_88_outlow = v;
    }
    
    void scale_87_outhigh_set(number v) {
        this->scale_87_outhigh = v;
    }
    
    void receive_47_output_number_set(number v) {
        this->receive_47_output_number = v;
        this->scale_88_outlow_set(v);
        this->scale_87_outhigh_set(v);
    }
    
    void gate_36_onoff_set(number v) {
        this->gate_36_onoff = v;
    }
    
    void gate_35_onoff_set(number v) {
        this->gate_35_onoff = v;
    }
    
    void scale_88_power_set(number v) {
        this->scale_88_power = v;
    }
    
    void numberobj_297_output_set(number v) {
        this->scale_88_power_set(v);
    }
    
    void numberobj_297_value_set(number v) {
        this->numberobj_297_value_setter(v);
        v = this->numberobj_297_value;
        number localvalue = v;
    
        if (this->numberobj_297_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("emitter/number_obj-71"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_297_output_set(localvalue);
    }
    
    void scale_89_out_set(const list& v) {
        this->scale_89_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_297_value_set(converted);
        }
    }
    
    void scale_89_input_set(const list& v) {
        this->scale_89_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_89_inlow,
                this->scale_89_inhigh,
                this->scale_89_outlow,
                this->scale_89_outhigh,
                this->scale_89_power
            ));
        }
    
        this->scale_89_out_set(tmp);
    }
    
    void gate_36_out1_number_set(number v) {
        this->gate_36_out1_number = v;
    
        {
            list converted = {v};
            this->scale_89_input_set(converted);
        }
    }
    
    void scale_87_power_set(number v) {
        this->scale_87_power = v;
    }
    
    void numberobj_298_output_set(number v) {
        this->scale_87_power_set(v);
    }
    
    void numberobj_298_value_set(number v) {
        this->numberobj_298_value_setter(v);
        v = this->numberobj_298_value;
        number localvalue = v;
    
        if (this->numberobj_298_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("emitter/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_298_output_set(localvalue);
    }
    
    void scale_90_out_set(const list& v) {
        this->scale_90_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_298_value_set(converted);
        }
    }
    
    void scale_90_input_set(const list& v) {
        this->scale_90_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_90_inlow,
                this->scale_90_inhigh,
                this->scale_90_outlow,
                this->scale_90_outhigh,
                this->scale_90_power
            ));
        }
    
        this->scale_90_out_set(tmp);
    }
    
    void gate_36_out2_number_set(number v) {
        this->gate_36_out2_number = v;
    
        {
            list converted = {v};
            this->scale_90_input_set(converted);
        }
    }
    
    void gate_36_input_number_set(number v) {
        if (this->gate_36_onoff == 1)
            this->gate_36_out1_number_set(v);
        else if (this->gate_36_onoff == 2)
            this->gate_36_out2_number_set(v);
    }
    
    void metro_04_interval_set(number v) {
        this->metro_04_interval_setter(v);
        v = this->metro_04_interval;
    }
    
    void scale_88_out_set(const list& v) {
        this->scale_88_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_04_interval_set(converted);
        }
    }
    
    void scale_88_input_set(const list& v) {
        this->scale_88_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_88_inlow,
                this->scale_88_inhigh,
                this->scale_88_outlow,
                this->scale_88_outhigh,
                this->scale_88_power
            ));
        }
    
        this->scale_88_out_set(tmp);
    }
    
    void gate_35_out1_number_set(number v) {
        this->gate_35_out1_number = v;
    
        {
            list converted = {v};
            this->scale_88_input_set(converted);
        }
    }
    
    void scale_87_out_set(const list& v) {
        this->scale_87_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_04_interval_set(converted);
        }
    }
    
    void scale_87_input_set(const list& v) {
        this->scale_87_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_87_inlow,
                this->scale_87_inhigh,
                this->scale_87_outlow,
                this->scale_87_outhigh,
                this->scale_87_power
            ));
        }
    
        this->scale_87_out_set(tmp);
    }
    
    void gate_35_out2_number_set(number v) {
        this->gate_35_out2_number = v;
    
        {
            list converted = {v};
            this->scale_87_input_set(converted);
        }
    }
    
    void gate_35_input_number_set(number v) {
        if (this->gate_35_onoff == 1)
            this->gate_35_out1_number_set(v);
        else if (this->gate_35_onoff == 2)
            this->gate_35_out2_number_set(v);
    }
    
    void message_83_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_36_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_36_onoff_set(converted);
        }
    
        {
            if (v->length > 1)
                this->gate_35_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_35_onoff_set(converted);
        }
    }
    
    void message_83_trigger_bang() {
        this->message_83_out_set(this->message_83_set);
    }
    
    void select_45_match1_bang() {
        this->message_83_trigger_bang();
    }
    
    void select_45_nomatch_number_set(number ) {}
    
    void select_45_input_number_set(number v) {
        if (v == this->select_45_test1)
            this->select_45_match1_bang();
        else
            this->select_45_nomatch_number_set(v);
    }
    
    void expr_92_out1_set(number v) {
        this->expr_92_out1 = v;
        this->select_45_input_number_set(this->expr_92_out1);
    }
    
    void expr_92_in1_set(number in1) {
        this->expr_92_in1 = in1;
        this->expr_92_out1_set(this->expr_92_in1 >= this->expr_92_in2);//#map:emitter/>=_obj-80:1
    }
    
    void message_82_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_36_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_36_onoff_set(converted);
        }
    
        {
            if (v->length > 1)
                this->gate_35_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_35_onoff_set(converted);
        }
    }
    
    void message_82_trigger_bang() {
        this->message_82_out_set(this->message_82_set);
    }
    
    void select_44_match1_bang() {
        this->message_82_trigger_bang();
    }
    
    void select_44_nomatch_number_set(number ) {}
    
    void select_44_input_number_set(number v) {
        if (v == this->select_44_test1)
            this->select_44_match1_bang();
        else
            this->select_44_nomatch_number_set(v);
    }
    
    void expr_91_out1_set(number v) {
        this->expr_91_out1 = v;
        this->select_44_input_number_set(this->expr_91_out1);
    }
    
    void expr_91_in1_set(number in1) {
        this->expr_91_in1 = in1;
        this->expr_91_out1_set(this->expr_91_in1 <= this->expr_91_in2);//#map:emitter/<=_obj-82:1
    }
    
    void trigger_41_out2_set(number v) {
        this->expr_92_in1_set(v);
        this->expr_91_in1_set(v);
    }
    
    void trigger_41_out1_set(number v) {
        this->gate_36_input_number_set(v);
    }
    
    void trigger_41_input_number_set(number v) {
        this->trigger_41_out2_set(trunc(v));
        this->trigger_41_out1_set(trunc(v));
    }
    
    void receive_48_output_number_set(number v) {
        this->receive_48_output_number = v;
        this->trigger_41_input_number_set(v);
    }
    
    void metro_04_on_set(number v) {
        this->metro_04_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_06_output_set(number v) {
        this->metro_04_on_set(v);
    }
    
    void toggle_06_value_number_set(number v) {
        this->toggle_06_value_number_setter(v);
        v = this->toggle_06_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("emitter/toggle_obj-159"), v, this->_currentTime);
        this->toggle_06_output_set(v);
    }
    
    void eventinlet_53_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_06_value_number_set(converted);
        }
    }
    
    void toggle_06_value_bang_bang() {
        number val = (this->toggle_06_value_number == 1 ? 0 : 1);
        this->toggle_06_value_number_set(val);
    }
    
    void numberobj_296_output_set(number v) {
        this->gate_35_input_number_set(v);
    }
    
    void numberobj_296_value_set(number v) {
        this->numberobj_296_value_setter(v);
        v = this->numberobj_296_value;
        number localvalue = v;
    
        if (this->numberobj_296_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("emitter/number_obj-156"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_296_output_set(localvalue);
    }
    
    void random_20_result_set(number v) {
        this->numberobj_296_value_set(v);
    }
    
    void random_20_trigger_bang() {
        {
            this->random_20_result_set(this->random(0, this->random_20_limit));
        }
    }
    
    void eventoutlet_36_in1_bang_bang() {
        ;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_31_out1_bang_bang();
    }
    
    void metro_04_tickout_bang() {
        this->random_20_trigger_bang();
        this->eventoutlet_36_in1_bang_bang();
    }
    
    void message_82_set_set(const list& v) {
        this->message_82_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("emitter/message_obj-70"), v, this->_currentTime);
    }
    
    void message_83_set_set(const list& v) {
        this->message_83_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("emitter/message_obj-66"), v, this->_currentTime);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_06_value_number_setter(number v) {
        this->toggle_06_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_04_interval_setter(number v) {
        this->metro_04_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_296_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_296_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_296_value = localvalue;
    }
    
    void random_20_limit_setter(number v) {
        if (v >= 0)
            this->random_20_limit = v;
    }
    
    void numberobj_297_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_297_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_297_value = localvalue;
    }
    
    void numberobj_298_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_298_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_298_value = localvalue;
    }
    
    void toggle_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_06_value_number;
    }
    
    void toggle_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_06_value_number_set(preset["value"]);
    }
    
    void metro_04_onTransportChanged(number ) {}
    
    void metro_04_onBeatTimeChanged(number ) {}
    
    void numberobj_296_init() {
        this->numberobj_296_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter/number_obj-156"), 1, this->_currentTime);
    }
    
    void numberobj_296_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_296_value;
    }
    
    void numberobj_296_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_296_value_set(preset["value"]);
    }
    
    void random_20_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_20_nz_state
        );
    }
    
    void random_20_nz_init() {
        this->random_20_nz_reset();
    }
    
    void random_20_nz_seed(number v) {
        xoshiro_reset(v, this->random_20_nz_state);
    }
    
    number random_20_nz_next() {
        return xoshiro_next(this->random_20_nz_state);
    }
    
    void numberobj_297_init() {
        this->numberobj_297_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter/number_obj-71"), 1, this->_currentTime);
    }
    
    void numberobj_297_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_297_value;
    }
    
    void numberobj_297_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_297_value_set(preset["value"]);
    }
    
    void message_82_init() {
        this->message_82_set_set({1});
    }
    
    void message_83_init() {
        this->message_83_set_set({2});
    }
    
    void numberobj_298_init() {
        this->numberobj_298_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("emitter/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_298_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_298_value;
    }
    
    void numberobj_298_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_298_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        toggle_06_value_number = 0;
        toggle_06_value_number_setter(toggle_06_value_number);
        metro_04_on = 0;
        metro_04_interval = 500;
        metro_04_interval_setter(metro_04_interval);
        scale_87_inlow = 0;
        scale_87_inhigh = 999;
        scale_87_outlow = 0;
        scale_87_outhigh = 1;
        scale_87_power = 1;
        numberobj_296_value = 0;
        numberobj_296_value_setter(numberobj_296_value);
        random_20_limit = 1000;
        random_20_limit_setter(random_20_limit);
        random_20_seed = 0;
        gate_35_onoff = 0;
        gate_35_out1_number = 0;
        gate_35_out2_number = 0;
        receive_46_output_number = 0;
        scale_88_inlow = 999;
        scale_88_inhigh = 0;
        scale_88_outlow = 0;
        scale_88_outhigh = 1;
        scale_88_power = 1;
        receive_47_output_number = 0;
        gate_36_onoff = 0;
        gate_36_out1_number = 0;
        gate_36_out2_number = 0;
        receive_48_output_number = 0;
        select_44_test1 = 1;
        scale_89_inlow = -100;
        scale_89_inhigh = 0;
        scale_89_outlow = 0.1;
        scale_89_outhigh = 1;
        scale_89_power = 1;
        expr_91_in1 = 0;
        expr_91_in2 = 0;
        expr_91_out1 = 0;
        numberobj_297_value = 0;
        numberobj_297_value_setter(numberobj_297_value);
        select_45_test1 = 1;
        expr_92_in1 = 0;
        expr_92_in2 = 1;
        expr_92_out1 = 0;
        numberobj_298_value = 0;
        numberobj_298_value_setter(numberobj_298_value);
        scale_90_inlow = 1;
        scale_90_inhigh = 100;
        scale_90_outlow = 1;
        scale_90_outhigh = 0.1;
        scale_90_power = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        toggle_06_lastValue = 0;
        metro_04_last = -1;
        metro_04_next = -1;
        numberobj_296_currentFormat = 6;
        numberobj_296_lastValue = 0;
        numberobj_297_currentFormat = 6;
        numberobj_297_lastValue = 0;
        numberobj_298_currentFormat = 6;
        numberobj_298_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number toggle_06_value_number;
        number metro_04_on;
        number metro_04_interval;
        list scale_87_input;
        number scale_87_inlow;
        number scale_87_inhigh;
        number scale_87_outlow;
        number scale_87_outhigh;
        number scale_87_power;
        list scale_87_out;
        number numberobj_296_value;
        number random_20_limit;
        number random_20_seed;
        number gate_35_onoff;
        number gate_35_out1_number;
        list gate_35_out1_list;
        number gate_35_out2_number;
        list gate_35_out2_list;
        number receive_46_output_number;
        list receive_46_output_list;
        list scale_88_input;
        number scale_88_inlow;
        number scale_88_inhigh;
        number scale_88_outlow;
        number scale_88_outhigh;
        number scale_88_power;
        list scale_88_out;
        number receive_47_output_number;
        list receive_47_output_list;
        number gate_36_onoff;
        number gate_36_out1_number;
        list gate_36_out1_list;
        number gate_36_out2_number;
        list gate_36_out2_list;
        number receive_48_output_number;
        list receive_48_output_list;
        number select_44_test1;
        list scale_89_input;
        number scale_89_inlow;
        number scale_89_inhigh;
        number scale_89_outlow;
        number scale_89_outhigh;
        number scale_89_power;
        list scale_89_out;
        number expr_91_in1;
        number expr_91_in2;
        number expr_91_out1;
        number numberobj_297_value;
        number select_45_test1;
        list message_82_set;
        number expr_92_in1;
        number expr_92_in2;
        number expr_92_out1;
        list message_83_set;
        number numberobj_298_value;
        list scale_90_input;
        number scale_90_inlow;
        number scale_90_inhigh;
        number scale_90_outlow;
        number scale_90_outhigh;
        number scale_90_power;
        list scale_90_out;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number toggle_06_lastValue;
        MillisecondTime metro_04_last;
        MillisecondTime metro_04_next;
        Int numberobj_296_currentFormat;
        number numberobj_296_lastValue;
        UInt random_20_nz_state[4] = { };
        Int numberobj_297_currentFormat;
        number numberobj_297_lastValue;
        Int numberobj_298_currentFormat;
        number numberobj_298_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_23;
    for (int i = 0; i < 100; i++) {
        delete p_24[i];
    }
    delete this->p_25;
    delete this->p_26;
    delete this->p_27;
    delete this->p_28;
    for (int i = 0; i < 100; i++) {
        delete p_29[i];
    }
    delete this->p_30;
    delete this->p_31;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 29237386, false);
    getEngine()->flushClockEvents(this, 892732297, false);
    getEngine()->flushClockEvents(this, -1494586265, false);
    getEngine()->flushClockEvents(this, -281953904, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number samplerate() const {
    return this->sr;
}

Index vectorsize() const {
    return this->vs;
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

SampleIndex currentsampletime() {
    return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 0;
}

void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
    const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
    this->dspexpr_07_perform(in1, this->dspexpr_07_in2, this->signals[0], n);
    this->dspexpr_10_perform(in2, this->dspexpr_10_in2, this->signals[1], n);
    this->ip_01_perform(this->signals[2], n);
    this->dspexpr_09_perform(in1, in2, this->signals[2], this->signals[3], n);

    this->recordtilde_01_perform(
        this->recordtilde_01_record,
        this->recordtilde_01_begin,
        this->recordtilde_01_end,
        this->signals[3],
        this->signals[2],
        n
    );

    this->numbertilde_20_perform(this->signals[2], this->dummyBuffer, n);
    this->p_24_perform(this->signals[2], this->signals[3], n);
    this->p_25_perform(n);
    this->p_26_perform(n);
    this->p_27_perform(n);
    this->linetilde_05_perform(this->signals[4], n);
    this->p_28_perform(n);
    this->p_29_perform(this->signals[5], this->signals[6], n);
    this->dspexpr_12_perform(this->signals[2], this->signals[5], this->signals[4], this->signals[7], n);
    this->dspexpr_08_perform(this->signals[7], this->dspexpr_08_in2, this->signals[5], n);
    this->dspexpr_13_perform(this->signals[3], this->signals[6], this->signals[4], this->signals[7], n);
    this->dspexpr_11_perform(this->signals[7], this->dspexpr_11_in2, this->signals[4], n);
    this->signaladder_01_perform(this->signals[0], this->signals[5], this->signals[5], n);
    this->signaladder_02_perform(this->signals[1], this->signals[4], this->signals[4], n);
    this->p_23_perform(this->signals[5], this->signals[4], out1, out2, n);
    this->p_30_perform(n);
    this->p_31_perform(n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 8; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->ip_01_sigbuf = resizeSignal(this->ip_01_sigbuf, this->maxvs, maxBlockSize);
        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->data_01_dspsetup(forceDSPSetup);
    this->ip_01_dspsetup(forceDSPSetup);
    this->numbertilde_20_dspsetup(forceDSPSetup);
    this->data_02_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_23->prepareToProcess(sampleRate, maxBlockSize, force);

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->prepareToProcess(sampleRate, maxBlockSize, force);
    }

    this->p_25->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_26->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_27->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_28->prepareToProcess(sampleRate, maxBlockSize, force);

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->prepareToProcess(sampleRate, maxBlockSize, force);
    }

    this->p_30->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_31->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->livegran);
        break;
        }
    case 1:
        {
        return addressOf(this->fixedbuffer);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 2;
}

void fillDataRef(DataRefIndex , DataRef& ) {}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->updateTime(time);

    if (index == 0) {
        this->recordtilde_01_buffer = new Float32Buffer(this->livegran);
        this->data_01_buffer = new Float32Buffer(this->livegran);
        this->data_01_bufferUpdated();
    }

    if (index == 1) {
        this->data_02_buffer = new Float32Buffer(this->fixedbuffer);
        this->data_02_bufferUpdated();
    }

    this->p_23->processDataViewUpdate(index, time);

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->processDataViewUpdate(index, time);
    }

    this->p_25->processDataViewUpdate(index, time);
    this->p_26->processDataViewUpdate(index, time);
    this->p_27->processDataViewUpdate(index, time);
    this->p_28->processDataViewUpdate(index, time);

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->processDataViewUpdate(index, time);
    }

    this->p_30->processDataViewUpdate(index, time);
    this->p_31->processDataViewUpdate(index, time);
}

void initialize() {
    this->livegran = initDataRef("livegran", false, nullptr, "buffer~");
    this->fixedbuffer = initDataRef("fixedbuffer", false, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->livegran->setIndex(0);
    this->recordtilde_01_buffer = new Float32Buffer(this->livegran);
    this->data_01_buffer = new Float32Buffer(this->livegran);
    this->fixedbuffer->setIndex(1);
    this->data_02_buffer = new Float32Buffer(this->fixedbuffer);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double ) {}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_23->processTempoEvent(time, tempo);

        for (Index i = 0; i < 100; i++) {
            this->p_24[i]->processTempoEvent(time, tempo);
        }

        this->p_25->processTempoEvent(time, tempo);
        this->p_26->processTempoEvent(time, tempo);
        this->p_27->processTempoEvent(time, tempo);
        this->p_28->processTempoEvent(time, tempo);

        for (Index i = 0; i < 100; i++) {
            this->p_29[i]->processTempoEvent(time, tempo);
        }

        this->p_30->processTempoEvent(time, tempo);
        this->p_31->processTempoEvent(time, tempo);
        this->transport_01_onTempoChanged(tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_23->processTransportEvent(time, state);

        for (Index i = 0; i < 100; i++) {
            this->p_24[i]->processTransportEvent(time, state);
        }

        this->p_25->processTransportEvent(time, state);
        this->p_26->processTransportEvent(time, state);
        this->p_27->processTransportEvent(time, state);
        this->p_28->processTransportEvent(time, state);

        for (Index i = 0; i < 100; i++) {
            this->p_29[i]->processTransportEvent(time, state);
        }

        this->p_30->processTransportEvent(time, state);
        this->p_31->processTransportEvent(time, state);
        this->transport_01_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_23->processBeatTimeEvent(time, beattime);

        for (Index i = 0; i < 100; i++) {
            this->p_24[i]->processBeatTimeEvent(time, beattime);
        }

        this->p_25->processBeatTimeEvent(time, beattime);
        this->p_26->processBeatTimeEvent(time, beattime);
        this->p_27->processBeatTimeEvent(time, beattime);
        this->p_28->processBeatTimeEvent(time, beattime);

        for (Index i = 0; i < 100; i++) {
            this->p_29[i]->processBeatTimeEvent(time, beattime);
        }

        this->p_30->processBeatTimeEvent(time, beattime);
        this->p_31->processBeatTimeEvent(time, beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_23->processTimeSignatureEvent(time, numerator, denominator);

        for (Index i = 0; i < 100; i++) {
            this->p_24[i]->processTimeSignatureEvent(time, numerator, denominator);
        }

        this->p_25->processTimeSignatureEvent(time, numerator, denominator);
        this->p_26->processTimeSignatureEvent(time, numerator, denominator);
        this->p_27->processTimeSignatureEvent(time, numerator, denominator);
        this->p_28->processTimeSignatureEvent(time, numerator, denominator);

        for (Index i = 0; i < 100; i++) {
            this->p_29[i]->processTimeSignatureEvent(time, numerator, denominator);
        }

        this->p_30->processTimeSignatureEvent(time, numerator, denominator);
        this->p_31->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_23 = new RNBOSubpatcher_116();
    this->p_23->setEngineAndPatcher(this->getEngine(), this);
    this->p_23->initialize();
    this->p_23->setParameterOffset(this->getParameterOffset(this->p_23));

    for (Index i = 0; i < 100; i++) {
        this->p_24[(Index)i] = new RNBOSubpatcher_117();
        this->p_24[(Index)i]->setEngineAndPatcher(this->getEngine(), this);
        this->p_24[(Index)i]->initialize();
        this->p_24[(Index)i]->setParameterOffset(this->getParameterOffset(this->p_24[0]));
        this->p_24[(Index)i]->setVoiceIndex(i + 1);
    }

    this->p_25 = new RNBOSubpatcher_118();
    this->p_25->setEngineAndPatcher(this->getEngine(), this);
    this->p_25->initialize();
    this->p_25->setParameterOffset(this->getParameterOffset(this->p_25));
    this->p_26 = new RNBOSubpatcher_119();
    this->p_26->setEngineAndPatcher(this->getEngine(), this);
    this->p_26->initialize();
    this->p_26->setParameterOffset(this->getParameterOffset(this->p_26));
    this->p_27 = new RNBOSubpatcher_120();
    this->p_27->setEngineAndPatcher(this->getEngine(), this);
    this->p_27->initialize();
    this->p_27->setParameterOffset(this->getParameterOffset(this->p_27));
    this->p_28 = new RNBOSubpatcher_121();
    this->p_28->setEngineAndPatcher(this->getEngine(), this);
    this->p_28->initialize();
    this->p_28->setParameterOffset(this->getParameterOffset(this->p_28));

    for (Index i = 0; i < 100; i++) {
        this->p_29[(Index)i] = new RNBOSubpatcher_122();
        this->p_29[(Index)i]->setEngineAndPatcher(this->getEngine(), this);
        this->p_29[(Index)i]->initialize();
        this->p_29[(Index)i]->setParameterOffset(this->getParameterOffset(this->p_29[0]));
        this->p_29[(Index)i]->setVoiceIndex(i + 1);
    }

    this->p_30 = new RNBOSubpatcher_123();
    this->p_30->setEngineAndPatcher(this->getEngine(), this);
    this->p_30->initialize();
    this->p_30->setParameterOffset(this->getParameterOffset(this->p_30));
    this->p_31 = new RNBOSubpatcher_124();
    this->p_31->setEngineAndPatcher(this->getEngine(), this);
    this->p_31->initialize();
    this->p_31->setParameterOffset(this->getParameterOffset(this->p_31));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_01_getPresetValue(getSubState(preset, "rate_probability"));
    this->param_02_getPresetValue(getSubState(preset, "size_max"));
    this->param_03_getPresetValue(getSubState(preset, "delay_min"));
    this->param_04_getPresetValue(getSubState(preset, "size_min"));
    this->param_05_getPresetValue(getSubState(preset, "size_probability"));
    this->param_06_getPresetValue(getSubState(preset, "rate_max"));
    this->param_07_getPresetValue(getSubState(preset, "rate_min"));
    this->param_08_getPresetValue(getSubState(preset, "delay_probability"));
    this->param_09_getPresetValue(getSubState(preset, "volume_max"));
    this->param_10_getPresetValue(getSubState(preset, "pitch_max"));
    this->param_11_getPresetValue(getSubState(preset, "volume_probability"));
    this->param_12_getPresetValue(getSubState(preset, "delay_max"));
    this->param_13_getPresetValue(getSubState(preset, "volume_min"));
    this->param_14_getPresetValue(getSubState(preset, "pitch_min"));
    this->param_15_getPresetValue(getSubState(preset, "direction"));
    this->param_16_getPresetValue(getSubState(preset, "pan_probability"));
    this->param_17_getPresetValue(getSubState(preset, "filter"));
    this->param_18_getPresetValue(getSubState(preset, "envelope"));
    this->param_19_getPresetValue(getSubState(preset, "pan_width"));
    this->param_20_getPresetValue(getSubState(preset, "pan_max"));
    this->param_21_getPresetValue(getSubState(preset, "pan_min"));
    this->param_22_getPresetValue(getSubState(preset, "pitch_probability"));
    this->param_23_getPresetValue(getSubState(preset, "buffermax"));
    this->param_24_getPresetValue(getSubState(preset, "buffermin"));
    this->param_25_getPresetValue(getSubState(preset, "mode"));
    this->param_26_getPresetValue(getSubState(preset, "buffer_probability"));
    this->param_27_getPresetValue(getSubState(preset, "dry"));
    this->param_28_getPresetValue(getSubState(preset, "wet"));
    this->p_23->getPreset(getSubState(getSubState(preset, "__sps"), "limiter"));

    for (Index i = 0; i < 100; i++)
        this->p_24[i]->getPreset(getSubStateAt(getSubState(preset, "__sps"), "livegrain", i));

    this->p_25->getPreset(getSubState(getSubState(preset, "__sps"), "sort[1]"));
    this->p_26->getPreset(getSubState(getSubState(preset, "__sps"), "emitter[1]"));
    this->p_27->getPreset(getSubState(getSubState(preset, "__sps"), "activatelive"));
    this->p_28->getPreset(getSubState(getSubState(preset, "__sps"), "activatefixed"));

    for (Index i = 0; i < 100; i++)
        this->p_29[i]->getPreset(getSubStateAt(getSubState(preset, "__sps"), "fixedgrain", i));

    this->p_30->getPreset(getSubState(getSubState(preset, "__sps"), "sort"));
    this->p_31->getPreset(getSubState(getSubState(preset, "__sps"), "emitter"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_01_setPresetValue(getSubState(preset, "rate_probability"));
    this->param_02_setPresetValue(getSubState(preset, "size_max"));
    this->param_03_setPresetValue(getSubState(preset, "delay_min"));
    this->param_04_setPresetValue(getSubState(preset, "size_min"));
    this->param_05_setPresetValue(getSubState(preset, "size_probability"));
    this->param_06_setPresetValue(getSubState(preset, "rate_max"));
    this->param_07_setPresetValue(getSubState(preset, "rate_min"));
    this->param_08_setPresetValue(getSubState(preset, "delay_probability"));
    this->param_09_setPresetValue(getSubState(preset, "volume_max"));
    this->param_10_setPresetValue(getSubState(preset, "pitch_max"));
    this->param_11_setPresetValue(getSubState(preset, "volume_probability"));
    this->param_12_setPresetValue(getSubState(preset, "delay_max"));
    this->param_13_setPresetValue(getSubState(preset, "volume_min"));
    this->param_14_setPresetValue(getSubState(preset, "pitch_min"));
    this->param_15_setPresetValue(getSubState(preset, "direction"));
    this->param_16_setPresetValue(getSubState(preset, "pan_probability"));
    this->param_17_setPresetValue(getSubState(preset, "filter"));
    this->param_18_setPresetValue(getSubState(preset, "envelope"));
    this->param_19_setPresetValue(getSubState(preset, "pan_width"));
    this->param_20_setPresetValue(getSubState(preset, "pan_max"));
    this->param_21_setPresetValue(getSubState(preset, "pan_min"));
    this->param_22_setPresetValue(getSubState(preset, "pitch_probability"));
    this->param_23_setPresetValue(getSubState(preset, "buffermax"));
    this->param_24_setPresetValue(getSubState(preset, "buffermin"));
    this->param_25_setPresetValue(getSubState(preset, "mode"));
    this->param_26_setPresetValue(getSubState(preset, "buffer_probability"));
    this->param_27_setPresetValue(getSubState(preset, "dry"));
    this->param_28_setPresetValue(getSubState(preset, "wet"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_07_value_set(v);
        break;
        }
    case 1:
        {
        this->param_06_value_set(v);
        break;
        }
    case 2:
        {
        this->param_01_value_set(v);
        break;
        }
    case 3:
        {
        this->param_04_value_set(v);
        break;
        }
    case 4:
        {
        this->param_02_value_set(v);
        break;
        }
    case 5:
        {
        this->param_05_value_set(v);
        break;
        }
    case 6:
        {
        this->param_13_value_set(v);
        break;
        }
    case 7:
        {
        this->param_09_value_set(v);
        break;
        }
    case 8:
        {
        this->param_11_value_set(v);
        break;
        }
    case 9:
        {
        this->param_14_value_set(v);
        break;
        }
    case 10:
        {
        this->param_10_value_set(v);
        break;
        }
    case 11:
        {
        this->param_22_value_set(v);
        break;
        }
    case 12:
        {
        this->param_21_value_set(v);
        break;
        }
    case 13:
        {
        this->param_20_value_set(v);
        break;
        }
    case 14:
        {
        this->param_19_value_set(v);
        break;
        }
    case 15:
        {
        this->param_16_value_set(v);
        break;
        }
    case 16:
        {
        this->param_03_value_set(v);
        break;
        }
    case 17:
        {
        this->param_12_value_set(v);
        break;
        }
    case 18:
        {
        this->param_08_value_set(v);
        break;
        }
    case 19:
        {
        this->param_24_value_set(v);
        break;
        }
    case 20:
        {
        this->param_23_value_set(v);
        break;
        }
    case 21:
        {
        this->param_26_value_set(v);
        break;
        }
    case 22:
        {
        this->param_15_value_set(v);
        break;
        }
    case 23:
        {
        this->param_17_value_set(v);
        break;
        }
    case 24:
        {
        this->param_18_value_set(v);
        break;
        }
    case 25:
        {
        this->param_25_value_set(v);
        break;
        }
    case 26:
        {
        this->param_27_value_set(v);
        break;
        }
    case 27:
        {
        this->param_28_value_set(v);
        break;
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            this->p_23->setParameterValue(index, v, time);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters())
            this->p_24[0]->setPolyParameterValue((PatcherInterface**)this->p_24, index, v, time);

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            this->p_25->setParameterValue(index, v, time);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            this->p_26->setParameterValue(index, v, time);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            this->p_27->setParameterValue(index, v, time);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            this->p_28->setParameterValue(index, v, time);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters())
            this->p_29[0]->setPolyParameterValue((PatcherInterface**)this->p_29, index, v, time);

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            this->p_30->setParameterValue(index, v, time);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            this->p_31->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_07_value;
        }
    case 1:
        {
        return this->param_06_value;
        }
    case 2:
        {
        return this->param_01_value;
        }
    case 3:
        {
        return this->param_04_value;
        }
    case 4:
        {
        return this->param_02_value;
        }
    case 5:
        {
        return this->param_05_value;
        }
    case 6:
        {
        return this->param_13_value;
        }
    case 7:
        {
        return this->param_09_value;
        }
    case 8:
        {
        return this->param_11_value;
        }
    case 9:
        {
        return this->param_14_value;
        }
    case 10:
        {
        return this->param_10_value;
        }
    case 11:
        {
        return this->param_22_value;
        }
    case 12:
        {
        return this->param_21_value;
        }
    case 13:
        {
        return this->param_20_value;
        }
    case 14:
        {
        return this->param_19_value;
        }
    case 15:
        {
        return this->param_16_value;
        }
    case 16:
        {
        return this->param_03_value;
        }
    case 17:
        {
        return this->param_12_value;
        }
    case 18:
        {
        return this->param_08_value;
        }
    case 19:
        {
        return this->param_24_value;
        }
    case 20:
        {
        return this->param_23_value;
        }
    case 21:
        {
        return this->param_26_value;
        }
    case 22:
        {
        return this->param_15_value;
        }
    case 23:
        {
        return this->param_17_value;
        }
    case 24:
        {
        return this->param_18_value;
        }
    case 25:
        {
        return this->param_25_value;
        }
    case 26:
        {
        return this->param_27_value;
        }
    case 27:
        {
        return this->param_28_value;
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterValue(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters())
            return this->p_24[0]->getPolyParameterValue((PatcherInterface**)this->p_24, index);

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterValue(index);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->getParameterValue(index);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterValue(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterValue(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters())
            return this->p_29[0]->getPolyParameterValue((PatcherInterface**)this->p_29, index);

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->getParameterValue(index);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29[0]->getNumParameters() + this->p_30->getNumParameters() + this->p_31->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "rate_min";
        }
    case 1:
        {
        return "rate_max";
        }
    case 2:
        {
        return "rate_probability";
        }
    case 3:
        {
        return "size_min";
        }
    case 4:
        {
        return "size_max";
        }
    case 5:
        {
        return "size_probability";
        }
    case 6:
        {
        return "volume_min";
        }
    case 7:
        {
        return "volume_max";
        }
    case 8:
        {
        return "volume_probability";
        }
    case 9:
        {
        return "pitch_min";
        }
    case 10:
        {
        return "pitch_max";
        }
    case 11:
        {
        return "pitch_probability";
        }
    case 12:
        {
        return "pan_min";
        }
    case 13:
        {
        return "pan_max";
        }
    case 14:
        {
        return "pan_width";
        }
    case 15:
        {
        return "pan_probability";
        }
    case 16:
        {
        return "delay_min";
        }
    case 17:
        {
        return "delay_max";
        }
    case 18:
        {
        return "delay_probability";
        }
    case 19:
        {
        return "buffermin";
        }
    case 20:
        {
        return "buffermax";
        }
    case 21:
        {
        return "buffer_probability";
        }
    case 22:
        {
        return "direction";
        }
    case 23:
        {
        return "filter";
        }
    case 24:
        {
        return "envelope";
        }
    case 25:
        {
        return "mode";
        }
    case 26:
        {
        return "dry";
        }
    case 27:
        {
        return "wet";
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterName(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->getParameterName(index);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterName(index);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->getParameterName(index);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterName(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterName(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters()) {
            {
                return this->p_29[0]->getParameterName(index);
            }
        }

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->getParameterName(index);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "rate_min";
        }
    case 1:
        {
        return "rate_max";
        }
    case 2:
        {
        return "rate_probability";
        }
    case 3:
        {
        return "size_min";
        }
    case 4:
        {
        return "size_max";
        }
    case 5:
        {
        return "size_probability";
        }
    case 6:
        {
        return "volume_min";
        }
    case 7:
        {
        return "volume_max";
        }
    case 8:
        {
        return "volume_probability";
        }
    case 9:
        {
        return "pitch_min";
        }
    case 10:
        {
        return "pitch_max";
        }
    case 11:
        {
        return "pitch_probability";
        }
    case 12:
        {
        return "pan_min";
        }
    case 13:
        {
        return "pan_max";
        }
    case 14:
        {
        return "pan_width";
        }
    case 15:
        {
        return "pan_probability";
        }
    case 16:
        {
        return "delay_min";
        }
    case 17:
        {
        return "delay_max";
        }
    case 18:
        {
        return "delay_probability";
        }
    case 19:
        {
        return "buffermin";
        }
    case 20:
        {
        return "buffermax";
        }
    case 21:
        {
        return "buffer_probability";
        }
    case 22:
        {
        return "direction";
        }
    case 23:
        {
        return "filter";
        }
    case 24:
        {
        return "envelope";
        }
    case 25:
        {
        return "mode";
        }
    case 26:
        {
        return "dry";
        }
    case 27:
        {
        return "wet";
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->getParameterId(index);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->getParameterId(index);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->getParameterId(index);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->getParameterId(index);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->getParameterId(index);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->getParameterId(index);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters()) {
            {
                return this->p_29[0]->getParameterId(index);
            }
        }

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->getParameterId(index);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 10;
            info->min = 1;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 10000;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Emitter Rate Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1000;
            info->min = 5;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 9996;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Emitter Rate Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Emitter Rate Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 10;
            info->min = 1;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 10000;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Size Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 500;
            info->min = 1;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 10000;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Size Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Size Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = -6;
            info->min = -70;
            info->max = 0;
            info->exponent = 1;
            info->steps = 701;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Volume Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -70;
            info->max = 0;
            info->exponent = 1;
            info->steps = 701;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Volume Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Volume Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0.25;
            info->max = 4;
            info->exponent = 1;
            info->steps = 376;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pitch Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0.25;
            info->max = 4;
            info->exponent = 1;
            info->steps = 376;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pitch Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 11:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pitch Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 12:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = -100;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pan Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 13:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 100;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pan Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 14:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 50;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 101;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pan Width";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 15:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Pan Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 16:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 10;
            info->min = 1;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 10000;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Delay Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 17:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 5000;
            info->min = 1;
            info->max = 10000;
            info->exponent = 1;
            info->steps = 10000;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Delay Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 18:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Delay Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 19:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 1001;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Start Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 20:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 1001;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Start Max";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 21:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Start Prob.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 22:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 100;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Direction";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 23:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 101;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Filter";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 24:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -100;
            info->max = 100;
            info->exponent = 1;
            info->steps = 201;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Grain Envelope";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 25:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal25[] = {"0", "1"};
            info->enumValues = eVal25;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Mode";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 26:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = -70;
            info->min = -70;
            info->max = 0;
            info->exponent = 1;
            info->steps = 701;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Dry";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 27:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -70;
            info->max = 0;
            info->exponent = 1;
            info->steps = 701;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Wet";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 28;

            if (index < this->p_23->getNumParameters())
                this->p_23->getParameterInfo(index, info);

            index -= this->p_23->getNumParameters();

            if (index < this->p_24[0]->getNumParameters()) {
                for (Index i = 0; i < 100; i++) {
                    this->p_24[i]->getParameterInfo(index, info);
                }
            }

            index -= this->p_24[0]->getNumParameters();

            if (index < this->p_25->getNumParameters())
                this->p_25->getParameterInfo(index, info);

            index -= this->p_25->getNumParameters();

            if (index < this->p_26->getNumParameters())
                this->p_26->getParameterInfo(index, info);

            index -= this->p_26->getNumParameters();

            if (index < this->p_27->getNumParameters())
                this->p_27->getParameterInfo(index, info);

            index -= this->p_27->getNumParameters();

            if (index < this->p_28->getNumParameters())
                this->p_28->getParameterInfo(index, info);

            index -= this->p_28->getNumParameters();

            if (index < this->p_29[0]->getNumParameters()) {
                for (Index i = 0; i < 100; i++) {
                    this->p_29[i]->getParameterInfo(index, info);
                }
            }

            index -= this->p_29[0]->getNumParameters();

            if (index < this->p_30->getNumParameters())
                this->p_30->getParameterInfo(index, info);

            index -= this->p_30->getNumParameters();

            if (index < this->p_31->getNumParameters())
                this->p_31->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_23)
        return 28;

    if (subpatcher == this->p_24[0])
        return 28 + this->p_23->getNumParameters();

    if (subpatcher == this->p_25)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters();

    if (subpatcher == this->p_26)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters();

    if (subpatcher == this->p_27)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters();

    if (subpatcher == this->p_28)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters() + this->p_27->getNumParameters();

    if (subpatcher == this->p_29[0])
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters();

    if (subpatcher == this->p_30)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29[0]->getNumParameters();

    if (subpatcher == this->p_31)
        return 28 + this->p_23->getNumParameters() + this->p_24[0]->getNumParameters() + this->p_25->getNumParameters() + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29[0]->getNumParameters() + this->p_30->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 25:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 2);
            }

            return normalizedValue;
        }
        }
    case 19:
    case 20:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 1001);
            }

            return normalizedValue;
        }
        }
    case 14:
    case 23:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 101);
            }

            return normalizedValue;
        }
        }
    case 0:
    case 3:
    case 4:
    case 16:
    case 17:
        {
        {
            value = (value < 1 ? 1 : (value > 10000 ? 10000 : value));
            ParameterValue normalizedValue = (value - 1) / (10000 - 1);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 10000);
            }

            return normalizedValue;
        }
        }
    case 1:
        {
        {
            value = (value < 5 ? 5 : (value > 10000 ? 10000 : value));
            ParameterValue normalizedValue = (value - 5) / (10000 - 5);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 9996);
            }

            return normalizedValue;
        }
        }
    case 2:
    case 5:
    case 8:
    case 11:
    case 12:
    case 13:
    case 15:
    case 18:
    case 21:
    case 22:
    case 24:
        {
        {
            value = (value < -100 ? -100 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - -100) / (100 - -100);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 201);
            }

            return normalizedValue;
        }
        }
    case 6:
    case 7:
    case 26:
    case 27:
        {
        {
            value = (value < -70 ? -70 : (value > 0 ? 0 : value));
            ParameterValue normalizedValue = (value - -70) / (0 - -70);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 701);
            }

            return normalizedValue;
        }
        }
    case 9:
    case 10:
        {
        {
            value = (value < 0.25 ? 0.25 : (value > 4 ? 4 : value));
            ParameterValue normalizedValue = (value - 0.25) / (4 - 0.25);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 376);
            }

            return normalizedValue;
        }
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->convertToNormalizedParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->convertToNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->convertToNormalizedParameterValue(index, value);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->convertToNormalizedParameterValue(index, value);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->convertToNormalizedParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->convertToNormalizedParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters()) {
            {
                return this->p_29[0]->convertToNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->convertToNormalizedParameterValue(index, value);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 25:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 2);
            }

            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 19:
    case 20:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 1001);
            }

            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 14:
    case 23:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 101);
            }

            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 0:
    case 3:
    case 4:
    case 16:
    case 17:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 10000);
            }

            {
                return 1 + value * (10000 - 1);
            }
        }
        }
    case 1:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 9996);
            }

            {
                return 5 + value * (10000 - 5);
            }
        }
        }
    case 2:
    case 5:
    case 8:
    case 11:
    case 12:
    case 13:
    case 15:
    case 18:
    case 21:
    case 22:
    case 24:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 201);
            }

            {
                return -100 + value * (100 - -100);
            }
        }
        }
    case 6:
    case 7:
    case 26:
    case 27:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 701);
            }

            {
                return -70 + value * (0 - -70);
            }
        }
        }
    case 9:
    case 10:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 376);
            }

            {
                return 0.25 + value * (4 - 0.25);
            }
        }
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->convertFromNormalizedParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->convertFromNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->convertFromNormalizedParameterValue(index, value);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->convertFromNormalizedParameterValue(index, value);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->convertFromNormalizedParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->convertFromNormalizedParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters()) {
            {
                return this->p_29[0]->convertFromNormalizedParameterValue(index, value);
            }
        }

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->convertFromNormalizedParameterValue(index, value);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_07_value_constrain(value);
        }
    case 1:
        {
        return this->param_06_value_constrain(value);
        }
    case 2:
        {
        return this->param_01_value_constrain(value);
        }
    case 3:
        {
        return this->param_04_value_constrain(value);
        }
    case 4:
        {
        return this->param_02_value_constrain(value);
        }
    case 5:
        {
        return this->param_05_value_constrain(value);
        }
    case 6:
        {
        return this->param_13_value_constrain(value);
        }
    case 7:
        {
        return this->param_09_value_constrain(value);
        }
    case 8:
        {
        return this->param_11_value_constrain(value);
        }
    case 9:
        {
        return this->param_14_value_constrain(value);
        }
    case 10:
        {
        return this->param_10_value_constrain(value);
        }
    case 11:
        {
        return this->param_22_value_constrain(value);
        }
    case 12:
        {
        return this->param_21_value_constrain(value);
        }
    case 13:
        {
        return this->param_20_value_constrain(value);
        }
    case 14:
        {
        return this->param_19_value_constrain(value);
        }
    case 15:
        {
        return this->param_16_value_constrain(value);
        }
    case 16:
        {
        return this->param_03_value_constrain(value);
        }
    case 17:
        {
        return this->param_12_value_constrain(value);
        }
    case 18:
        {
        return this->param_08_value_constrain(value);
        }
    case 19:
        {
        return this->param_24_value_constrain(value);
        }
    case 20:
        {
        return this->param_23_value_constrain(value);
        }
    case 21:
        {
        return this->param_26_value_constrain(value);
        }
    case 22:
        {
        return this->param_15_value_constrain(value);
        }
    case 23:
        {
        return this->param_17_value_constrain(value);
        }
    case 24:
        {
        return this->param_18_value_constrain(value);
        }
    case 25:
        {
        return this->param_25_value_constrain(value);
        }
    case 26:
        {
        return this->param_27_value_constrain(value);
        }
    case 27:
        {
        return this->param_28_value_constrain(value);
        }
    default:
        {
        index -= 28;

        if (index < this->p_23->getNumParameters())
            return this->p_23->constrainParameterValue(index, value);

        index -= this->p_23->getNumParameters();

        if (index < this->p_24[0]->getNumParameters()) {
            {
                return this->p_24[0]->constrainParameterValue(index, value);
            }
        }

        index -= this->p_24[0]->getNumParameters();

        if (index < this->p_25->getNumParameters())
            return this->p_25->constrainParameterValue(index, value);

        index -= this->p_25->getNumParameters();

        if (index < this->p_26->getNumParameters())
            return this->p_26->constrainParameterValue(index, value);

        index -= this->p_26->getNumParameters();

        if (index < this->p_27->getNumParameters())
            return this->p_27->constrainParameterValue(index, value);

        index -= this->p_27->getNumParameters();

        if (index < this->p_28->getNumParameters())
            return this->p_28->constrainParameterValue(index, value);

        index -= this->p_28->getNumParameters();

        if (index < this->p_29[0]->getNumParameters()) {
            {
                return this->p_29[0]->constrainParameterValue(index, value);
            }
        }

        index -= this->p_29[0]->getNumParameters();

        if (index < this->p_30->getNumParameters())
            return this->p_30->constrainParameterValue(index, value);

        index -= this->p_30->getNumParameters();

        if (index < this->p_31->getNumParameters())
            return this->p_31->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 29237386:
        {
        this->loadmess_03_startupbang_bang();
        break;
        }
    case 892732297:
        {
        this->loadmess_04_startupbang_bang();
        break;
        }
    case -1494586265:
        {
        this->numbertilde_20_value_set(value);
        break;
        }
    case -281953904:
        {
        this->linetilde_05_target_bang();
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("sig"):
        {
        if (TAG("number~_obj-4") == objectId)
            this->numbertilde_20_sig_number_set(payload);

        break;
        }
    case TAG("mode"):
        {
        if (TAG("number~_obj-4") == objectId)
            this->numbertilde_20_mode_set(payload);

        break;
        }
    case TAG("valin"):
        {
        if (TAG("toggle_obj-12") == objectId)
            this->toggle_07_valin_set(payload);

        if (TAG("number_obj-23") == objectId)
            this->numberobj_299_valin_set(payload);

        if (TAG("number_obj-77") == objectId)
            this->numberobj_300_valin_set(payload);

        if (TAG("number_obj-35") == objectId)
            this->numberobj_301_valin_set(payload);

        if (TAG("number_obj-158") == objectId)
            this->numberobj_302_valin_set(payload);

        if (TAG("number_obj-90") == objectId)
            this->numberobj_303_valin_set(payload);

        if (TAG("number_obj-92") == objectId)
            this->numberobj_304_valin_set(payload);

        if (TAG("toggle_obj-145") == objectId)
            this->toggle_08_valin_set(payload);

        if (TAG("number_obj-50") == objectId)
            this->numberobj_305_valin_set(payload);

        if (TAG("number_obj-36") == objectId)
            this->numberobj_306_valin_set(payload);

        if (TAG("number_obj-34") == objectId)
            this->numberobj_307_valin_set(payload);

        if (TAG("number_obj-21") == objectId)
            this->numberobj_308_valin_set(payload);

        if (TAG("number_obj-11") == objectId)
            this->numberobj_309_valin_set(payload);

        if (TAG("number_obj-64") == objectId)
            this->numberobj_310_valin_set(payload);

        if (TAG("number_obj-58") == objectId)
            this->numberobj_311_valin_set(payload);

        if (TAG("toggle_obj-148") == objectId)
            this->toggle_09_valin_set(payload);

        if (TAG("number_obj-89") == objectId)
            this->numberobj_312_valin_set(payload);

        if (TAG("number_obj-88") == objectId)
            this->numberobj_313_valin_set(payload);

        if (TAG("number_obj-84") == objectId)
            this->numberobj_314_valin_set(payload);

        if (TAG("number_obj-79") == objectId)
            this->numberobj_315_valin_set(payload);

        if (TAG("number_obj-78") == objectId)
            this->numberobj_316_valin_set(payload);

        if (TAG("number_obj-75") == objectId)
            this->numberobj_317_valin_set(payload);

        if (TAG("number_obj-68") == objectId)
            this->numberobj_318_valin_set(payload);

        if (TAG("number_obj-44") == objectId)
            this->numberobj_319_valin_set(payload);

        if (TAG("number_obj-120") == objectId)
            this->numberobj_320_valin_set(payload);

        if (TAG("number_obj-116") == objectId)
            this->numberobj_321_valin_set(payload);

        if (TAG("number_obj-112") == objectId)
            this->numberobj_322_valin_set(payload);

        if (TAG("number_obj-108") == objectId)
            this->numberobj_323_valin_set(payload);

        if (TAG("number_obj-104") == objectId)
            this->numberobj_324_valin_set(payload);

        if (TAG("number_obj-100") == objectId)
            this->numberobj_325_valin_set(payload);

        if (TAG("number_obj-96") == objectId)
            this->numberobj_326_valin_set(payload);

        if (TAG("number_obj-109") == objectId)
            this->numberobj_327_valin_set(payload);

        if (TAG("number_obj-101") == objectId)
            this->numberobj_328_valin_set(payload);

        if (TAG("number_obj-95") == objectId)
            this->numberobj_329_valin_set(payload);

        if (TAG("number_obj-55") == objectId)
            this->numberobj_330_valin_set(payload);

        if (TAG("number_obj-66") == objectId)
            this->numberobj_331_valin_set(payload);

        if (TAG("number_obj-124") == objectId)
            this->numberobj_332_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-23") == objectId)
            this->numberobj_299_format_set(payload);

        if (TAG("number_obj-77") == objectId)
            this->numberobj_300_format_set(payload);

        if (TAG("number_obj-35") == objectId)
            this->numberobj_301_format_set(payload);

        if (TAG("number_obj-158") == objectId)
            this->numberobj_302_format_set(payload);

        if (TAG("number_obj-90") == objectId)
            this->numberobj_303_format_set(payload);

        if (TAG("number_obj-92") == objectId)
            this->numberobj_304_format_set(payload);

        if (TAG("number_obj-50") == objectId)
            this->numberobj_305_format_set(payload);

        if (TAG("number_obj-36") == objectId)
            this->numberobj_306_format_set(payload);

        if (TAG("number_obj-34") == objectId)
            this->numberobj_307_format_set(payload);

        if (TAG("number_obj-21") == objectId)
            this->numberobj_308_format_set(payload);

        if (TAG("number_obj-11") == objectId)
            this->numberobj_309_format_set(payload);

        if (TAG("number_obj-64") == objectId)
            this->numberobj_310_format_set(payload);

        if (TAG("number_obj-58") == objectId)
            this->numberobj_311_format_set(payload);

        if (TAG("number_obj-89") == objectId)
            this->numberobj_312_format_set(payload);

        if (TAG("number_obj-88") == objectId)
            this->numberobj_313_format_set(payload);

        if (TAG("number_obj-84") == objectId)
            this->numberobj_314_format_set(payload);

        if (TAG("number_obj-79") == objectId)
            this->numberobj_315_format_set(payload);

        if (TAG("number_obj-78") == objectId)
            this->numberobj_316_format_set(payload);

        if (TAG("number_obj-75") == objectId)
            this->numberobj_317_format_set(payload);

        if (TAG("number_obj-68") == objectId)
            this->numberobj_318_format_set(payload);

        if (TAG("number_obj-44") == objectId)
            this->numberobj_319_format_set(payload);

        if (TAG("number_obj-120") == objectId)
            this->numberobj_320_format_set(payload);

        if (TAG("number_obj-116") == objectId)
            this->numberobj_321_format_set(payload);

        if (TAG("number_obj-112") == objectId)
            this->numberobj_322_format_set(payload);

        if (TAG("number_obj-108") == objectId)
            this->numberobj_323_format_set(payload);

        if (TAG("number_obj-104") == objectId)
            this->numberobj_324_format_set(payload);

        if (TAG("number_obj-100") == objectId)
            this->numberobj_325_format_set(payload);

        if (TAG("number_obj-96") == objectId)
            this->numberobj_326_format_set(payload);

        if (TAG("number_obj-109") == objectId)
            this->numberobj_327_format_set(payload);

        if (TAG("number_obj-101") == objectId)
            this->numberobj_328_format_set(payload);

        if (TAG("number_obj-95") == objectId)
            this->numberobj_329_format_set(payload);

        if (TAG("number_obj-55") == objectId)
            this->numberobj_330_format_set(payload);

        if (TAG("number_obj-66") == objectId)
            this->numberobj_331_format_set(payload);

        if (TAG("number_obj-124") == objectId)
            this->numberobj_332_format_set(payload);

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-67") == objectId)
            this->message_84_listin_number_set(payload);

        if (TAG("message_obj-144") == objectId)
            this->message_85_listin_number_set(payload);

        if (TAG("message_obj-140") == objectId)
            this->message_86_listin_number_set(payload);

        if (TAG("message_obj-125") == objectId)
            this->message_87_listin_number_set(payload);

        if (TAG("message_obj-127") == objectId)
            this->message_88_listin_number_set(payload);

        if (TAG("message_obj-142") == objectId)
            this->message_89_listin_number_set(payload);

        if (TAG("message_obj-155") == objectId)
            this->message_90_listin_number_set(payload);

        if (TAG("message_obj-115") == objectId)
            this->message_91_listin_number_set(payload);

        break;
        }
    }

    this->p_23->processNumMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->processNumMessage(tag, objectId, time, payload);
    }

    this->p_25->processNumMessage(tag, objectId, time, payload);
    this->p_26->processNumMessage(tag, objectId, time, payload);
    this->p_27->processNumMessage(tag, objectId, time, payload);
    this->p_28->processNumMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->processNumMessage(tag, objectId, time, payload);
    }

    this->p_30->processNumMessage(tag, objectId, time, payload);
    this->p_31->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("sig"):
        {
        if (TAG("number~_obj-4") == objectId)
            this->numbertilde_20_sig_list_set(payload);

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-67") == objectId)
            this->message_84_listin_list_set(payload);

        if (TAG("message_obj-144") == objectId)
            this->message_85_listin_list_set(payload);

        if (TAG("message_obj-140") == objectId)
            this->message_86_listin_list_set(payload);

        if (TAG("message_obj-125") == objectId)
            this->message_87_listin_list_set(payload);

        if (TAG("message_obj-127") == objectId)
            this->message_88_listin_list_set(payload);

        if (TAG("message_obj-142") == objectId)
            this->message_89_listin_list_set(payload);

        if (TAG("message_obj-155") == objectId)
            this->message_90_listin_list_set(payload);

        if (TAG("message_obj-115") == objectId)
            this->message_91_listin_list_set(payload);

        break;
        }
    }

    this->p_23->processListMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->processListMessage(tag, objectId, time, payload);
    }

    this->p_25->processListMessage(tag, objectId, time, payload);
    this->p_26->processListMessage(tag, objectId, time, payload);
    this->p_27->processListMessage(tag, objectId, time, payload);
    this->p_28->processListMessage(tag, objectId, time, payload);

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->processListMessage(tag, objectId, time, payload);
    }

    this->p_30->processListMessage(tag, objectId, time, payload);
    this->p_31->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("startupbang"):
        {
        if (TAG("loadmess_obj-19") == objectId)
            this->loadmess_03_startupbang_bang();

        if (TAG("loadmess_obj-146") == objectId)
            this->loadmess_04_startupbang_bang();

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-67") == objectId)
            this->message_84_listin_bang_bang();

        if (TAG("message_obj-144") == objectId)
            this->message_85_listin_bang_bang();

        if (TAG("message_obj-140") == objectId)
            this->message_86_listin_bang_bang();

        if (TAG("message_obj-125") == objectId)
            this->message_87_listin_bang_bang();

        if (TAG("message_obj-127") == objectId)
            this->message_88_listin_bang_bang();

        if (TAG("message_obj-142") == objectId)
            this->message_89_listin_bang_bang();

        if (TAG("message_obj-155") == objectId)
            this->message_90_listin_bang_bang();

        if (TAG("message_obj-115") == objectId)
            this->message_91_listin_bang_bang();

        break;
        }
    case TAG("bangin"):
        {
        if (TAG("button_obj-139") == objectId)
            this->button_18_bangin_bang();

        if (TAG("button_obj-154") == objectId)
            this->button_19_bangin_bang();

        if (TAG("button_obj-65") == objectId)
            this->button_20_bangin_bang();

        if (TAG("button_obj-133") == objectId)
            this->button_21_bangin_bang();

        if (TAG("button_obj-128") == objectId)
            this->button_22_bangin_bang();

        break;
        }
    }

    this->p_23->processBangMessage(tag, objectId, time);

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->processBangMessage(tag, objectId, time);
    }

    this->p_25->processBangMessage(tag, objectId, time);
    this->p_26->processBangMessage(tag, objectId, time);
    this->p_27->processBangMessage(tag, objectId, time);
    this->p_28->processBangMessage(tag, objectId, time);

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->processBangMessage(tag, objectId, time);
    }

    this->p_30->processBangMessage(tag, objectId, time);
    this->p_31->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("monitor"):
        {
        return "monitor";
        }
    case TAG("number~_obj-4"):
        {
        return "number~_obj-4";
        }
    case TAG("assign"):
        {
        return "assign";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("toggle_obj-12"):
        {
        return "toggle_obj-12";
        }
    case TAG("number_obj-23"):
        {
        return "number_obj-23";
        }
    case TAG("number_obj-77"):
        {
        return "number_obj-77";
        }
    case TAG("number_obj-35"):
        {
        return "number_obj-35";
        }
    case TAG("number_obj-158"):
        {
        return "number_obj-158";
        }
    case TAG("number_obj-90"):
        {
        return "number_obj-90";
        }
    case TAG("number_obj-92"):
        {
        return "number_obj-92";
        }
    case TAG("toggle_obj-145"):
        {
        return "toggle_obj-145";
        }
    case TAG("number_obj-50"):
        {
        return "number_obj-50";
        }
    case TAG("number_obj-36"):
        {
        return "number_obj-36";
        }
    case TAG("number_obj-34"):
        {
        return "number_obj-34";
        }
    case TAG("number_obj-21"):
        {
        return "number_obj-21";
        }
    case TAG("number_obj-11"):
        {
        return "number_obj-11";
        }
    case TAG("number_obj-64"):
        {
        return "number_obj-64";
        }
    case TAG("number_obj-58"):
        {
        return "number_obj-58";
        }
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-67"):
        {
        return "message_obj-67";
        }
    case TAG("bangout"):
        {
        return "bangout";
        }
    case TAG("button_obj-139"):
        {
        return "button_obj-139";
        }
    case TAG("toggle_obj-148"):
        {
        return "toggle_obj-148";
        }
    case TAG("message_obj-144"):
        {
        return "message_obj-144";
        }
    case TAG("button_obj-154"):
        {
        return "button_obj-154";
        }
    case TAG("button_obj-65"):
        {
        return "button_obj-65";
        }
    case TAG("number_obj-89"):
        {
        return "number_obj-89";
        }
    case TAG("number_obj-88"):
        {
        return "number_obj-88";
        }
    case TAG("number_obj-84"):
        {
        return "number_obj-84";
        }
    case TAG("number_obj-79"):
        {
        return "number_obj-79";
        }
    case TAG("number_obj-78"):
        {
        return "number_obj-78";
        }
    case TAG("number_obj-75"):
        {
        return "number_obj-75";
        }
    case TAG("message_obj-140"):
        {
        return "message_obj-140";
        }
    case TAG("number_obj-68"):
        {
        return "number_obj-68";
        }
    case TAG("message_obj-125"):
        {
        return "message_obj-125";
        }
    case TAG("message_obj-127"):
        {
        return "message_obj-127";
        }
    case TAG("message_obj-142"):
        {
        return "message_obj-142";
        }
    case TAG("number_obj-44"):
        {
        return "number_obj-44";
        }
    case TAG("number_obj-120"):
        {
        return "number_obj-120";
        }
    case TAG("number_obj-116"):
        {
        return "number_obj-116";
        }
    case TAG("number_obj-112"):
        {
        return "number_obj-112";
        }
    case TAG("number_obj-108"):
        {
        return "number_obj-108";
        }
    case TAG("number_obj-104"):
        {
        return "number_obj-104";
        }
    case TAG("number_obj-100"):
        {
        return "number_obj-100";
        }
    case TAG("number_obj-96"):
        {
        return "number_obj-96";
        }
    case TAG("message_obj-155"):
        {
        return "message_obj-155";
        }
    case TAG("button_obj-133"):
        {
        return "button_obj-133";
        }
    case TAG("button_obj-128"):
        {
        return "button_obj-128";
        }
    case TAG("message_obj-115"):
        {
        return "message_obj-115";
        }
    case TAG("number_obj-109"):
        {
        return "number_obj-109";
        }
    case TAG("number_obj-101"):
        {
        return "number_obj-101";
        }
    case TAG("number_obj-95"):
        {
        return "number_obj-95";
        }
    case TAG("number_obj-55"):
        {
        return "number_obj-55";
        }
    case TAG("number_obj-66"):
        {
        return "number_obj-66";
        }
    case TAG("number_obj-124"):
        {
        return "number_obj-124";
        }
    case TAG("sig"):
        {
        return "sig";
        }
    case TAG("mode"):
        {
        return "mode";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadmess_obj-19"):
        {
        return "loadmess_obj-19";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("loadmess_obj-146"):
        {
        return "loadmess_obj-146";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    case TAG("bangin"):
        {
        return "bangin";
        }
    }

    auto subpatchResult_0 = this->p_23->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_24[0]->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_25->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_26->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_27->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    auto subpatchResult_5 = this->p_28->resolveTag(tag);

    if (subpatchResult_5)
        return subpatchResult_5;

    auto subpatchResult_6 = this->p_29[0]->resolveTag(tag);

    if (subpatchResult_6)
        return subpatchResult_6;

    auto subpatchResult_7 = this->p_30->resolveTag(tag);

    if (subpatchResult_7)
        return subpatchResult_7;

    auto subpatchResult_8 = this->p_31->resolveTag(tag);

    if (subpatchResult_8)
        return subpatchResult_8;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_07_value_set(number v) {
    v = this->param_07_value_constrain(v);
    this->param_07_value = v;
    this->sendParameter(0, false);

    if (this->param_07_value != this->param_07_lastValue) {
        this->getEngine()->presetTouched();
        this->param_07_lastValue = this->param_07_value;
    }

    this->numberobj_309_value_set(v);
}

void param_06_value_set(number v) {
    v = this->param_06_value_constrain(v);
    this->param_06_value = v;
    this->sendParameter(1, false);

    if (this->param_06_value != this->param_06_lastValue) {
        this->getEngine()->presetTouched();
        this->param_06_lastValue = this->param_06_value;
    }

    this->numberobj_308_value_set(v);
}

void param_01_value_set(number v) {
    v = this->param_01_value_constrain(v);
    this->param_01_value = v;
    this->sendParameter(2, false);

    if (this->param_01_value != this->param_01_lastValue) {
        this->getEngine()->presetTouched();
        this->param_01_lastValue = this->param_01_value;
    }

    this->numberobj_311_value_set(v);
}

void param_04_value_set(number v) {
    v = this->param_04_value_constrain(v);
    this->param_04_value = v;
    this->sendParameter(3, false);

    if (this->param_04_value != this->param_04_lastValue) {
        this->getEngine()->presetTouched();
        this->param_04_lastValue = this->param_04_value;
    }

    this->numberobj_307_value_set(v);
}

void param_02_value_set(number v) {
    v = this->param_02_value_constrain(v);
    this->param_02_value = v;
    this->sendParameter(4, false);

    if (this->param_02_value != this->param_02_lastValue) {
        this->getEngine()->presetTouched();
        this->param_02_lastValue = this->param_02_value;
    }

    this->numberobj_306_value_set(v);
}

void param_05_value_set(number v) {
    v = this->param_05_value_constrain(v);
    this->param_05_value = v;
    this->sendParameter(5, false);

    if (this->param_05_value != this->param_05_lastValue) {
        this->getEngine()->presetTouched();
        this->param_05_lastValue = this->param_05_value;
    }

    this->numberobj_310_value_set(v);
}

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(6, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->numberobj_316_value_set(v);
}

void param_09_value_set(number v) {
    v = this->param_09_value_constrain(v);
    this->param_09_value = v;
    this->sendParameter(7, false);

    if (this->param_09_value != this->param_09_lastValue) {
        this->getEngine()->presetTouched();
        this->param_09_lastValue = this->param_09_value;
    }

    this->numberobj_315_value_set(v);
}

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(8, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->numberobj_314_value_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(9, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->numberobj_313_value_set(v);
}

void param_10_value_set(number v) {
    v = this->param_10_value_constrain(v);
    this->param_10_value = v;
    this->sendParameter(10, false);

    if (this->param_10_value != this->param_10_lastValue) {
        this->getEngine()->presetTouched();
        this->param_10_lastValue = this->param_10_value;
    }

    this->numberobj_312_value_set(v);
}

void param_22_value_set(number v) {
    v = this->param_22_value_constrain(v);
    this->param_22_value = v;
    this->sendParameter(11, false);

    if (this->param_22_value != this->param_22_lastValue) {
        this->getEngine()->presetTouched();
        this->param_22_lastValue = this->param_22_value;
    }

    this->numberobj_326_value_set(v);
}

void param_21_value_set(number v) {
    v = this->param_21_value_constrain(v);
    this->param_21_value = v;
    this->sendParameter(12, false);

    if (this->param_21_value != this->param_21_lastValue) {
        this->getEngine()->presetTouched();
        this->param_21_lastValue = this->param_21_value;
    }

    this->numberobj_325_value_set(v);
}

void param_20_value_set(number v) {
    v = this->param_20_value_constrain(v);
    this->param_20_value = v;
    this->sendParameter(13, false);

    if (this->param_20_value != this->param_20_lastValue) {
        this->getEngine()->presetTouched();
        this->param_20_lastValue = this->param_20_value;
    }

    this->numberobj_324_value_set(v);
}

void param_19_value_set(number v) {
    v = this->param_19_value_constrain(v);
    this->param_19_value = v;
    this->sendParameter(14, false);

    if (this->param_19_value != this->param_19_lastValue) {
        this->getEngine()->presetTouched();
        this->param_19_lastValue = this->param_19_value;
    }

    this->numberobj_323_value_set(v);
}

void param_16_value_set(number v) {
    v = this->param_16_value_constrain(v);
    this->param_16_value = v;
    this->sendParameter(15, false);

    if (this->param_16_value != this->param_16_lastValue) {
        this->getEngine()->presetTouched();
        this->param_16_lastValue = this->param_16_value;
    }

    this->numberobj_319_value_set(v);
}

void param_03_value_set(number v) {
    v = this->param_03_value_constrain(v);
    this->param_03_value = v;
    this->sendParameter(16, false);

    if (this->param_03_value != this->param_03_lastValue) {
        this->getEngine()->presetTouched();
        this->param_03_lastValue = this->param_03_value;
    }

    this->numberobj_305_value_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(17, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->numberobj_318_value_set(v);
}

void param_08_value_set(number v) {
    v = this->param_08_value_constrain(v);
    this->param_08_value = v;
    this->sendParameter(18, false);

    if (this->param_08_value != this->param_08_lastValue) {
        this->getEngine()->presetTouched();
        this->param_08_lastValue = this->param_08_value;
    }

    this->numberobj_317_value_set(v);
}

void param_24_value_set(number v) {
    v = this->param_24_value_constrain(v);
    this->param_24_value = v;
    this->sendParameter(19, false);

    if (this->param_24_value != this->param_24_lastValue) {
        this->getEngine()->presetTouched();
        this->param_24_lastValue = this->param_24_value;
    }

    this->numberobj_328_value_set(v);
}

void param_23_value_set(number v) {
    v = this->param_23_value_constrain(v);
    this->param_23_value = v;
    this->sendParameter(20, false);

    if (this->param_23_value != this->param_23_lastValue) {
        this->getEngine()->presetTouched();
        this->param_23_lastValue = this->param_23_value;
    }

    this->numberobj_327_value_set(v);
}

void param_26_value_set(number v) {
    v = this->param_26_value_constrain(v);
    this->param_26_value = v;
    this->sendParameter(21, false);

    if (this->param_26_value != this->param_26_lastValue) {
        this->getEngine()->presetTouched();
        this->param_26_lastValue = this->param_26_value;
    }

    this->numberobj_331_value_set(v);
}

void param_15_value_set(number v) {
    v = this->param_15_value_constrain(v);
    this->param_15_value = v;
    this->sendParameter(22, false);

    if (this->param_15_value != this->param_15_lastValue) {
        this->getEngine()->presetTouched();
        this->param_15_lastValue = this->param_15_value;
    }

    this->numberobj_322_value_set(v);
}

void param_17_value_set(number v) {
    v = this->param_17_value_constrain(v);
    this->param_17_value = v;
    this->sendParameter(23, false);

    if (this->param_17_value != this->param_17_lastValue) {
        this->getEngine()->presetTouched();
        this->param_17_lastValue = this->param_17_value;
    }

    this->numberobj_320_value_set(v);
}

void param_18_value_set(number v) {
    v = this->param_18_value_constrain(v);
    this->param_18_value = v;
    this->sendParameter(24, false);

    if (this->param_18_value != this->param_18_lastValue) {
        this->getEngine()->presetTouched();
        this->param_18_lastValue = this->param_18_value;
    }

    this->numberobj_321_value_set(v);
}

void param_25_value_set(number v) {
    v = this->param_25_value_constrain(v);
    this->param_25_value = v;
    this->sendParameter(25, false);

    if (this->param_25_value != this->param_25_lastValue) {
        this->getEngine()->presetTouched();
        this->param_25_lastValue = this->param_25_value;
    }

    this->numberobj_329_value_set(v);
}

void param_27_value_set(number v) {
    v = this->param_27_value_constrain(v);
    this->param_27_value = v;
    this->sendParameter(26, false);

    if (this->param_27_value != this->param_27_lastValue) {
        this->getEngine()->presetTouched();
        this->param_27_lastValue = this->param_27_value;
    }

    this->numberobj_330_value_set(v);
}

void param_28_value_set(number v) {
    v = this->param_28_value_constrain(v);
    this->param_28_value = v;
    this->sendParameter(27, false);

    if (this->param_28_value != this->param_28_lastValue) {
        this->getEngine()->presetTouched();
        this->param_28_lastValue = this->param_28_value;
    }

    this->numberobj_332_value_set(v);
}

void numbertilde_20_sig_number_set(number v) {
    this->numbertilde_20_outValue = v;
}

void numbertilde_20_sig_list_set(const list& v) {
    this->numbertilde_20_outValue = v[0];
}

void numbertilde_20_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_20_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_20_currentMode = 1;
    }
}

void toggle_07_valin_set(number v) {
    this->toggle_07_value_number_set(v);
}

void loadmess_03_startupbang_bang() {
    this->loadmess_03_message_bang();
}

void numberobj_299_valin_set(number v) {
    this->numberobj_299_value_set(v);
}

void numberobj_299_format_set(number v) {
    this->numberobj_299_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_300_valin_set(number v) {
    this->numberobj_300_value_set(v);
}

void numberobj_300_format_set(number v) {
    this->numberobj_300_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_301_valin_set(number v) {
    this->numberobj_301_value_set(v);
}

void numberobj_301_format_set(number v) {
    this->numberobj_301_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_302_valin_set(number v) {
    this->numberobj_302_value_set(v);
}

void numberobj_302_format_set(number v) {
    this->numberobj_302_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_303_valin_set(number v) {
    this->numberobj_303_value_set(v);
}

void numberobj_303_format_set(number v) {
    this->numberobj_303_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_304_valin_set(number v) {
    this->numberobj_304_value_set(v);
}

void numberobj_304_format_set(number v) {
    this->numberobj_304_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void loadmess_04_startupbang_bang() {
    this->loadmess_04_message_bang();
}

void toggle_08_valin_set(number v) {
    this->toggle_08_value_number_set(v);
}

void numberobj_305_valin_set(number v) {
    this->numberobj_305_value_set(v);
}

void numberobj_305_format_set(number v) {
    this->numberobj_305_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_306_valin_set(number v) {
    this->numberobj_306_value_set(v);
}

void numberobj_306_format_set(number v) {
    this->numberobj_306_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_307_valin_set(number v) {
    this->numberobj_307_value_set(v);
}

void numberobj_307_format_set(number v) {
    this->numberobj_307_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_308_valin_set(number v) {
    this->numberobj_308_value_set(v);
}

void numberobj_308_format_set(number v) {
    this->numberobj_308_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_309_valin_set(number v) {
    this->numberobj_309_value_set(v);
}

void numberobj_309_format_set(number v) {
    this->numberobj_309_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_310_valin_set(number v) {
    this->numberobj_310_value_set(v);
}

void numberobj_310_format_set(number v) {
    this->numberobj_310_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_311_valin_set(number v) {
    this->numberobj_311_value_set(v);
}

void numberobj_311_format_set(number v) {
    this->numberobj_311_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_84_listin_list_set(const list& v) {
    this->message_84_set_set(v);
}

void message_84_listin_number_set(number v) {
    this->message_84_set_set(v);
}

void message_84_listin_bang_bang() {
    this->message_84_trigger_bang();
}

void button_18_bangin_bang() {
    this->button_18_bangval_bang();
}

void toggle_09_valin_set(number v) {
    this->toggle_09_value_number_set(v);
}

void message_85_listin_list_set(const list& v) {
    this->message_85_set_set(v);
}

void message_85_listin_number_set(number v) {
    this->message_85_set_set(v);
}

void message_85_listin_bang_bang() {
    this->message_85_trigger_bang();
}

void button_19_bangin_bang() {
    this->button_19_bangval_bang();
}

void button_20_bangin_bang() {
    this->button_20_bangval_bang();
}

void numberobj_312_valin_set(number v) {
    this->numberobj_312_value_set(v);
}

void numberobj_312_format_set(number v) {
    this->numberobj_312_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_313_valin_set(number v) {
    this->numberobj_313_value_set(v);
}

void numberobj_313_format_set(number v) {
    this->numberobj_313_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_314_valin_set(number v) {
    this->numberobj_314_value_set(v);
}

void numberobj_314_format_set(number v) {
    this->numberobj_314_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_315_valin_set(number v) {
    this->numberobj_315_value_set(v);
}

void numberobj_315_format_set(number v) {
    this->numberobj_315_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_316_valin_set(number v) {
    this->numberobj_316_value_set(v);
}

void numberobj_316_format_set(number v) {
    this->numberobj_316_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_317_valin_set(number v) {
    this->numberobj_317_value_set(v);
}

void numberobj_317_format_set(number v) {
    this->numberobj_317_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_86_listin_list_set(const list& v) {
    this->message_86_set_set(v);
}

void message_86_listin_number_set(number v) {
    this->message_86_set_set(v);
}

void message_86_listin_bang_bang() {
    this->message_86_trigger_bang();
}

void numberobj_318_valin_set(number v) {
    this->numberobj_318_value_set(v);
}

void numberobj_318_format_set(number v) {
    this->numberobj_318_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_87_listin_list_set(const list& v) {
    this->message_87_set_set(v);
}

void message_87_listin_number_set(number v) {
    this->message_87_set_set(v);
}

void message_87_listin_bang_bang() {
    this->message_87_trigger_bang();
}

void message_88_listin_list_set(const list& v) {
    this->message_88_set_set(v);
}

void message_88_listin_number_set(number v) {
    this->message_88_set_set(v);
}

void message_88_listin_bang_bang() {
    this->message_88_trigger_bang();
}

void message_89_listin_list_set(const list& v) {
    this->message_89_set_set(v);
}

void message_89_listin_number_set(number v) {
    this->message_89_set_set(v);
}

void message_89_listin_bang_bang() {
    this->message_89_trigger_bang();
}

void numberobj_319_valin_set(number v) {
    this->numberobj_319_value_set(v);
}

void numberobj_319_format_set(number v) {
    this->numberobj_319_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_320_valin_set(number v) {
    this->numberobj_320_value_set(v);
}

void numberobj_320_format_set(number v) {
    this->numberobj_320_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_321_valin_set(number v) {
    this->numberobj_321_value_set(v);
}

void numberobj_321_format_set(number v) {
    this->numberobj_321_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_322_valin_set(number v) {
    this->numberobj_322_value_set(v);
}

void numberobj_322_format_set(number v) {
    this->numberobj_322_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_323_valin_set(number v) {
    this->numberobj_323_value_set(v);
}

void numberobj_323_format_set(number v) {
    this->numberobj_323_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_324_valin_set(number v) {
    this->numberobj_324_value_set(v);
}

void numberobj_324_format_set(number v) {
    this->numberobj_324_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_325_valin_set(number v) {
    this->numberobj_325_value_set(v);
}

void numberobj_325_format_set(number v) {
    this->numberobj_325_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_326_valin_set(number v) {
    this->numberobj_326_value_set(v);
}

void numberobj_326_format_set(number v) {
    this->numberobj_326_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_90_listin_list_set(const list& v) {
    this->message_90_set_set(v);
}

void message_90_listin_number_set(number v) {
    this->message_90_set_set(v);
}

void message_90_listin_bang_bang() {
    this->message_90_trigger_bang();
}

void button_21_bangin_bang() {
    this->button_21_bangval_bang();
}

void button_22_bangin_bang() {
    this->button_22_bangval_bang();
}

void message_91_listin_list_set(const list& v) {
    this->message_91_set_set(v);
}

void message_91_listin_number_set(number v) {
    this->message_91_set_set(v);
}

void message_91_listin_bang_bang() {
    this->message_91_trigger_bang();
}

void numberobj_327_valin_set(number v) {
    this->numberobj_327_value_set(v);
}

void numberobj_327_format_set(number v) {
    this->numberobj_327_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_328_valin_set(number v) {
    this->numberobj_328_value_set(v);
}

void numberobj_328_format_set(number v) {
    this->numberobj_328_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_329_valin_set(number v) {
    this->numberobj_329_value_set(v);
}

void numberobj_329_format_set(number v) {
    this->numberobj_329_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_330_valin_set(number v) {
    this->numberobj_330_value_set(v);
}

void numberobj_330_format_set(number v) {
    this->numberobj_330_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_331_valin_set(number v) {
    this->numberobj_331_value_set(v);
}

void numberobj_331_format_set(number v) {
    this->numberobj_331_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_332_valin_set(number v) {
    this->numberobj_332_value_set(v);
}

void numberobj_332_format_set(number v) {
    this->numberobj_332_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_20_value_set(number v) {
    this->numberobj_299_value_set(v);
}

void linetilde_05_target_bang() {}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 2;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_23->allocateDataRefs();

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->allocateDataRefs();
    }

    this->p_25->allocateDataRefs();
    this->p_26->allocateDataRefs();
    this->p_27->allocateDataRefs();
    this->p_28->allocateDataRefs();

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->allocateDataRefs();
    }

    this->p_30->allocateDataRefs();
    this->p_31->allocateDataRefs();
    this->data_01_buffer->requestSize(this->mstosamps(21000), 1);
    this->data_01_buffer->setSampleRate(this->sr);
    this->recordtilde_01_buffer = this->recordtilde_01_buffer->allocateIfNeeded();
    this->data_01_buffer = this->data_01_buffer->allocateIfNeeded();

    if (this->livegran->hasRequestedSize()) {
        if (this->livegran->wantsFill())
            this->zeroDataRef(this->livegran);

        this->getEngine()->sendDataRefUpdated(0);
    }

    this->data_02_buffer = this->data_02_buffer->allocateIfNeeded();

    if (this->fixedbuffer->hasRequestedSize()) {
        if (this->fixedbuffer->wantsFill())
            this->zeroDataRef(this->fixedbuffer);

        this->getEngine()->sendDataRefUpdated(1);
    }
}

void initializeObjects() {
    this->numbertilde_20_init();
    this->data_01_init();
    this->ip_01_init();
    this->numberobj_299_init();
    this->numberobj_300_init();
    this->numberobj_301_init();
    this->numberobj_302_init();
    this->data_02_init();
    this->numberobj_303_init();
    this->numberobj_304_init();
    this->numberobj_305_init();
    this->numberobj_306_init();
    this->numberobj_307_init();
    this->numberobj_308_init();
    this->numberobj_309_init();
    this->numberobj_310_init();
    this->numberobj_311_init();
    this->message_84_init();
    this->message_85_init();
    this->numberobj_312_init();
    this->numberobj_313_init();
    this->numberobj_314_init();
    this->numberobj_315_init();
    this->numberobj_316_init();
    this->numberobj_317_init();
    this->message_86_init();
    this->numberobj_318_init();
    this->message_87_init();
    this->message_88_init();
    this->message_89_init();
    this->numberobj_319_init();
    this->numberobj_320_init();
    this->numberobj_321_init();
    this->numberobj_322_init();
    this->numberobj_323_init();
    this->numberobj_324_init();
    this->numberobj_325_init();
    this->numberobj_326_init();
    this->message_90_init();
    this->message_91_init();
    this->numberobj_327_init();
    this->numberobj_328_init();
    this->numberobj_329_init();
    this->numberobj_330_init();
    this->numberobj_331_init();
    this->numberobj_332_init();
    this->p_23->initializeObjects();

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->initializeObjects();
    }

    this->p_25->initializeObjects();
    this->p_26->initializeObjects();
    this->p_27->initializeObjects();
    this->p_28->initializeObjects();

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->initializeObjects();
    }

    this->p_30->initializeObjects();
    this->p_31->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_23->startup();

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->startup();
    }

    this->p_25->startup();
    this->p_26->startup();
    this->p_27->startup();
    this->p_28->startup();

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->startup();
    }

    this->p_30->startup();
    this->p_31->startup();
    this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    {
        this->scheduleParamInit(11, 0);
    }

    {
        this->scheduleParamInit(12, 0);
    }

    {
        this->scheduleParamInit(13, 0);
    }

    {
        this->scheduleParamInit(14, 0);
    }

    {
        this->scheduleParamInit(15, 0);
    }

    {
        this->scheduleParamInit(16, 0);
    }

    {
        this->scheduleParamInit(17, 0);
    }

    {
        this->scheduleParamInit(18, 0);
    }

    {
        this->scheduleParamInit(19, 0);
    }

    {
        this->scheduleParamInit(20, 0);
    }

    {
        this->scheduleParamInit(21, 0);
    }

    {
        this->scheduleParamInit(22, 0);
    }

    {
        this->scheduleParamInit(23, 0);
    }

    {
        this->scheduleParamInit(24, 0);
    }

    {
        this->scheduleParamInit(25, 0);
    }

    {
        this->scheduleParamInit(26, 0);
    }

    {
        this->scheduleParamInit(27, 0);
    }

    this->processParamInitEvents();
}

number param_07_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));

    {
        number oneStep = (number)9999 / (number)9999;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_26_target_rate_min_number_set(number v) {
    this->p_26->updateTime(this->_currentTime);
    this->p_26->receive_22_output_number_set(v);
}

void p_31_target_rate_min_number_set(number v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->receive_46_output_number_set(v);
}

void send_11_input_number_set(number v) {
    this->send_11_input_number = v;
    this->p_26_target_rate_min_number_set(v);
    this->p_31_target_rate_min_number_set(v);
}

void numberobj_309_output_set(number v) {
    this->send_11_input_number_set(v);
}

void numberobj_309_value_set(number v) {
    this->numberobj_309_value_setter(v);
    v = this->numberobj_309_value;
    number localvalue = v;

    if (this->numberobj_309_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-11"), localvalue, this->_currentTime);
    this->numberobj_309_output_set(localvalue);
}

number param_06_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 5 ? 5 : v));

    {
        number oneStep = (number)9995 / (number)9995;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_26_target_rate_max_number_set(number v) {
    this->p_26->updateTime(this->_currentTime);
    this->p_26->receive_23_output_number_set(v);
}

void p_31_target_rate_max_number_set(number v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->receive_47_output_number_set(v);
}

void send_10_input_number_set(number v) {
    this->send_10_input_number = v;
    this->p_26_target_rate_max_number_set(v);
    this->p_31_target_rate_max_number_set(v);
}

void numberobj_308_output_set(number v) {
    this->send_10_input_number_set(v);
}

void numberobj_308_value_set(number v) {
    this->numberobj_308_value_setter(v);
    v = this->numberobj_308_value;
    number localvalue = v;

    if (this->numberobj_308_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-21"), localvalue, this->_currentTime);
    this->numberobj_308_output_set(localvalue);
}

number param_01_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_26_target_rate_prob_number_set(number v) {
    this->p_26->updateTime(this->_currentTime);
    this->p_26->receive_24_output_number_set(v);
}

void p_31_target_rate_prob_number_set(number v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->receive_48_output_number_set(v);
}

void send_09_input_number_set(number v) {
    this->send_09_input_number = v;
    this->p_26_target_rate_prob_number_set(v);
    this->p_31_target_rate_prob_number_set(v);
}

void numberobj_311_output_set(number v) {
    this->send_09_input_number_set(v);
}

void numberobj_311_value_set(number v) {
    this->numberobj_311_value_setter(v);
    v = this->numberobj_311_value;
    number localvalue = v;

    if (this->numberobj_311_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-58"), localvalue, this->_currentTime);
    this->numberobj_311_output_set(localvalue);
}

number param_04_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));

    {
        number oneStep = (number)9999 / (number)9999;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_size_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_size_min_number_set(v);
    }
}

void p_29_target_size_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_size_min_number_set(v);
    }
}

void send_08_input_number_set(number v) {
    this->send_08_input_number = v;
    this->p_24_target_size_min_number_set(v);
    this->p_29_target_size_min_number_set(v);
}

void numberobj_307_output_set(number v) {
    this->send_08_input_number_set(v);
}

void numberobj_307_value_set(number v) {
    this->numberobj_307_value_setter(v);
    v = this->numberobj_307_value;
    number localvalue = v;

    if (this->numberobj_307_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-34"), localvalue, this->_currentTime);
    this->numberobj_307_output_set(localvalue);
}

number param_02_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));

    {
        number oneStep = (number)9999 / (number)9999;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_size_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_size_max_number_set(v);
    }
}

void p_29_target_size_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_size_max_number_set(v);
    }
}

void send_07_input_number_set(number v) {
    this->send_07_input_number = v;
    this->p_24_target_size_max_number_set(v);
    this->p_29_target_size_max_number_set(v);
}

void numberobj_306_output_set(number v) {
    this->send_07_input_number_set(v);
}

void numberobj_306_value_set(number v) {
    this->numberobj_306_value_setter(v);
    v = this->numberobj_306_value;
    number localvalue = v;

    if (this->numberobj_306_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-36"), localvalue, this->_currentTime);
    this->numberobj_306_output_set(localvalue);
}

number param_05_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_size_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_size_prob_number_set(v);
    }
}

void p_29_target_size_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_size_prob_number_set(v);
    }
}

void send_06_input_number_set(number v) {
    this->send_06_input_number = v;
    this->p_24_target_size_prob_number_set(v);
    this->p_29_target_size_prob_number_set(v);
}

void numberobj_310_output_set(number v) {
    this->send_06_input_number_set(v);
}

void numberobj_310_value_set(number v) {
    this->numberobj_310_value_setter(v);
    v = this->numberobj_310_value;
    number localvalue = v;

    if (this->numberobj_310_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-64"), localvalue, this->_currentTime);
    this->numberobj_310_output_set(localvalue);
}

number param_13_value_constrain(number v) const {
    v = (v > 0 ? 0 : (v < -70 ? -70 : v));

    {
        number oneStep = (number)70 / (number)700;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_vol_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_09_target_vol_min_number_set(v);
    }
}

void p_29_target_vol_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_20_target_vol_min_number_set(v);
    }
}

void send_15_input_number_set(number v) {
    this->send_15_input_number = v;
    this->p_24_target_vol_min_number_set(v);
    this->p_29_target_vol_min_number_set(v);
}

void numberobj_316_output_set(number v) {
    this->send_15_input_number_set(v);
}

void numberobj_316_value_set(number v) {
    this->numberobj_316_value_setter(v);
    v = this->numberobj_316_value;
    number localvalue = v;

    if (this->numberobj_316_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-78"), localvalue, this->_currentTime);
    this->numberobj_316_output_set(localvalue);
}

number param_09_value_constrain(number v) const {
    v = (v > 0 ? 0 : (v < -70 ? -70 : v));

    {
        number oneStep = (number)70 / (number)700;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_vol_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_09_target_vol_max_number_set(v);
    }
}

void p_29_target_vol_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_20_target_vol_max_number_set(v);
    }
}

void send_14_input_number_set(number v) {
    this->send_14_input_number = v;
    this->p_24_target_vol_max_number_set(v);
    this->p_29_target_vol_max_number_set(v);
}

void numberobj_315_output_set(number v) {
    this->send_14_input_number_set(v);
}

void numberobj_315_value_set(number v) {
    this->numberobj_315_value_setter(v);
    v = this->numberobj_315_value;
    number localvalue = v;

    if (this->numberobj_315_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-79"), localvalue, this->_currentTime);
    this->numberobj_315_output_set(localvalue);
}

number param_11_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_vol_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_09_target_vol_prob_number_set(v);
    }
}

void p_29_target_vol_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_20_target_vol_prob_number_set(v);
    }
}

void send_13_input_number_set(number v) {
    this->send_13_input_number = v;
    this->p_24_target_vol_prob_number_set(v);
    this->p_29_target_vol_prob_number_set(v);
}

void numberobj_314_output_set(number v) {
    this->send_13_input_number_set(v);
}

void numberobj_314_value_set(number v) {
    this->numberobj_314_value_setter(v);
    v = this->numberobj_314_value;
    number localvalue = v;

    if (this->numberobj_314_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-84"), localvalue, this->_currentTime);
    this->numberobj_314_output_set(localvalue);
}

number param_14_value_constrain(number v) const {
    v = (v > 4 ? 4 : (v < 0.25 ? 0.25 : v));

    {
        number oneStep = (number)3.75 / (number)375;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pitch_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_10_target_pitch_min_number_set(v);
    }
}

void p_29_target_pitch_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_21_target_pitch_min_number_set(v);
    }
}

void send_12_input_number_set(number v) {
    this->send_12_input_number = v;
    this->p_24_target_pitch_min_number_set(v);
    this->p_29_target_pitch_min_number_set(v);
}

void numberobj_313_output_set(number v) {
    this->send_12_input_number_set(v);
}

void numberobj_313_value_set(number v) {
    this->numberobj_313_value_setter(v);
    v = this->numberobj_313_value;
    number localvalue = v;

    if (this->numberobj_313_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-88"), localvalue, this->_currentTime);
    this->numberobj_313_output_set(localvalue);
}

number param_10_value_constrain(number v) const {
    v = (v > 4 ? 4 : (v < 0.25 ? 0.25 : v));

    {
        number oneStep = (number)3.75 / (number)375;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pitch_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_10_target_pitch_max_number_set(v);
    }
}

void p_29_target_pitch_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_21_target_pitch_max_number_set(v);
    }
}

void send_18_input_number_set(number v) {
    this->send_18_input_number = v;
    this->p_24_target_pitch_max_number_set(v);
    this->p_29_target_pitch_max_number_set(v);
}

void numberobj_312_output_set(number v) {
    this->send_18_input_number_set(v);
}

void numberobj_312_value_set(number v) {
    this->numberobj_312_value_setter(v);
    v = this->numberobj_312_value;
    number localvalue = v;

    if (this->numberobj_312_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-89"), localvalue, this->_currentTime);
    this->numberobj_312_output_set(localvalue);
}

number param_22_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pitch_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_10_target_pitch_prob_number_set(v);
    }
}

void p_29_target_pitch_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_21_target_pitch_prob_number_set(v);
    }
}

void send_26_input_number_set(number v) {
    this->send_26_input_number = v;
    this->p_24_target_pitch_prob_number_set(v);
    this->p_29_target_pitch_prob_number_set(v);
}

void numberobj_326_output_set(number v) {
    this->send_26_input_number_set(v);
}

void numberobj_326_value_set(number v) {
    this->numberobj_326_value_setter(v);
    v = this->numberobj_326_value;
    number localvalue = v;

    if (this->numberobj_326_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-96"), localvalue, this->_currentTime);
    this->numberobj_326_output_set(localvalue);
}

number param_21_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pan_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_06_target_pan_min_number_set(v);
    }
}

void p_29_target_pan_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_17_target_pan_min_number_set(v);
    }
}

void send_25_input_number_set(number v) {
    this->send_25_input_number = v;
    this->p_24_target_pan_min_number_set(v);
    this->p_29_target_pan_min_number_set(v);
}

void numberobj_325_output_set(number v) {
    this->send_25_input_number_set(v);
}

void numberobj_325_value_set(number v) {
    this->numberobj_325_value_setter(v);
    v = this->numberobj_325_value;
    number localvalue = v;

    if (this->numberobj_325_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-100"), localvalue, this->_currentTime);
    this->numberobj_325_output_set(localvalue);
}

number param_20_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pan_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_06_target_pan_max_number_set(v);
    }
}

void p_29_target_pan_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_17_target_pan_max_number_set(v);
    }
}

void send_24_input_number_set(number v) {
    this->send_24_input_number = v;
    this->p_24_target_pan_max_number_set(v);
    this->p_29_target_pan_max_number_set(v);
}

void numberobj_324_output_set(number v) {
    this->send_24_input_number_set(v);
}

void numberobj_324_value_set(number v) {
    this->numberobj_324_value_setter(v);
    v = this->numberobj_324_value;
    number localvalue = v;

    if (this->numberobj_324_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-104"), localvalue, this->_currentTime);
    this->numberobj_324_output_set(localvalue);
}

number param_19_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)100 / (number)100;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pan_width_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_06_target_pan_width_number_set(v);
    }
}

void p_29_target_pan_width_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_17_target_pan_width_number_set(v);
    }
}

void send_23_input_number_set(number v) {
    this->send_23_input_number = v;
    this->p_24_target_pan_width_number_set(v);
    this->p_29_target_pan_width_number_set(v);
}

void numberobj_323_output_set(number v) {
    this->send_23_input_number_set(v);
}

void numberobj_323_value_set(number v) {
    this->numberobj_323_value_setter(v);
    v = this->numberobj_323_value;
    number localvalue = v;

    if (this->numberobj_323_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-108"), localvalue, this->_currentTime);
    this->numberobj_323_output_set(localvalue);
}

number param_16_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_pan_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_06_target_pan_prob_number_set(v);
    }
}

void p_29_target_pan_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_17_target_pan_prob_number_set(v);
    }
}

void send_19_input_number_set(number v) {
    this->send_19_input_number = v;
    this->p_24_target_pan_prob_number_set(v);
    this->p_29_target_pan_prob_number_set(v);
}

void numberobj_319_output_set(number v) {
    this->send_19_input_number_set(v);
}

void numberobj_319_value_set(number v) {
    this->numberobj_319_value_setter(v);
    v = this->numberobj_319_value;
    number localvalue = v;

    if (this->numberobj_319_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-44"), localvalue, this->_currentTime);
    this->numberobj_319_output_set(localvalue);
}

number param_03_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));

    {
        number oneStep = (number)9999 / (number)9999;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_delay_min_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_delay_min_number_set(v);
    }
}

void send_05_input_number_set(number v) {
    this->send_05_input_number = v;
    this->p_24_target_delay_min_number_set(v);
}

void numberobj_305_output_set(number v) {
    this->send_05_input_number_set(v);
}

void numberobj_305_value_set(number v) {
    this->numberobj_305_value_setter(v);
    v = this->numberobj_305_value;
    number localvalue = v;

    if (this->numberobj_305_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-50"), localvalue, this->_currentTime);
    this->numberobj_305_output_set(localvalue);
}

number param_12_value_constrain(number v) const {
    v = (v > 10000 ? 10000 : (v < 1 ? 1 : v));

    {
        number oneStep = (number)9999 / (number)9999;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_delay_max_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_delay_max_number_set(v);
    }
}

void send_17_input_number_set(number v) {
    this->send_17_input_number = v;
    this->p_24_target_delay_max_number_set(v);
}

void numberobj_318_output_set(number v) {
    this->send_17_input_number_set(v);
}

void numberobj_318_value_set(number v) {
    this->numberobj_318_value_setter(v);
    v = this->numberobj_318_value;
    number localvalue = v;

    if (this->numberobj_318_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-68"), localvalue, this->_currentTime);
    this->numberobj_318_output_set(localvalue);
}

number param_08_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_delay_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_delay_prob_number_set(v);
    }
}

void send_16_input_number_set(number v) {
    this->send_16_input_number = v;
    this->p_24_target_delay_prob_number_set(v);
}

void numberobj_317_output_set(number v) {
    this->send_16_input_number_set(v);
}

void numberobj_317_value_set(number v) {
    this->numberobj_317_value_setter(v);
    v = this->numberobj_317_value;
    number localvalue = v;

    if (this->numberobj_317_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-75"), localvalue, this->_currentTime);
    this->numberobj_317_output_set(localvalue);
}

number param_24_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1000;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_29_target_buffermin_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_buffermin_number_set(v);
    }
}

void send_28_input_number_set(number v) {
    this->send_28_input_number = v;
    this->p_29_target_buffermin_number_set(v);
}

void numberobj_328_output_set(number v) {
    this->send_28_input_number_set(v);
}

void numberobj_328_value_set(number v) {
    this->numberobj_328_value_setter(v);
    v = this->numberobj_328_value;
    number localvalue = v;

    if (this->numberobj_328_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-101"), localvalue, this->_currentTime);
    this->numberobj_328_output_set(localvalue);
}

number param_23_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1000;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_29_target_buffermax_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_buffermax_number_set(v);
    }
}

void send_27_input_number_set(number v) {
    this->send_27_input_number = v;
    this->p_29_target_buffermax_number_set(v);
}

void numberobj_327_output_set(number v) {
    this->send_27_input_number_set(v);
}

void numberobj_327_value_set(number v) {
    this->numberobj_327_value_setter(v);
    v = this->numberobj_327_value;
    number localvalue = v;

    if (this->numberobj_327_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-109"), localvalue, this->_currentTime);
    this->numberobj_327_output_set(localvalue);
}

number param_26_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_29_target_buffer_prob_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_buffer_prob_number_set(v);
    }
}

void send_31_input_number_set(number v) {
    this->send_31_input_number = v;
    this->p_29_target_buffer_prob_number_set(v);
}

void numberobj_331_output_set(number v) {
    this->send_31_input_number_set(v);
}

void numberobj_331_value_set(number v) {
    this->numberobj_331_value_setter(v);
    v = this->numberobj_331_value;
    number localvalue = v;

    if (this->numberobj_331_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-66"), localvalue, this->_currentTime);
    this->numberobj_331_output_set(localvalue);
}

number param_15_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_direction_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_11_target_direction_number_set(v);
    }
}

void p_29_target_direction_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_22_target_direction_number_set(v);
    }
}

void send_22_input_number_set(number v) {
    this->send_22_input_number = v;
    this->p_24_target_direction_number_set(v);
    this->p_29_target_direction_number_set(v);
}

void numberobj_322_output_set(number v) {
    this->send_22_input_number_set(v);
}

void numberobj_322_value_set(number v) {
    this->numberobj_322_value_setter(v);
    v = this->numberobj_322_value;
    number localvalue = v;

    if (this->numberobj_322_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-112"), localvalue, this->_currentTime);
    this->numberobj_322_output_set(localvalue);
}

number param_17_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)100 / (number)100;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_filter_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_05_target_filter_number_set(v);
    }
}

void p_29_target_filter_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_16_target_filter_number_set(v);
    }
}

void send_20_input_number_set(number v) {
    this->send_20_input_number = v;
    this->p_24_target_filter_number_set(v);
    this->p_29_target_filter_number_set(v);
}

void numberobj_320_output_set(number v) {
    this->send_20_input_number_set(v);
}

void numberobj_320_value_set(number v) {
    this->numberobj_320_value_setter(v);
    v = this->numberobj_320_value;
    number localvalue = v;

    if (this->numberobj_320_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-120"), localvalue, this->_currentTime);
    this->numberobj_320_output_set(localvalue);
}

number param_18_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < -100 ? -100 : v));

    {
        number oneStep = (number)200 / (number)200;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_24_target_env_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_07_target_env_number_set(v);
    }
}

void p_29_target_env_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_18_target_env_number_set(v);
    }
}

void send_21_input_number_set(number v) {
    this->send_21_input_number = v;
    this->p_24_target_env_number_set(v);
    this->p_29_target_env_number_set(v);
}

void numberobj_321_output_set(number v) {
    this->send_21_input_number_set(v);
}

void numberobj_321_value_set(number v) {
    this->numberobj_321_value_setter(v);
    v = this->numberobj_321_value;
    number localvalue = v;

    if (this->numberobj_321_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-116"), localvalue, this->_currentTime);
    this->numberobj_321_output_set(localvalue);
}

number param_25_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_31_in1_list_set(const list& v) {
    this->p_31->updateTime(this->_currentTime);
    this->p_31->eventinlet_53_out1_list_set(v);
}

void message_90_out_set(const list& v) {
    this->p_31_in1_list_set(v);
}

void message_90_trigger_bang() {
    this->message_90_out_set(this->message_90_set);
}

void linetilde_05_time_set(number v) {
    this->linetilde_05_time = v;
}

void linetilde_05_segments_set(const list& v) {
    this->linetilde_05_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_05_time == 0) {
            this->linetilde_05_activeRamps->length = 0;
            this->linetilde_05_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_05_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_05_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_05_activeRamps->push(lastRampValue);
                this->linetilde_05_activeRamps->push(0);
                this->linetilde_05_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_05_keepramp)) {
                        this->linetilde_05_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_05_activeRamps->push(destinationValue);
                this->linetilde_05_activeRamps->push(inc);
                this->linetilde_05_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void message_87_out_set(const list& v) {
    this->linetilde_05_segments_set(v);
}

void message_87_trigger_bang() {
    this->message_87_out_set(this->message_87_set);
}

void p_27_in1_list_set(const list& v) {
    this->p_27->updateTime(this->_currentTime);
    this->p_27->eventinlet_27_out1_list_set(v);
}

void message_86_out_set(const list& v) {
    this->p_27_in1_list_set(v);
}

void message_86_trigger_bang() {
    this->message_86_out_set(this->message_86_set);
}

void select_47_match1_bang() {
    this->message_90_trigger_bang();
    this->message_87_trigger_bang();
    this->message_86_trigger_bang();
}

void p_28_in1_list_set(const list& v) {
    this->p_28->updateTime(this->_currentTime);
    this->p_28->eventinlet_28_out1_list_set(v);
}

void message_89_out_set(const list& v) {
    this->p_28_in1_list_set(v);
}

void message_89_trigger_bang() {
    this->message_89_out_set(this->message_89_set);
}

void message_88_out_set(const list& v) {
    this->linetilde_05_segments_set(v);
}

void message_88_trigger_bang() {
    this->message_88_out_set(this->message_88_set);
}

void p_26_in1_list_set(const list& v) {
    this->p_26->updateTime(this->_currentTime);
    this->p_26->eventinlet_26_out1_list_set(v);
}

void message_85_out_set(const list& v) {
    this->p_26_in1_list_set(v);
}

void message_85_trigger_bang() {
    this->message_85_out_set(this->message_85_set);
}

void select_47_match2_bang() {
    this->message_89_trigger_bang();
    this->message_88_trigger_bang();
    this->message_85_trigger_bang();
}

void select_47_nomatch_number_set(number ) {}

void select_47_input_number_set(number v) {
    if (v == this->select_47_test1)
        this->select_47_match1_bang();
    else if (v == this->select_47_test2)
        this->select_47_match2_bang();
    else
        this->select_47_nomatch_number_set(v);
}

void receive_51_output_number_set(number v) {
    this->receive_51_output_number = v;
    this->select_47_input_number_set(v);
}

void send_29_input_number_set(number v) {
    this->send_29_input_number = v;
    this->receive_51_output_number_set(v);
}

void numberobj_329_output_set(number v) {
    this->send_29_input_number_set(v);
}

void numberobj_329_value_set(number v) {
    this->numberobj_329_value_setter(v);
    v = this->numberobj_329_value;
    number localvalue = v;

    if (this->numberobj_329_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-95"), localvalue, this->_currentTime);
    this->numberobj_329_output_set(localvalue);
}

number param_27_value_constrain(number v) const {
    v = (v > 0 ? 0 : (v < -70 ? -70 : v));

    {
        number oneStep = (number)70 / (number)700;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void dspexpr_10_in2_set(number v) {
    this->dspexpr_10_in2 = v;
}

void dspexpr_07_in2_set(number v) {
    this->dspexpr_07_in2 = v;
}

void numberobj_301_output_set(number v) {
    this->dspexpr_10_in2_set(v);
    this->dspexpr_07_in2_set(v);
}

void numberobj_301_value_set(number v) {
    this->numberobj_301_value_setter(v);
    v = this->numberobj_301_value;
    number localvalue = v;

    if (this->numberobj_301_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-35"), localvalue, this->_currentTime);
    this->numberobj_301_output_set(localvalue);
}

void expr_93_out1_set(number v) {
    this->expr_93_out1 = v;
    this->numberobj_301_value_set(this->expr_93_out1);
}

void expr_93_in1_set(number in1) {
    this->expr_93_in1 = in1;
    this->expr_93_out1_set(rnbo_pow(10, this->expr_93_in1 * 0.05));//#map:dbtoa_obj-6:1
}

void numberobj_300_output_set(number v) {
    this->expr_93_in1_set(v);
}

void numberobj_300_value_set(number v) {
    this->numberobj_300_value_setter(v);
    v = this->numberobj_300_value;
    number localvalue = v;

    if (this->numberobj_300_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-77"), localvalue, this->_currentTime);
    this->numberobj_300_output_set(localvalue);
}

void receive_49_output_number_set(number v) {
    this->receive_49_output_number = v;
    this->numberobj_300_value_set(v);
}

void send_30_input_number_set(number v) {
    this->send_30_input_number = v;
    this->receive_49_output_number_set(v);
}

void numberobj_330_output_set(number v) {
    this->send_30_input_number_set(v);
}

void numberobj_330_value_set(number v) {
    this->numberobj_330_value_setter(v);
    v = this->numberobj_330_value;
    number localvalue = v;

    if (this->numberobj_330_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-55"), localvalue, this->_currentTime);
    this->numberobj_330_output_set(localvalue);
}

number param_28_value_constrain(number v) const {
    v = (v > 0 ? 0 : (v < -70 ? -70 : v));

    {
        number oneStep = (number)70 / (number)700;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void dspexpr_11_in2_set(number v) {
    this->dspexpr_11_in2 = v;
}

void dspexpr_08_in2_set(number v) {
    this->dspexpr_08_in2 = v;
}

void numberobj_304_output_set(number v) {
    this->dspexpr_11_in2_set(v);
    this->dspexpr_08_in2_set(v);
}

void numberobj_304_value_set(number v) {
    this->numberobj_304_value_setter(v);
    v = this->numberobj_304_value;
    number localvalue = v;

    if (this->numberobj_304_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-92"), localvalue, this->_currentTime);
    this->numberobj_304_output_set(localvalue);
}

void expr_94_out1_set(number v) {
    this->expr_94_out1 = v;
    this->numberobj_304_value_set(this->expr_94_out1);
}

void expr_94_in1_set(number in1) {
    this->expr_94_in1 = in1;
    this->expr_94_out1_set(rnbo_pow(10, this->expr_94_in1 * 0.05));//#map:dbtoa_obj-99:1
}

void numberobj_303_output_set(number v) {
    this->expr_94_in1_set(v);
}

void numberobj_303_value_set(number v) {
    this->numberobj_303_value_setter(v);
    v = this->numberobj_303_value;
    number localvalue = v;

    if (this->numberobj_303_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-90"), localvalue, this->_currentTime);
    this->numberobj_303_output_set(localvalue);
}

void receive_50_output_number_set(number v) {
    this->receive_50_output_number = v;
    this->numberobj_303_value_set(v);
}

void send_32_input_number_set(number v) {
    this->send_32_input_number = v;
    this->receive_50_output_number_set(v);
}

void numberobj_332_output_set(number v) {
    this->send_32_input_number_set(v);
}

void numberobj_332_value_set(number v) {
    this->numberobj_332_value_setter(v);
    v = this->numberobj_332_value;
    number localvalue = v;

    if (this->numberobj_332_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-124"), localvalue, this->_currentTime);
    this->numberobj_332_output_set(localvalue);
}

void recordtilde_01_record_set(number v) {
    this->recordtilde_01_record = v;
}

void toggle_07_output_set(number v) {
    this->recordtilde_01_record_set(v);
}

void toggle_07_value_number_set(number v) {
    this->toggle_07_value_number_setter(v);
    v = this->toggle_07_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-12"), v, this->_currentTime);
    this->toggle_07_output_set(v);
}

void loadmess_03_message_bang() {
    list v = this->loadmess_03_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_07_value_number_set(converted);
    }
}

void p_24_target_currentbuff_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->p_08_target_currentbuff_number_set(v);
    }
}

void send_03_input_number_set(number v) {
    this->send_03_input_number = v;
    this->p_24_target_currentbuff_number_set(v);
}

void numberobj_299_output_set(number v) {
    this->send_03_input_number_set(v);
}

void numberobj_299_value_set(number v) {
    this->numberobj_299_value_setter(v);
    v = this->numberobj_299_value;
    number localvalue = v;

    if (this->numberobj_299_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-23"), localvalue, this->_currentTime);
    this->numberobj_299_output_set(localvalue);
}

void p_29_target_fixedbuffersize_number_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->p_19_target_fixedbuffersize_number_set(v);
    }
}

void send_04_input_number_set(number v) {
    this->send_04_input_number = v;
    this->p_29_target_fixedbuffersize_number_set(v);
}

void numberobj_302_output_set(number v) {
    this->send_04_input_number_set(v);
}

void numberobj_302_value_set(number v) {
    this->numberobj_302_value_setter(v);
    v = this->numberobj_302_value;
    number localvalue = v;

    if (this->numberobj_302_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-158"), localvalue, this->_currentTime);
    this->numberobj_302_output_set(localvalue);
}

void transport_01_input_number_set(number v) {
    this->transport_01_input_number = v;
    this->getTopLevelPatcher()->globaltransport_setState(this->currenttime(), (v == 0 ? 0 : 1), true);
}

void toggle_08_output_set(number v) {
    this->transport_01_input_number_set(v);
}

void toggle_08_value_number_set(number v) {
    this->toggle_08_value_number_setter(v);
    v = this->toggle_08_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-145"), v, this->_currentTime);
    this->toggle_08_output_set(v);
}

void loadmess_04_message_bang() {
    list v = this->loadmess_04_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_08_value_number_set(converted);
    }
}

void message_84_set_set(const list& v) {
    this->message_84_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-67"), v, this->_currentTime);
}

void p_25_in2_list_set(const list& v) {
    this->p_25->updateTime(this->_currentTime);
    this->p_25->eventinlet_25_out1_list_set(v);
}

void message_84_out_set(const list& v) {
    this->p_25_in2_list_set(v);
}

void message_84_trigger_bang() {
    this->message_84_out_set(this->message_84_set);
}

void data_01_clear_bang() {
    this->data_01_buffer->setZero();
    this->data_01_buffer->setTouched(true);
}

void button_18_output_bang() {
    this->data_01_clear_bang();
}

void button_18_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-139"), this->_currentTime);;
    this->button_18_output_bang();
}

void select_46_match1_bang() {
    this->button_18_bangval_bang();
}

void select_46_nomatch_number_set(number ) {}

void select_46_input_number_set(number v) {
    if (v == this->select_46_test1)
        this->select_46_match1_bang();
    else
        this->select_46_nomatch_number_set(v);
}

void toggle_09_output_set(number v) {
    this->select_46_input_number_set(v);
}

void toggle_09_value_number_set(number v) {
    this->toggle_09_value_number_setter(v);
    v = this->toggle_09_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-148"), v, this->_currentTime);
    this->toggle_09_output_set(v);
}

void message_85_set_set(const list& v) {
    this->message_85_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-144"), v, this->_currentTime);
}

void p_24_voicestatus_set(const list& v) {
    this->message_84_set_set(v);
    this->message_84_trigger_bang();

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->voice_01_mutein_list_set(v);
        }
    }
}

void p_24_activevoices_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_24[i]->voice_01_activevoices_set(v);
    }
}

void p_24_mute_set(const list& v) {
    Index voiceNumber = (Index)(v[0]);
    Index muteState = (Index)(v[1]);

    if (voiceNumber == 0) {
        for (Index i = 0; i < 100; i++) {
            this->p_24[(Index)i]->setIsMuted(muteState);
        }
    } else {
        Index subpatcherIndex = voiceNumber - 1;

        if (subpatcherIndex >= 0 && subpatcherIndex < 100) {
            this->p_24[(Index)subpatcherIndex]->setIsMuted(muteState);
        }
    }

    list tmp = {v[0], v[1]};
    this->p_24_voicestatus_set(tmp);
    this->p_24_activevoices_set(this->p_24_calcActiveVoices());
}

void p_25_out3_list_set(const list& v) {
    this->p_24_mute_set(v);
}

void p_24_target_set(number v) {
    this->p_24_target = v;
}

void p_25_out2_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->p_24_target_set(converted);
    }
}

void p_24_in1_bang_bang() {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_24_target || 0 == this->p_24_target) {
            this->p_24[i]->eventinlet_23_out1_bang_bang();
        }
    }
}

void button_20_output_bang() {
    this->p_24_in1_bang_bang();
}

void button_20_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-65"), this->_currentTime);;
    this->button_20_output_bang();
}

void p_25_out1_bang_bang() {
    this->button_20_bangval_bang();
}

void p_25_in1_bang_bang() {
    this->p_25->updateTime(this->_currentTime);
    this->p_25->eventinlet_24_out1_bang_bang();
}

void button_19_output_bang() {
    this->p_25_in1_bang_bang();
}

void button_19_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-154"), this->_currentTime);;
    this->button_19_output_bang();
}

void message_86_set_set(const list& v) {
    this->message_86_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-140"), v, this->_currentTime);
}

void message_87_set_set(const list& v) {
    this->message_87_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-125"), v, this->_currentTime);
}

void message_88_set_set(const list& v) {
    this->message_88_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-127"), v, this->_currentTime);
}

void message_89_set_set(const list& v) {
    this->message_89_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-142"), v, this->_currentTime);
}

void message_90_set_set(const list& v) {
    this->message_90_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-155"), v, this->_currentTime);
}

void message_91_set_set(const list& v) {
    this->message_91_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-115"), v, this->_currentTime);
}

void p_30_in2_list_set(const list& v) {
    this->p_30->updateTime(this->_currentTime);
    this->p_30->eventinlet_52_out1_list_set(v);
}

void message_91_out_set(const list& v) {
    this->p_30_in2_list_set(v);
}

void message_91_trigger_bang() {
    this->message_91_out_set(this->message_91_set);
}

void p_29_voicestatus_set(const list& v) {
    this->message_91_set_set(v);
    this->message_91_trigger_bang();

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->voice_02_mutein_list_set(v);
        }
    }
}

void p_29_activevoices_set(number v) {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        this->p_29[i]->voice_02_activevoices_set(v);
    }
}

void p_29_mute_set(const list& v) {
    Index voiceNumber = (Index)(v[0]);
    Index muteState = (Index)(v[1]);

    if (voiceNumber == 0) {
        for (Index i = 0; i < 100; i++) {
            this->p_29[(Index)i]->setIsMuted(muteState);
        }
    } else {
        Index subpatcherIndex = voiceNumber - 1;

        if (subpatcherIndex >= 0 && subpatcherIndex < 100) {
            this->p_29[(Index)subpatcherIndex]->setIsMuted(muteState);
        }
    }

    list tmp = {v[0], v[1]};
    this->p_29_voicestatus_set(tmp);
    this->p_29_activevoices_set(this->p_29_calcActiveVoices());
}

void p_30_out3_list_set(const list& v) {
    this->p_29_mute_set(v);
}

void p_29_target_set(number v) {
    this->p_29_target = v;
}

void p_30_out2_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->p_29_target_set(converted);
    }
}

void p_29_in1_bang_bang() {
    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->updateTime(this->_currentTime);
        }
    }

    for (Index i = 0; i < 100; i++) {
        if (i + 1 == this->p_29_target || 0 == this->p_29_target) {
            this->p_29[i]->eventinlet_50_out1_bang_bang();
        }
    }
}

void button_22_output_bang() {
    this->p_29_in1_bang_bang();
}

void button_22_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-128"), this->_currentTime);;
    this->button_22_output_bang();
}

void p_30_out1_bang_bang() {
    this->button_22_bangval_bang();
}

void p_30_in1_bang_bang() {
    this->p_30->updateTime(this->_currentTime);
    this->p_30->eventinlet_51_out1_bang_bang();
}

void button_21_output_bang() {
    this->p_30_in1_bang_bang();
}

void button_21_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-133"), this->_currentTime);;
    this->button_21_output_bang();
}

void transport_01_outtempo_set(number ) {}

void transport_01_state_set(number v) {
    this->toggle_09_value_number_set(v);
}

void transport_01_outtimesig_set(const list& ) {}

void p_26_out1_bang_bang() {
    this->button_19_bangval_bang();
}

void p_25_target_golive_bang_bang() {
    this->p_25->updateTime(this->_currentTime);
    this->p_25->receive_21_output_bang_bang();
}

void p_27_source_golive_bang_bang() {
    this->p_25_target_golive_bang_bang();
}

void p_27_out2_list_set(const list& v) {
    this->p_26_in1_list_set(v);
}

void p_27_out1_list_set(const list& v) {
    this->p_24_mute_set(v);
}

void p_30_target_gofixed_bang_bang() {
    this->p_30->updateTime(this->_currentTime);
    this->p_30->receive_45_output_bang_bang();
}

void p_28_source_gofixed_bang_bang() {
    this->p_30_target_gofixed_bang_bang();
}

void p_28_out2_list_set(const list& v) {
    this->p_31_in1_list_set(v);
}

void p_28_out1_list_set(const list& v) {
    this->p_29_mute_set(v);
}

void p_31_out1_bang_bang() {
    this->button_21_bangval_bang();
}

void dspexpr_07_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void ip_01_perform(SampleValue * out, Index n) {
    auto __ip_01_lastValue = this->ip_01_lastValue;
    auto __ip_01_lastIndex = this->ip_01_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_01_lastIndex ? __ip_01_lastValue : this->ip_01_sigbuf[(Index)i]);
    }

    __ip_01_lastIndex = 0;
    this->ip_01_lastIndex = __ip_01_lastIndex;
}

void dspexpr_09_perform(
    const Sample * in1,
    const Sample * in2,
    const Sample * in3,
    SampleValue * out1,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in3[(Index)i] * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void recordtilde_01_perform(
    number record,
    number begin,
    number end,
    const SampleValue * input1,
    SampleValue * sync,
    Index n
) {
    RNBO_UNUSED(input1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __recordtilde_01_loop = this->recordtilde_01_loop;
    auto __recordtilde_01_wIndex = this->recordtilde_01_wIndex;
    auto __recordtilde_01_lastRecord = this->recordtilde_01_lastRecord;
    auto __recordtilde_01_buffer = this->recordtilde_01_buffer;
    ConstSampleArray<1> input = {input1};
    number bufferSize = __recordtilde_01_buffer->getSize();
    number srInv = (number)1 / this->samplerate();

    if (bufferSize > 0) {
        number maxChannel = __recordtilde_01_buffer->getChannels();
        number touched = false;

        for (Index i = 0; i < n; i++) {
            number loopBegin = 0;
            number loopEnd = bufferSize;

            if (loopEnd > loopBegin) {
                {
                    if ((bool)(record) && __recordtilde_01_lastRecord != record) {
                        __recordtilde_01_wIndex = loopBegin;
                    }
                }

                if (record != 0 && __recordtilde_01_wIndex < loopEnd) {
                    for (number channel = 0; channel < 1; channel++) {
                        number effectiveChannel = channel + 0;

                        if (effectiveChannel < maxChannel) {
                            __recordtilde_01_buffer->setSample(channel, __recordtilde_01_wIndex, input[(Index)channel][(Index)i]);
                            touched = true;
                        } else
                            break;
                    }

                    __recordtilde_01_wIndex++;

                    if ((bool)(__recordtilde_01_loop) && __recordtilde_01_wIndex >= loopEnd) {
                        __recordtilde_01_wIndex = loopBegin;
                    }

                    {
                        sync[(Index)i] = this->recordtilde_01_calcSync(__recordtilde_01_wIndex, loopBegin, loopEnd - loopBegin, bufferSize, srInv);
                    }
                } else {
                    sync[(Index)i] = 0;
                }

                {
                    __recordtilde_01_lastRecord = record;
                }
            }
        }

        if ((bool)(touched)) {
            __recordtilde_01_buffer->setTouched(true);
            __recordtilde_01_buffer->setSampleRate(this->samplerate());
        }
    }

    this->recordtilde_01_lastRecord = __recordtilde_01_lastRecord;
    this->recordtilde_01_wIndex = __recordtilde_01_wIndex;
}

void numbertilde_20_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_20_currentIntervalInSamples = this->numbertilde_20_currentIntervalInSamples;
    auto __numbertilde_20_lastValue = this->numbertilde_20_lastValue;
    auto __numbertilde_20_currentInterval = this->numbertilde_20_currentInterval;
    auto __numbertilde_20_rampInSamples = this->numbertilde_20_rampInSamples;
    auto __numbertilde_20_outValue = this->numbertilde_20_outValue;
    auto __numbertilde_20_currentMode = this->numbertilde_20_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_20_currentMode == 0) {
            output[(Index)i] = this->numbertilde_20_smooth_next(
                __numbertilde_20_outValue,
                __numbertilde_20_rampInSamples,
                __numbertilde_20_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_20_currentInterval -= n;

    if (monitorvalue != __numbertilde_20_lastValue && __numbertilde_20_currentInterval <= 0) {
        __numbertilde_20_currentInterval = __numbertilde_20_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1494586265,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_20_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-4"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_20_currentInterval = __numbertilde_20_currentInterval;
    this->numbertilde_20_lastValue = __numbertilde_20_lastValue;
}

void p_24_perform(SampleValue * out1, SampleValue * out2, Index n) {
    // subpatcher: livegrain
    SampleArray<2> outs = {out1, out2};

    for (number chan = 0; chan < 2; chan++)
        zeroSignal(outs[(Index)chan], n);

    for (Index i = 0; i < 100; i++)
        this->p_24[(Index)i]->process(nullptr, 0, outs, 2, n);
}

void p_25_perform(Index n) {
    // subpatcher: sort
    this->p_25->process(nullptr, 0, nullptr, 0, n);
}

void p_26_perform(Index n) {
    // subpatcher: emitter
    this->p_26->process(nullptr, 0, nullptr, 0, n);
}

void p_27_perform(Index n) {
    // subpatcher: activatelive
    this->p_27->process(nullptr, 0, nullptr, 0, n);
}

void linetilde_05_perform(SampleValue * out, Index n) {
    auto __linetilde_05_time = this->linetilde_05_time;
    auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
    auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_05_activeRamps->length)) {
        while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_05_activeRamps[0];
            number inc = this->linetilde_05_activeRamps[1];
            number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_05_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_05_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -281953904,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                        __linetilde_05_time = 0;
                    }
                }
            }

            __linetilde_05_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_05_currentValue;
        i++;
    }

    this->linetilde_05_currentValue = __linetilde_05_currentValue;
    this->linetilde_05_time = __linetilde_05_time;
}

void p_28_perform(Index n) {
    // subpatcher: activatefixed
    this->p_28->process(nullptr, 0, nullptr, 0, n);
}

void p_29_perform(SampleValue * out1, SampleValue * out2, Index n) {
    // subpatcher: fixedgrain
    SampleArray<2> outs = {out1, out2};

    for (number chan = 0; chan < 2; chan++)
        zeroSignal(outs[(Index)chan], n);

    for (Index i = 0; i < 100; i++)
        this->p_29[(Index)i]->process(nullptr, 0, outs, 2, n);
}

void dspexpr_12_perform(
    const Sample * in1,
    const Sample * in2,
    const Sample * in3,
    SampleValue * out1,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in3[(Index)i] * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void dspexpr_13_perform(
    const Sample * in1,
    const Sample * in2,
    const Sample * in3,
    SampleValue * out1,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in3[(Index)i] * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void dspexpr_11_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void signaladder_01_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void signaladder_02_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void p_23_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: limiter
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_23->process(ins, 2, outs, 2, n);
}

void p_30_perform(Index n) {
    // subpatcher: sort
    this->p_30->process(nullptr, 0, nullptr, 0, n);
}

void p_31_perform(Index n) {
    // subpatcher: emitter
    this->p_31->process(nullptr, 0, nullptr, 0, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void data_01_srout_set(number ) {}

void data_01_chanout_set(number ) {}

void data_01_sizeout_set(number v) {
    this->data_01_sizeout = v;
}

void data_02_srout_set(number ) {}

void data_02_chanout_set(number ) {}

void sampstoms_01_out1_set(number v) {
    this->numberobj_302_value_set(v);
}

void sampstoms_01_samps_set(number samps) {
    this->sampstoms_01_samps = samps;

    {
        this->sampstoms_01_out1_set(samps * 1000 / this->sr);
        return;
    }
}

void data_02_sizeout_set(number v) {
    this->data_02_sizeout = v;
    this->sampstoms_01_samps_set(v);
}

void toggle_07_value_number_setter(number v) {
    this->toggle_07_value_number = (v != 0 ? 1 : 0);
}

void numberobj_299_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_299_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_299_value = localvalue;
}

void numberobj_300_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_300_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_300_value = localvalue;
}

void numberobj_301_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_301_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_301_value = localvalue;
}

void numberobj_302_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_302_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_302_value = localvalue;
}

void numberobj_303_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_303_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_303_value = localvalue;
}

void numberobj_304_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_304_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_304_value = localvalue;
}

void toggle_08_value_number_setter(number v) {
    this->toggle_08_value_number = (v != 0 ? 1 : 0);
}

void numberobj_305_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_305_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_305_value = localvalue;
}

void numberobj_306_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_306_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_306_value = localvalue;
}

void numberobj_307_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_307_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_307_value = localvalue;
}

void numberobj_308_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_308_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_308_value = localvalue;
}

void numberobj_309_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_309_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_309_value = localvalue;
}

void numberobj_310_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_310_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_310_value = localvalue;
}

void numberobj_311_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_311_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_311_value = localvalue;
}

void toggle_09_value_number_setter(number v) {
    this->toggle_09_value_number = (v != 0 ? 1 : 0);
}

void numberobj_312_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_312_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_312_value = localvalue;
}

void numberobj_313_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_313_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_313_value = localvalue;
}

void numberobj_314_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_314_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_314_value = localvalue;
}

void numberobj_315_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_315_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_315_value = localvalue;
}

void numberobj_316_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_316_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_316_value = localvalue;
}

void numberobj_317_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_317_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_317_value = localvalue;
}

void numberobj_318_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_318_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_318_value = localvalue;
}

void numberobj_319_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_319_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_319_value = localvalue;
}

void numberobj_320_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_320_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_320_value = localvalue;
}

void numberobj_321_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_321_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_321_value = localvalue;
}

void numberobj_322_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_322_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_322_value = localvalue;
}

void numberobj_323_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_323_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_323_value = localvalue;
}

void numberobj_324_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_324_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_324_value = localvalue;
}

void numberobj_325_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_325_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_325_value = localvalue;
}

void numberobj_326_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_326_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_326_value = localvalue;
}

void numberobj_327_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_327_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_327_value = localvalue;
}

void numberobj_328_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_328_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_328_value = localvalue;
}

void numberobj_329_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_329_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_329_value = localvalue;
}

void numberobj_330_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_330_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_330_value = localvalue;
}

void numberobj_331_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_331_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_331_value = localvalue;
}

void numberobj_332_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_332_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_332_value = localvalue;
}

number numbertilde_20_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_20_smooth_d_prev);
    this->numbertilde_20_smooth_d_prev = x;
    return temp;
}

void numbertilde_20_smooth_d_dspsetup() {
    this->numbertilde_20_smooth_d_reset();
}

void numbertilde_20_smooth_d_reset() {
    this->numbertilde_20_smooth_d_prev = 0;
}

number numbertilde_20_smooth_next(number x, number up, number down) {
    if (this->numbertilde_20_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_20_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_20_smooth_index = _up;
            this->numbertilde_20_smooth_increment = (x - this->numbertilde_20_smooth_prev) / _up;
        } else if (x < this->numbertilde_20_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_20_smooth_index = _down;
            this->numbertilde_20_smooth_increment = (x - this->numbertilde_20_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_20_smooth_index > 0) {
        this->numbertilde_20_smooth_prev += this->numbertilde_20_smooth_increment;
        this->numbertilde_20_smooth_index -= 1;
    } else {
        this->numbertilde_20_smooth_prev = x;
    }

    return this->numbertilde_20_smooth_prev;
}

void numbertilde_20_smooth_reset() {
    this->numbertilde_20_smooth_prev = 0;
    this->numbertilde_20_smooth_index = 0;
    this->numbertilde_20_smooth_increment = 0;
    this->numbertilde_20_smooth_d_reset();
}

void numbertilde_20_init() {
    this->numbertilde_20_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-4"), 1, this->_currentTime);
}

void numbertilde_20_dspsetup(bool force) {
    if ((bool)(this->numbertilde_20_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_20_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_20_currentInterval = this->numbertilde_20_currentIntervalInSamples;
    this->numbertilde_20_rampInSamples = this->mstosamps(this->numbertilde_20_ramp);
    this->numbertilde_20_setupDone = true;
    this->numbertilde_20_smooth_d_dspsetup();
}

number recordtilde_01_calcSync(
    number writeIndex,
    number loopMin,
    number loopLength,
    SampleIndex bufferLength,
    number srInv
) {
    RNBO_UNUSED(bufferLength);
    RNBO_UNUSED(loopLength);

    {
        {
            {
                {
                    {
                        return (writeIndex - loopMin) * srInv * 1000;
                    }
                }
            }
        }
    }
}

void data_01_init() {
    this->data_01_buffer->setWantsFill(true);
}

Index data_01_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    number size = 0;
    return (Index)(size);
}

void data_01_dspsetup(bool force) {
    if ((bool)(this->data_01_setupDone) && (bool)(!(bool)(force)))
        return;

    if (this->data_01_sizemode == 2) {
        this->data_01_buffer = this->data_01_buffer->setSize((Index)(this->mstosamps(this->data_01_sizems)));
        updateDataRef(this, this->data_01_buffer);
    } else if (this->data_01_sizemode == 3) {
        this->data_01_buffer = this->data_01_buffer->setSize(this->data_01_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
        updateDataRef(this, this->data_01_buffer);
    }

    this->data_01_setupDone = true;
}

void data_01_bufferUpdated() {
    this->data_01_report();
}

void data_01_report() {
    this->data_01_srout_set(this->data_01_buffer->getSampleRate());
    this->data_01_chanout_set(this->data_01_buffer->getChannels());
    this->data_01_sizeout_set(this->data_01_buffer->getSize());
}

void ip_01_init() {
    this->ip_01_lastValue = this->ip_01_value;
}

void ip_01_dspsetup(bool force) {
    if ((bool)(this->ip_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_01_lastIndex = 0;
    this->ip_01_setupDone = true;
}

void toggle_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_07_value_number;
}

void toggle_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_07_value_number_set(preset["value"]);
}

number p_24_calcActiveVoices() {
    {
        number activeVoices = 0;

        for (Index i = 0; i < 100; i++) {
            if ((bool)(!(bool)(this->p_24[(Index)i]->getIsMuted())))
                activeVoices++;
        }

        return activeVoices;
    }
}

void numberobj_299_init() {
    this->numberobj_299_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-23"), 1, this->_currentTime);
}

void numberobj_299_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_299_value;
}

void numberobj_299_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_299_value_set(preset["value"]);
}

void numberobj_300_init() {
    this->numberobj_300_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-77"), 1, this->_currentTime);
}

void numberobj_300_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_300_value;
}

void numberobj_300_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_300_value_set(preset["value"]);
}

void numberobj_301_init() {
    this->numberobj_301_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-35"), 1, this->_currentTime);
}

void numberobj_301_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_301_value;
}

void numberobj_301_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_301_value_set(preset["value"]);
}

void numberobj_302_init() {
    this->numberobj_302_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-158"), 1, this->_currentTime);
}

void numberobj_302_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_302_value;
}

void numberobj_302_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_302_value_set(preset["value"]);
}

void data_02_init() {
    this->data_02_buffer->setWantsFill(true);
}

Index data_02_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    number size = 0;
    return (Index)(size);
}

void data_02_dspsetup(bool force) {
    if ((bool)(this->data_02_setupDone) && (bool)(!(bool)(force)))
        return;

    if (this->data_02_sizemode == 2) {
        this->data_02_buffer = this->data_02_buffer->setSize((Index)(this->mstosamps(this->data_02_sizems)));
        updateDataRef(this, this->data_02_buffer);
    } else if (this->data_02_sizemode == 3) {
        this->data_02_buffer = this->data_02_buffer->setSize(this->data_02_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
        updateDataRef(this, this->data_02_buffer);
    }

    this->data_02_setupDone = true;
}

void data_02_bufferUpdated() {
    this->data_02_report();
}

void data_02_report() {
    this->data_02_srout_set(this->data_02_buffer->getSampleRate());
    this->data_02_chanout_set(this->data_02_buffer->getChannels());
    this->data_02_sizeout_set(this->data_02_buffer->getSize());
}

void param_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_01_value;
}

void param_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_01_value_set(preset["value"]);
}

void param_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_02_value;
}

void param_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_02_value_set(preset["value"]);
}

void numberobj_303_init() {
    this->numberobj_303_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-90"), 1, this->_currentTime);
}

void numberobj_303_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_303_value;
}

void numberobj_303_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_303_value_set(preset["value"]);
}

void numberobj_304_init() {
    this->numberobj_304_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-92"), 1, this->_currentTime);
}

void numberobj_304_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_304_value;
}

void numberobj_304_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_304_value_set(preset["value"]);
}

void param_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_03_value;
}

void param_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_03_value_set(preset["value"]);
}

void toggle_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_08_value_number;
}

void toggle_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_08_value_number_set(preset["value"]);
}

void transport_01_onTempoChanged(number state) {
    this->transport_01_outtempo_set(state);
}

void transport_01_onTransportChanged(number state) {
    this->transport_01_state_set(state);
}

void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
    this->transport_01_outtimesig_set({numerator, denominator});
}

void param_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_04_value;
}

void param_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_04_value_set(preset["value"]);
}

void param_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_05_value;
}

void param_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_05_value_set(preset["value"]);
}

void param_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_06_value;
}

void param_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_06_value_set(preset["value"]);
}

void numberobj_305_init() {
    this->numberobj_305_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-50"), 1, this->_currentTime);
}

void numberobj_305_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_305_value;
}

void numberobj_305_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_305_value_set(preset["value"]);
}

void numberobj_306_init() {
    this->numberobj_306_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-36"), 1, this->_currentTime);
}

void numberobj_306_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_306_value;
}

void numberobj_306_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_306_value_set(preset["value"]);
}

void numberobj_307_init() {
    this->numberobj_307_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-34"), 1, this->_currentTime);
}

void numberobj_307_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_307_value;
}

void numberobj_307_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_307_value_set(preset["value"]);
}

void numberobj_308_init() {
    this->numberobj_308_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-21"), 1, this->_currentTime);
}

void numberobj_308_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_308_value;
}

void numberobj_308_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_308_value_set(preset["value"]);
}

void numberobj_309_init() {
    this->numberobj_309_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-11"), 1, this->_currentTime);
}

void numberobj_309_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_309_value;
}

void numberobj_309_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_309_value_set(preset["value"]);
}

void numberobj_310_init() {
    this->numberobj_310_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-64"), 1, this->_currentTime);
}

void numberobj_310_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_310_value;
}

void numberobj_310_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_310_value_set(preset["value"]);
}

void numberobj_311_init() {
    this->numberobj_311_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-58"), 1, this->_currentTime);
}

void numberobj_311_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_311_value;
}

void numberobj_311_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_311_value_set(preset["value"]);
}

void param_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_07_value;
}

void param_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_07_value_set(preset["value"]);
}

void message_84_init() {
    this->message_84_set_set({1, 1});
}

void toggle_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_09_value_number;
}

void toggle_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_09_value_number_set(preset["value"]);
}

void message_85_init() {
    this->message_85_set_set({0});
}

void param_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_08_value;
}

void param_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_08_value_set(preset["value"]);
}

void param_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_09_value;
}

void param_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_09_value_set(preset["value"]);
}

void param_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_10_value;
}

void param_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_10_value_set(preset["value"]);
}

void numberobj_312_init() {
    this->numberobj_312_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-89"), 1, this->_currentTime);
}

void numberobj_312_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_312_value;
}

void numberobj_312_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_312_value_set(preset["value"]);
}

void numberobj_313_init() {
    this->numberobj_313_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-88"), 1, this->_currentTime);
}

void numberobj_313_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_313_value;
}

void numberobj_313_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_313_value_set(preset["value"]);
}

void numberobj_314_init() {
    this->numberobj_314_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-84"), 1, this->_currentTime);
}

void numberobj_314_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_314_value;
}

void numberobj_314_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_314_value_set(preset["value"]);
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void numberobj_315_init() {
    this->numberobj_315_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-79"), 1, this->_currentTime);
}

void numberobj_315_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_315_value;
}

void numberobj_315_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_315_value_set(preset["value"]);
}

void numberobj_316_init() {
    this->numberobj_316_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-78"), 1, this->_currentTime);
}

void numberobj_316_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_316_value;
}

void numberobj_316_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_316_value_set(preset["value"]);
}

void numberobj_317_init() {
    this->numberobj_317_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-75"), 1, this->_currentTime);
}

void numberobj_317_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_317_value;
}

void numberobj_317_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_317_value_set(preset["value"]);
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void message_86_init() {
    this->message_86_set_set({1});
}

void numberobj_318_init() {
    this->numberobj_318_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-68"), 1, this->_currentTime);
}

void numberobj_318_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_318_value;
}

void numberobj_318_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_318_value_set(preset["value"]);
}

void message_87_init() {
    this->message_87_set_set({0, 10});
}

void message_88_init() {
    this->message_88_set_set({1, 10});
}

void param_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_15_value;
}

void param_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_15_value_set(preset["value"]);
}

void message_89_init() {
    this->message_89_set_set({1});
}

number p_29_calcActiveVoices() {
    {
        number activeVoices = 0;

        for (Index i = 0; i < 100; i++) {
            if ((bool)(!(bool)(this->p_29[(Index)i]->getIsMuted())))
                activeVoices++;
        }

        return activeVoices;
    }
}

void numberobj_319_init() {
    this->numberobj_319_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-44"), 1, this->_currentTime);
}

void numberobj_319_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_319_value;
}

void numberobj_319_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_319_value_set(preset["value"]);
}

void param_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_16_value;
}

void param_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_16_value_set(preset["value"]);
}

void numberobj_320_init() {
    this->numberobj_320_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-120"), 1, this->_currentTime);
}

void numberobj_320_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_320_value;
}

void numberobj_320_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_320_value_set(preset["value"]);
}

void param_17_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_17_value;
}

void param_17_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_17_value_set(preset["value"]);
}

void numberobj_321_init() {
    this->numberobj_321_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-116"), 1, this->_currentTime);
}

void numberobj_321_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_321_value;
}

void numberobj_321_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_321_value_set(preset["value"]);
}

void param_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_18_value;
}

void param_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_18_value_set(preset["value"]);
}

void numberobj_322_init() {
    this->numberobj_322_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-112"), 1, this->_currentTime);
}

void numberobj_322_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_322_value;
}

void numberobj_322_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_322_value_set(preset["value"]);
}

void numberobj_323_init() {
    this->numberobj_323_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-108"), 1, this->_currentTime);
}

void numberobj_323_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_323_value;
}

void numberobj_323_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_323_value_set(preset["value"]);
}

void param_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_19_value;
}

void param_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_19_value_set(preset["value"]);
}

void numberobj_324_init() {
    this->numberobj_324_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-104"), 1, this->_currentTime);
}

void numberobj_324_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_324_value;
}

void numberobj_324_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_324_value_set(preset["value"]);
}

void param_20_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_20_value;
}

void param_20_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_20_value_set(preset["value"]);
}

void numberobj_325_init() {
    this->numberobj_325_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-100"), 1, this->_currentTime);
}

void numberobj_325_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_325_value;
}

void numberobj_325_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_325_value_set(preset["value"]);
}

void param_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_21_value;
}

void param_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_21_value_set(preset["value"]);
}

void numberobj_326_init() {
    this->numberobj_326_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-96"), 1, this->_currentTime);
}

void numberobj_326_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_326_value;
}

void numberobj_326_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_326_value_set(preset["value"]);
}

void param_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_22_value;
}

void param_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_22_value_set(preset["value"]);
}

void message_90_init() {
    this->message_90_set_set({0});
}

void message_91_init() {
    this->message_91_set_set({2, 1});
}

void numberobj_327_init() {
    this->numberobj_327_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-109"), 1, this->_currentTime);
}

void numberobj_327_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_327_value;
}

void numberobj_327_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_327_value_set(preset["value"]);
}

void param_23_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_23_value;
}

void param_23_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_23_value_set(preset["value"]);
}

void numberobj_328_init() {
    this->numberobj_328_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-101"), 1, this->_currentTime);
}

void numberobj_328_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_328_value;
}

void numberobj_328_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_328_value_set(preset["value"]);
}

void param_24_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_24_value;
}

void param_24_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_24_value_set(preset["value"]);
}

void numberobj_329_init() {
    this->numberobj_329_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-95"), 1, this->_currentTime);
}

void numberobj_329_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_329_value;
}

void numberobj_329_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_329_value_set(preset["value"]);
}

void param_25_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_25_value;
}

void param_25_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_25_value_set(preset["value"]);
}

void numberobj_330_init() {
    this->numberobj_330_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-55"), 1, this->_currentTime);
}

void numberobj_330_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_330_value;
}

void numberobj_330_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_330_value_set(preset["value"]);
}

void numberobj_331_init() {
    this->numberobj_331_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-66"), 1, this->_currentTime);
}

void numberobj_331_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_331_value;
}

void numberobj_331_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_331_value_set(preset["value"]);
}

void param_26_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_26_value;
}

void param_26_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_26_value_set(preset["value"]);
}

void numberobj_332_init() {
    this->numberobj_332_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-124"), 1, this->_currentTime);
}

void numberobj_332_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_332_value;
}

void numberobj_332_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_332_value_set(preset["value"]);
}

void param_27_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_27_value;
}

void param_27_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_27_value_set(preset["value"]);
}

void param_28_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_28_value;
}

void param_28_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_28_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;

            if (state == 0) {
                this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
                this->globaltransport_beatTimeChanges->push(time);
            }

            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    dspexpr_07_in1 = 0;
    dspexpr_07_in2 = 0;
    p_23_target = 0;
    dspexpr_08_in1 = 0;
    dspexpr_08_in2 = 0;
    dspexpr_09_in1 = 0;
    dspexpr_09_in2 = 0;
    dspexpr_09_in3 = 0;
    numbertilde_20_input_number = 0;
    numbertilde_20_ramp = 0;
    recordtilde_01_record = 0;
    recordtilde_01_begin = 0;
    recordtilde_01_end = -1;
    recordtilde_01_loop = 1;
    dspexpr_10_in1 = 0;
    dspexpr_10_in2 = 0;
    data_01_sizeout = 0;
    data_01_size = 0;
    data_01_sizems = 21000;
    data_01_normalize = 0.995;
    data_01_channels = 1;
    ip_01_value = 0.5;
    ip_01_impulse = 0;
    dspexpr_11_in1 = 0;
    dspexpr_11_in2 = 0;
    toggle_07_value_number = 0;
    toggle_07_value_number_setter(toggle_07_value_number);
    dspexpr_12_in1 = 0;
    dspexpr_12_in2 = 0;
    dspexpr_12_in3 = 0;
    loadmess_03_message = { 1 };
    p_24_target = 0;
    send_03_input_number = 0;
    numberobj_299_value = 0;
    numberobj_299_value_setter(numberobj_299_value);
    numberobj_300_value = 0;
    numberobj_300_value_setter(numberobj_300_value);
    numberobj_301_value = 0;
    numberobj_301_value_setter(numberobj_301_value);
    expr_93_in1 = 0;
    expr_93_out1 = 0;
    dspexpr_13_in1 = 0;
    dspexpr_13_in2 = 0;
    dspexpr_13_in3 = 0;
    send_04_input_number = 0;
    numberobj_302_value = 0;
    numberobj_302_value_setter(numberobj_302_value);
    sampstoms_01_samps = 0;
    data_02_sizeout = 0;
    data_02_size = 0;
    data_02_sizems = 0;
    data_02_normalize = 0.995;
    data_02_channels = 2;
    param_01_value = 0;
    param_02_value = 500;
    receive_49_output_number = 0;
    numberobj_303_value = 0;
    numberobj_303_value_setter(numberobj_303_value);
    numberobj_304_value = 0;
    numberobj_304_value_setter(numberobj_304_value);
    expr_94_in1 = 0;
    expr_94_out1 = 0;
    param_03_value = 10;
    loadmess_04_message = { 1 };
    toggle_08_value_number = 0;
    toggle_08_value_number_setter(toggle_08_value_number);
    transport_01_input_number = 0;
    transport_01_position = 0;
    transport_01_tempo = 120;
    transport_01_ticks = 0;
    receive_50_output_number = 0;
    param_04_value = 10;
    param_05_value = 0;
    param_06_value = 1000;
    numberobj_305_value = 0;
    numberobj_305_value_setter(numberobj_305_value);
    numberobj_306_value = 0;
    numberobj_306_value_setter(numberobj_306_value);
    numberobj_307_value = 0;
    numberobj_307_value_setter(numberobj_307_value);
    numberobj_308_value = 0;
    numberobj_308_value_setter(numberobj_308_value);
    numberobj_309_value = 0;
    numberobj_309_value_setter(numberobj_309_value);
    send_05_input_number = 0;
    send_06_input_number = 0;
    send_07_input_number = 0;
    send_08_input_number = 0;
    send_09_input_number = 0;
    send_10_input_number = 0;
    send_11_input_number = 0;
    numberobj_310_value = 0;
    numberobj_310_value_setter(numberobj_310_value);
    numberobj_311_value = 0;
    numberobj_311_value_setter(numberobj_311_value);
    param_07_value = 10;
    select_46_test1 = 0;
    toggle_09_value_number = 0;
    toggle_09_value_number_setter(toggle_09_value_number);
    p_25_target = 0;
    p_26_target = 0;
    param_08_value = 0;
    param_09_value = 0;
    param_10_value = 1;
    send_12_input_number = 0;
    send_13_input_number = 0;
    send_14_input_number = 0;
    send_15_input_number = 0;
    send_16_input_number = 0;
    send_17_input_number = 0;
    send_18_input_number = 0;
    numberobj_312_value = 0;
    numberobj_312_value_setter(numberobj_312_value);
    numberobj_313_value = 0;
    numberobj_313_value_setter(numberobj_313_value);
    numberobj_314_value = 0;
    numberobj_314_value_setter(numberobj_314_value);
    param_11_value = 0;
    numberobj_315_value = 0;
    numberobj_315_value_setter(numberobj_315_value);
    numberobj_316_value = 0;
    numberobj_316_value_setter(numberobj_316_value);
    numberobj_317_value = 0;
    numberobj_317_value_setter(numberobj_317_value);
    param_12_value = 5000;
    param_13_value = -6;
    param_14_value = 1;
    p_27_target = 0;
    numberobj_318_value = 0;
    numberobj_318_value_setter(numberobj_318_value);
    linetilde_05_time = 0;
    linetilde_05_keepramp = 0;
    param_15_value = 100;
    p_28_target = 0;
    select_47_test1 = 0;
    select_47_test2 = 1;
    receive_51_output_number = 0;
    p_29_target = 0;
    numberobj_319_value = 0;
    numberobj_319_value_setter(numberobj_319_value);
    send_19_input_number = 0;
    param_16_value = 0;
    send_20_input_number = 0;
    send_21_input_number = 0;
    send_22_input_number = 0;
    send_23_input_number = 0;
    send_24_input_number = 0;
    send_25_input_number = 0;
    send_26_input_number = 0;
    numberobj_320_value = 0;
    numberobj_320_value_setter(numberobj_320_value);
    param_17_value = 0;
    numberobj_321_value = 0;
    numberobj_321_value_setter(numberobj_321_value);
    param_18_value = 0;
    numberobj_322_value = 0;
    numberobj_322_value_setter(numberobj_322_value);
    numberobj_323_value = 0;
    numberobj_323_value_setter(numberobj_323_value);
    param_19_value = 50;
    numberobj_324_value = 0;
    numberobj_324_value_setter(numberobj_324_value);
    param_20_value = 100;
    numberobj_325_value = 0;
    numberobj_325_value_setter(numberobj_325_value);
    param_21_value = -100;
    numberobj_326_value = 0;
    numberobj_326_value_setter(numberobj_326_value);
    param_22_value = 0;
    p_30_target = 0;
    p_31_target = 0;
    send_27_input_number = 0;
    numberobj_327_value = 0;
    numberobj_327_value_setter(numberobj_327_value);
    param_23_value = 1;
    send_28_input_number = 0;
    numberobj_328_value = 0;
    numberobj_328_value_setter(numberobj_328_value);
    param_24_value = 0;
    numberobj_329_value = 0;
    numberobj_329_value_setter(numberobj_329_value);
    send_29_input_number = 0;
    param_25_value = 0;
    send_30_input_number = 0;
    numberobj_330_value = 0;
    numberobj_330_value_setter(numberobj_330_value);
    numberobj_331_value = 0;
    numberobj_331_value_setter(numberobj_331_value);
    send_31_input_number = 0;
    param_26_value = 0;
    send_32_input_number = 0;
    numberobj_332_value = 0;
    numberobj_332_value_setter(numberobj_332_value);
    param_27_value = -70;
    param_28_value = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    signals[6] = nullptr;
    signals[7] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    numbertilde_20_currentInterval = 0;
    numbertilde_20_currentIntervalInSamples = 0;
    numbertilde_20_lastValue = 0;
    numbertilde_20_outValue = 0;
    numbertilde_20_rampInSamples = 0;
    numbertilde_20_currentMode = 0;
    numbertilde_20_smooth_d_prev = 0;
    numbertilde_20_smooth_prev = 0;
    numbertilde_20_smooth_index = 0;
    numbertilde_20_smooth_increment = 0;
    numbertilde_20_setupDone = false;
    recordtilde_01_wIndex = 0;
    recordtilde_01_lastRecord = 0;
    data_01_sizemode = 2;
    data_01_setupDone = false;
    ip_01_lastIndex = 0;
    ip_01_lastValue = 0;
    ip_01_resetCount = 0;
    ip_01_sigbuf = nullptr;
    ip_01_setupDone = false;
    toggle_07_lastValue = 0;
    numberobj_299_currentFormat = 6;
    numberobj_299_lastValue = 0;
    numberobj_300_currentFormat = 6;
    numberobj_300_lastValue = 0;
    numberobj_301_currentFormat = 6;
    numberobj_301_lastValue = 0;
    numberobj_302_currentFormat = 6;
    numberobj_302_lastValue = 0;
    data_02_sizemode = 0;
    data_02_setupDone = false;
    param_01_lastValue = 0;
    param_02_lastValue = 0;
    numberobj_303_currentFormat = 6;
    numberobj_303_lastValue = 0;
    numberobj_304_currentFormat = 6;
    numberobj_304_lastValue = 0;
    param_03_lastValue = 0;
    toggle_08_lastValue = 0;
    param_04_lastValue = 0;
    param_05_lastValue = 0;
    param_06_lastValue = 0;
    numberobj_305_currentFormat = 6;
    numberobj_305_lastValue = 0;
    numberobj_306_currentFormat = 6;
    numberobj_306_lastValue = 0;
    numberobj_307_currentFormat = 6;
    numberobj_307_lastValue = 0;
    numberobj_308_currentFormat = 6;
    numberobj_308_lastValue = 0;
    numberobj_309_currentFormat = 6;
    numberobj_309_lastValue = 0;
    numberobj_310_currentFormat = 6;
    numberobj_310_lastValue = 0;
    numberobj_311_currentFormat = 6;
    numberobj_311_lastValue = 0;
    param_07_lastValue = 0;
    toggle_09_lastValue = 0;
    param_08_lastValue = 0;
    param_09_lastValue = 0;
    param_10_lastValue = 0;
    numberobj_312_currentFormat = 6;
    numberobj_312_lastValue = 0;
    numberobj_313_currentFormat = 6;
    numberobj_313_lastValue = 0;
    numberobj_314_currentFormat = 6;
    numberobj_314_lastValue = 0;
    param_11_lastValue = 0;
    numberobj_315_currentFormat = 6;
    numberobj_315_lastValue = 0;
    numberobj_316_currentFormat = 6;
    numberobj_316_lastValue = 0;
    numberobj_317_currentFormat = 6;
    numberobj_317_lastValue = 0;
    param_12_lastValue = 0;
    param_13_lastValue = 0;
    param_14_lastValue = 0;
    numberobj_318_currentFormat = 6;
    numberobj_318_lastValue = 0;
    linetilde_05_currentValue = 0;
    param_15_lastValue = 0;
    numberobj_319_currentFormat = 6;
    numberobj_319_lastValue = 0;
    param_16_lastValue = 0;
    numberobj_320_currentFormat = 6;
    numberobj_320_lastValue = 0;
    param_17_lastValue = 0;
    numberobj_321_currentFormat = 6;
    numberobj_321_lastValue = 0;
    param_18_lastValue = 0;
    numberobj_322_currentFormat = 6;
    numberobj_322_lastValue = 0;
    numberobj_323_currentFormat = 6;
    numberobj_323_lastValue = 0;
    param_19_lastValue = 0;
    numberobj_324_currentFormat = 6;
    numberobj_324_lastValue = 0;
    param_20_lastValue = 0;
    numberobj_325_currentFormat = 6;
    numberobj_325_lastValue = 0;
    param_21_lastValue = 0;
    numberobj_326_currentFormat = 6;
    numberobj_326_lastValue = 0;
    param_22_lastValue = 0;
    numberobj_327_currentFormat = 6;
    numberobj_327_lastValue = 0;
    param_23_lastValue = 0;
    numberobj_328_currentFormat = 6;
    numberobj_328_lastValue = 0;
    param_24_lastValue = 0;
    numberobj_329_currentFormat = 6;
    numberobj_329_lastValue = 0;
    param_25_lastValue = 0;
    numberobj_330_currentFormat = 6;
    numberobj_330_lastValue = 0;
    numberobj_331_currentFormat = 6;
    numberobj_331_lastValue = 0;
    param_26_lastValue = 0;
    numberobj_332_currentFormat = 6;
    numberobj_332_lastValue = 0;
    param_27_lastValue = 0;
    param_28_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number dspexpr_07_in1;
    number dspexpr_07_in2;
    number p_23_target;
    number dspexpr_08_in1;
    number dspexpr_08_in2;
    number dspexpr_09_in1;
    number dspexpr_09_in2;
    number dspexpr_09_in3;
    number numbertilde_20_input_number;
    number numbertilde_20_ramp;
    number recordtilde_01_record;
    number recordtilde_01_begin;
    number recordtilde_01_end;
    number recordtilde_01_loop;
    number dspexpr_10_in1;
    number dspexpr_10_in2;
    number data_01_sizeout;
    number data_01_size;
    number data_01_sizems;
    number data_01_normalize;
    number data_01_channels;
    number ip_01_value;
    number ip_01_impulse;
    number dspexpr_11_in1;
    number dspexpr_11_in2;
    number toggle_07_value_number;
    number dspexpr_12_in1;
    number dspexpr_12_in2;
    number dspexpr_12_in3;
    list loadmess_03_message;
    number p_24_target;
    number send_03_input_number;
    list send_03_input_list;
    number numberobj_299_value;
    number numberobj_300_value;
    number numberobj_301_value;
    number expr_93_in1;
    number expr_93_out1;
    number dspexpr_13_in1;
    number dspexpr_13_in2;
    number dspexpr_13_in3;
    number send_04_input_number;
    list send_04_input_list;
    number numberobj_302_value;
    number sampstoms_01_samps;
    number data_02_sizeout;
    number data_02_size;
    number data_02_sizems;
    number data_02_normalize;
    number data_02_channels;
    number param_01_value;
    number param_02_value;
    number receive_49_output_number;
    list receive_49_output_list;
    number numberobj_303_value;
    number numberobj_304_value;
    number expr_94_in1;
    number expr_94_out1;
    number param_03_value;
    list loadmess_04_message;
    number toggle_08_value_number;
    number transport_01_input_number;
    number transport_01_position;
    number transport_01_tempo;
    list transport_01_timesig;
    number transport_01_ticks;
    number receive_50_output_number;
    list receive_50_output_list;
    number param_04_value;
    number param_05_value;
    number param_06_value;
    number numberobj_305_value;
    number numberobj_306_value;
    number numberobj_307_value;
    number numberobj_308_value;
    number numberobj_309_value;
    number send_05_input_number;
    list send_05_input_list;
    number send_06_input_number;
    list send_06_input_list;
    number send_07_input_number;
    list send_07_input_list;
    number send_08_input_number;
    list send_08_input_list;
    number send_09_input_number;
    list send_09_input_list;
    number send_10_input_number;
    list send_10_input_list;
    number send_11_input_number;
    list send_11_input_list;
    number numberobj_310_value;
    number numberobj_311_value;
    number param_07_value;
    list message_84_set;
    number select_46_test1;
    number toggle_09_value_number;
    list message_85_set;
    number p_25_target;
    number p_26_target;
    number param_08_value;
    number param_09_value;
    number param_10_value;
    number send_12_input_number;
    list send_12_input_list;
    number send_13_input_number;
    list send_13_input_list;
    number send_14_input_number;
    list send_14_input_list;
    number send_15_input_number;
    list send_15_input_list;
    number send_16_input_number;
    list send_16_input_list;
    number send_17_input_number;
    list send_17_input_list;
    number send_18_input_number;
    list send_18_input_list;
    number numberobj_312_value;
    number numberobj_313_value;
    number numberobj_314_value;
    number param_11_value;
    number numberobj_315_value;
    number numberobj_316_value;
    number numberobj_317_value;
    number param_12_value;
    number param_13_value;
    number param_14_value;
    list message_86_set;
    number p_27_target;
    number numberobj_318_value;
    list message_87_set;
    list linetilde_05_segments;
    number linetilde_05_time;
    number linetilde_05_keepramp;
    list message_88_set;
    number param_15_value;
    list message_89_set;
    number p_28_target;
    number select_47_test1;
    number select_47_test2;
    number receive_51_output_number;
    list receive_51_output_list;
    number p_29_target;
    number numberobj_319_value;
    number send_19_input_number;
    list send_19_input_list;
    number param_16_value;
    number send_20_input_number;
    list send_20_input_list;
    number send_21_input_number;
    list send_21_input_list;
    number send_22_input_number;
    list send_22_input_list;
    number send_23_input_number;
    list send_23_input_list;
    number send_24_input_number;
    list send_24_input_list;
    number send_25_input_number;
    list send_25_input_list;
    number send_26_input_number;
    list send_26_input_list;
    number numberobj_320_value;
    number param_17_value;
    number numberobj_321_value;
    number param_18_value;
    number numberobj_322_value;
    number numberobj_323_value;
    number param_19_value;
    number numberobj_324_value;
    number param_20_value;
    number numberobj_325_value;
    number param_21_value;
    number numberobj_326_value;
    number param_22_value;
    list message_90_set;
    number p_30_target;
    number p_31_target;
    list message_91_set;
    number send_27_input_number;
    list send_27_input_list;
    number numberobj_327_value;
    number param_23_value;
    number send_28_input_number;
    list send_28_input_list;
    number numberobj_328_value;
    number param_24_value;
    number numberobj_329_value;
    number send_29_input_number;
    list send_29_input_list;
    number param_25_value;
    number send_30_input_number;
    list send_30_input_list;
    number numberobj_330_value;
    number numberobj_331_value;
    number send_31_input_number;
    list send_31_input_list;
    number param_26_value;
    number send_32_input_number;
    list send_32_input_list;
    number numberobj_332_value;
    number param_27_value;
    number param_28_value;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[8];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    SampleIndex numbertilde_20_currentInterval;
    SampleIndex numbertilde_20_currentIntervalInSamples;
    number numbertilde_20_lastValue;
    number numbertilde_20_outValue;
    number numbertilde_20_rampInSamples;
    Int numbertilde_20_currentMode;
    number numbertilde_20_smooth_d_prev;
    number numbertilde_20_smooth_prev;
    number numbertilde_20_smooth_index;
    number numbertilde_20_smooth_increment;
    bool numbertilde_20_setupDone;
    Float32BufferRef recordtilde_01_buffer;
    SampleIndex recordtilde_01_wIndex;
    number recordtilde_01_lastRecord;
    Float32BufferRef data_01_buffer;
    Int data_01_sizemode;
    bool data_01_setupDone;
    SampleIndex ip_01_lastIndex;
    number ip_01_lastValue;
    SampleIndex ip_01_resetCount;
    signal ip_01_sigbuf;
    bool ip_01_setupDone;
    number toggle_07_lastValue;
    Int numberobj_299_currentFormat;
    number numberobj_299_lastValue;
    Int numberobj_300_currentFormat;
    number numberobj_300_lastValue;
    Int numberobj_301_currentFormat;
    number numberobj_301_lastValue;
    Int numberobj_302_currentFormat;
    number numberobj_302_lastValue;
    Float32BufferRef data_02_buffer;
    Int data_02_sizemode;
    bool data_02_setupDone;
    number param_01_lastValue;
    number param_02_lastValue;
    Int numberobj_303_currentFormat;
    number numberobj_303_lastValue;
    Int numberobj_304_currentFormat;
    number numberobj_304_lastValue;
    number param_03_lastValue;
    number toggle_08_lastValue;
    number param_04_lastValue;
    number param_05_lastValue;
    number param_06_lastValue;
    Int numberobj_305_currentFormat;
    number numberobj_305_lastValue;
    Int numberobj_306_currentFormat;
    number numberobj_306_lastValue;
    Int numberobj_307_currentFormat;
    number numberobj_307_lastValue;
    Int numberobj_308_currentFormat;
    number numberobj_308_lastValue;
    Int numberobj_309_currentFormat;
    number numberobj_309_lastValue;
    Int numberobj_310_currentFormat;
    number numberobj_310_lastValue;
    Int numberobj_311_currentFormat;
    number numberobj_311_lastValue;
    number param_07_lastValue;
    number toggle_09_lastValue;
    number param_08_lastValue;
    number param_09_lastValue;
    number param_10_lastValue;
    Int numberobj_312_currentFormat;
    number numberobj_312_lastValue;
    Int numberobj_313_currentFormat;
    number numberobj_313_lastValue;
    Int numberobj_314_currentFormat;
    number numberobj_314_lastValue;
    number param_11_lastValue;
    Int numberobj_315_currentFormat;
    number numberobj_315_lastValue;
    Int numberobj_316_currentFormat;
    number numberobj_316_lastValue;
    Int numberobj_317_currentFormat;
    number numberobj_317_lastValue;
    number param_12_lastValue;
    number param_13_lastValue;
    number param_14_lastValue;
    Int numberobj_318_currentFormat;
    number numberobj_318_lastValue;
    list linetilde_05_activeRamps;
    number linetilde_05_currentValue;
    number param_15_lastValue;
    Int numberobj_319_currentFormat;
    number numberobj_319_lastValue;
    number param_16_lastValue;
    Int numberobj_320_currentFormat;
    number numberobj_320_lastValue;
    number param_17_lastValue;
    Int numberobj_321_currentFormat;
    number numberobj_321_lastValue;
    number param_18_lastValue;
    Int numberobj_322_currentFormat;
    number numberobj_322_lastValue;
    Int numberobj_323_currentFormat;
    number numberobj_323_lastValue;
    number param_19_lastValue;
    Int numberobj_324_currentFormat;
    number numberobj_324_lastValue;
    number param_20_lastValue;
    Int numberobj_325_currentFormat;
    number numberobj_325_lastValue;
    number param_21_lastValue;
    Int numberobj_326_currentFormat;
    number numberobj_326_lastValue;
    number param_22_lastValue;
    Int numberobj_327_currentFormat;
    number numberobj_327_lastValue;
    number param_23_lastValue;
    Int numberobj_328_currentFormat;
    number numberobj_328_lastValue;
    number param_24_lastValue;
    Int numberobj_329_currentFormat;
    number numberobj_329_lastValue;
    number param_25_lastValue;
    Int numberobj_330_currentFormat;
    number numberobj_330_lastValue;
    Int numberobj_331_currentFormat;
    number numberobj_331_lastValue;
    number param_26_lastValue;
    Int numberobj_332_currentFormat;
    number numberobj_332_lastValue;
    number param_27_lastValue;
    number param_28_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef livegran;
    DataRef fixedbuffer;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_116* p_23;
    RNBOSubpatcher_117* p_24[100];
    RNBOSubpatcher_118* p_25;
    RNBOSubpatcher_119* p_26;
    RNBOSubpatcher_120* p_27;
    RNBOSubpatcher_121* p_28;
    RNBOSubpatcher_122* p_29[100];
    RNBOSubpatcher_123* p_30;
    RNBOSubpatcher_124* p_31;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

